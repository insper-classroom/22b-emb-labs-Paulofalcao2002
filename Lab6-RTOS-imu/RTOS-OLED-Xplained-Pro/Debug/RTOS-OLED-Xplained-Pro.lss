
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009504  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409504  00409504  00019504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  0040950c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000280  204009c0  00409ecc  000209c0  2**2
                  ALLOC
  4 .stack        00002000  20400c40  0040a14c  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402c40  0040c14c  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001e2f0  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003fa4  00000000  00000000  0003ed37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009758  00000000  00000000  00042cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ee8  00000000  00000000  0004c433  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001078  00000000  00000000  0004d31b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009d01  00000000  00000000  0004e393  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000109f1  00000000  00000000  00058094  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00098eec  00000000  00000000  00068a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000038bc  00000000  00000000  00101974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 2c 40 20 61 0b 40 00 5f 0b 40 00 5f 0b 40 00     @,@ a.@._.@._.@.
  400010:	5f 0b 40 00 5f 0b 40 00 5f 0b 40 00 00 00 00 00     _.@._.@._.@.....
	...
  40002c:	39 0f 40 00 5f 0b 40 00 00 00 00 00 d9 0f 40 00     9.@._.@.......@.
  40003c:	41 10 40 00 5f 0b 40 00 5f 0b 40 00 5f 0b 40 00     A.@._.@._.@._.@.
  40004c:	5f 0b 40 00 5f 0b 40 00 5f 0b 40 00 5f 0b 40 00     _.@._.@._.@._.@.
  40005c:	5f 0b 40 00 5f 0b 40 00 00 00 00 00 51 08 40 00     _.@._.@.....Q.@.
  40006c:	65 08 40 00 79 08 40 00 5f 0b 40 00 5f 0b 40 00     e.@.y.@._.@._.@.
  40007c:	5f 0b 40 00 8d 08 40 00 a1 08 40 00 5f 0b 40 00     _.@...@...@._.@.
  40008c:	5f 0b 40 00 5f 0b 40 00 5f 0b 40 00 5f 0b 40 00     _.@._.@._.@._.@.
  40009c:	5f 0b 40 00 5f 0b 40 00 5f 0b 40 00 5f 0b 40 00     _.@._.@._.@._.@.
  4000ac:	5f 0b 40 00 5f 0b 40 00 5f 0b 40 00 5f 0b 40 00     _.@._.@._.@._.@.
  4000bc:	5f 0b 40 00 5f 0b 40 00 5f 0b 40 00 5f 0b 40 00     _.@._.@._.@._.@.
  4000cc:	5f 0b 40 00 00 00 00 00 5f 0b 40 00 00 00 00 00     _.@....._.@.....
  4000dc:	5f 0b 40 00 5f 0b 40 00 5f 0b 40 00 5f 0b 40 00     _.@._.@._.@._.@.
  4000ec:	5f 0b 40 00 5f 0b 40 00 5f 0b 40 00 5f 0b 40 00     _.@._.@._.@._.@.
  4000fc:	5f 0b 40 00 5f 0b 40 00 5f 0b 40 00 5f 0b 40 00     _.@._.@._.@._.@.
  40010c:	5f 0b 40 00 5f 0b 40 00 00 00 00 00 00 00 00 00     _.@._.@.........
  40011c:	00 00 00 00 5f 0b 40 00 5f 0b 40 00 5f 0b 40 00     ...._.@._.@._.@.
  40012c:	5f 0b 40 00 5f 0b 40 00 00 00 00 00 5f 0b 40 00     _.@._.@....._.@.
  40013c:	5f 0b 40 00                                         _.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	0040950c 	.word	0x0040950c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040950c 	.word	0x0040950c
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	0040950c 	.word	0x0040950c
  4001a8:	00000000 	.word	0x00000000

004001ac <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4001ac:	4b28      	ldr	r3, [pc, #160]	; (400250 <twihs_set_speed+0xa4>)
  4001ae:	4299      	cmp	r1, r3
  4001b0:	d84b      	bhi.n	40024a <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4001b2:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4001b6:	4299      	cmp	r1, r3
  4001b8:	d92d      	bls.n	400216 <twihs_set_speed+0x6a>
{
  4001ba:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4001bc:	4c25      	ldr	r4, [pc, #148]	; (400254 <twihs_set_speed+0xa8>)
  4001be:	fba4 3402 	umull	r3, r4, r4, r2
  4001c2:	0ba4      	lsrs	r4, r4, #14
  4001c4:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4001c6:	4b24      	ldr	r3, [pc, #144]	; (400258 <twihs_set_speed+0xac>)
  4001c8:	440b      	add	r3, r1
  4001ca:	009b      	lsls	r3, r3, #2
  4001cc:	fbb2 f2f3 	udiv	r2, r2, r3
  4001d0:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4001d2:	2cff      	cmp	r4, #255	; 0xff
  4001d4:	d91d      	bls.n	400212 <twihs_set_speed+0x66>
  4001d6:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4001d8:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4001da:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4001dc:	2cff      	cmp	r4, #255	; 0xff
  4001de:	d901      	bls.n	4001e4 <twihs_set_speed+0x38>
  4001e0:	2906      	cmp	r1, #6
  4001e2:	d9f9      	bls.n	4001d8 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4001e4:	2aff      	cmp	r2, #255	; 0xff
  4001e6:	d907      	bls.n	4001f8 <twihs_set_speed+0x4c>
  4001e8:	2906      	cmp	r1, #6
  4001ea:	d805      	bhi.n	4001f8 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4001ec:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4001ee:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4001f0:	2aff      	cmp	r2, #255	; 0xff
  4001f2:	d901      	bls.n	4001f8 <twihs_set_speed+0x4c>
  4001f4:	2906      	cmp	r1, #6
  4001f6:	d9f9      	bls.n	4001ec <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4001f8:	0213      	lsls	r3, r2, #8
  4001fa:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  4001fc:	0409      	lsls	r1, r1, #16
  4001fe:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400202:	430b      	orrs	r3, r1
  400204:	b2e4      	uxtb	r4, r4
  400206:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  400208:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40020a:	2000      	movs	r0, #0
}
  40020c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400210:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400212:	2100      	movs	r1, #0
  400214:	e7e6      	b.n	4001e4 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400216:	0049      	lsls	r1, r1, #1
  400218:	fbb2 f2f1 	udiv	r2, r2, r1
  40021c:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40021e:	2aff      	cmp	r2, #255	; 0xff
  400220:	d911      	bls.n	400246 <twihs_set_speed+0x9a>
  400222:	2300      	movs	r3, #0
			ckdiv++;
  400224:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  400226:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400228:	2aff      	cmp	r2, #255	; 0xff
  40022a:	d901      	bls.n	400230 <twihs_set_speed+0x84>
  40022c:	2b06      	cmp	r3, #6
  40022e:	d9f9      	bls.n	400224 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400230:	0211      	lsls	r1, r2, #8
  400232:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  400234:	041b      	lsls	r3, r3, #16
  400236:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40023a:	430b      	orrs	r3, r1
  40023c:	b2d2      	uxtb	r2, r2
  40023e:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  400240:	6102      	str	r2, [r0, #16]
	return PASS;
  400242:	2000      	movs	r0, #0
  400244:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400246:	2300      	movs	r3, #0
  400248:	e7f2      	b.n	400230 <twihs_set_speed+0x84>
		return FAIL;
  40024a:	2001      	movs	r0, #1
  40024c:	4770      	bx	lr
  40024e:	bf00      	nop
  400250:	00061a80 	.word	0x00061a80
  400254:	057619f1 	.word	0x057619f1
  400258:	3ffd1200 	.word	0x3ffd1200

0040025c <twihs_master_init>:
{
  40025c:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  40025e:	f04f 32ff 	mov.w	r2, #4294967295
  400262:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  400264:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  400266:	2280      	movs	r2, #128	; 0x80
  400268:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  40026a:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  40026c:	2208      	movs	r2, #8
  40026e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  400270:	2220      	movs	r2, #32
  400272:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  400274:	2204      	movs	r2, #4
  400276:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  400278:	680a      	ldr	r2, [r1, #0]
  40027a:	6849      	ldr	r1, [r1, #4]
  40027c:	4b03      	ldr	r3, [pc, #12]	; (40028c <twihs_master_init+0x30>)
  40027e:	4798      	blx	r3
}
  400280:	2801      	cmp	r0, #1
  400282:	bf14      	ite	ne
  400284:	2000      	movne	r0, #0
  400286:	2001      	moveq	r0, #1
  400288:	bd08      	pop	{r3, pc}
  40028a:	bf00      	nop
  40028c:	004001ad 	.word	0x004001ad

00400290 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  400290:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  400292:	2a00      	cmp	r2, #0
  400294:	d04c      	beq.n	400330 <twihs_master_read+0xa0>
{
  400296:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400298:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40029a:	2600      	movs	r6, #0
  40029c:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40029e:	684b      	ldr	r3, [r1, #4]
  4002a0:	021b      	lsls	r3, r3, #8
  4002a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4002a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4002aa:	7c0d      	ldrb	r5, [r1, #16]
  4002ac:	042d      	lsls	r5, r5, #16
  4002ae:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4002b2:	432b      	orrs	r3, r5
  4002b4:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4002b6:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4002b8:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4002ba:	b15d      	cbz	r5, 4002d4 <twihs_master_read+0x44>
	val = addr[0];
  4002bc:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  4002be:	2d01      	cmp	r5, #1
  4002c0:	dd02      	ble.n	4002c8 <twihs_master_read+0x38>
		val |= addr[1];
  4002c2:	784e      	ldrb	r6, [r1, #1]
  4002c4:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  4002c8:	2d02      	cmp	r5, #2
  4002ca:	dd04      	ble.n	4002d6 <twihs_master_read+0x46>
		val |= addr[2];
  4002cc:	7889      	ldrb	r1, [r1, #2]
  4002ce:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  4002d2:	e000      	b.n	4002d6 <twihs_master_read+0x46>
		return 0;
  4002d4:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4002d6:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4002d8:	2301      	movs	r3, #1
  4002da:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4002dc:	2502      	movs	r5, #2
  4002de:	e012      	b.n	400306 <twihs_master_read+0x76>
  4002e0:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4002e2:	f013 0f02 	tst.w	r3, #2
  4002e6:	d01b      	beq.n	400320 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  4002e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002ea:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4002ec:	6a03      	ldr	r3, [r0, #32]
  4002ee:	f013 0f01 	tst.w	r3, #1
  4002f2:	d0fb      	beq.n	4002ec <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  4002f4:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4002f6:	2000      	movs	r0, #0
}
  4002f8:	bc70      	pop	{r4, r5, r6}
  4002fa:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  4002fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002fe:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  400302:	3a01      	subs	r2, #1
  400304:	d0f2      	beq.n	4002ec <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400306:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400308:	f413 7f80 	tst.w	r3, #256	; 0x100
  40030c:	d114      	bne.n	400338 <twihs_master_read+0xa8>
  40030e:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  400312:	2a01      	cmp	r2, #1
  400314:	d0e4      	beq.n	4002e0 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  400316:	f013 0f02 	tst.w	r3, #2
  40031a:	d1ef      	bne.n	4002fc <twihs_master_read+0x6c>
	while (cnt > 0) {
  40031c:	2a00      	cmp	r2, #0
  40031e:	d0e5      	beq.n	4002ec <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400320:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400322:	f413 7f80 	tst.w	r3, #256	; 0x100
  400326:	d105      	bne.n	400334 <twihs_master_read+0xa4>
		if (!timeout--) {
  400328:	3901      	subs	r1, #1
  40032a:	d1f2      	bne.n	400312 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  40032c:	2009      	movs	r0, #9
  40032e:	e7e3      	b.n	4002f8 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  400330:	2001      	movs	r0, #1
  400332:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400334:	2005      	movs	r0, #5
  400336:	e7df      	b.n	4002f8 <twihs_master_read+0x68>
  400338:	2005      	movs	r0, #5
  40033a:	e7dd      	b.n	4002f8 <twihs_master_read+0x68>

0040033c <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  40033c:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  40033e:	2b00      	cmp	r3, #0
  400340:	d043      	beq.n	4003ca <twihs_master_write+0x8e>
{
  400342:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400344:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400346:	2600      	movs	r6, #0
  400348:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40034a:	7c0a      	ldrb	r2, [r1, #16]
  40034c:	0412      	lsls	r2, r2, #16
  40034e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400352:	684d      	ldr	r5, [r1, #4]
  400354:	022d      	lsls	r5, r5, #8
  400356:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40035a:	432a      	orrs	r2, r5
  40035c:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40035e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400360:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400362:	b15d      	cbz	r5, 40037c <twihs_master_write+0x40>
	val = addr[0];
  400364:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400366:	2d01      	cmp	r5, #1
  400368:	dd02      	ble.n	400370 <twihs_master_write+0x34>
		val |= addr[1];
  40036a:	784e      	ldrb	r6, [r1, #1]
  40036c:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  400370:	2d02      	cmp	r5, #2
  400372:	dd04      	ble.n	40037e <twihs_master_write+0x42>
		val |= addr[2];
  400374:	7889      	ldrb	r1, [r1, #2]
  400376:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  40037a:	e000      	b.n	40037e <twihs_master_write+0x42>
		return 0;
  40037c:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40037e:	60c2      	str	r2, [r0, #12]
  400380:	e004      	b.n	40038c <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  400382:	f814 2b01 	ldrb.w	r2, [r4], #1
  400386:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  400388:	3b01      	subs	r3, #1
  40038a:	d00f      	beq.n	4003ac <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  40038c:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40038e:	f412 7f80 	tst.w	r2, #256	; 0x100
  400392:	d11e      	bne.n	4003d2 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  400394:	f012 0f04 	tst.w	r2, #4
  400398:	d1f3      	bne.n	400382 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  40039a:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40039c:	f412 7f80 	tst.w	r2, #256	; 0x100
  4003a0:	d115      	bne.n	4003ce <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  4003a2:	f012 0f04 	tst.w	r2, #4
  4003a6:	d1ec      	bne.n	400382 <twihs_master_write+0x46>
	while (cnt > 0) {
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d1f6      	bne.n	40039a <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  4003ac:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4003ae:	f413 7f80 	tst.w	r3, #256	; 0x100
  4003b2:	d111      	bne.n	4003d8 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  4003b4:	f013 0f04 	tst.w	r3, #4
  4003b8:	d0f8      	beq.n	4003ac <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4003ba:	2302      	movs	r3, #2
  4003bc:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4003be:	6a03      	ldr	r3, [r0, #32]
  4003c0:	f013 0f01 	tst.w	r3, #1
  4003c4:	d0fb      	beq.n	4003be <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  4003c6:	2000      	movs	r0, #0
  4003c8:	e004      	b.n	4003d4 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  4003ca:	2001      	movs	r0, #1
  4003cc:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4003ce:	2005      	movs	r0, #5
  4003d0:	e000      	b.n	4003d4 <twihs_master_write+0x98>
  4003d2:	2005      	movs	r0, #5
}
  4003d4:	bc70      	pop	{r4, r5, r6}
  4003d6:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4003d8:	2005      	movs	r0, #5
  4003da:	e7fb      	b.n	4003d4 <twihs_master_write+0x98>

004003dc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4003dc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4003de:	4810      	ldr	r0, [pc, #64]	; (400420 <sysclk_init+0x44>)
  4003e0:	4b10      	ldr	r3, [pc, #64]	; (400424 <sysclk_init+0x48>)
  4003e2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4003e4:	213e      	movs	r1, #62	; 0x3e
  4003e6:	2000      	movs	r0, #0
  4003e8:	4b0f      	ldr	r3, [pc, #60]	; (400428 <sysclk_init+0x4c>)
  4003ea:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4003ec:	4c0f      	ldr	r4, [pc, #60]	; (40042c <sysclk_init+0x50>)
  4003ee:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4003f0:	2800      	cmp	r0, #0
  4003f2:	d0fc      	beq.n	4003ee <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4003f4:	4b0e      	ldr	r3, [pc, #56]	; (400430 <sysclk_init+0x54>)
  4003f6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003f8:	4a0e      	ldr	r2, [pc, #56]	; (400434 <sysclk_init+0x58>)
  4003fa:	4b0f      	ldr	r3, [pc, #60]	; (400438 <sysclk_init+0x5c>)
  4003fc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4003fe:	4c0f      	ldr	r4, [pc, #60]	; (40043c <sysclk_init+0x60>)
  400400:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400402:	2800      	cmp	r0, #0
  400404:	d0fc      	beq.n	400400 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400406:	2002      	movs	r0, #2
  400408:	4b0d      	ldr	r3, [pc, #52]	; (400440 <sysclk_init+0x64>)
  40040a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40040c:	2000      	movs	r0, #0
  40040e:	4b0d      	ldr	r3, [pc, #52]	; (400444 <sysclk_init+0x68>)
  400410:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400412:	4b0d      	ldr	r3, [pc, #52]	; (400448 <sysclk_init+0x6c>)
  400414:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400416:	4802      	ldr	r0, [pc, #8]	; (400420 <sysclk_init+0x44>)
  400418:	4b02      	ldr	r3, [pc, #8]	; (400424 <sysclk_init+0x48>)
  40041a:	4798      	blx	r3
  40041c:	bd10      	pop	{r4, pc}
  40041e:	bf00      	nop
  400420:	11e1a300 	.word	0x11e1a300
  400424:	00400d35 	.word	0x00400d35
  400428:	00400951 	.word	0x00400951
  40042c:	004009a5 	.word	0x004009a5
  400430:	004009b5 	.word	0x004009b5
  400434:	20183f01 	.word	0x20183f01
  400438:	400e0600 	.word	0x400e0600
  40043c:	004009c5 	.word	0x004009c5
  400440:	004008b5 	.word	0x004008b5
  400444:	004008ed 	.word	0x004008ed
  400448:	00400c29 	.word	0x00400c29

0040044c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40044c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400450:	b980      	cbnz	r0, 400474 <_read+0x28>
  400452:	460c      	mov	r4, r1
  400454:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400456:	2a00      	cmp	r2, #0
  400458:	dd0f      	ble.n	40047a <_read+0x2e>
  40045a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40045c:	4e08      	ldr	r6, [pc, #32]	; (400480 <_read+0x34>)
  40045e:	4d09      	ldr	r5, [pc, #36]	; (400484 <_read+0x38>)
  400460:	6830      	ldr	r0, [r6, #0]
  400462:	4621      	mov	r1, r4
  400464:	682b      	ldr	r3, [r5, #0]
  400466:	4798      	blx	r3
		ptr++;
  400468:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40046a:	42bc      	cmp	r4, r7
  40046c:	d1f8      	bne.n	400460 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40046e:	4640      	mov	r0, r8
  400470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400474:	f04f 38ff 	mov.w	r8, #4294967295
  400478:	e7f9      	b.n	40046e <_read+0x22>
	for (; len > 0; --len) {
  40047a:	4680      	mov	r8, r0
  40047c:	e7f7      	b.n	40046e <_read+0x22>
  40047e:	bf00      	nop
  400480:	20400bd0 	.word	0x20400bd0
  400484:	20400bc8 	.word	0x20400bc8

00400488 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400488:	3801      	subs	r0, #1
  40048a:	2802      	cmp	r0, #2
  40048c:	d815      	bhi.n	4004ba <_write+0x32>
{
  40048e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400492:	460e      	mov	r6, r1
  400494:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400496:	b19a      	cbz	r2, 4004c0 <_write+0x38>
  400498:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40049a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4004d4 <_write+0x4c>
  40049e:	4f0c      	ldr	r7, [pc, #48]	; (4004d0 <_write+0x48>)
  4004a0:	f8d8 0000 	ldr.w	r0, [r8]
  4004a4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4004a8:	683b      	ldr	r3, [r7, #0]
  4004aa:	4798      	blx	r3
  4004ac:	2800      	cmp	r0, #0
  4004ae:	db0a      	blt.n	4004c6 <_write+0x3e>
  4004b0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4004b2:	3c01      	subs	r4, #1
  4004b4:	d1f4      	bne.n	4004a0 <_write+0x18>
  4004b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4004ba:	f04f 30ff 	mov.w	r0, #4294967295
  4004be:	4770      	bx	lr
	for (; len != 0; --len) {
  4004c0:	4610      	mov	r0, r2
  4004c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4004c6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4004ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004ce:	bf00      	nop
  4004d0:	20400bcc 	.word	0x20400bcc
  4004d4:	20400bd0 	.word	0x20400bd0

004004d8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4004da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4004de:	4b5c      	ldr	r3, [pc, #368]	; (400650 <board_init+0x178>)
  4004e0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4004e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004e6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4004ea:	4b5a      	ldr	r3, [pc, #360]	; (400654 <board_init+0x17c>)
  4004ec:	2200      	movs	r2, #0
  4004ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4004f2:	695a      	ldr	r2, [r3, #20]
  4004f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4004f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4004fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004fe:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400502:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400506:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40050a:	f007 0007 	and.w	r0, r7, #7
  40050e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400510:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400514:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400518:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40051c:	f3bf 8f4f 	dsb	sy
  400520:	f04f 34ff 	mov.w	r4, #4294967295
  400524:	fa04 fc00 	lsl.w	ip, r4, r0
  400528:	fa06 f000 	lsl.w	r0, r6, r0
  40052c:	fa04 f40e 	lsl.w	r4, r4, lr
  400530:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400534:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400536:	463a      	mov	r2, r7
  400538:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40053a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40053e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400542:	3a01      	subs	r2, #1
  400544:	4423      	add	r3, r4
  400546:	f1b2 3fff 	cmp.w	r2, #4294967295
  40054a:	d1f6      	bne.n	40053a <board_init+0x62>
        } while(sets--);
  40054c:	3e01      	subs	r6, #1
  40054e:	4460      	add	r0, ip
  400550:	f1b6 3fff 	cmp.w	r6, #4294967295
  400554:	d1ef      	bne.n	400536 <board_init+0x5e>
  400556:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40055a:	4b3e      	ldr	r3, [pc, #248]	; (400654 <board_init+0x17c>)
  40055c:	695a      	ldr	r2, [r3, #20]
  40055e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400562:	615a      	str	r2, [r3, #20]
  400564:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400568:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40056c:	4a3a      	ldr	r2, [pc, #232]	; (400658 <board_init+0x180>)
  40056e:	493b      	ldr	r1, [pc, #236]	; (40065c <board_init+0x184>)
  400570:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400572:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400576:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400578:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40057c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400580:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400584:	f022 0201 	bic.w	r2, r2, #1
  400588:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40058c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400590:	f022 0201 	bic.w	r2, r2, #1
  400594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400598:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40059c:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4005a0:	200a      	movs	r0, #10
  4005a2:	4c2f      	ldr	r4, [pc, #188]	; (400660 <board_init+0x188>)
  4005a4:	47a0      	blx	r4
  4005a6:	200b      	movs	r0, #11
  4005a8:	47a0      	blx	r4
  4005aa:	200c      	movs	r0, #12
  4005ac:	47a0      	blx	r4
  4005ae:	2010      	movs	r0, #16
  4005b0:	47a0      	blx	r4
  4005b2:	2011      	movs	r0, #17
  4005b4:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4005b6:	4b2b      	ldr	r3, [pc, #172]	; (400664 <board_init+0x18c>)
  4005b8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4005bc:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4005c2:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4005c4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4005c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4005cc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4005d2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4005d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4005d8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4005da:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4005dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4005e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4005e2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4005e6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4005e8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4005ea:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4005ee:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4005f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4005f4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4005f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4005fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400600:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400606:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400608:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40060a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40060e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400610:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400614:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400616:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400618:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40061c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40061e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400620:	4a11      	ldr	r2, [pc, #68]	; (400668 <board_init+0x190>)
  400622:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400626:	f043 0310 	orr.w	r3, r3, #16
  40062a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  40062e:	4b0f      	ldr	r3, [pc, #60]	; (40066c <board_init+0x194>)
  400630:	2210      	movs	r2, #16
  400632:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400634:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400638:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40063a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40063c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400640:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400642:	4311      	orrs	r1, r2
  400644:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400646:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400648:	4311      	orrs	r1, r2
  40064a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40064c:	605a      	str	r2, [r3, #4]
  40064e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400650:	400e1850 	.word	0x400e1850
  400654:	e000ed00 	.word	0xe000ed00
  400658:	400e0c00 	.word	0x400e0c00
  40065c:	5a00080c 	.word	0x5a00080c
  400660:	004009d5 	.word	0x004009d5
  400664:	400e1200 	.word	0x400e1200
  400668:	40088000 	.word	0x40088000
  40066c:	400e1000 	.word	0x400e1000

00400670 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400670:	6301      	str	r1, [r0, #48]	; 0x30
  400672:	4770      	bx	lr

00400674 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400674:	6341      	str	r1, [r0, #52]	; 0x34
  400676:	4770      	bx	lr

00400678 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400678:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40067a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40067e:	d03a      	beq.n	4006f6 <pio_set_peripheral+0x7e>
  400680:	d813      	bhi.n	4006aa <pio_set_peripheral+0x32>
  400682:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400686:	d025      	beq.n	4006d4 <pio_set_peripheral+0x5c>
  400688:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40068c:	d10a      	bne.n	4006a4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40068e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400690:	4313      	orrs	r3, r2
  400692:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400694:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400696:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400698:	400b      	ands	r3, r1
  40069a:	ea23 0302 	bic.w	r3, r3, r2
  40069e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4006a0:	6042      	str	r2, [r0, #4]
  4006a2:	4770      	bx	lr
	switch (ul_type) {
  4006a4:	2900      	cmp	r1, #0
  4006a6:	d1fb      	bne.n	4006a0 <pio_set_peripheral+0x28>
  4006a8:	4770      	bx	lr
  4006aa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4006ae:	d021      	beq.n	4006f4 <pio_set_peripheral+0x7c>
  4006b0:	d809      	bhi.n	4006c6 <pio_set_peripheral+0x4e>
  4006b2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4006b6:	d1f3      	bne.n	4006a0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4006b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4006ba:	4313      	orrs	r3, r2
  4006bc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4006be:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4006c0:	4313      	orrs	r3, r2
  4006c2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4006c4:	e7ec      	b.n	4006a0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4006c6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4006ca:	d013      	beq.n	4006f4 <pio_set_peripheral+0x7c>
  4006cc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4006d0:	d010      	beq.n	4006f4 <pio_set_peripheral+0x7c>
  4006d2:	e7e5      	b.n	4006a0 <pio_set_peripheral+0x28>
{
  4006d4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4006d6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4006d8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4006da:	43d3      	mvns	r3, r2
  4006dc:	4021      	ands	r1, r4
  4006de:	461c      	mov	r4, r3
  4006e0:	4019      	ands	r1, r3
  4006e2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4006e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4006e6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4006e8:	400b      	ands	r3, r1
  4006ea:	4023      	ands	r3, r4
  4006ec:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4006ee:	6042      	str	r2, [r0, #4]
}
  4006f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006f4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4006f6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4006f8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4006fa:	400b      	ands	r3, r1
  4006fc:	ea23 0302 	bic.w	r3, r3, r2
  400700:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400702:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400704:	4313      	orrs	r3, r2
  400706:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400708:	e7ca      	b.n	4006a0 <pio_set_peripheral+0x28>

0040070a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40070a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40070c:	f012 0f01 	tst.w	r2, #1
  400710:	d10d      	bne.n	40072e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400712:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400714:	f012 0f0a 	tst.w	r2, #10
  400718:	d00b      	beq.n	400732 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40071a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40071c:	f012 0f02 	tst.w	r2, #2
  400720:	d109      	bne.n	400736 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400722:	f012 0f08 	tst.w	r2, #8
  400726:	d008      	beq.n	40073a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400728:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40072c:	e005      	b.n	40073a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40072e:	6641      	str	r1, [r0, #100]	; 0x64
  400730:	e7f0      	b.n	400714 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400732:	6241      	str	r1, [r0, #36]	; 0x24
  400734:	e7f2      	b.n	40071c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400736:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40073a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40073c:	6001      	str	r1, [r0, #0]
  40073e:	4770      	bx	lr

00400740 <pio_set_output>:
{
  400740:	b410      	push	{r4}
  400742:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400744:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400746:	b94c      	cbnz	r4, 40075c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400748:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40074a:	b14b      	cbz	r3, 400760 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40074c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40074e:	b94a      	cbnz	r2, 400764 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400750:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400752:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400754:	6001      	str	r1, [r0, #0]
}
  400756:	f85d 4b04 	ldr.w	r4, [sp], #4
  40075a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40075c:	6641      	str	r1, [r0, #100]	; 0x64
  40075e:	e7f4      	b.n	40074a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400760:	6541      	str	r1, [r0, #84]	; 0x54
  400762:	e7f4      	b.n	40074e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400764:	6301      	str	r1, [r0, #48]	; 0x30
  400766:	e7f4      	b.n	400752 <pio_set_output+0x12>

00400768 <pio_configure>:
{
  400768:	b570      	push	{r4, r5, r6, lr}
  40076a:	b082      	sub	sp, #8
  40076c:	4605      	mov	r5, r0
  40076e:	4616      	mov	r6, r2
  400770:	461c      	mov	r4, r3
	switch (ul_type) {
  400772:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400776:	d014      	beq.n	4007a2 <pio_configure+0x3a>
  400778:	d90a      	bls.n	400790 <pio_configure+0x28>
  40077a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40077e:	d024      	beq.n	4007ca <pio_configure+0x62>
  400780:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400784:	d021      	beq.n	4007ca <pio_configure+0x62>
  400786:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40078a:	d017      	beq.n	4007bc <pio_configure+0x54>
		return 0;
  40078c:	2000      	movs	r0, #0
  40078e:	e01a      	b.n	4007c6 <pio_configure+0x5e>
	switch (ul_type) {
  400790:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400794:	d005      	beq.n	4007a2 <pio_configure+0x3a>
  400796:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40079a:	d002      	beq.n	4007a2 <pio_configure+0x3a>
  40079c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4007a0:	d1f4      	bne.n	40078c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4007a2:	4632      	mov	r2, r6
  4007a4:	4628      	mov	r0, r5
  4007a6:	4b11      	ldr	r3, [pc, #68]	; (4007ec <pio_configure+0x84>)
  4007a8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4007aa:	f014 0f01 	tst.w	r4, #1
  4007ae:	d102      	bne.n	4007b6 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4007b0:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4007b2:	2001      	movs	r0, #1
  4007b4:	e007      	b.n	4007c6 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4007b6:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4007b8:	2001      	movs	r0, #1
  4007ba:	e004      	b.n	4007c6 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4007bc:	461a      	mov	r2, r3
  4007be:	4631      	mov	r1, r6
  4007c0:	4b0b      	ldr	r3, [pc, #44]	; (4007f0 <pio_configure+0x88>)
  4007c2:	4798      	blx	r3
	return 1;
  4007c4:	2001      	movs	r0, #1
}
  4007c6:	b002      	add	sp, #8
  4007c8:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4007ca:	f004 0301 	and.w	r3, r4, #1
  4007ce:	9300      	str	r3, [sp, #0]
  4007d0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4007d4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4007d8:	bf14      	ite	ne
  4007da:	2200      	movne	r2, #0
  4007dc:	2201      	moveq	r2, #1
  4007de:	4631      	mov	r1, r6
  4007e0:	4628      	mov	r0, r5
  4007e2:	4c04      	ldr	r4, [pc, #16]	; (4007f4 <pio_configure+0x8c>)
  4007e4:	47a0      	blx	r4
	return 1;
  4007e6:	2001      	movs	r0, #1
		break;
  4007e8:	e7ed      	b.n	4007c6 <pio_configure+0x5e>
  4007ea:	bf00      	nop
  4007ec:	00400679 	.word	0x00400679
  4007f0:	0040070b 	.word	0x0040070b
  4007f4:	00400741 	.word	0x00400741

004007f8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4007f8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4007fa:	4770      	bx	lr

004007fc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4007fc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4007fe:	4770      	bx	lr

00400800 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400804:	4604      	mov	r4, r0
  400806:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400808:	4b0e      	ldr	r3, [pc, #56]	; (400844 <pio_handler_process+0x44>)
  40080a:	4798      	blx	r3
  40080c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40080e:	4620      	mov	r0, r4
  400810:	4b0d      	ldr	r3, [pc, #52]	; (400848 <pio_handler_process+0x48>)
  400812:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400814:	4005      	ands	r5, r0
  400816:	d013      	beq.n	400840 <pio_handler_process+0x40>
  400818:	4c0c      	ldr	r4, [pc, #48]	; (40084c <pio_handler_process+0x4c>)
  40081a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40081e:	e003      	b.n	400828 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400820:	42b4      	cmp	r4, r6
  400822:	d00d      	beq.n	400840 <pio_handler_process+0x40>
  400824:	3410      	adds	r4, #16
		while (status != 0) {
  400826:	b15d      	cbz	r5, 400840 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400828:	6820      	ldr	r0, [r4, #0]
  40082a:	4540      	cmp	r0, r8
  40082c:	d1f8      	bne.n	400820 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40082e:	6861      	ldr	r1, [r4, #4]
  400830:	4229      	tst	r1, r5
  400832:	d0f5      	beq.n	400820 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400834:	68e3      	ldr	r3, [r4, #12]
  400836:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400838:	6863      	ldr	r3, [r4, #4]
  40083a:	ea25 0503 	bic.w	r5, r5, r3
  40083e:	e7ef      	b.n	400820 <pio_handler_process+0x20>
  400840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400844:	004007f9 	.word	0x004007f9
  400848:	004007fd 	.word	0x004007fd
  40084c:	204009dc 	.word	0x204009dc

00400850 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400850:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400852:	210a      	movs	r1, #10
  400854:	4801      	ldr	r0, [pc, #4]	; (40085c <PIOA_Handler+0xc>)
  400856:	4b02      	ldr	r3, [pc, #8]	; (400860 <PIOA_Handler+0x10>)
  400858:	4798      	blx	r3
  40085a:	bd08      	pop	{r3, pc}
  40085c:	400e0e00 	.word	0x400e0e00
  400860:	00400801 	.word	0x00400801

00400864 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400864:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400866:	210b      	movs	r1, #11
  400868:	4801      	ldr	r0, [pc, #4]	; (400870 <PIOB_Handler+0xc>)
  40086a:	4b02      	ldr	r3, [pc, #8]	; (400874 <PIOB_Handler+0x10>)
  40086c:	4798      	blx	r3
  40086e:	bd08      	pop	{r3, pc}
  400870:	400e1000 	.word	0x400e1000
  400874:	00400801 	.word	0x00400801

00400878 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400878:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40087a:	210c      	movs	r1, #12
  40087c:	4801      	ldr	r0, [pc, #4]	; (400884 <PIOC_Handler+0xc>)
  40087e:	4b02      	ldr	r3, [pc, #8]	; (400888 <PIOC_Handler+0x10>)
  400880:	4798      	blx	r3
  400882:	bd08      	pop	{r3, pc}
  400884:	400e1200 	.word	0x400e1200
  400888:	00400801 	.word	0x00400801

0040088c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40088c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40088e:	2110      	movs	r1, #16
  400890:	4801      	ldr	r0, [pc, #4]	; (400898 <PIOD_Handler+0xc>)
  400892:	4b02      	ldr	r3, [pc, #8]	; (40089c <PIOD_Handler+0x10>)
  400894:	4798      	blx	r3
  400896:	bd08      	pop	{r3, pc}
  400898:	400e1400 	.word	0x400e1400
  40089c:	00400801 	.word	0x00400801

004008a0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4008a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4008a2:	2111      	movs	r1, #17
  4008a4:	4801      	ldr	r0, [pc, #4]	; (4008ac <PIOE_Handler+0xc>)
  4008a6:	4b02      	ldr	r3, [pc, #8]	; (4008b0 <PIOE_Handler+0x10>)
  4008a8:	4798      	blx	r3
  4008aa:	bd08      	pop	{r3, pc}
  4008ac:	400e1600 	.word	0x400e1600
  4008b0:	00400801 	.word	0x00400801

004008b4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4008b4:	2803      	cmp	r0, #3
  4008b6:	d011      	beq.n	4008dc <pmc_mck_set_division+0x28>
  4008b8:	2804      	cmp	r0, #4
  4008ba:	d012      	beq.n	4008e2 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4008bc:	2802      	cmp	r0, #2
  4008be:	bf0c      	ite	eq
  4008c0:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4008c4:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4008c6:	4a08      	ldr	r2, [pc, #32]	; (4008e8 <pmc_mck_set_division+0x34>)
  4008c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4008ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4008ce:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4008d0:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4008d2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008d4:	f013 0f08 	tst.w	r3, #8
  4008d8:	d0fb      	beq.n	4008d2 <pmc_mck_set_division+0x1e>
}
  4008da:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4008dc:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4008e0:	e7f1      	b.n	4008c6 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4008e2:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4008e6:	e7ee      	b.n	4008c6 <pmc_mck_set_division+0x12>
  4008e8:	400e0600 	.word	0x400e0600

004008ec <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4008ec:	4a17      	ldr	r2, [pc, #92]	; (40094c <pmc_switch_mck_to_pllack+0x60>)
  4008ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4008f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4008f4:	4318      	orrs	r0, r3
  4008f6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008fa:	f013 0f08 	tst.w	r3, #8
  4008fe:	d10a      	bne.n	400916 <pmc_switch_mck_to_pllack+0x2a>
  400900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400904:	4911      	ldr	r1, [pc, #68]	; (40094c <pmc_switch_mck_to_pllack+0x60>)
  400906:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400908:	f012 0f08 	tst.w	r2, #8
  40090c:	d103      	bne.n	400916 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40090e:	3b01      	subs	r3, #1
  400910:	d1f9      	bne.n	400906 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400912:	2001      	movs	r0, #1
  400914:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400916:	4a0d      	ldr	r2, [pc, #52]	; (40094c <pmc_switch_mck_to_pllack+0x60>)
  400918:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40091a:	f023 0303 	bic.w	r3, r3, #3
  40091e:	f043 0302 	orr.w	r3, r3, #2
  400922:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400924:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400926:	f013 0f08 	tst.w	r3, #8
  40092a:	d10a      	bne.n	400942 <pmc_switch_mck_to_pllack+0x56>
  40092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400930:	4906      	ldr	r1, [pc, #24]	; (40094c <pmc_switch_mck_to_pllack+0x60>)
  400932:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400934:	f012 0f08 	tst.w	r2, #8
  400938:	d105      	bne.n	400946 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40093a:	3b01      	subs	r3, #1
  40093c:	d1f9      	bne.n	400932 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40093e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400940:	4770      	bx	lr
	return 0;
  400942:	2000      	movs	r0, #0
  400944:	4770      	bx	lr
  400946:	2000      	movs	r0, #0
  400948:	4770      	bx	lr
  40094a:	bf00      	nop
  40094c:	400e0600 	.word	0x400e0600

00400950 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400950:	b9a0      	cbnz	r0, 40097c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400952:	480e      	ldr	r0, [pc, #56]	; (40098c <pmc_switch_mainck_to_xtal+0x3c>)
  400954:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400956:	0209      	lsls	r1, r1, #8
  400958:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40095a:	4a0d      	ldr	r2, [pc, #52]	; (400990 <pmc_switch_mainck_to_xtal+0x40>)
  40095c:	401a      	ands	r2, r3
  40095e:	4b0d      	ldr	r3, [pc, #52]	; (400994 <pmc_switch_mainck_to_xtal+0x44>)
  400960:	4313      	orrs	r3, r2
  400962:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400964:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400966:	4602      	mov	r2, r0
  400968:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40096a:	f013 0f01 	tst.w	r3, #1
  40096e:	d0fb      	beq.n	400968 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400970:	4a06      	ldr	r2, [pc, #24]	; (40098c <pmc_switch_mainck_to_xtal+0x3c>)
  400972:	6a11      	ldr	r1, [r2, #32]
  400974:	4b08      	ldr	r3, [pc, #32]	; (400998 <pmc_switch_mainck_to_xtal+0x48>)
  400976:	430b      	orrs	r3, r1
  400978:	6213      	str	r3, [r2, #32]
  40097a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40097c:	4903      	ldr	r1, [pc, #12]	; (40098c <pmc_switch_mainck_to_xtal+0x3c>)
  40097e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400980:	4a06      	ldr	r2, [pc, #24]	; (40099c <pmc_switch_mainck_to_xtal+0x4c>)
  400982:	401a      	ands	r2, r3
  400984:	4b06      	ldr	r3, [pc, #24]	; (4009a0 <pmc_switch_mainck_to_xtal+0x50>)
  400986:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400988:	620b      	str	r3, [r1, #32]
  40098a:	4770      	bx	lr
  40098c:	400e0600 	.word	0x400e0600
  400990:	ffc8fffc 	.word	0xffc8fffc
  400994:	00370001 	.word	0x00370001
  400998:	01370000 	.word	0x01370000
  40099c:	fec8fffc 	.word	0xfec8fffc
  4009a0:	01370002 	.word	0x01370002

004009a4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4009a4:	4b02      	ldr	r3, [pc, #8]	; (4009b0 <pmc_osc_is_ready_mainck+0xc>)
  4009a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4009a8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4009ac:	4770      	bx	lr
  4009ae:	bf00      	nop
  4009b0:	400e0600 	.word	0x400e0600

004009b4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4009b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4009b8:	4b01      	ldr	r3, [pc, #4]	; (4009c0 <pmc_disable_pllack+0xc>)
  4009ba:	629a      	str	r2, [r3, #40]	; 0x28
  4009bc:	4770      	bx	lr
  4009be:	bf00      	nop
  4009c0:	400e0600 	.word	0x400e0600

004009c4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4009c4:	4b02      	ldr	r3, [pc, #8]	; (4009d0 <pmc_is_locked_pllack+0xc>)
  4009c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4009c8:	f000 0002 	and.w	r0, r0, #2
  4009cc:	4770      	bx	lr
  4009ce:	bf00      	nop
  4009d0:	400e0600 	.word	0x400e0600

004009d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4009d4:	283f      	cmp	r0, #63	; 0x3f
  4009d6:	d81e      	bhi.n	400a16 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4009d8:	281f      	cmp	r0, #31
  4009da:	d80c      	bhi.n	4009f6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4009dc:	4b11      	ldr	r3, [pc, #68]	; (400a24 <pmc_enable_periph_clk+0x50>)
  4009de:	699a      	ldr	r2, [r3, #24]
  4009e0:	2301      	movs	r3, #1
  4009e2:	4083      	lsls	r3, r0
  4009e4:	4393      	bics	r3, r2
  4009e6:	d018      	beq.n	400a1a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4009e8:	2301      	movs	r3, #1
  4009ea:	fa03 f000 	lsl.w	r0, r3, r0
  4009ee:	4b0d      	ldr	r3, [pc, #52]	; (400a24 <pmc_enable_periph_clk+0x50>)
  4009f0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4009f2:	2000      	movs	r0, #0
  4009f4:	4770      	bx	lr
		ul_id -= 32;
  4009f6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4009f8:	4b0a      	ldr	r3, [pc, #40]	; (400a24 <pmc_enable_periph_clk+0x50>)
  4009fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4009fe:	2301      	movs	r3, #1
  400a00:	4083      	lsls	r3, r0
  400a02:	4393      	bics	r3, r2
  400a04:	d00b      	beq.n	400a1e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400a06:	2301      	movs	r3, #1
  400a08:	fa03 f000 	lsl.w	r0, r3, r0
  400a0c:	4b05      	ldr	r3, [pc, #20]	; (400a24 <pmc_enable_periph_clk+0x50>)
  400a0e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400a12:	2000      	movs	r0, #0
  400a14:	4770      	bx	lr
		return 1;
  400a16:	2001      	movs	r0, #1
  400a18:	4770      	bx	lr
	return 0;
  400a1a:	2000      	movs	r0, #0
  400a1c:	4770      	bx	lr
  400a1e:	2000      	movs	r0, #0
}
  400a20:	4770      	bx	lr
  400a22:	bf00      	nop
  400a24:	400e0600 	.word	0x400e0600

00400a28 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400a28:	6943      	ldr	r3, [r0, #20]
  400a2a:	f013 0f02 	tst.w	r3, #2
  400a2e:	d002      	beq.n	400a36 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400a30:	61c1      	str	r1, [r0, #28]
	return 0;
  400a32:	2000      	movs	r0, #0
  400a34:	4770      	bx	lr
		return 1;
  400a36:	2001      	movs	r0, #1
}
  400a38:	4770      	bx	lr

00400a3a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400a3a:	6943      	ldr	r3, [r0, #20]
  400a3c:	f013 0f01 	tst.w	r3, #1
  400a40:	d003      	beq.n	400a4a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400a42:	6983      	ldr	r3, [r0, #24]
  400a44:	700b      	strb	r3, [r1, #0]
	return 0;
  400a46:	2000      	movs	r0, #0
  400a48:	4770      	bx	lr
		return 1;
  400a4a:	2001      	movs	r0, #1
}
  400a4c:	4770      	bx	lr

00400a4e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400a4e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400a50:	010b      	lsls	r3, r1, #4
  400a52:	4293      	cmp	r3, r2
  400a54:	d914      	bls.n	400a80 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a56:	00c9      	lsls	r1, r1, #3
  400a58:	084b      	lsrs	r3, r1, #1
  400a5a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400a5e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400a62:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a64:	1e5c      	subs	r4, r3, #1
  400a66:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400a6a:	428c      	cmp	r4, r1
  400a6c:	d901      	bls.n	400a72 <usart_set_async_baudrate+0x24>
		return 1;
  400a6e:	2001      	movs	r0, #1
  400a70:	e017      	b.n	400aa2 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400a72:	6841      	ldr	r1, [r0, #4]
  400a74:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400a78:	6041      	str	r1, [r0, #4]
  400a7a:	e00c      	b.n	400a96 <usart_set_async_baudrate+0x48>
		return 1;
  400a7c:	2001      	movs	r0, #1
  400a7e:	e010      	b.n	400aa2 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a80:	0859      	lsrs	r1, r3, #1
  400a82:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400a86:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400a8a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a8c:	1e5c      	subs	r4, r3, #1
  400a8e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400a92:	428c      	cmp	r4, r1
  400a94:	d8f2      	bhi.n	400a7c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400a96:	0412      	lsls	r2, r2, #16
  400a98:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400a9c:	431a      	orrs	r2, r3
  400a9e:	6202      	str	r2, [r0, #32]

	return 0;
  400aa0:	2000      	movs	r0, #0
}
  400aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400aa6:	4770      	bx	lr

00400aa8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400aa8:	4b08      	ldr	r3, [pc, #32]	; (400acc <usart_reset+0x24>)
  400aaa:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400aae:	2300      	movs	r3, #0
  400ab0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400ab2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400ab4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400ab6:	2388      	movs	r3, #136	; 0x88
  400ab8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400aba:	2324      	movs	r3, #36	; 0x24
  400abc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400abe:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ac2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400ac4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400ac8:	6003      	str	r3, [r0, #0]
  400aca:	4770      	bx	lr
  400acc:	55534100 	.word	0x55534100

00400ad0 <usart_init_rs232>:
{
  400ad0:	b570      	push	{r4, r5, r6, lr}
  400ad2:	4605      	mov	r5, r0
  400ad4:	460c      	mov	r4, r1
  400ad6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400ad8:	4b0f      	ldr	r3, [pc, #60]	; (400b18 <usart_init_rs232+0x48>)
  400ada:	4798      	blx	r3
	ul_reg_val = 0;
  400adc:	2200      	movs	r2, #0
  400ade:	4b0f      	ldr	r3, [pc, #60]	; (400b1c <usart_init_rs232+0x4c>)
  400ae0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400ae2:	b1a4      	cbz	r4, 400b0e <usart_init_rs232+0x3e>
  400ae4:	4632      	mov	r2, r6
  400ae6:	6821      	ldr	r1, [r4, #0]
  400ae8:	4628      	mov	r0, r5
  400aea:	4b0d      	ldr	r3, [pc, #52]	; (400b20 <usart_init_rs232+0x50>)
  400aec:	4798      	blx	r3
  400aee:	4602      	mov	r2, r0
  400af0:	b978      	cbnz	r0, 400b12 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400af2:	6863      	ldr	r3, [r4, #4]
  400af4:	68a1      	ldr	r1, [r4, #8]
  400af6:	430b      	orrs	r3, r1
  400af8:	6921      	ldr	r1, [r4, #16]
  400afa:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400afc:	68e1      	ldr	r1, [r4, #12]
  400afe:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b00:	4906      	ldr	r1, [pc, #24]	; (400b1c <usart_init_rs232+0x4c>)
  400b02:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400b04:	6869      	ldr	r1, [r5, #4]
  400b06:	430b      	orrs	r3, r1
  400b08:	606b      	str	r3, [r5, #4]
}
  400b0a:	4610      	mov	r0, r2
  400b0c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400b0e:	2201      	movs	r2, #1
  400b10:	e7fb      	b.n	400b0a <usart_init_rs232+0x3a>
  400b12:	2201      	movs	r2, #1
  400b14:	e7f9      	b.n	400b0a <usart_init_rs232+0x3a>
  400b16:	bf00      	nop
  400b18:	00400aa9 	.word	0x00400aa9
  400b1c:	20400a4c 	.word	0x20400a4c
  400b20:	00400a4f 	.word	0x00400a4f

00400b24 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400b24:	2340      	movs	r3, #64	; 0x40
  400b26:	6003      	str	r3, [r0, #0]
  400b28:	4770      	bx	lr

00400b2a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400b2a:	2310      	movs	r3, #16
  400b2c:	6003      	str	r3, [r0, #0]
  400b2e:	4770      	bx	lr

00400b30 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400b30:	6943      	ldr	r3, [r0, #20]
  400b32:	f013 0f02 	tst.w	r3, #2
  400b36:	d004      	beq.n	400b42 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400b38:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400b3c:	61c1      	str	r1, [r0, #28]
	return 0;
  400b3e:	2000      	movs	r0, #0
  400b40:	4770      	bx	lr
		return 1;
  400b42:	2001      	movs	r0, #1
}
  400b44:	4770      	bx	lr

00400b46 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b46:	6943      	ldr	r3, [r0, #20]
  400b48:	f013 0f01 	tst.w	r3, #1
  400b4c:	d005      	beq.n	400b5a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b4e:	6983      	ldr	r3, [r0, #24]
  400b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b54:	600b      	str	r3, [r1, #0]
	return 0;
  400b56:	2000      	movs	r0, #0
  400b58:	4770      	bx	lr
		return 1;
  400b5a:	2001      	movs	r0, #1
}
  400b5c:	4770      	bx	lr

00400b5e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b5e:	e7fe      	b.n	400b5e <Dummy_Handler>

00400b60 <Reset_Handler>:
{
  400b60:	b500      	push	{lr}
  400b62:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400b64:	4b25      	ldr	r3, [pc, #148]	; (400bfc <Reset_Handler+0x9c>)
  400b66:	4a26      	ldr	r2, [pc, #152]	; (400c00 <Reset_Handler+0xa0>)
  400b68:	429a      	cmp	r2, r3
  400b6a:	d010      	beq.n	400b8e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400b6c:	4b25      	ldr	r3, [pc, #148]	; (400c04 <Reset_Handler+0xa4>)
  400b6e:	4a23      	ldr	r2, [pc, #140]	; (400bfc <Reset_Handler+0x9c>)
  400b70:	429a      	cmp	r2, r3
  400b72:	d20c      	bcs.n	400b8e <Reset_Handler+0x2e>
  400b74:	3b01      	subs	r3, #1
  400b76:	1a9b      	subs	r3, r3, r2
  400b78:	f023 0303 	bic.w	r3, r3, #3
  400b7c:	3304      	adds	r3, #4
  400b7e:	4413      	add	r3, r2
  400b80:	491f      	ldr	r1, [pc, #124]	; (400c00 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400b82:	f851 0b04 	ldr.w	r0, [r1], #4
  400b86:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400b8a:	429a      	cmp	r2, r3
  400b8c:	d1f9      	bne.n	400b82 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400b8e:	4b1e      	ldr	r3, [pc, #120]	; (400c08 <Reset_Handler+0xa8>)
  400b90:	4a1e      	ldr	r2, [pc, #120]	; (400c0c <Reset_Handler+0xac>)
  400b92:	429a      	cmp	r2, r3
  400b94:	d20a      	bcs.n	400bac <Reset_Handler+0x4c>
  400b96:	3b01      	subs	r3, #1
  400b98:	1a9b      	subs	r3, r3, r2
  400b9a:	f023 0303 	bic.w	r3, r3, #3
  400b9e:	3304      	adds	r3, #4
  400ba0:	4413      	add	r3, r2
                *pDest++ = 0;
  400ba2:	2100      	movs	r1, #0
  400ba4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400ba8:	4293      	cmp	r3, r2
  400baa:	d1fb      	bne.n	400ba4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400bac:	4a18      	ldr	r2, [pc, #96]	; (400c10 <Reset_Handler+0xb0>)
  400bae:	4b19      	ldr	r3, [pc, #100]	; (400c14 <Reset_Handler+0xb4>)
  400bb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400bb4:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400bb6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400bba:	fab3 f383 	clz	r3, r3
  400bbe:	095b      	lsrs	r3, r3, #5
  400bc0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400bc2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400bc4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400bc8:	2200      	movs	r2, #0
  400bca:	4b13      	ldr	r3, [pc, #76]	; (400c18 <Reset_Handler+0xb8>)
  400bcc:	701a      	strb	r2, [r3, #0]
	return flags;
  400bce:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400bd0:	4a12      	ldr	r2, [pc, #72]	; (400c1c <Reset_Handler+0xbc>)
  400bd2:	6813      	ldr	r3, [r2, #0]
  400bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400bd8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400bda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bde:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400be2:	b129      	cbz	r1, 400bf0 <Reset_Handler+0x90>
		cpu_irq_enable();
  400be4:	2201      	movs	r2, #1
  400be6:	4b0c      	ldr	r3, [pc, #48]	; (400c18 <Reset_Handler+0xb8>)
  400be8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400bea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400bee:	b662      	cpsie	i
        __libc_init_array();
  400bf0:	4b0b      	ldr	r3, [pc, #44]	; (400c20 <Reset_Handler+0xc0>)
  400bf2:	4798      	blx	r3
        main();
  400bf4:	4b0b      	ldr	r3, [pc, #44]	; (400c24 <Reset_Handler+0xc4>)
  400bf6:	4798      	blx	r3
  400bf8:	e7fe      	b.n	400bf8 <Reset_Handler+0x98>
  400bfa:	bf00      	nop
  400bfc:	20400000 	.word	0x20400000
  400c00:	0040950c 	.word	0x0040950c
  400c04:	204009c0 	.word	0x204009c0
  400c08:	20400c40 	.word	0x20400c40
  400c0c:	204009c0 	.word	0x204009c0
  400c10:	e000ed00 	.word	0xe000ed00
  400c14:	00400000 	.word	0x00400000
  400c18:	20400000 	.word	0x20400000
  400c1c:	e000ed88 	.word	0xe000ed88
  400c20:	0040417d 	.word	0x0040417d
  400c24:	00402fd5 	.word	0x00402fd5

00400c28 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400c28:	4b3b      	ldr	r3, [pc, #236]	; (400d18 <SystemCoreClockUpdate+0xf0>)
  400c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c2c:	f003 0303 	and.w	r3, r3, #3
  400c30:	2b01      	cmp	r3, #1
  400c32:	d01d      	beq.n	400c70 <SystemCoreClockUpdate+0x48>
  400c34:	b183      	cbz	r3, 400c58 <SystemCoreClockUpdate+0x30>
  400c36:	2b02      	cmp	r3, #2
  400c38:	d036      	beq.n	400ca8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400c3a:	4b37      	ldr	r3, [pc, #220]	; (400d18 <SystemCoreClockUpdate+0xf0>)
  400c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c42:	2b70      	cmp	r3, #112	; 0x70
  400c44:	d05f      	beq.n	400d06 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c46:	4b34      	ldr	r3, [pc, #208]	; (400d18 <SystemCoreClockUpdate+0xf0>)
  400c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400c4a:	4934      	ldr	r1, [pc, #208]	; (400d1c <SystemCoreClockUpdate+0xf4>)
  400c4c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400c50:	680b      	ldr	r3, [r1, #0]
  400c52:	40d3      	lsrs	r3, r2
  400c54:	600b      	str	r3, [r1, #0]
  400c56:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400c58:	4b31      	ldr	r3, [pc, #196]	; (400d20 <SystemCoreClockUpdate+0xf8>)
  400c5a:	695b      	ldr	r3, [r3, #20]
  400c5c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c60:	bf14      	ite	ne
  400c62:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c66:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c6a:	4b2c      	ldr	r3, [pc, #176]	; (400d1c <SystemCoreClockUpdate+0xf4>)
  400c6c:	601a      	str	r2, [r3, #0]
  400c6e:	e7e4      	b.n	400c3a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400c70:	4b29      	ldr	r3, [pc, #164]	; (400d18 <SystemCoreClockUpdate+0xf0>)
  400c72:	6a1b      	ldr	r3, [r3, #32]
  400c74:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c78:	d003      	beq.n	400c82 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400c7a:	4a2a      	ldr	r2, [pc, #168]	; (400d24 <SystemCoreClockUpdate+0xfc>)
  400c7c:	4b27      	ldr	r3, [pc, #156]	; (400d1c <SystemCoreClockUpdate+0xf4>)
  400c7e:	601a      	str	r2, [r3, #0]
  400c80:	e7db      	b.n	400c3a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c82:	4a29      	ldr	r2, [pc, #164]	; (400d28 <SystemCoreClockUpdate+0x100>)
  400c84:	4b25      	ldr	r3, [pc, #148]	; (400d1c <SystemCoreClockUpdate+0xf4>)
  400c86:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400c88:	4b23      	ldr	r3, [pc, #140]	; (400d18 <SystemCoreClockUpdate+0xf0>)
  400c8a:	6a1b      	ldr	r3, [r3, #32]
  400c8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c90:	2b10      	cmp	r3, #16
  400c92:	d005      	beq.n	400ca0 <SystemCoreClockUpdate+0x78>
  400c94:	2b20      	cmp	r3, #32
  400c96:	d1d0      	bne.n	400c3a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400c98:	4a22      	ldr	r2, [pc, #136]	; (400d24 <SystemCoreClockUpdate+0xfc>)
  400c9a:	4b20      	ldr	r3, [pc, #128]	; (400d1c <SystemCoreClockUpdate+0xf4>)
  400c9c:	601a      	str	r2, [r3, #0]
          break;
  400c9e:	e7cc      	b.n	400c3a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400ca0:	4a22      	ldr	r2, [pc, #136]	; (400d2c <SystemCoreClockUpdate+0x104>)
  400ca2:	4b1e      	ldr	r3, [pc, #120]	; (400d1c <SystemCoreClockUpdate+0xf4>)
  400ca4:	601a      	str	r2, [r3, #0]
          break;
  400ca6:	e7c8      	b.n	400c3a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ca8:	4b1b      	ldr	r3, [pc, #108]	; (400d18 <SystemCoreClockUpdate+0xf0>)
  400caa:	6a1b      	ldr	r3, [r3, #32]
  400cac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400cb0:	d016      	beq.n	400ce0 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400cb2:	4a1c      	ldr	r2, [pc, #112]	; (400d24 <SystemCoreClockUpdate+0xfc>)
  400cb4:	4b19      	ldr	r3, [pc, #100]	; (400d1c <SystemCoreClockUpdate+0xf4>)
  400cb6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400cb8:	4b17      	ldr	r3, [pc, #92]	; (400d18 <SystemCoreClockUpdate+0xf0>)
  400cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cbc:	f003 0303 	and.w	r3, r3, #3
  400cc0:	2b02      	cmp	r3, #2
  400cc2:	d1ba      	bne.n	400c3a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400cc4:	4a14      	ldr	r2, [pc, #80]	; (400d18 <SystemCoreClockUpdate+0xf0>)
  400cc6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400cc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400cca:	4814      	ldr	r0, [pc, #80]	; (400d1c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ccc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400cd0:	6803      	ldr	r3, [r0, #0]
  400cd2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400cd6:	b2d2      	uxtb	r2, r2
  400cd8:	fbb3 f3f2 	udiv	r3, r3, r2
  400cdc:	6003      	str	r3, [r0, #0]
  400cde:	e7ac      	b.n	400c3a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ce0:	4a11      	ldr	r2, [pc, #68]	; (400d28 <SystemCoreClockUpdate+0x100>)
  400ce2:	4b0e      	ldr	r3, [pc, #56]	; (400d1c <SystemCoreClockUpdate+0xf4>)
  400ce4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400ce6:	4b0c      	ldr	r3, [pc, #48]	; (400d18 <SystemCoreClockUpdate+0xf0>)
  400ce8:	6a1b      	ldr	r3, [r3, #32]
  400cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cee:	2b10      	cmp	r3, #16
  400cf0:	d005      	beq.n	400cfe <SystemCoreClockUpdate+0xd6>
  400cf2:	2b20      	cmp	r3, #32
  400cf4:	d1e0      	bne.n	400cb8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400cf6:	4a0b      	ldr	r2, [pc, #44]	; (400d24 <SystemCoreClockUpdate+0xfc>)
  400cf8:	4b08      	ldr	r3, [pc, #32]	; (400d1c <SystemCoreClockUpdate+0xf4>)
  400cfa:	601a      	str	r2, [r3, #0]
          break;
  400cfc:	e7dc      	b.n	400cb8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400cfe:	4a0b      	ldr	r2, [pc, #44]	; (400d2c <SystemCoreClockUpdate+0x104>)
  400d00:	4b06      	ldr	r3, [pc, #24]	; (400d1c <SystemCoreClockUpdate+0xf4>)
  400d02:	601a      	str	r2, [r3, #0]
          break;
  400d04:	e7d8      	b.n	400cb8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400d06:	4a05      	ldr	r2, [pc, #20]	; (400d1c <SystemCoreClockUpdate+0xf4>)
  400d08:	6813      	ldr	r3, [r2, #0]
  400d0a:	4909      	ldr	r1, [pc, #36]	; (400d30 <SystemCoreClockUpdate+0x108>)
  400d0c:	fba1 1303 	umull	r1, r3, r1, r3
  400d10:	085b      	lsrs	r3, r3, #1
  400d12:	6013      	str	r3, [r2, #0]
  400d14:	4770      	bx	lr
  400d16:	bf00      	nop
  400d18:	400e0600 	.word	0x400e0600
  400d1c:	20400004 	.word	0x20400004
  400d20:	400e1810 	.word	0x400e1810
  400d24:	00b71b00 	.word	0x00b71b00
  400d28:	003d0900 	.word	0x003d0900
  400d2c:	007a1200 	.word	0x007a1200
  400d30:	aaaaaaab 	.word	0xaaaaaaab

00400d34 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400d34:	4b16      	ldr	r3, [pc, #88]	; (400d90 <system_init_flash+0x5c>)
  400d36:	4298      	cmp	r0, r3
  400d38:	d913      	bls.n	400d62 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400d3a:	4b16      	ldr	r3, [pc, #88]	; (400d94 <system_init_flash+0x60>)
  400d3c:	4298      	cmp	r0, r3
  400d3e:	d915      	bls.n	400d6c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400d40:	4b15      	ldr	r3, [pc, #84]	; (400d98 <system_init_flash+0x64>)
  400d42:	4298      	cmp	r0, r3
  400d44:	d916      	bls.n	400d74 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400d46:	4b15      	ldr	r3, [pc, #84]	; (400d9c <system_init_flash+0x68>)
  400d48:	4298      	cmp	r0, r3
  400d4a:	d917      	bls.n	400d7c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400d4c:	4b14      	ldr	r3, [pc, #80]	; (400da0 <system_init_flash+0x6c>)
  400d4e:	4298      	cmp	r0, r3
  400d50:	d918      	bls.n	400d84 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400d52:	4b14      	ldr	r3, [pc, #80]	; (400da4 <system_init_flash+0x70>)
  400d54:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d56:	bf94      	ite	ls
  400d58:	4a13      	ldrls	r2, [pc, #76]	; (400da8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400d5a:	4a14      	ldrhi	r2, [pc, #80]	; (400dac <system_init_flash+0x78>)
  400d5c:	4b14      	ldr	r3, [pc, #80]	; (400db0 <system_init_flash+0x7c>)
  400d5e:	601a      	str	r2, [r3, #0]
  400d60:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d66:	4b12      	ldr	r3, [pc, #72]	; (400db0 <system_init_flash+0x7c>)
  400d68:	601a      	str	r2, [r3, #0]
  400d6a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d6c:	4a11      	ldr	r2, [pc, #68]	; (400db4 <system_init_flash+0x80>)
  400d6e:	4b10      	ldr	r3, [pc, #64]	; (400db0 <system_init_flash+0x7c>)
  400d70:	601a      	str	r2, [r3, #0]
  400d72:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d74:	4a10      	ldr	r2, [pc, #64]	; (400db8 <system_init_flash+0x84>)
  400d76:	4b0e      	ldr	r3, [pc, #56]	; (400db0 <system_init_flash+0x7c>)
  400d78:	601a      	str	r2, [r3, #0]
  400d7a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d7c:	4a0f      	ldr	r2, [pc, #60]	; (400dbc <system_init_flash+0x88>)
  400d7e:	4b0c      	ldr	r3, [pc, #48]	; (400db0 <system_init_flash+0x7c>)
  400d80:	601a      	str	r2, [r3, #0]
  400d82:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400d84:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400d88:	4b09      	ldr	r3, [pc, #36]	; (400db0 <system_init_flash+0x7c>)
  400d8a:	601a      	str	r2, [r3, #0]
  400d8c:	4770      	bx	lr
  400d8e:	bf00      	nop
  400d90:	015ef3bf 	.word	0x015ef3bf
  400d94:	02bde77f 	.word	0x02bde77f
  400d98:	041cdb3f 	.word	0x041cdb3f
  400d9c:	057bceff 	.word	0x057bceff
  400da0:	06dac2bf 	.word	0x06dac2bf
  400da4:	0839b67f 	.word	0x0839b67f
  400da8:	04000500 	.word	0x04000500
  400dac:	04000600 	.word	0x04000600
  400db0:	400e0c00 	.word	0x400e0c00
  400db4:	04000100 	.word	0x04000100
  400db8:	04000200 	.word	0x04000200
  400dbc:	04000300 	.word	0x04000300

00400dc0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400dc0:	4b0a      	ldr	r3, [pc, #40]	; (400dec <_sbrk+0x2c>)
  400dc2:	681b      	ldr	r3, [r3, #0]
  400dc4:	b153      	cbz	r3, 400ddc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400dc6:	4b09      	ldr	r3, [pc, #36]	; (400dec <_sbrk+0x2c>)
  400dc8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400dca:	181a      	adds	r2, r3, r0
  400dcc:	4908      	ldr	r1, [pc, #32]	; (400df0 <_sbrk+0x30>)
  400dce:	4291      	cmp	r1, r2
  400dd0:	db08      	blt.n	400de4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400dd2:	4610      	mov	r0, r2
  400dd4:	4a05      	ldr	r2, [pc, #20]	; (400dec <_sbrk+0x2c>)
  400dd6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400dd8:	4618      	mov	r0, r3
  400dda:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400ddc:	4a05      	ldr	r2, [pc, #20]	; (400df4 <_sbrk+0x34>)
  400dde:	4b03      	ldr	r3, [pc, #12]	; (400dec <_sbrk+0x2c>)
  400de0:	601a      	str	r2, [r3, #0]
  400de2:	e7f0      	b.n	400dc6 <_sbrk+0x6>
		return (caddr_t) -1;	
  400de4:	f04f 30ff 	mov.w	r0, #4294967295
}
  400de8:	4770      	bx	lr
  400dea:	bf00      	nop
  400dec:	20400a50 	.word	0x20400a50
  400df0:	2045fffc 	.word	0x2045fffc
  400df4:	20402e40 	.word	0x20402e40

00400df8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400df8:	f04f 30ff 	mov.w	r0, #4294967295
  400dfc:	4770      	bx	lr

00400dfe <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400e02:	604b      	str	r3, [r1, #4]

	return 0;
}
  400e04:	2000      	movs	r0, #0
  400e06:	4770      	bx	lr

00400e08 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400e08:	2001      	movs	r0, #1
  400e0a:	4770      	bx	lr

00400e0c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400e0c:	2000      	movs	r0, #0
  400e0e:	4770      	bx	lr

00400e10 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e10:	f100 0308 	add.w	r3, r0, #8
  400e14:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400e16:	f04f 32ff 	mov.w	r2, #4294967295
  400e1a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e1c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e1e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400e20:	2300      	movs	r3, #0
  400e22:	6003      	str	r3, [r0, #0]
  400e24:	4770      	bx	lr

00400e26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400e26:	2300      	movs	r3, #0
  400e28:	6103      	str	r3, [r0, #16]
  400e2a:	4770      	bx	lr

00400e2c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400e2c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400e2e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400e30:	689a      	ldr	r2, [r3, #8]
  400e32:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400e34:	689a      	ldr	r2, [r3, #8]
  400e36:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400e38:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e3a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e3c:	6803      	ldr	r3, [r0, #0]
  400e3e:	3301      	adds	r3, #1
  400e40:	6003      	str	r3, [r0, #0]
  400e42:	4770      	bx	lr

00400e44 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400e44:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400e46:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400e48:	f1b5 3fff 	cmp.w	r5, #4294967295
  400e4c:	d002      	beq.n	400e54 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e4e:	f100 0208 	add.w	r2, r0, #8
  400e52:	e002      	b.n	400e5a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400e54:	6902      	ldr	r2, [r0, #16]
  400e56:	e004      	b.n	400e62 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e58:	461a      	mov	r2, r3
  400e5a:	6853      	ldr	r3, [r2, #4]
  400e5c:	681c      	ldr	r4, [r3, #0]
  400e5e:	42a5      	cmp	r5, r4
  400e60:	d2fa      	bcs.n	400e58 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400e62:	6853      	ldr	r3, [r2, #4]
  400e64:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400e66:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400e68:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400e6a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e6c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e6e:	6803      	ldr	r3, [r0, #0]
  400e70:	3301      	adds	r3, #1
  400e72:	6003      	str	r3, [r0, #0]
}
  400e74:	bc30      	pop	{r4, r5}
  400e76:	4770      	bx	lr

00400e78 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400e78:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400e7a:	6842      	ldr	r2, [r0, #4]
  400e7c:	6881      	ldr	r1, [r0, #8]
  400e7e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400e80:	6882      	ldr	r2, [r0, #8]
  400e82:	6841      	ldr	r1, [r0, #4]
  400e84:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400e86:	685a      	ldr	r2, [r3, #4]
  400e88:	4290      	cmp	r0, r2
  400e8a:	d005      	beq.n	400e98 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400e8c:	2200      	movs	r2, #0
  400e8e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400e90:	6818      	ldr	r0, [r3, #0]
  400e92:	3801      	subs	r0, #1
  400e94:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400e96:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400e98:	6882      	ldr	r2, [r0, #8]
  400e9a:	605a      	str	r2, [r3, #4]
  400e9c:	e7f6      	b.n	400e8c <uxListRemove+0x14>
	...

00400ea0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400ea0:	4b0d      	ldr	r3, [pc, #52]	; (400ed8 <prvTaskExitError+0x38>)
  400ea2:	681b      	ldr	r3, [r3, #0]
  400ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ea8:	d00a      	beq.n	400ec0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400eaa:	f04f 0380 	mov.w	r3, #128	; 0x80
  400eae:	b672      	cpsid	i
  400eb0:	f383 8811 	msr	BASEPRI, r3
  400eb4:	f3bf 8f6f 	isb	sy
  400eb8:	f3bf 8f4f 	dsb	sy
  400ebc:	b662      	cpsie	i
  400ebe:	e7fe      	b.n	400ebe <prvTaskExitError+0x1e>
  400ec0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ec4:	b672      	cpsid	i
  400ec6:	f383 8811 	msr	BASEPRI, r3
  400eca:	f3bf 8f6f 	isb	sy
  400ece:	f3bf 8f4f 	dsb	sy
  400ed2:	b662      	cpsie	i
  400ed4:	e7fe      	b.n	400ed4 <prvTaskExitError+0x34>
  400ed6:	bf00      	nop
  400ed8:	20400008 	.word	0x20400008

00400edc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400edc:	4806      	ldr	r0, [pc, #24]	; (400ef8 <prvPortStartFirstTask+0x1c>)
  400ede:	6800      	ldr	r0, [r0, #0]
  400ee0:	6800      	ldr	r0, [r0, #0]
  400ee2:	f380 8808 	msr	MSP, r0
  400ee6:	b662      	cpsie	i
  400ee8:	b661      	cpsie	f
  400eea:	f3bf 8f4f 	dsb	sy
  400eee:	f3bf 8f6f 	isb	sy
  400ef2:	df00      	svc	0
  400ef4:	bf00      	nop
  400ef6:	0000      	.short	0x0000
  400ef8:	e000ed08 	.word	0xe000ed08

00400efc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400efc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400f0c <vPortEnableVFP+0x10>
  400f00:	6801      	ldr	r1, [r0, #0]
  400f02:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400f06:	6001      	str	r1, [r0, #0]
  400f08:	4770      	bx	lr
  400f0a:	0000      	.short	0x0000
  400f0c:	e000ed88 	.word	0xe000ed88

00400f10 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400f14:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400f18:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400f1c:	4b05      	ldr	r3, [pc, #20]	; (400f34 <pxPortInitialiseStack+0x24>)
  400f1e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400f22:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400f26:	f06f 0302 	mvn.w	r3, #2
  400f2a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400f2e:	3844      	subs	r0, #68	; 0x44
  400f30:	4770      	bx	lr
  400f32:	bf00      	nop
  400f34:	00400ea1 	.word	0x00400ea1

00400f38 <SVC_Handler>:
	__asm volatile (
  400f38:	4b06      	ldr	r3, [pc, #24]	; (400f54 <pxCurrentTCBConst2>)
  400f3a:	6819      	ldr	r1, [r3, #0]
  400f3c:	6808      	ldr	r0, [r1, #0]
  400f3e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f42:	f380 8809 	msr	PSP, r0
  400f46:	f3bf 8f6f 	isb	sy
  400f4a:	f04f 0000 	mov.w	r0, #0
  400f4e:	f380 8811 	msr	BASEPRI, r0
  400f52:	4770      	bx	lr

00400f54 <pxCurrentTCBConst2>:
  400f54:	20400a5c 	.word	0x20400a5c
  400f58:	4770      	bx	lr
  400f5a:	bf00      	nop

00400f5c <vPortEnterCritical>:
  400f5c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f60:	b672      	cpsid	i
  400f62:	f383 8811 	msr	BASEPRI, r3
  400f66:	f3bf 8f6f 	isb	sy
  400f6a:	f3bf 8f4f 	dsb	sy
  400f6e:	b662      	cpsie	i
	uxCriticalNesting++;
  400f70:	4a0b      	ldr	r2, [pc, #44]	; (400fa0 <vPortEnterCritical+0x44>)
  400f72:	6813      	ldr	r3, [r2, #0]
  400f74:	3301      	adds	r3, #1
  400f76:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400f78:	2b01      	cmp	r3, #1
  400f7a:	d10f      	bne.n	400f9c <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400f7c:	4b09      	ldr	r3, [pc, #36]	; (400fa4 <vPortEnterCritical+0x48>)
  400f7e:	681b      	ldr	r3, [r3, #0]
  400f80:	f013 0fff 	tst.w	r3, #255	; 0xff
  400f84:	d00a      	beq.n	400f9c <vPortEnterCritical+0x40>
  400f86:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f8a:	b672      	cpsid	i
  400f8c:	f383 8811 	msr	BASEPRI, r3
  400f90:	f3bf 8f6f 	isb	sy
  400f94:	f3bf 8f4f 	dsb	sy
  400f98:	b662      	cpsie	i
  400f9a:	e7fe      	b.n	400f9a <vPortEnterCritical+0x3e>
  400f9c:	4770      	bx	lr
  400f9e:	bf00      	nop
  400fa0:	20400008 	.word	0x20400008
  400fa4:	e000ed04 	.word	0xe000ed04

00400fa8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400fa8:	4b0a      	ldr	r3, [pc, #40]	; (400fd4 <vPortExitCritical+0x2c>)
  400faa:	681b      	ldr	r3, [r3, #0]
  400fac:	b953      	cbnz	r3, 400fc4 <vPortExitCritical+0x1c>
  400fae:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fb2:	b672      	cpsid	i
  400fb4:	f383 8811 	msr	BASEPRI, r3
  400fb8:	f3bf 8f6f 	isb	sy
  400fbc:	f3bf 8f4f 	dsb	sy
  400fc0:	b662      	cpsie	i
  400fc2:	e7fe      	b.n	400fc2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400fc4:	3b01      	subs	r3, #1
  400fc6:	4a03      	ldr	r2, [pc, #12]	; (400fd4 <vPortExitCritical+0x2c>)
  400fc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400fca:	b90b      	cbnz	r3, 400fd0 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400fcc:	f383 8811 	msr	BASEPRI, r3
  400fd0:	4770      	bx	lr
  400fd2:	bf00      	nop
  400fd4:	20400008 	.word	0x20400008

00400fd8 <PendSV_Handler>:
	__asm volatile
  400fd8:	f3ef 8009 	mrs	r0, PSP
  400fdc:	f3bf 8f6f 	isb	sy
  400fe0:	4b15      	ldr	r3, [pc, #84]	; (401038 <pxCurrentTCBConst>)
  400fe2:	681a      	ldr	r2, [r3, #0]
  400fe4:	f01e 0f10 	tst.w	lr, #16
  400fe8:	bf08      	it	eq
  400fea:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400fee:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ff2:	6010      	str	r0, [r2, #0]
  400ff4:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400ff8:	f04f 0080 	mov.w	r0, #128	; 0x80
  400ffc:	b672      	cpsid	i
  400ffe:	f380 8811 	msr	BASEPRI, r0
  401002:	f3bf 8f4f 	dsb	sy
  401006:	f3bf 8f6f 	isb	sy
  40100a:	b662      	cpsie	i
  40100c:	f001 f890 	bl	402130 <vTaskSwitchContext>
  401010:	f04f 0000 	mov.w	r0, #0
  401014:	f380 8811 	msr	BASEPRI, r0
  401018:	bc08      	pop	{r3}
  40101a:	6819      	ldr	r1, [r3, #0]
  40101c:	6808      	ldr	r0, [r1, #0]
  40101e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401022:	f01e 0f10 	tst.w	lr, #16
  401026:	bf08      	it	eq
  401028:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40102c:	f380 8809 	msr	PSP, r0
  401030:	f3bf 8f6f 	isb	sy
  401034:	4770      	bx	lr
  401036:	bf00      	nop

00401038 <pxCurrentTCBConst>:
  401038:	20400a5c 	.word	0x20400a5c
  40103c:	4770      	bx	lr
  40103e:	bf00      	nop

00401040 <SysTick_Handler>:
{
  401040:	b508      	push	{r3, lr}
	__asm volatile
  401042:	f3ef 8311 	mrs	r3, BASEPRI
  401046:	f04f 0280 	mov.w	r2, #128	; 0x80
  40104a:	b672      	cpsid	i
  40104c:	f382 8811 	msr	BASEPRI, r2
  401050:	f3bf 8f6f 	isb	sy
  401054:	f3bf 8f4f 	dsb	sy
  401058:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40105a:	4b05      	ldr	r3, [pc, #20]	; (401070 <SysTick_Handler+0x30>)
  40105c:	4798      	blx	r3
  40105e:	b118      	cbz	r0, 401068 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401064:	4b03      	ldr	r3, [pc, #12]	; (401074 <SysTick_Handler+0x34>)
  401066:	601a      	str	r2, [r3, #0]
	__asm volatile
  401068:	2300      	movs	r3, #0
  40106a:	f383 8811 	msr	BASEPRI, r3
  40106e:	bd08      	pop	{r3, pc}
  401070:	00401d9d 	.word	0x00401d9d
  401074:	e000ed04 	.word	0xe000ed04

00401078 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401078:	4a03      	ldr	r2, [pc, #12]	; (401088 <vPortSetupTimerInterrupt+0x10>)
  40107a:	4b04      	ldr	r3, [pc, #16]	; (40108c <vPortSetupTimerInterrupt+0x14>)
  40107c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40107e:	2207      	movs	r2, #7
  401080:	3b04      	subs	r3, #4
  401082:	601a      	str	r2, [r3, #0]
  401084:	4770      	bx	lr
  401086:	bf00      	nop
  401088:	000927bf 	.word	0x000927bf
  40108c:	e000e014 	.word	0xe000e014

00401090 <xPortStartScheduler>:
{
  401090:	b500      	push	{lr}
  401092:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401094:	4b25      	ldr	r3, [pc, #148]	; (40112c <xPortStartScheduler+0x9c>)
  401096:	781a      	ldrb	r2, [r3, #0]
  401098:	b2d2      	uxtb	r2, r2
  40109a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40109c:	22ff      	movs	r2, #255	; 0xff
  40109e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4010a0:	781b      	ldrb	r3, [r3, #0]
  4010a2:	b2db      	uxtb	r3, r3
  4010a4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4010a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4010ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4010b0:	4a1f      	ldr	r2, [pc, #124]	; (401130 <xPortStartScheduler+0xa0>)
  4010b2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4010b4:	2207      	movs	r2, #7
  4010b6:	4b1f      	ldr	r3, [pc, #124]	; (401134 <xPortStartScheduler+0xa4>)
  4010b8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4010ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4010be:	f013 0f80 	tst.w	r3, #128	; 0x80
  4010c2:	d010      	beq.n	4010e6 <xPortStartScheduler+0x56>
  4010c4:	2206      	movs	r2, #6
  4010c6:	e000      	b.n	4010ca <xPortStartScheduler+0x3a>
  4010c8:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4010ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4010ce:	005b      	lsls	r3, r3, #1
  4010d0:	b2db      	uxtb	r3, r3
  4010d2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4010d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4010da:	1e51      	subs	r1, r2, #1
  4010dc:	f013 0f80 	tst.w	r3, #128	; 0x80
  4010e0:	d1f2      	bne.n	4010c8 <xPortStartScheduler+0x38>
  4010e2:	4b14      	ldr	r3, [pc, #80]	; (401134 <xPortStartScheduler+0xa4>)
  4010e4:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4010e6:	4a13      	ldr	r2, [pc, #76]	; (401134 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4010e8:	6813      	ldr	r3, [r2, #0]
  4010ea:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4010ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4010f0:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4010f2:	9b01      	ldr	r3, [sp, #4]
  4010f4:	b2db      	uxtb	r3, r3
  4010f6:	4a0d      	ldr	r2, [pc, #52]	; (40112c <xPortStartScheduler+0x9c>)
  4010f8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4010fa:	4b0f      	ldr	r3, [pc, #60]	; (401138 <xPortStartScheduler+0xa8>)
  4010fc:	681a      	ldr	r2, [r3, #0]
  4010fe:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401102:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401104:	681a      	ldr	r2, [r3, #0]
  401106:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40110a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40110c:	4b0b      	ldr	r3, [pc, #44]	; (40113c <xPortStartScheduler+0xac>)
  40110e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401110:	2200      	movs	r2, #0
  401112:	4b0b      	ldr	r3, [pc, #44]	; (401140 <xPortStartScheduler+0xb0>)
  401114:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401116:	4b0b      	ldr	r3, [pc, #44]	; (401144 <xPortStartScheduler+0xb4>)
  401118:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40111a:	4a0b      	ldr	r2, [pc, #44]	; (401148 <xPortStartScheduler+0xb8>)
  40111c:	6813      	ldr	r3, [r2, #0]
  40111e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401122:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401124:	4b09      	ldr	r3, [pc, #36]	; (40114c <xPortStartScheduler+0xbc>)
  401126:	4798      	blx	r3
	prvTaskExitError();
  401128:	4b09      	ldr	r3, [pc, #36]	; (401150 <xPortStartScheduler+0xc0>)
  40112a:	4798      	blx	r3
  40112c:	e000e400 	.word	0xe000e400
  401130:	20400a54 	.word	0x20400a54
  401134:	20400a58 	.word	0x20400a58
  401138:	e000ed20 	.word	0xe000ed20
  40113c:	00401079 	.word	0x00401079
  401140:	20400008 	.word	0x20400008
  401144:	00400efd 	.word	0x00400efd
  401148:	e000ef34 	.word	0xe000ef34
  40114c:	00400edd 	.word	0x00400edd
  401150:	00400ea1 	.word	0x00400ea1

00401154 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401154:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401158:	2b0f      	cmp	r3, #15
  40115a:	d911      	bls.n	401180 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40115c:	4a12      	ldr	r2, [pc, #72]	; (4011a8 <vPortValidateInterruptPriority+0x54>)
  40115e:	5c9b      	ldrb	r3, [r3, r2]
  401160:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401162:	4a12      	ldr	r2, [pc, #72]	; (4011ac <vPortValidateInterruptPriority+0x58>)
  401164:	7812      	ldrb	r2, [r2, #0]
  401166:	429a      	cmp	r2, r3
  401168:	d90a      	bls.n	401180 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40116a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40116e:	b672      	cpsid	i
  401170:	f383 8811 	msr	BASEPRI, r3
  401174:	f3bf 8f6f 	isb	sy
  401178:	f3bf 8f4f 	dsb	sy
  40117c:	b662      	cpsie	i
  40117e:	e7fe      	b.n	40117e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401180:	4b0b      	ldr	r3, [pc, #44]	; (4011b0 <vPortValidateInterruptPriority+0x5c>)
  401182:	681b      	ldr	r3, [r3, #0]
  401184:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401188:	4a0a      	ldr	r2, [pc, #40]	; (4011b4 <vPortValidateInterruptPriority+0x60>)
  40118a:	6812      	ldr	r2, [r2, #0]
  40118c:	4293      	cmp	r3, r2
  40118e:	d90a      	bls.n	4011a6 <vPortValidateInterruptPriority+0x52>
  401190:	f04f 0380 	mov.w	r3, #128	; 0x80
  401194:	b672      	cpsid	i
  401196:	f383 8811 	msr	BASEPRI, r3
  40119a:	f3bf 8f6f 	isb	sy
  40119e:	f3bf 8f4f 	dsb	sy
  4011a2:	b662      	cpsie	i
  4011a4:	e7fe      	b.n	4011a4 <vPortValidateInterruptPriority+0x50>
  4011a6:	4770      	bx	lr
  4011a8:	e000e3f0 	.word	0xe000e3f0
  4011ac:	20400a54 	.word	0x20400a54
  4011b0:	e000ed0c 	.word	0xe000ed0c
  4011b4:	20400a58 	.word	0x20400a58

004011b8 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4011b8:	b510      	push	{r4, lr}
  4011ba:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  4011bc:	4b06      	ldr	r3, [pc, #24]	; (4011d8 <pvPortMalloc+0x20>)
  4011be:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  4011c0:	4620      	mov	r0, r4
  4011c2:	4b06      	ldr	r3, [pc, #24]	; (4011dc <pvPortMalloc+0x24>)
  4011c4:	4798      	blx	r3
  4011c6:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4011c8:	4b05      	ldr	r3, [pc, #20]	; (4011e0 <pvPortMalloc+0x28>)
  4011ca:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4011cc:	b10c      	cbz	r4, 4011d2 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  4011ce:	4620      	mov	r0, r4
  4011d0:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  4011d2:	4b04      	ldr	r3, [pc, #16]	; (4011e4 <pvPortMalloc+0x2c>)
  4011d4:	4798      	blx	r3
	return pvReturn;
  4011d6:	e7fa      	b.n	4011ce <pvPortMalloc+0x16>
  4011d8:	00401d81 	.word	0x00401d81
  4011dc:	004041cd 	.word	0x004041cd
  4011e0:	00401ee9 	.word	0x00401ee9
  4011e4:	00402cb3 	.word	0x00402cb3

004011e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  4011e8:	b148      	cbz	r0, 4011fe <vPortFree+0x16>
{
  4011ea:	b510      	push	{r4, lr}
  4011ec:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  4011ee:	4b04      	ldr	r3, [pc, #16]	; (401200 <vPortFree+0x18>)
  4011f0:	4798      	blx	r3
		{
			free( pv );
  4011f2:	4620      	mov	r0, r4
  4011f4:	4b03      	ldr	r3, [pc, #12]	; (401204 <vPortFree+0x1c>)
  4011f6:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  4011f8:	4b03      	ldr	r3, [pc, #12]	; (401208 <vPortFree+0x20>)
  4011fa:	4798      	blx	r3
  4011fc:	bd10      	pop	{r4, pc}
  4011fe:	4770      	bx	lr
  401200:	00401d81 	.word	0x00401d81
  401204:	004041dd 	.word	0x004041dd
  401208:	00401ee9 	.word	0x00401ee9

0040120c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40120c:	b538      	push	{r3, r4, r5, lr}
  40120e:	4604      	mov	r4, r0
  401210:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401212:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401214:	b95a      	cbnz	r2, 40122e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401216:	6803      	ldr	r3, [r0, #0]
  401218:	2b00      	cmp	r3, #0
  40121a:	d12e      	bne.n	40127a <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40121c:	6840      	ldr	r0, [r0, #4]
  40121e:	4b1b      	ldr	r3, [pc, #108]	; (40128c <prvCopyDataToQueue+0x80>)
  401220:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401222:	2300      	movs	r3, #0
  401224:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401228:	3301      	adds	r3, #1
  40122a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40122c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40122e:	b96d      	cbnz	r5, 40124c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401230:	6880      	ldr	r0, [r0, #8]
  401232:	4b17      	ldr	r3, [pc, #92]	; (401290 <prvCopyDataToQueue+0x84>)
  401234:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401236:	68a3      	ldr	r3, [r4, #8]
  401238:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40123a:	4413      	add	r3, r2
  40123c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40123e:	6862      	ldr	r2, [r4, #4]
  401240:	4293      	cmp	r3, r2
  401242:	d31c      	bcc.n	40127e <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401244:	6823      	ldr	r3, [r4, #0]
  401246:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401248:	2000      	movs	r0, #0
  40124a:	e7ec      	b.n	401226 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40124c:	68c0      	ldr	r0, [r0, #12]
  40124e:	4b10      	ldr	r3, [pc, #64]	; (401290 <prvCopyDataToQueue+0x84>)
  401250:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401252:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401254:	425b      	negs	r3, r3
  401256:	68e2      	ldr	r2, [r4, #12]
  401258:	441a      	add	r2, r3
  40125a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40125c:	6821      	ldr	r1, [r4, #0]
  40125e:	428a      	cmp	r2, r1
  401260:	d202      	bcs.n	401268 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401262:	6862      	ldr	r2, [r4, #4]
  401264:	4413      	add	r3, r2
  401266:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401268:	2d02      	cmp	r5, #2
  40126a:	d10a      	bne.n	401282 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40126c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40126e:	b153      	cbz	r3, 401286 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401270:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401272:	3b01      	subs	r3, #1
  401274:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401276:	2000      	movs	r0, #0
  401278:	e7d5      	b.n	401226 <prvCopyDataToQueue+0x1a>
  40127a:	2000      	movs	r0, #0
  40127c:	e7d3      	b.n	401226 <prvCopyDataToQueue+0x1a>
  40127e:	2000      	movs	r0, #0
  401280:	e7d1      	b.n	401226 <prvCopyDataToQueue+0x1a>
  401282:	2000      	movs	r0, #0
  401284:	e7cf      	b.n	401226 <prvCopyDataToQueue+0x1a>
  401286:	2000      	movs	r0, #0
  401288:	e7cd      	b.n	401226 <prvCopyDataToQueue+0x1a>
  40128a:	bf00      	nop
  40128c:	00402531 	.word	0x00402531
  401290:	0040474d 	.word	0x0040474d

00401294 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401294:	b530      	push	{r4, r5, lr}
  401296:	b083      	sub	sp, #12
  401298:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40129a:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  40129c:	b174      	cbz	r4, 4012bc <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40129e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4012a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4012a2:	429a      	cmp	r2, r3
  4012a4:	d315      	bcc.n	4012d2 <prvNotifyQueueSetContainer+0x3e>
  4012a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012aa:	b672      	cpsid	i
  4012ac:	f383 8811 	msr	BASEPRI, r3
  4012b0:	f3bf 8f6f 	isb	sy
  4012b4:	f3bf 8f4f 	dsb	sy
  4012b8:	b662      	cpsie	i
  4012ba:	e7fe      	b.n	4012ba <prvNotifyQueueSetContainer+0x26>
  4012bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012c0:	b672      	cpsid	i
  4012c2:	f383 8811 	msr	BASEPRI, r3
  4012c6:	f3bf 8f6f 	isb	sy
  4012ca:	f3bf 8f4f 	dsb	sy
  4012ce:	b662      	cpsie	i
  4012d0:	e7fe      	b.n	4012d0 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4012d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4012d4:	4293      	cmp	r3, r2
  4012d6:	d803      	bhi.n	4012e0 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4012d8:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4012da:	4628      	mov	r0, r5
  4012dc:	b003      	add	sp, #12
  4012de:	bd30      	pop	{r4, r5, pc}
  4012e0:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4012e2:	a901      	add	r1, sp, #4
  4012e4:	4620      	mov	r0, r4
  4012e6:	4b0b      	ldr	r3, [pc, #44]	; (401314 <prvNotifyQueueSetContainer+0x80>)
  4012e8:	4798      	blx	r3
  4012ea:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4012ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012ee:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012f2:	d10a      	bne.n	40130a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4012f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4012f6:	2b00      	cmp	r3, #0
  4012f8:	d0ef      	beq.n	4012da <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4012fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4012fe:	4b06      	ldr	r3, [pc, #24]	; (401318 <prvNotifyQueueSetContainer+0x84>)
  401300:	4798      	blx	r3
  401302:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401304:	bf18      	it	ne
  401306:	2501      	movne	r5, #1
  401308:	e7e7      	b.n	4012da <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40130a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40130c:	3301      	adds	r3, #1
  40130e:	64a3      	str	r3, [r4, #72]	; 0x48
  401310:	e7e3      	b.n	4012da <prvNotifyQueueSetContainer+0x46>
  401312:	bf00      	nop
  401314:	0040120d 	.word	0x0040120d
  401318:	00402305 	.word	0x00402305

0040131c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40131c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40131e:	b172      	cbz	r2, 40133e <prvCopyDataFromQueue+0x22>
{
  401320:	b510      	push	{r4, lr}
  401322:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401324:	68c4      	ldr	r4, [r0, #12]
  401326:	4414      	add	r4, r2
  401328:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40132a:	6840      	ldr	r0, [r0, #4]
  40132c:	4284      	cmp	r4, r0
  40132e:	d301      	bcc.n	401334 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401330:	6818      	ldr	r0, [r3, #0]
  401332:	60d8      	str	r0, [r3, #12]
  401334:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401336:	68d9      	ldr	r1, [r3, #12]
  401338:	4b01      	ldr	r3, [pc, #4]	; (401340 <prvCopyDataFromQueue+0x24>)
  40133a:	4798      	blx	r3
  40133c:	bd10      	pop	{r4, pc}
  40133e:	4770      	bx	lr
  401340:	0040474d 	.word	0x0040474d

00401344 <prvUnlockQueue>:
{
  401344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401346:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401348:	4b22      	ldr	r3, [pc, #136]	; (4013d4 <prvUnlockQueue+0x90>)
  40134a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40134c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40134e:	2b00      	cmp	r3, #0
  401350:	dd1b      	ble.n	40138a <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401352:	4d21      	ldr	r5, [pc, #132]	; (4013d8 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401354:	4f21      	ldr	r7, [pc, #132]	; (4013dc <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401356:	4e22      	ldr	r6, [pc, #136]	; (4013e0 <prvUnlockQueue+0x9c>)
  401358:	e00b      	b.n	401372 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40135a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40135c:	b1ab      	cbz	r3, 40138a <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40135e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401362:	47b0      	blx	r6
  401364:	b978      	cbnz	r0, 401386 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401366:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401368:	3b01      	subs	r3, #1
  40136a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40136c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40136e:	2b00      	cmp	r3, #0
  401370:	dd0b      	ble.n	40138a <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401372:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401374:	2b00      	cmp	r3, #0
  401376:	d0f0      	beq.n	40135a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401378:	2100      	movs	r1, #0
  40137a:	4620      	mov	r0, r4
  40137c:	47a8      	blx	r5
  40137e:	2801      	cmp	r0, #1
  401380:	d1f1      	bne.n	401366 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401382:	47b8      	blx	r7
  401384:	e7ef      	b.n	401366 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401386:	47b8      	blx	r7
  401388:	e7ed      	b.n	401366 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  40138a:	f04f 33ff 	mov.w	r3, #4294967295
  40138e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401390:	4b14      	ldr	r3, [pc, #80]	; (4013e4 <prvUnlockQueue+0xa0>)
  401392:	4798      	blx	r3
	taskENTER_CRITICAL();
  401394:	4b0f      	ldr	r3, [pc, #60]	; (4013d4 <prvUnlockQueue+0x90>)
  401396:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401398:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40139a:	2b00      	cmp	r3, #0
  40139c:	dd14      	ble.n	4013c8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40139e:	6923      	ldr	r3, [r4, #16]
  4013a0:	b193      	cbz	r3, 4013c8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4013a2:	f104 0610 	add.w	r6, r4, #16
  4013a6:	4d0e      	ldr	r5, [pc, #56]	; (4013e0 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4013a8:	4f0c      	ldr	r7, [pc, #48]	; (4013dc <prvUnlockQueue+0x98>)
  4013aa:	e007      	b.n	4013bc <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4013ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4013ae:	3b01      	subs	r3, #1
  4013b0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4013b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4013b4:	2b00      	cmp	r3, #0
  4013b6:	dd07      	ble.n	4013c8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4013b8:	6923      	ldr	r3, [r4, #16]
  4013ba:	b12b      	cbz	r3, 4013c8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4013bc:	4630      	mov	r0, r6
  4013be:	47a8      	blx	r5
  4013c0:	2800      	cmp	r0, #0
  4013c2:	d0f3      	beq.n	4013ac <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4013c4:	47b8      	blx	r7
  4013c6:	e7f1      	b.n	4013ac <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4013c8:	f04f 33ff 	mov.w	r3, #4294967295
  4013cc:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4013ce:	4b05      	ldr	r3, [pc, #20]	; (4013e4 <prvUnlockQueue+0xa0>)
  4013d0:	4798      	blx	r3
  4013d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4013d4:	00400f5d 	.word	0x00400f5d
  4013d8:	00401295 	.word	0x00401295
  4013dc:	00402461 	.word	0x00402461
  4013e0:	00402305 	.word	0x00402305
  4013e4:	00400fa9 	.word	0x00400fa9

004013e8 <xQueueGenericReset>:
{
  4013e8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4013ea:	b308      	cbz	r0, 401430 <xQueueGenericReset+0x48>
  4013ec:	4604      	mov	r4, r0
  4013ee:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4013f0:	4b1d      	ldr	r3, [pc, #116]	; (401468 <xQueueGenericReset+0x80>)
  4013f2:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4013f4:	6822      	ldr	r2, [r4, #0]
  4013f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4013f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013fa:	fb03 f301 	mul.w	r3, r3, r1
  4013fe:	18d0      	adds	r0, r2, r3
  401400:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401402:	2000      	movs	r0, #0
  401404:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401406:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401408:	1a5b      	subs	r3, r3, r1
  40140a:	4413      	add	r3, r2
  40140c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40140e:	f04f 33ff 	mov.w	r3, #4294967295
  401412:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401414:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401416:	b9fd      	cbnz	r5, 401458 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401418:	6923      	ldr	r3, [r4, #16]
  40141a:	b12b      	cbz	r3, 401428 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40141c:	f104 0010 	add.w	r0, r4, #16
  401420:	4b12      	ldr	r3, [pc, #72]	; (40146c <xQueueGenericReset+0x84>)
  401422:	4798      	blx	r3
  401424:	2801      	cmp	r0, #1
  401426:	d00e      	beq.n	401446 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401428:	4b11      	ldr	r3, [pc, #68]	; (401470 <xQueueGenericReset+0x88>)
  40142a:	4798      	blx	r3
}
  40142c:	2001      	movs	r0, #1
  40142e:	bd38      	pop	{r3, r4, r5, pc}
  401430:	f04f 0380 	mov.w	r3, #128	; 0x80
  401434:	b672      	cpsid	i
  401436:	f383 8811 	msr	BASEPRI, r3
  40143a:	f3bf 8f6f 	isb	sy
  40143e:	f3bf 8f4f 	dsb	sy
  401442:	b662      	cpsie	i
  401444:	e7fe      	b.n	401444 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40144a:	4b0a      	ldr	r3, [pc, #40]	; (401474 <xQueueGenericReset+0x8c>)
  40144c:	601a      	str	r2, [r3, #0]
  40144e:	f3bf 8f4f 	dsb	sy
  401452:	f3bf 8f6f 	isb	sy
  401456:	e7e7      	b.n	401428 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401458:	f104 0010 	add.w	r0, r4, #16
  40145c:	4d06      	ldr	r5, [pc, #24]	; (401478 <xQueueGenericReset+0x90>)
  40145e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401460:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401464:	47a8      	blx	r5
  401466:	e7df      	b.n	401428 <xQueueGenericReset+0x40>
  401468:	00400f5d 	.word	0x00400f5d
  40146c:	00402305 	.word	0x00402305
  401470:	00400fa9 	.word	0x00400fa9
  401474:	e000ed04 	.word	0xe000ed04
  401478:	00400e11 	.word	0x00400e11

0040147c <xQueueGenericCreate>:
{
  40147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40147e:	b950      	cbnz	r0, 401496 <xQueueGenericCreate+0x1a>
  401480:	f04f 0380 	mov.w	r3, #128	; 0x80
  401484:	b672      	cpsid	i
  401486:	f383 8811 	msr	BASEPRI, r3
  40148a:	f3bf 8f6f 	isb	sy
  40148e:	f3bf 8f4f 	dsb	sy
  401492:	b662      	cpsie	i
  401494:	e7fe      	b.n	401494 <xQueueGenericCreate+0x18>
  401496:	4606      	mov	r6, r0
  401498:	4617      	mov	r7, r2
  40149a:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  40149c:	b189      	cbz	r1, 4014c2 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40149e:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4014a2:	3059      	adds	r0, #89	; 0x59
  4014a4:	4b12      	ldr	r3, [pc, #72]	; (4014f0 <xQueueGenericCreate+0x74>)
  4014a6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4014a8:	4604      	mov	r4, r0
  4014aa:	b9e8      	cbnz	r0, 4014e8 <xQueueGenericCreate+0x6c>
  4014ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014b0:	b672      	cpsid	i
  4014b2:	f383 8811 	msr	BASEPRI, r3
  4014b6:	f3bf 8f6f 	isb	sy
  4014ba:	f3bf 8f4f 	dsb	sy
  4014be:	b662      	cpsie	i
  4014c0:	e7fe      	b.n	4014c0 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4014c2:	2058      	movs	r0, #88	; 0x58
  4014c4:	4b0a      	ldr	r3, [pc, #40]	; (4014f0 <xQueueGenericCreate+0x74>)
  4014c6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4014c8:	4604      	mov	r4, r0
  4014ca:	2800      	cmp	r0, #0
  4014cc:	d0ee      	beq.n	4014ac <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4014ce:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4014d0:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4014d2:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4014d4:	2101      	movs	r1, #1
  4014d6:	4620      	mov	r0, r4
  4014d8:	4b06      	ldr	r3, [pc, #24]	; (4014f4 <xQueueGenericCreate+0x78>)
  4014da:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4014dc:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4014e0:	2300      	movs	r3, #0
  4014e2:	6563      	str	r3, [r4, #84]	; 0x54
}
  4014e4:	4620      	mov	r0, r4
  4014e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4014e8:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4014ec:	6003      	str	r3, [r0, #0]
  4014ee:	e7ef      	b.n	4014d0 <xQueueGenericCreate+0x54>
  4014f0:	004011b9 	.word	0x004011b9
  4014f4:	004013e9 	.word	0x004013e9

004014f8 <xQueueGenericSend>:
{
  4014f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014fc:	b085      	sub	sp, #20
  4014fe:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401500:	b1b8      	cbz	r0, 401532 <xQueueGenericSend+0x3a>
  401502:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401504:	b301      	cbz	r1, 401548 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401506:	2b02      	cmp	r3, #2
  401508:	d02c      	beq.n	401564 <xQueueGenericSend+0x6c>
  40150a:	461d      	mov	r5, r3
  40150c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40150e:	4b66      	ldr	r3, [pc, #408]	; (4016a8 <xQueueGenericSend+0x1b0>)
  401510:	4798      	blx	r3
  401512:	2800      	cmp	r0, #0
  401514:	d134      	bne.n	401580 <xQueueGenericSend+0x88>
  401516:	9b01      	ldr	r3, [sp, #4]
  401518:	2b00      	cmp	r3, #0
  40151a:	d038      	beq.n	40158e <xQueueGenericSend+0x96>
  40151c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401520:	b672      	cpsid	i
  401522:	f383 8811 	msr	BASEPRI, r3
  401526:	f3bf 8f6f 	isb	sy
  40152a:	f3bf 8f4f 	dsb	sy
  40152e:	b662      	cpsie	i
  401530:	e7fe      	b.n	401530 <xQueueGenericSend+0x38>
  401532:	f04f 0380 	mov.w	r3, #128	; 0x80
  401536:	b672      	cpsid	i
  401538:	f383 8811 	msr	BASEPRI, r3
  40153c:	f3bf 8f6f 	isb	sy
  401540:	f3bf 8f4f 	dsb	sy
  401544:	b662      	cpsie	i
  401546:	e7fe      	b.n	401546 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401548:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40154a:	2a00      	cmp	r2, #0
  40154c:	d0db      	beq.n	401506 <xQueueGenericSend+0xe>
  40154e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401552:	b672      	cpsid	i
  401554:	f383 8811 	msr	BASEPRI, r3
  401558:	f3bf 8f6f 	isb	sy
  40155c:	f3bf 8f4f 	dsb	sy
  401560:	b662      	cpsie	i
  401562:	e7fe      	b.n	401562 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401564:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401566:	2a01      	cmp	r2, #1
  401568:	d0cf      	beq.n	40150a <xQueueGenericSend+0x12>
  40156a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40156e:	b672      	cpsid	i
  401570:	f383 8811 	msr	BASEPRI, r3
  401574:	f3bf 8f6f 	isb	sy
  401578:	f3bf 8f4f 	dsb	sy
  40157c:	b662      	cpsie	i
  40157e:	e7fe      	b.n	40157e <xQueueGenericSend+0x86>
  401580:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401582:	4e4a      	ldr	r6, [pc, #296]	; (4016ac <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401584:	f8df a150 	ldr.w	sl, [pc, #336]	; 4016d8 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401588:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4016b8 <xQueueGenericSend+0x1c0>
  40158c:	e042      	b.n	401614 <xQueueGenericSend+0x11c>
  40158e:	2700      	movs	r7, #0
  401590:	e7f7      	b.n	401582 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401592:	462a      	mov	r2, r5
  401594:	4641      	mov	r1, r8
  401596:	4620      	mov	r0, r4
  401598:	4b45      	ldr	r3, [pc, #276]	; (4016b0 <xQueueGenericSend+0x1b8>)
  40159a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  40159c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40159e:	b19b      	cbz	r3, 4015c8 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4015a0:	4629      	mov	r1, r5
  4015a2:	4620      	mov	r0, r4
  4015a4:	4b43      	ldr	r3, [pc, #268]	; (4016b4 <xQueueGenericSend+0x1bc>)
  4015a6:	4798      	blx	r3
  4015a8:	2801      	cmp	r0, #1
  4015aa:	d107      	bne.n	4015bc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4015ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015b0:	4b41      	ldr	r3, [pc, #260]	; (4016b8 <xQueueGenericSend+0x1c0>)
  4015b2:	601a      	str	r2, [r3, #0]
  4015b4:	f3bf 8f4f 	dsb	sy
  4015b8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4015bc:	4b3f      	ldr	r3, [pc, #252]	; (4016bc <xQueueGenericSend+0x1c4>)
  4015be:	4798      	blx	r3
				return pdPASS;
  4015c0:	2001      	movs	r0, #1
}
  4015c2:	b005      	add	sp, #20
  4015c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4015c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4015ca:	b173      	cbz	r3, 4015ea <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4015cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015d0:	4b3b      	ldr	r3, [pc, #236]	; (4016c0 <xQueueGenericSend+0x1c8>)
  4015d2:	4798      	blx	r3
  4015d4:	2801      	cmp	r0, #1
  4015d6:	d1f1      	bne.n	4015bc <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4015d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015dc:	4b36      	ldr	r3, [pc, #216]	; (4016b8 <xQueueGenericSend+0x1c0>)
  4015de:	601a      	str	r2, [r3, #0]
  4015e0:	f3bf 8f4f 	dsb	sy
  4015e4:	f3bf 8f6f 	isb	sy
  4015e8:	e7e8      	b.n	4015bc <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4015ea:	2800      	cmp	r0, #0
  4015ec:	d0e6      	beq.n	4015bc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4015ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015f2:	4b31      	ldr	r3, [pc, #196]	; (4016b8 <xQueueGenericSend+0x1c0>)
  4015f4:	601a      	str	r2, [r3, #0]
  4015f6:	f3bf 8f4f 	dsb	sy
  4015fa:	f3bf 8f6f 	isb	sy
  4015fe:	e7dd      	b.n	4015bc <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401600:	4b2e      	ldr	r3, [pc, #184]	; (4016bc <xQueueGenericSend+0x1c4>)
  401602:	4798      	blx	r3
					return errQUEUE_FULL;
  401604:	2000      	movs	r0, #0
  401606:	e7dc      	b.n	4015c2 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401608:	4620      	mov	r0, r4
  40160a:	4b2e      	ldr	r3, [pc, #184]	; (4016c4 <xQueueGenericSend+0x1cc>)
  40160c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40160e:	4b2e      	ldr	r3, [pc, #184]	; (4016c8 <xQueueGenericSend+0x1d0>)
  401610:	4798      	blx	r3
  401612:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401614:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401616:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401618:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40161a:	429a      	cmp	r2, r3
  40161c:	d3b9      	bcc.n	401592 <xQueueGenericSend+0x9a>
  40161e:	2d02      	cmp	r5, #2
  401620:	d0b7      	beq.n	401592 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401622:	9b01      	ldr	r3, [sp, #4]
  401624:	2b00      	cmp	r3, #0
  401626:	d0eb      	beq.n	401600 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401628:	b90f      	cbnz	r7, 40162e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40162a:	a802      	add	r0, sp, #8
  40162c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40162e:	4b23      	ldr	r3, [pc, #140]	; (4016bc <xQueueGenericSend+0x1c4>)
  401630:	4798      	blx	r3
		vTaskSuspendAll();
  401632:	4b26      	ldr	r3, [pc, #152]	; (4016cc <xQueueGenericSend+0x1d4>)
  401634:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401636:	47b0      	blx	r6
  401638:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40163a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40163e:	d101      	bne.n	401644 <xQueueGenericSend+0x14c>
  401640:	2300      	movs	r3, #0
  401642:	6463      	str	r3, [r4, #68]	; 0x44
  401644:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401646:	f1b3 3fff 	cmp.w	r3, #4294967295
  40164a:	d101      	bne.n	401650 <xQueueGenericSend+0x158>
  40164c:	2300      	movs	r3, #0
  40164e:	64a3      	str	r3, [r4, #72]	; 0x48
  401650:	4b1a      	ldr	r3, [pc, #104]	; (4016bc <xQueueGenericSend+0x1c4>)
  401652:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401654:	a901      	add	r1, sp, #4
  401656:	a802      	add	r0, sp, #8
  401658:	4b1d      	ldr	r3, [pc, #116]	; (4016d0 <xQueueGenericSend+0x1d8>)
  40165a:	4798      	blx	r3
  40165c:	b9e0      	cbnz	r0, 401698 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  40165e:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401660:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401664:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401666:	4b15      	ldr	r3, [pc, #84]	; (4016bc <xQueueGenericSend+0x1c4>)
  401668:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40166a:	45bb      	cmp	fp, r7
  40166c:	d1cc      	bne.n	401608 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40166e:	9901      	ldr	r1, [sp, #4]
  401670:	f104 0010 	add.w	r0, r4, #16
  401674:	4b17      	ldr	r3, [pc, #92]	; (4016d4 <xQueueGenericSend+0x1dc>)
  401676:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401678:	4620      	mov	r0, r4
  40167a:	4b12      	ldr	r3, [pc, #72]	; (4016c4 <xQueueGenericSend+0x1cc>)
  40167c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40167e:	4b12      	ldr	r3, [pc, #72]	; (4016c8 <xQueueGenericSend+0x1d0>)
  401680:	4798      	blx	r3
  401682:	2800      	cmp	r0, #0
  401684:	d1c5      	bne.n	401612 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401686:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40168a:	f8c9 3000 	str.w	r3, [r9]
  40168e:	f3bf 8f4f 	dsb	sy
  401692:	f3bf 8f6f 	isb	sy
  401696:	e7bc      	b.n	401612 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401698:	4620      	mov	r0, r4
  40169a:	4b0a      	ldr	r3, [pc, #40]	; (4016c4 <xQueueGenericSend+0x1cc>)
  40169c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40169e:	4b0a      	ldr	r3, [pc, #40]	; (4016c8 <xQueueGenericSend+0x1d0>)
  4016a0:	4798      	blx	r3
			return errQUEUE_FULL;
  4016a2:	2000      	movs	r0, #0
  4016a4:	e78d      	b.n	4015c2 <xQueueGenericSend+0xca>
  4016a6:	bf00      	nop
  4016a8:	0040246d 	.word	0x0040246d
  4016ac:	00400f5d 	.word	0x00400f5d
  4016b0:	0040120d 	.word	0x0040120d
  4016b4:	00401295 	.word	0x00401295
  4016b8:	e000ed04 	.word	0xe000ed04
  4016bc:	00400fa9 	.word	0x00400fa9
  4016c0:	00402305 	.word	0x00402305
  4016c4:	00401345 	.word	0x00401345
  4016c8:	00401ee9 	.word	0x00401ee9
  4016cc:	00401d81 	.word	0x00401d81
  4016d0:	004023cd 	.word	0x004023cd
  4016d4:	00402201 	.word	0x00402201
  4016d8:	0040239d 	.word	0x0040239d

004016dc <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4016dc:	2800      	cmp	r0, #0
  4016de:	d036      	beq.n	40174e <xQueueGenericSendFromISR+0x72>
{
  4016e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4016e4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016e6:	2900      	cmp	r1, #0
  4016e8:	d03c      	beq.n	401764 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4016ea:	2b02      	cmp	r3, #2
  4016ec:	d048      	beq.n	401780 <xQueueGenericSendFromISR+0xa4>
  4016ee:	461e      	mov	r6, r3
  4016f0:	4615      	mov	r5, r2
  4016f2:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4016f4:	4b35      	ldr	r3, [pc, #212]	; (4017cc <xQueueGenericSendFromISR+0xf0>)
  4016f6:	4798      	blx	r3
	__asm volatile
  4016f8:	f3ef 8711 	mrs	r7, BASEPRI
  4016fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401700:	b672      	cpsid	i
  401702:	f383 8811 	msr	BASEPRI, r3
  401706:	f3bf 8f6f 	isb	sy
  40170a:	f3bf 8f4f 	dsb	sy
  40170e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401710:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401712:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401714:	429a      	cmp	r2, r3
  401716:	d301      	bcc.n	40171c <xQueueGenericSendFromISR+0x40>
  401718:	2e02      	cmp	r6, #2
  40171a:	d14f      	bne.n	4017bc <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40171c:	4632      	mov	r2, r6
  40171e:	4641      	mov	r1, r8
  401720:	4620      	mov	r0, r4
  401722:	4b2b      	ldr	r3, [pc, #172]	; (4017d0 <xQueueGenericSendFromISR+0xf4>)
  401724:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401726:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401728:	f1b3 3fff 	cmp.w	r3, #4294967295
  40172c:	d141      	bne.n	4017b2 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  40172e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401730:	2b00      	cmp	r3, #0
  401732:	d033      	beq.n	40179c <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401734:	4631      	mov	r1, r6
  401736:	4620      	mov	r0, r4
  401738:	4b26      	ldr	r3, [pc, #152]	; (4017d4 <xQueueGenericSendFromISR+0xf8>)
  40173a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  40173c:	2d00      	cmp	r5, #0
  40173e:	d03f      	beq.n	4017c0 <xQueueGenericSendFromISR+0xe4>
  401740:	2801      	cmp	r0, #1
  401742:	d13d      	bne.n	4017c0 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401744:	6028      	str	r0, [r5, #0]
	__asm volatile
  401746:	f387 8811 	msr	BASEPRI, r7
}
  40174a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  40174e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401752:	b672      	cpsid	i
  401754:	f383 8811 	msr	BASEPRI, r3
  401758:	f3bf 8f6f 	isb	sy
  40175c:	f3bf 8f4f 	dsb	sy
  401760:	b662      	cpsie	i
  401762:	e7fe      	b.n	401762 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401764:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401766:	2800      	cmp	r0, #0
  401768:	d0bf      	beq.n	4016ea <xQueueGenericSendFromISR+0xe>
  40176a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40176e:	b672      	cpsid	i
  401770:	f383 8811 	msr	BASEPRI, r3
  401774:	f3bf 8f6f 	isb	sy
  401778:	f3bf 8f4f 	dsb	sy
  40177c:	b662      	cpsie	i
  40177e:	e7fe      	b.n	40177e <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401780:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401782:	2801      	cmp	r0, #1
  401784:	d0b3      	beq.n	4016ee <xQueueGenericSendFromISR+0x12>
  401786:	f04f 0380 	mov.w	r3, #128	; 0x80
  40178a:	b672      	cpsid	i
  40178c:	f383 8811 	msr	BASEPRI, r3
  401790:	f3bf 8f6f 	isb	sy
  401794:	f3bf 8f4f 	dsb	sy
  401798:	b662      	cpsie	i
  40179a:	e7fe      	b.n	40179a <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40179c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40179e:	b18b      	cbz	r3, 4017c4 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4017a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4017a4:	4b0c      	ldr	r3, [pc, #48]	; (4017d8 <xQueueGenericSendFromISR+0xfc>)
  4017a6:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4017a8:	b175      	cbz	r5, 4017c8 <xQueueGenericSendFromISR+0xec>
  4017aa:	b168      	cbz	r0, 4017c8 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4017ac:	2001      	movs	r0, #1
  4017ae:	6028      	str	r0, [r5, #0]
  4017b0:	e7c9      	b.n	401746 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  4017b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4017b4:	3301      	adds	r3, #1
  4017b6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4017b8:	2001      	movs	r0, #1
  4017ba:	e7c4      	b.n	401746 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  4017bc:	2000      	movs	r0, #0
  4017be:	e7c2      	b.n	401746 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  4017c0:	2001      	movs	r0, #1
  4017c2:	e7c0      	b.n	401746 <xQueueGenericSendFromISR+0x6a>
  4017c4:	2001      	movs	r0, #1
  4017c6:	e7be      	b.n	401746 <xQueueGenericSendFromISR+0x6a>
  4017c8:	2001      	movs	r0, #1
  4017ca:	e7bc      	b.n	401746 <xQueueGenericSendFromISR+0x6a>
  4017cc:	00401155 	.word	0x00401155
  4017d0:	0040120d 	.word	0x0040120d
  4017d4:	00401295 	.word	0x00401295
  4017d8:	00402305 	.word	0x00402305

004017dc <xQueueGenericReceive>:
{
  4017dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4017e0:	b084      	sub	sp, #16
  4017e2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4017e4:	b198      	cbz	r0, 40180e <xQueueGenericReceive+0x32>
  4017e6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4017e8:	b1e1      	cbz	r1, 401824 <xQueueGenericReceive+0x48>
  4017ea:	4698      	mov	r8, r3
  4017ec:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4017ee:	4b61      	ldr	r3, [pc, #388]	; (401974 <xQueueGenericReceive+0x198>)
  4017f0:	4798      	blx	r3
  4017f2:	bb28      	cbnz	r0, 401840 <xQueueGenericReceive+0x64>
  4017f4:	9b01      	ldr	r3, [sp, #4]
  4017f6:	b353      	cbz	r3, 40184e <xQueueGenericReceive+0x72>
  4017f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017fc:	b672      	cpsid	i
  4017fe:	f383 8811 	msr	BASEPRI, r3
  401802:	f3bf 8f6f 	isb	sy
  401806:	f3bf 8f4f 	dsb	sy
  40180a:	b662      	cpsie	i
  40180c:	e7fe      	b.n	40180c <xQueueGenericReceive+0x30>
  40180e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401812:	b672      	cpsid	i
  401814:	f383 8811 	msr	BASEPRI, r3
  401818:	f3bf 8f6f 	isb	sy
  40181c:	f3bf 8f4f 	dsb	sy
  401820:	b662      	cpsie	i
  401822:	e7fe      	b.n	401822 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401824:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401826:	2a00      	cmp	r2, #0
  401828:	d0df      	beq.n	4017ea <xQueueGenericReceive+0xe>
  40182a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40182e:	b672      	cpsid	i
  401830:	f383 8811 	msr	BASEPRI, r3
  401834:	f3bf 8f6f 	isb	sy
  401838:	f3bf 8f4f 	dsb	sy
  40183c:	b662      	cpsie	i
  40183e:	e7fe      	b.n	40183e <xQueueGenericReceive+0x62>
  401840:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401842:	4d4d      	ldr	r5, [pc, #308]	; (401978 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401844:	f8df a160 	ldr.w	sl, [pc, #352]	; 4019a8 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401848:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401988 <xQueueGenericReceive+0x1ac>
  40184c:	e04b      	b.n	4018e6 <xQueueGenericReceive+0x10a>
  40184e:	2600      	movs	r6, #0
  401850:	e7f7      	b.n	401842 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401852:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401854:	4639      	mov	r1, r7
  401856:	4620      	mov	r0, r4
  401858:	4b48      	ldr	r3, [pc, #288]	; (40197c <xQueueGenericReceive+0x1a0>)
  40185a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  40185c:	f1b8 0f00 	cmp.w	r8, #0
  401860:	d11d      	bne.n	40189e <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401864:	3b01      	subs	r3, #1
  401866:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401868:	6823      	ldr	r3, [r4, #0]
  40186a:	b913      	cbnz	r3, 401872 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  40186c:	4b44      	ldr	r3, [pc, #272]	; (401980 <xQueueGenericReceive+0x1a4>)
  40186e:	4798      	blx	r3
  401870:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401872:	6923      	ldr	r3, [r4, #16]
  401874:	b16b      	cbz	r3, 401892 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401876:	f104 0010 	add.w	r0, r4, #16
  40187a:	4b42      	ldr	r3, [pc, #264]	; (401984 <xQueueGenericReceive+0x1a8>)
  40187c:	4798      	blx	r3
  40187e:	2801      	cmp	r0, #1
  401880:	d107      	bne.n	401892 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401886:	4b40      	ldr	r3, [pc, #256]	; (401988 <xQueueGenericReceive+0x1ac>)
  401888:	601a      	str	r2, [r3, #0]
  40188a:	f3bf 8f4f 	dsb	sy
  40188e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401892:	4b3e      	ldr	r3, [pc, #248]	; (40198c <xQueueGenericReceive+0x1b0>)
  401894:	4798      	blx	r3
				return pdPASS;
  401896:	2001      	movs	r0, #1
}
  401898:	b004      	add	sp, #16
  40189a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40189e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4018a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4018a2:	2b00      	cmp	r3, #0
  4018a4:	d0f5      	beq.n	401892 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4018a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4018aa:	4b36      	ldr	r3, [pc, #216]	; (401984 <xQueueGenericReceive+0x1a8>)
  4018ac:	4798      	blx	r3
  4018ae:	2800      	cmp	r0, #0
  4018b0:	d0ef      	beq.n	401892 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4018b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018b6:	4b34      	ldr	r3, [pc, #208]	; (401988 <xQueueGenericReceive+0x1ac>)
  4018b8:	601a      	str	r2, [r3, #0]
  4018ba:	f3bf 8f4f 	dsb	sy
  4018be:	f3bf 8f6f 	isb	sy
  4018c2:	e7e6      	b.n	401892 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  4018c4:	4b31      	ldr	r3, [pc, #196]	; (40198c <xQueueGenericReceive+0x1b0>)
  4018c6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4018c8:	2000      	movs	r0, #0
  4018ca:	e7e5      	b.n	401898 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  4018cc:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4018ce:	6860      	ldr	r0, [r4, #4]
  4018d0:	4b2f      	ldr	r3, [pc, #188]	; (401990 <xQueueGenericReceive+0x1b4>)
  4018d2:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4018d4:	4b2d      	ldr	r3, [pc, #180]	; (40198c <xQueueGenericReceive+0x1b0>)
  4018d6:	4798      	blx	r3
  4018d8:	e030      	b.n	40193c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4018da:	4620      	mov	r0, r4
  4018dc:	4b2d      	ldr	r3, [pc, #180]	; (401994 <xQueueGenericReceive+0x1b8>)
  4018de:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4018e0:	4b2d      	ldr	r3, [pc, #180]	; (401998 <xQueueGenericReceive+0x1bc>)
  4018e2:	4798      	blx	r3
  4018e4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4018e6:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4018e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018ea:	2b00      	cmp	r3, #0
  4018ec:	d1b1      	bne.n	401852 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4018ee:	9b01      	ldr	r3, [sp, #4]
  4018f0:	2b00      	cmp	r3, #0
  4018f2:	d0e7      	beq.n	4018c4 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  4018f4:	b90e      	cbnz	r6, 4018fa <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  4018f6:	a802      	add	r0, sp, #8
  4018f8:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4018fa:	4b24      	ldr	r3, [pc, #144]	; (40198c <xQueueGenericReceive+0x1b0>)
  4018fc:	4798      	blx	r3
		vTaskSuspendAll();
  4018fe:	4b27      	ldr	r3, [pc, #156]	; (40199c <xQueueGenericReceive+0x1c0>)
  401900:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401902:	47a8      	blx	r5
  401904:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401906:	f1b3 3fff 	cmp.w	r3, #4294967295
  40190a:	d101      	bne.n	401910 <xQueueGenericReceive+0x134>
  40190c:	2300      	movs	r3, #0
  40190e:	6463      	str	r3, [r4, #68]	; 0x44
  401910:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401912:	f1b3 3fff 	cmp.w	r3, #4294967295
  401916:	d101      	bne.n	40191c <xQueueGenericReceive+0x140>
  401918:	2300      	movs	r3, #0
  40191a:	64a3      	str	r3, [r4, #72]	; 0x48
  40191c:	4b1b      	ldr	r3, [pc, #108]	; (40198c <xQueueGenericReceive+0x1b0>)
  40191e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401920:	a901      	add	r1, sp, #4
  401922:	a802      	add	r0, sp, #8
  401924:	4b1e      	ldr	r3, [pc, #120]	; (4019a0 <xQueueGenericReceive+0x1c4>)
  401926:	4798      	blx	r3
  401928:	b9e8      	cbnz	r0, 401966 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40192a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40192c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  40192e:	4b17      	ldr	r3, [pc, #92]	; (40198c <xQueueGenericReceive+0x1b0>)
  401930:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401932:	2e00      	cmp	r6, #0
  401934:	d1d1      	bne.n	4018da <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401936:	6823      	ldr	r3, [r4, #0]
  401938:	2b00      	cmp	r3, #0
  40193a:	d0c7      	beq.n	4018cc <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40193c:	9901      	ldr	r1, [sp, #4]
  40193e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401942:	4b18      	ldr	r3, [pc, #96]	; (4019a4 <xQueueGenericReceive+0x1c8>)
  401944:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401946:	4620      	mov	r0, r4
  401948:	4b12      	ldr	r3, [pc, #72]	; (401994 <xQueueGenericReceive+0x1b8>)
  40194a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40194c:	4b12      	ldr	r3, [pc, #72]	; (401998 <xQueueGenericReceive+0x1bc>)
  40194e:	4798      	blx	r3
  401950:	2800      	cmp	r0, #0
  401952:	d1c7      	bne.n	4018e4 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401958:	f8c9 3000 	str.w	r3, [r9]
  40195c:	f3bf 8f4f 	dsb	sy
  401960:	f3bf 8f6f 	isb	sy
  401964:	e7be      	b.n	4018e4 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401966:	4620      	mov	r0, r4
  401968:	4b0a      	ldr	r3, [pc, #40]	; (401994 <xQueueGenericReceive+0x1b8>)
  40196a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40196c:	4b0a      	ldr	r3, [pc, #40]	; (401998 <xQueueGenericReceive+0x1bc>)
  40196e:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401970:	2000      	movs	r0, #0
  401972:	e791      	b.n	401898 <xQueueGenericReceive+0xbc>
  401974:	0040246d 	.word	0x0040246d
  401978:	00400f5d 	.word	0x00400f5d
  40197c:	0040131d 	.word	0x0040131d
  401980:	004025ed 	.word	0x004025ed
  401984:	00402305 	.word	0x00402305
  401988:	e000ed04 	.word	0xe000ed04
  40198c:	00400fa9 	.word	0x00400fa9
  401990:	0040248d 	.word	0x0040248d
  401994:	00401345 	.word	0x00401345
  401998:	00401ee9 	.word	0x00401ee9
  40199c:	00401d81 	.word	0x00401d81
  4019a0:	004023cd 	.word	0x004023cd
  4019a4:	00402201 	.word	0x00402201
  4019a8:	0040239d 	.word	0x0040239d

004019ac <vQueueAddToRegistry>:
	{
  4019ac:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4019ae:	4b0b      	ldr	r3, [pc, #44]	; (4019dc <vQueueAddToRegistry+0x30>)
  4019b0:	681b      	ldr	r3, [r3, #0]
  4019b2:	b153      	cbz	r3, 4019ca <vQueueAddToRegistry+0x1e>
  4019b4:	2301      	movs	r3, #1
  4019b6:	4c09      	ldr	r4, [pc, #36]	; (4019dc <vQueueAddToRegistry+0x30>)
  4019b8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4019bc:	b132      	cbz	r2, 4019cc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4019be:	3301      	adds	r3, #1
  4019c0:	2b08      	cmp	r3, #8
  4019c2:	d1f9      	bne.n	4019b8 <vQueueAddToRegistry+0xc>
	}
  4019c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4019c8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4019ca:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4019cc:	4a03      	ldr	r2, [pc, #12]	; (4019dc <vQueueAddToRegistry+0x30>)
  4019ce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4019d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4019d6:	6058      	str	r0, [r3, #4]
				break;
  4019d8:	e7f4      	b.n	4019c4 <vQueueAddToRegistry+0x18>
  4019da:	bf00      	nop
  4019dc:	20400bd4 	.word	0x20400bd4

004019e0 <vQueueWaitForMessageRestricted>:
	{
  4019e0:	b570      	push	{r4, r5, r6, lr}
  4019e2:	4604      	mov	r4, r0
  4019e4:	460d      	mov	r5, r1
  4019e6:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4019e8:	4b0f      	ldr	r3, [pc, #60]	; (401a28 <vQueueWaitForMessageRestricted+0x48>)
  4019ea:	4798      	blx	r3
  4019ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019ee:	f1b3 3fff 	cmp.w	r3, #4294967295
  4019f2:	d00b      	beq.n	401a0c <vQueueWaitForMessageRestricted+0x2c>
  4019f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4019fa:	d00a      	beq.n	401a12 <vQueueWaitForMessageRestricted+0x32>
  4019fc:	4b0b      	ldr	r3, [pc, #44]	; (401a2c <vQueueWaitForMessageRestricted+0x4c>)
  4019fe:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401a00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401a02:	b14b      	cbz	r3, 401a18 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401a04:	4620      	mov	r0, r4
  401a06:	4b0a      	ldr	r3, [pc, #40]	; (401a30 <vQueueWaitForMessageRestricted+0x50>)
  401a08:	4798      	blx	r3
  401a0a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401a0c:	2300      	movs	r3, #0
  401a0e:	6463      	str	r3, [r4, #68]	; 0x44
  401a10:	e7f0      	b.n	4019f4 <vQueueWaitForMessageRestricted+0x14>
  401a12:	2300      	movs	r3, #0
  401a14:	64a3      	str	r3, [r4, #72]	; 0x48
  401a16:	e7f1      	b.n	4019fc <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401a18:	4632      	mov	r2, r6
  401a1a:	4629      	mov	r1, r5
  401a1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a20:	4b04      	ldr	r3, [pc, #16]	; (401a34 <vQueueWaitForMessageRestricted+0x54>)
  401a22:	4798      	blx	r3
  401a24:	e7ee      	b.n	401a04 <vQueueWaitForMessageRestricted+0x24>
  401a26:	bf00      	nop
  401a28:	00400f5d 	.word	0x00400f5d
  401a2c:	00400fa9 	.word	0x00400fa9
  401a30:	00401345 	.word	0x00401345
  401a34:	00402285 	.word	0x00402285

00401a38 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401a38:	4b08      	ldr	r3, [pc, #32]	; (401a5c <prvResetNextTaskUnblockTime+0x24>)
  401a3a:	681b      	ldr	r3, [r3, #0]
  401a3c:	681b      	ldr	r3, [r3, #0]
  401a3e:	b13b      	cbz	r3, 401a50 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401a40:	4b06      	ldr	r3, [pc, #24]	; (401a5c <prvResetNextTaskUnblockTime+0x24>)
  401a42:	681b      	ldr	r3, [r3, #0]
  401a44:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401a46:	68db      	ldr	r3, [r3, #12]
  401a48:	685a      	ldr	r2, [r3, #4]
  401a4a:	4b05      	ldr	r3, [pc, #20]	; (401a60 <prvResetNextTaskUnblockTime+0x28>)
  401a4c:	601a      	str	r2, [r3, #0]
  401a4e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401a50:	f04f 32ff 	mov.w	r2, #4294967295
  401a54:	4b02      	ldr	r3, [pc, #8]	; (401a60 <prvResetNextTaskUnblockTime+0x28>)
  401a56:	601a      	str	r2, [r3, #0]
  401a58:	4770      	bx	lr
  401a5a:	bf00      	nop
  401a5c:	20400a60 	.word	0x20400a60
  401a60:	20400b0c 	.word	0x20400b0c

00401a64 <prvAddCurrentTaskToDelayedList>:
{
  401a64:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401a66:	4b0f      	ldr	r3, [pc, #60]	; (401aa4 <prvAddCurrentTaskToDelayedList+0x40>)
  401a68:	681b      	ldr	r3, [r3, #0]
  401a6a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401a6c:	4b0e      	ldr	r3, [pc, #56]	; (401aa8 <prvAddCurrentTaskToDelayedList+0x44>)
  401a6e:	681b      	ldr	r3, [r3, #0]
  401a70:	4298      	cmp	r0, r3
  401a72:	d30e      	bcc.n	401a92 <prvAddCurrentTaskToDelayedList+0x2e>
  401a74:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401a76:	4b0d      	ldr	r3, [pc, #52]	; (401aac <prvAddCurrentTaskToDelayedList+0x48>)
  401a78:	6818      	ldr	r0, [r3, #0]
  401a7a:	4b0a      	ldr	r3, [pc, #40]	; (401aa4 <prvAddCurrentTaskToDelayedList+0x40>)
  401a7c:	6819      	ldr	r1, [r3, #0]
  401a7e:	3104      	adds	r1, #4
  401a80:	4b0b      	ldr	r3, [pc, #44]	; (401ab0 <prvAddCurrentTaskToDelayedList+0x4c>)
  401a82:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401a84:	4b0b      	ldr	r3, [pc, #44]	; (401ab4 <prvAddCurrentTaskToDelayedList+0x50>)
  401a86:	681b      	ldr	r3, [r3, #0]
  401a88:	429c      	cmp	r4, r3
  401a8a:	d201      	bcs.n	401a90 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401a8c:	4b09      	ldr	r3, [pc, #36]	; (401ab4 <prvAddCurrentTaskToDelayedList+0x50>)
  401a8e:	601c      	str	r4, [r3, #0]
  401a90:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401a92:	4b09      	ldr	r3, [pc, #36]	; (401ab8 <prvAddCurrentTaskToDelayedList+0x54>)
  401a94:	6818      	ldr	r0, [r3, #0]
  401a96:	4b03      	ldr	r3, [pc, #12]	; (401aa4 <prvAddCurrentTaskToDelayedList+0x40>)
  401a98:	6819      	ldr	r1, [r3, #0]
  401a9a:	3104      	adds	r1, #4
  401a9c:	4b04      	ldr	r3, [pc, #16]	; (401ab0 <prvAddCurrentTaskToDelayedList+0x4c>)
  401a9e:	4798      	blx	r3
  401aa0:	bd10      	pop	{r4, pc}
  401aa2:	bf00      	nop
  401aa4:	20400a5c 	.word	0x20400a5c
  401aa8:	20400b54 	.word	0x20400b54
  401aac:	20400a60 	.word	0x20400a60
  401ab0:	00400e45 	.word	0x00400e45
  401ab4:	20400b0c 	.word	0x20400b0c
  401ab8:	20400a64 	.word	0x20400a64

00401abc <xTaskGenericCreate>:
{
  401abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ac0:	b083      	sub	sp, #12
  401ac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401ac4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401ac8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401aca:	b160      	cbz	r0, 401ae6 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401acc:	2d04      	cmp	r5, #4
  401ace:	d915      	bls.n	401afc <xTaskGenericCreate+0x40>
  401ad0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ad4:	b672      	cpsid	i
  401ad6:	f383 8811 	msr	BASEPRI, r3
  401ada:	f3bf 8f6f 	isb	sy
  401ade:	f3bf 8f4f 	dsb	sy
  401ae2:	b662      	cpsie	i
  401ae4:	e7fe      	b.n	401ae4 <xTaskGenericCreate+0x28>
  401ae6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aea:	b672      	cpsid	i
  401aec:	f383 8811 	msr	BASEPRI, r3
  401af0:	f3bf 8f6f 	isb	sy
  401af4:	f3bf 8f4f 	dsb	sy
  401af8:	b662      	cpsie	i
  401afa:	e7fe      	b.n	401afa <xTaskGenericCreate+0x3e>
  401afc:	9001      	str	r0, [sp, #4]
  401afe:	4698      	mov	r8, r3
  401b00:	4691      	mov	r9, r2
  401b02:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b04:	b936      	cbnz	r6, 401b14 <xTaskGenericCreate+0x58>
  401b06:	0090      	lsls	r0, r2, #2
  401b08:	4b62      	ldr	r3, [pc, #392]	; (401c94 <xTaskGenericCreate+0x1d8>)
  401b0a:	4798      	blx	r3
		if( pxStack != NULL )
  401b0c:	4606      	mov	r6, r0
  401b0e:	2800      	cmp	r0, #0
  401b10:	f000 809e 	beq.w	401c50 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401b14:	2058      	movs	r0, #88	; 0x58
  401b16:	4b5f      	ldr	r3, [pc, #380]	; (401c94 <xTaskGenericCreate+0x1d8>)
  401b18:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401b1a:	4604      	mov	r4, r0
  401b1c:	2800      	cmp	r0, #0
  401b1e:	f000 8094 	beq.w	401c4a <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401b22:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401b24:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401b28:	21a5      	movs	r1, #165	; 0xa5
  401b2a:	4630      	mov	r0, r6
  401b2c:	4b5a      	ldr	r3, [pc, #360]	; (401c98 <xTaskGenericCreate+0x1dc>)
  401b2e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401b30:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401b34:	444e      	add	r6, r9
  401b36:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b38:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401b3c:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401b40:	783b      	ldrb	r3, [r7, #0]
  401b42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401b46:	783b      	ldrb	r3, [r7, #0]
  401b48:	2b00      	cmp	r3, #0
  401b4a:	f040 8084 	bne.w	401c56 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401b4e:	2700      	movs	r7, #0
  401b50:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401b54:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401b56:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401b58:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401b5a:	f104 0904 	add.w	r9, r4, #4
  401b5e:	4648      	mov	r0, r9
  401b60:	f8df b184 	ldr.w	fp, [pc, #388]	; 401ce8 <xTaskGenericCreate+0x22c>
  401b64:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401b66:	f104 0018 	add.w	r0, r4, #24
  401b6a:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401b6c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b6e:	f1c5 0305 	rsb	r3, r5, #5
  401b72:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401b74:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401b76:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401b78:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401b7c:	4642      	mov	r2, r8
  401b7e:	9901      	ldr	r1, [sp, #4]
  401b80:	4630      	mov	r0, r6
  401b82:	4b46      	ldr	r3, [pc, #280]	; (401c9c <xTaskGenericCreate+0x1e0>)
  401b84:	4798      	blx	r3
  401b86:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401b88:	f1ba 0f00 	cmp.w	sl, #0
  401b8c:	d001      	beq.n	401b92 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401b8e:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401b92:	4b43      	ldr	r3, [pc, #268]	; (401ca0 <xTaskGenericCreate+0x1e4>)
  401b94:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401b96:	4a43      	ldr	r2, [pc, #268]	; (401ca4 <xTaskGenericCreate+0x1e8>)
  401b98:	6813      	ldr	r3, [r2, #0]
  401b9a:	3301      	adds	r3, #1
  401b9c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401b9e:	4b42      	ldr	r3, [pc, #264]	; (401ca8 <xTaskGenericCreate+0x1ec>)
  401ba0:	681b      	ldr	r3, [r3, #0]
  401ba2:	2b00      	cmp	r3, #0
  401ba4:	d166      	bne.n	401c74 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401ba6:	4b40      	ldr	r3, [pc, #256]	; (401ca8 <xTaskGenericCreate+0x1ec>)
  401ba8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401baa:	6813      	ldr	r3, [r2, #0]
  401bac:	2b01      	cmp	r3, #1
  401bae:	d121      	bne.n	401bf4 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401bb0:	4f3e      	ldr	r7, [pc, #248]	; (401cac <xTaskGenericCreate+0x1f0>)
  401bb2:	4638      	mov	r0, r7
  401bb4:	4e3e      	ldr	r6, [pc, #248]	; (401cb0 <xTaskGenericCreate+0x1f4>)
  401bb6:	47b0      	blx	r6
  401bb8:	f107 0014 	add.w	r0, r7, #20
  401bbc:	47b0      	blx	r6
  401bbe:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401bc2:	47b0      	blx	r6
  401bc4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401bc8:	47b0      	blx	r6
  401bca:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401bce:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401bd0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 401cec <xTaskGenericCreate+0x230>
  401bd4:	4640      	mov	r0, r8
  401bd6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401bd8:	4f36      	ldr	r7, [pc, #216]	; (401cb4 <xTaskGenericCreate+0x1f8>)
  401bda:	4638      	mov	r0, r7
  401bdc:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401bde:	4836      	ldr	r0, [pc, #216]	; (401cb8 <xTaskGenericCreate+0x1fc>)
  401be0:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401be2:	4836      	ldr	r0, [pc, #216]	; (401cbc <xTaskGenericCreate+0x200>)
  401be4:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401be6:	4836      	ldr	r0, [pc, #216]	; (401cc0 <xTaskGenericCreate+0x204>)
  401be8:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401bea:	4b36      	ldr	r3, [pc, #216]	; (401cc4 <xTaskGenericCreate+0x208>)
  401bec:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401bf0:	4b35      	ldr	r3, [pc, #212]	; (401cc8 <xTaskGenericCreate+0x20c>)
  401bf2:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401bf4:	4a35      	ldr	r2, [pc, #212]	; (401ccc <xTaskGenericCreate+0x210>)
  401bf6:	6813      	ldr	r3, [r2, #0]
  401bf8:	3301      	adds	r3, #1
  401bfa:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401bfc:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401bfe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c00:	4a33      	ldr	r2, [pc, #204]	; (401cd0 <xTaskGenericCreate+0x214>)
  401c02:	6811      	ldr	r1, [r2, #0]
  401c04:	2301      	movs	r3, #1
  401c06:	4083      	lsls	r3, r0
  401c08:	430b      	orrs	r3, r1
  401c0a:	6013      	str	r3, [r2, #0]
  401c0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c10:	4649      	mov	r1, r9
  401c12:	4b26      	ldr	r3, [pc, #152]	; (401cac <xTaskGenericCreate+0x1f0>)
  401c14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401c18:	4b2e      	ldr	r3, [pc, #184]	; (401cd4 <xTaskGenericCreate+0x218>)
  401c1a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401c1c:	4b2e      	ldr	r3, [pc, #184]	; (401cd8 <xTaskGenericCreate+0x21c>)
  401c1e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401c20:	4b2e      	ldr	r3, [pc, #184]	; (401cdc <xTaskGenericCreate+0x220>)
  401c22:	681b      	ldr	r3, [r3, #0]
  401c24:	2b00      	cmp	r3, #0
  401c26:	d031      	beq.n	401c8c <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401c28:	4b1f      	ldr	r3, [pc, #124]	; (401ca8 <xTaskGenericCreate+0x1ec>)
  401c2a:	681b      	ldr	r3, [r3, #0]
  401c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c2e:	429d      	cmp	r5, r3
  401c30:	d92e      	bls.n	401c90 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c36:	4b2a      	ldr	r3, [pc, #168]	; (401ce0 <xTaskGenericCreate+0x224>)
  401c38:	601a      	str	r2, [r3, #0]
  401c3a:	f3bf 8f4f 	dsb	sy
  401c3e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401c42:	2001      	movs	r0, #1
}
  401c44:	b003      	add	sp, #12
  401c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401c4a:	4630      	mov	r0, r6
  401c4c:	4b25      	ldr	r3, [pc, #148]	; (401ce4 <xTaskGenericCreate+0x228>)
  401c4e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401c50:	f04f 30ff 	mov.w	r0, #4294967295
  401c54:	e7f6      	b.n	401c44 <xTaskGenericCreate+0x188>
  401c56:	463b      	mov	r3, r7
  401c58:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401c5c:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401c5e:	7859      	ldrb	r1, [r3, #1]
  401c60:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401c64:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401c68:	2900      	cmp	r1, #0
  401c6a:	f43f af70 	beq.w	401b4e <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401c6e:	42bb      	cmp	r3, r7
  401c70:	d1f5      	bne.n	401c5e <xTaskGenericCreate+0x1a2>
  401c72:	e76c      	b.n	401b4e <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401c74:	4b19      	ldr	r3, [pc, #100]	; (401cdc <xTaskGenericCreate+0x220>)
  401c76:	681b      	ldr	r3, [r3, #0]
  401c78:	2b00      	cmp	r3, #0
  401c7a:	d1bb      	bne.n	401bf4 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401c7c:	4b0a      	ldr	r3, [pc, #40]	; (401ca8 <xTaskGenericCreate+0x1ec>)
  401c7e:	681b      	ldr	r3, [r3, #0]
  401c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c82:	429d      	cmp	r5, r3
  401c84:	d3b6      	bcc.n	401bf4 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401c86:	4b08      	ldr	r3, [pc, #32]	; (401ca8 <xTaskGenericCreate+0x1ec>)
  401c88:	601c      	str	r4, [r3, #0]
  401c8a:	e7b3      	b.n	401bf4 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401c8c:	2001      	movs	r0, #1
  401c8e:	e7d9      	b.n	401c44 <xTaskGenericCreate+0x188>
  401c90:	2001      	movs	r0, #1
	return xReturn;
  401c92:	e7d7      	b.n	401c44 <xTaskGenericCreate+0x188>
  401c94:	004011b9 	.word	0x004011b9
  401c98:	00404881 	.word	0x00404881
  401c9c:	00400f11 	.word	0x00400f11
  401ca0:	00400f5d 	.word	0x00400f5d
  401ca4:	20400acc 	.word	0x20400acc
  401ca8:	20400a5c 	.word	0x20400a5c
  401cac:	20400a68 	.word	0x20400a68
  401cb0:	00400e11 	.word	0x00400e11
  401cb4:	20400af8 	.word	0x20400af8
  401cb8:	20400b14 	.word	0x20400b14
  401cbc:	20400b40 	.word	0x20400b40
  401cc0:	20400b2c 	.word	0x20400b2c
  401cc4:	20400a60 	.word	0x20400a60
  401cc8:	20400a64 	.word	0x20400a64
  401ccc:	20400ad8 	.word	0x20400ad8
  401cd0:	20400ae0 	.word	0x20400ae0
  401cd4:	00400e2d 	.word	0x00400e2d
  401cd8:	00400fa9 	.word	0x00400fa9
  401cdc:	20400b28 	.word	0x20400b28
  401ce0:	e000ed04 	.word	0xe000ed04
  401ce4:	004011e9 	.word	0x004011e9
  401ce8:	00400e27 	.word	0x00400e27
  401cec:	20400ae4 	.word	0x20400ae4

00401cf0 <vTaskStartScheduler>:
{
  401cf0:	b510      	push	{r4, lr}
  401cf2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401cf4:	2300      	movs	r3, #0
  401cf6:	9303      	str	r3, [sp, #12]
  401cf8:	9302      	str	r3, [sp, #8]
  401cfa:	9301      	str	r3, [sp, #4]
  401cfc:	9300      	str	r3, [sp, #0]
  401cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401d02:	4917      	ldr	r1, [pc, #92]	; (401d60 <vTaskStartScheduler+0x70>)
  401d04:	4817      	ldr	r0, [pc, #92]	; (401d64 <vTaskStartScheduler+0x74>)
  401d06:	4c18      	ldr	r4, [pc, #96]	; (401d68 <vTaskStartScheduler+0x78>)
  401d08:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401d0a:	2801      	cmp	r0, #1
  401d0c:	d00b      	beq.n	401d26 <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  401d0e:	bb20      	cbnz	r0, 401d5a <vTaskStartScheduler+0x6a>
  401d10:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d14:	b672      	cpsid	i
  401d16:	f383 8811 	msr	BASEPRI, r3
  401d1a:	f3bf 8f6f 	isb	sy
  401d1e:	f3bf 8f4f 	dsb	sy
  401d22:	b662      	cpsie	i
  401d24:	e7fe      	b.n	401d24 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  401d26:	4b11      	ldr	r3, [pc, #68]	; (401d6c <vTaskStartScheduler+0x7c>)
  401d28:	4798      	blx	r3
	if( xReturn == pdPASS )
  401d2a:	2801      	cmp	r0, #1
  401d2c:	d1ef      	bne.n	401d0e <vTaskStartScheduler+0x1e>
  401d2e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d32:	b672      	cpsid	i
  401d34:	f383 8811 	msr	BASEPRI, r3
  401d38:	f3bf 8f6f 	isb	sy
  401d3c:	f3bf 8f4f 	dsb	sy
  401d40:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401d42:	f04f 32ff 	mov.w	r2, #4294967295
  401d46:	4b0a      	ldr	r3, [pc, #40]	; (401d70 <vTaskStartScheduler+0x80>)
  401d48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401d4a:	2201      	movs	r2, #1
  401d4c:	4b09      	ldr	r3, [pc, #36]	; (401d74 <vTaskStartScheduler+0x84>)
  401d4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401d50:	2200      	movs	r2, #0
  401d52:	4b09      	ldr	r3, [pc, #36]	; (401d78 <vTaskStartScheduler+0x88>)
  401d54:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401d56:	4b09      	ldr	r3, [pc, #36]	; (401d7c <vTaskStartScheduler+0x8c>)
  401d58:	4798      	blx	r3
}
  401d5a:	b004      	add	sp, #16
  401d5c:	bd10      	pop	{r4, pc}
  401d5e:	bf00      	nop
  401d60:	0040911c 	.word	0x0040911c
  401d64:	00402099 	.word	0x00402099
  401d68:	00401abd 	.word	0x00401abd
  401d6c:	004026d9 	.word	0x004026d9
  401d70:	20400b0c 	.word	0x20400b0c
  401d74:	20400b28 	.word	0x20400b28
  401d78:	20400b54 	.word	0x20400b54
  401d7c:	00401091 	.word	0x00401091

00401d80 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401d80:	4a02      	ldr	r2, [pc, #8]	; (401d8c <vTaskSuspendAll+0xc>)
  401d82:	6813      	ldr	r3, [r2, #0]
  401d84:	3301      	adds	r3, #1
  401d86:	6013      	str	r3, [r2, #0]
  401d88:	4770      	bx	lr
  401d8a:	bf00      	nop
  401d8c:	20400ad4 	.word	0x20400ad4

00401d90 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401d90:	4b01      	ldr	r3, [pc, #4]	; (401d98 <xTaskGetTickCount+0x8>)
  401d92:	6818      	ldr	r0, [r3, #0]
}
  401d94:	4770      	bx	lr
  401d96:	bf00      	nop
  401d98:	20400b54 	.word	0x20400b54

00401d9c <xTaskIncrementTick>:
{
  401d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401da0:	4b42      	ldr	r3, [pc, #264]	; (401eac <xTaskIncrementTick+0x110>)
  401da2:	681b      	ldr	r3, [r3, #0]
  401da4:	2b00      	cmp	r3, #0
  401da6:	d178      	bne.n	401e9a <xTaskIncrementTick+0xfe>
		++xTickCount;
  401da8:	4b41      	ldr	r3, [pc, #260]	; (401eb0 <xTaskIncrementTick+0x114>)
  401daa:	681a      	ldr	r2, [r3, #0]
  401dac:	3201      	adds	r2, #1
  401dae:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401db0:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401db2:	b9d6      	cbnz	r6, 401dea <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  401db4:	4b3f      	ldr	r3, [pc, #252]	; (401eb4 <xTaskIncrementTick+0x118>)
  401db6:	681b      	ldr	r3, [r3, #0]
  401db8:	681b      	ldr	r3, [r3, #0]
  401dba:	b153      	cbz	r3, 401dd2 <xTaskIncrementTick+0x36>
  401dbc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dc0:	b672      	cpsid	i
  401dc2:	f383 8811 	msr	BASEPRI, r3
  401dc6:	f3bf 8f6f 	isb	sy
  401dca:	f3bf 8f4f 	dsb	sy
  401dce:	b662      	cpsie	i
  401dd0:	e7fe      	b.n	401dd0 <xTaskIncrementTick+0x34>
  401dd2:	4a38      	ldr	r2, [pc, #224]	; (401eb4 <xTaskIncrementTick+0x118>)
  401dd4:	6811      	ldr	r1, [r2, #0]
  401dd6:	4b38      	ldr	r3, [pc, #224]	; (401eb8 <xTaskIncrementTick+0x11c>)
  401dd8:	6818      	ldr	r0, [r3, #0]
  401dda:	6010      	str	r0, [r2, #0]
  401ddc:	6019      	str	r1, [r3, #0]
  401dde:	4a37      	ldr	r2, [pc, #220]	; (401ebc <xTaskIncrementTick+0x120>)
  401de0:	6813      	ldr	r3, [r2, #0]
  401de2:	3301      	adds	r3, #1
  401de4:	6013      	str	r3, [r2, #0]
  401de6:	4b36      	ldr	r3, [pc, #216]	; (401ec0 <xTaskIncrementTick+0x124>)
  401de8:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  401dea:	4b36      	ldr	r3, [pc, #216]	; (401ec4 <xTaskIncrementTick+0x128>)
  401dec:	681b      	ldr	r3, [r3, #0]
  401dee:	429e      	cmp	r6, r3
  401df0:	d218      	bcs.n	401e24 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  401df2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401df4:	4b34      	ldr	r3, [pc, #208]	; (401ec8 <xTaskIncrementTick+0x12c>)
  401df6:	681b      	ldr	r3, [r3, #0]
  401df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401dfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401dfe:	4a33      	ldr	r2, [pc, #204]	; (401ecc <xTaskIncrementTick+0x130>)
  401e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401e04:	2b02      	cmp	r3, #2
  401e06:	bf28      	it	cs
  401e08:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401e0a:	4b31      	ldr	r3, [pc, #196]	; (401ed0 <xTaskIncrementTick+0x134>)
  401e0c:	681b      	ldr	r3, [r3, #0]
  401e0e:	b90b      	cbnz	r3, 401e14 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  401e10:	4b30      	ldr	r3, [pc, #192]	; (401ed4 <xTaskIncrementTick+0x138>)
  401e12:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401e14:	4b30      	ldr	r3, [pc, #192]	; (401ed8 <xTaskIncrementTick+0x13c>)
  401e16:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401e18:	2b00      	cmp	r3, #0
}
  401e1a:	bf0c      	ite	eq
  401e1c:	4620      	moveq	r0, r4
  401e1e:	2001      	movne	r0, #1
  401e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e24:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401e26:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401eb4 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401e2a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401ee4 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  401e2e:	4f2b      	ldr	r7, [pc, #172]	; (401edc <xTaskIncrementTick+0x140>)
  401e30:	e01f      	b.n	401e72 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  401e32:	f04f 32ff 	mov.w	r2, #4294967295
  401e36:	4b23      	ldr	r3, [pc, #140]	; (401ec4 <xTaskIncrementTick+0x128>)
  401e38:	601a      	str	r2, [r3, #0]
						break;
  401e3a:	e7db      	b.n	401df4 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  401e3c:	4a21      	ldr	r2, [pc, #132]	; (401ec4 <xTaskIncrementTick+0x128>)
  401e3e:	6013      	str	r3, [r2, #0]
							break;
  401e40:	e7d8      	b.n	401df4 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e42:	f105 0018 	add.w	r0, r5, #24
  401e46:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  401e48:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401e4a:	683a      	ldr	r2, [r7, #0]
  401e4c:	2301      	movs	r3, #1
  401e4e:	4083      	lsls	r3, r0
  401e50:	4313      	orrs	r3, r2
  401e52:	603b      	str	r3, [r7, #0]
  401e54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e58:	4651      	mov	r1, sl
  401e5a:	4b1c      	ldr	r3, [pc, #112]	; (401ecc <xTaskIncrementTick+0x130>)
  401e5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401e60:	4b1f      	ldr	r3, [pc, #124]	; (401ee0 <xTaskIncrementTick+0x144>)
  401e62:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401e64:	4b18      	ldr	r3, [pc, #96]	; (401ec8 <xTaskIncrementTick+0x12c>)
  401e66:	681b      	ldr	r3, [r3, #0]
  401e68:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401e6c:	429a      	cmp	r2, r3
  401e6e:	bf28      	it	cs
  401e70:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401e72:	f8d9 3000 	ldr.w	r3, [r9]
  401e76:	681b      	ldr	r3, [r3, #0]
  401e78:	2b00      	cmp	r3, #0
  401e7a:	d0da      	beq.n	401e32 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401e7c:	f8d9 3000 	ldr.w	r3, [r9]
  401e80:	68db      	ldr	r3, [r3, #12]
  401e82:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401e84:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  401e86:	429e      	cmp	r6, r3
  401e88:	d3d8      	bcc.n	401e3c <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401e8a:	f105 0a04 	add.w	sl, r5, #4
  401e8e:	4650      	mov	r0, sl
  401e90:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401e92:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401e94:	2b00      	cmp	r3, #0
  401e96:	d1d4      	bne.n	401e42 <xTaskIncrementTick+0xa6>
  401e98:	e7d6      	b.n	401e48 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  401e9a:	4a0d      	ldr	r2, [pc, #52]	; (401ed0 <xTaskIncrementTick+0x134>)
  401e9c:	6813      	ldr	r3, [r2, #0]
  401e9e:	3301      	adds	r3, #1
  401ea0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401ea2:	4b0c      	ldr	r3, [pc, #48]	; (401ed4 <xTaskIncrementTick+0x138>)
  401ea4:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401ea6:	2400      	movs	r4, #0
  401ea8:	e7b4      	b.n	401e14 <xTaskIncrementTick+0x78>
  401eaa:	bf00      	nop
  401eac:	20400ad4 	.word	0x20400ad4
  401eb0:	20400b54 	.word	0x20400b54
  401eb4:	20400a60 	.word	0x20400a60
  401eb8:	20400a64 	.word	0x20400a64
  401ebc:	20400b10 	.word	0x20400b10
  401ec0:	00401a39 	.word	0x00401a39
  401ec4:	20400b0c 	.word	0x20400b0c
  401ec8:	20400a5c 	.word	0x20400a5c
  401ecc:	20400a68 	.word	0x20400a68
  401ed0:	20400ad0 	.word	0x20400ad0
  401ed4:	00402cb1 	.word	0x00402cb1
  401ed8:	20400b58 	.word	0x20400b58
  401edc:	20400ae0 	.word	0x20400ae0
  401ee0:	00400e2d 	.word	0x00400e2d
  401ee4:	00400e79 	.word	0x00400e79

00401ee8 <xTaskResumeAll>:
{
  401ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  401eec:	4b38      	ldr	r3, [pc, #224]	; (401fd0 <xTaskResumeAll+0xe8>)
  401eee:	681b      	ldr	r3, [r3, #0]
  401ef0:	b953      	cbnz	r3, 401f08 <xTaskResumeAll+0x20>
  401ef2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ef6:	b672      	cpsid	i
  401ef8:	f383 8811 	msr	BASEPRI, r3
  401efc:	f3bf 8f6f 	isb	sy
  401f00:	f3bf 8f4f 	dsb	sy
  401f04:	b662      	cpsie	i
  401f06:	e7fe      	b.n	401f06 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  401f08:	4b32      	ldr	r3, [pc, #200]	; (401fd4 <xTaskResumeAll+0xec>)
  401f0a:	4798      	blx	r3
		--uxSchedulerSuspended;
  401f0c:	4b30      	ldr	r3, [pc, #192]	; (401fd0 <xTaskResumeAll+0xe8>)
  401f0e:	681a      	ldr	r2, [r3, #0]
  401f10:	3a01      	subs	r2, #1
  401f12:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401f14:	681b      	ldr	r3, [r3, #0]
  401f16:	2b00      	cmp	r3, #0
  401f18:	d155      	bne.n	401fc6 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401f1a:	4b2f      	ldr	r3, [pc, #188]	; (401fd8 <xTaskResumeAll+0xf0>)
  401f1c:	681b      	ldr	r3, [r3, #0]
  401f1e:	2b00      	cmp	r3, #0
  401f20:	d132      	bne.n	401f88 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  401f22:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401f24:	4b2d      	ldr	r3, [pc, #180]	; (401fdc <xTaskResumeAll+0xf4>)
  401f26:	4798      	blx	r3
}
  401f28:	4620      	mov	r0, r4
  401f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401f2e:	68fb      	ldr	r3, [r7, #12]
  401f30:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401f32:	f104 0018 	add.w	r0, r4, #24
  401f36:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401f38:	f104 0804 	add.w	r8, r4, #4
  401f3c:	4640      	mov	r0, r8
  401f3e:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401f40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401f42:	682a      	ldr	r2, [r5, #0]
  401f44:	2301      	movs	r3, #1
  401f46:	4083      	lsls	r3, r0
  401f48:	4313      	orrs	r3, r2
  401f4a:	602b      	str	r3, [r5, #0]
  401f4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f50:	4641      	mov	r1, r8
  401f52:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401f56:	4b22      	ldr	r3, [pc, #136]	; (401fe0 <xTaskResumeAll+0xf8>)
  401f58:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401f5a:	4b22      	ldr	r3, [pc, #136]	; (401fe4 <xTaskResumeAll+0xfc>)
  401f5c:	681b      	ldr	r3, [r3, #0]
  401f5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f62:	429a      	cmp	r2, r3
  401f64:	d20c      	bcs.n	401f80 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401f66:	683b      	ldr	r3, [r7, #0]
  401f68:	2b00      	cmp	r3, #0
  401f6a:	d1e0      	bne.n	401f2e <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401f6c:	4b1e      	ldr	r3, [pc, #120]	; (401fe8 <xTaskResumeAll+0x100>)
  401f6e:	681b      	ldr	r3, [r3, #0]
  401f70:	b1db      	cbz	r3, 401faa <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401f72:	4b1d      	ldr	r3, [pc, #116]	; (401fe8 <xTaskResumeAll+0x100>)
  401f74:	681b      	ldr	r3, [r3, #0]
  401f76:	b1c3      	cbz	r3, 401faa <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401f78:	4e1c      	ldr	r6, [pc, #112]	; (401fec <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  401f7a:	4d1d      	ldr	r5, [pc, #116]	; (401ff0 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  401f7c:	4c1a      	ldr	r4, [pc, #104]	; (401fe8 <xTaskResumeAll+0x100>)
  401f7e:	e00e      	b.n	401f9e <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  401f80:	2201      	movs	r2, #1
  401f82:	4b1b      	ldr	r3, [pc, #108]	; (401ff0 <xTaskResumeAll+0x108>)
  401f84:	601a      	str	r2, [r3, #0]
  401f86:	e7ee      	b.n	401f66 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401f88:	4f1a      	ldr	r7, [pc, #104]	; (401ff4 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401f8a:	4e1b      	ldr	r6, [pc, #108]	; (401ff8 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  401f8c:	4d1b      	ldr	r5, [pc, #108]	; (401ffc <xTaskResumeAll+0x114>)
  401f8e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402004 <xTaskResumeAll+0x11c>
  401f92:	e7e8      	b.n	401f66 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  401f94:	6823      	ldr	r3, [r4, #0]
  401f96:	3b01      	subs	r3, #1
  401f98:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401f9a:	6823      	ldr	r3, [r4, #0]
  401f9c:	b12b      	cbz	r3, 401faa <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401f9e:	47b0      	blx	r6
  401fa0:	2800      	cmp	r0, #0
  401fa2:	d0f7      	beq.n	401f94 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  401fa4:	2301      	movs	r3, #1
  401fa6:	602b      	str	r3, [r5, #0]
  401fa8:	e7f4      	b.n	401f94 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  401faa:	4b11      	ldr	r3, [pc, #68]	; (401ff0 <xTaskResumeAll+0x108>)
  401fac:	681b      	ldr	r3, [r3, #0]
  401fae:	2b01      	cmp	r3, #1
  401fb0:	d10b      	bne.n	401fca <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  401fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fb6:	4b12      	ldr	r3, [pc, #72]	; (402000 <xTaskResumeAll+0x118>)
  401fb8:	601a      	str	r2, [r3, #0]
  401fba:	f3bf 8f4f 	dsb	sy
  401fbe:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401fc2:	2401      	movs	r4, #1
  401fc4:	e7ae      	b.n	401f24 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  401fc6:	2400      	movs	r4, #0
  401fc8:	e7ac      	b.n	401f24 <xTaskResumeAll+0x3c>
  401fca:	2400      	movs	r4, #0
  401fcc:	e7aa      	b.n	401f24 <xTaskResumeAll+0x3c>
  401fce:	bf00      	nop
  401fd0:	20400ad4 	.word	0x20400ad4
  401fd4:	00400f5d 	.word	0x00400f5d
  401fd8:	20400acc 	.word	0x20400acc
  401fdc:	00400fa9 	.word	0x00400fa9
  401fe0:	00400e2d 	.word	0x00400e2d
  401fe4:	20400a5c 	.word	0x20400a5c
  401fe8:	20400ad0 	.word	0x20400ad0
  401fec:	00401d9d 	.word	0x00401d9d
  401ff0:	20400b58 	.word	0x20400b58
  401ff4:	20400b14 	.word	0x20400b14
  401ff8:	00400e79 	.word	0x00400e79
  401ffc:	20400ae0 	.word	0x20400ae0
  402000:	e000ed04 	.word	0xe000ed04
  402004:	20400a68 	.word	0x20400a68

00402008 <vTaskDelay>:
	{
  402008:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40200a:	2800      	cmp	r0, #0
  40200c:	d029      	beq.n	402062 <vTaskDelay+0x5a>
  40200e:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402010:	4b18      	ldr	r3, [pc, #96]	; (402074 <vTaskDelay+0x6c>)
  402012:	681b      	ldr	r3, [r3, #0]
  402014:	b153      	cbz	r3, 40202c <vTaskDelay+0x24>
  402016:	f04f 0380 	mov.w	r3, #128	; 0x80
  40201a:	b672      	cpsid	i
  40201c:	f383 8811 	msr	BASEPRI, r3
  402020:	f3bf 8f6f 	isb	sy
  402024:	f3bf 8f4f 	dsb	sy
  402028:	b662      	cpsie	i
  40202a:	e7fe      	b.n	40202a <vTaskDelay+0x22>
			vTaskSuspendAll();
  40202c:	4b12      	ldr	r3, [pc, #72]	; (402078 <vTaskDelay+0x70>)
  40202e:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402030:	4b12      	ldr	r3, [pc, #72]	; (40207c <vTaskDelay+0x74>)
  402032:	681b      	ldr	r3, [r3, #0]
  402034:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402036:	4b12      	ldr	r3, [pc, #72]	; (402080 <vTaskDelay+0x78>)
  402038:	6818      	ldr	r0, [r3, #0]
  40203a:	3004      	adds	r0, #4
  40203c:	4b11      	ldr	r3, [pc, #68]	; (402084 <vTaskDelay+0x7c>)
  40203e:	4798      	blx	r3
  402040:	b948      	cbnz	r0, 402056 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402042:	4b0f      	ldr	r3, [pc, #60]	; (402080 <vTaskDelay+0x78>)
  402044:	681a      	ldr	r2, [r3, #0]
  402046:	4910      	ldr	r1, [pc, #64]	; (402088 <vTaskDelay+0x80>)
  402048:	680b      	ldr	r3, [r1, #0]
  40204a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40204c:	2201      	movs	r2, #1
  40204e:	4082      	lsls	r2, r0
  402050:	ea23 0302 	bic.w	r3, r3, r2
  402054:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402056:	4620      	mov	r0, r4
  402058:	4b0c      	ldr	r3, [pc, #48]	; (40208c <vTaskDelay+0x84>)
  40205a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40205c:	4b0c      	ldr	r3, [pc, #48]	; (402090 <vTaskDelay+0x88>)
  40205e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402060:	b938      	cbnz	r0, 402072 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402066:	4b0b      	ldr	r3, [pc, #44]	; (402094 <vTaskDelay+0x8c>)
  402068:	601a      	str	r2, [r3, #0]
  40206a:	f3bf 8f4f 	dsb	sy
  40206e:	f3bf 8f6f 	isb	sy
  402072:	bd10      	pop	{r4, pc}
  402074:	20400ad4 	.word	0x20400ad4
  402078:	00401d81 	.word	0x00401d81
  40207c:	20400b54 	.word	0x20400b54
  402080:	20400a5c 	.word	0x20400a5c
  402084:	00400e79 	.word	0x00400e79
  402088:	20400ae0 	.word	0x20400ae0
  40208c:	00401a65 	.word	0x00401a65
  402090:	00401ee9 	.word	0x00401ee9
  402094:	e000ed04 	.word	0xe000ed04

00402098 <prvIdleTask>:
{
  402098:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40209a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402124 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40209e:	4e19      	ldr	r6, [pc, #100]	; (402104 <prvIdleTask+0x6c>)
				taskYIELD();
  4020a0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402128 <prvIdleTask+0x90>
  4020a4:	e02a      	b.n	4020fc <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4020a6:	4b18      	ldr	r3, [pc, #96]	; (402108 <prvIdleTask+0x70>)
  4020a8:	681b      	ldr	r3, [r3, #0]
  4020aa:	2b01      	cmp	r3, #1
  4020ac:	d81e      	bhi.n	4020ec <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4020ae:	682b      	ldr	r3, [r5, #0]
  4020b0:	2b00      	cmp	r3, #0
  4020b2:	d0f8      	beq.n	4020a6 <prvIdleTask+0xe>
			vTaskSuspendAll();
  4020b4:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4020b6:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4020b8:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4020ba:	2c00      	cmp	r4, #0
  4020bc:	d0f7      	beq.n	4020ae <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4020be:	4b13      	ldr	r3, [pc, #76]	; (40210c <prvIdleTask+0x74>)
  4020c0:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4020c2:	68f3      	ldr	r3, [r6, #12]
  4020c4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4020c6:	1d20      	adds	r0, r4, #4
  4020c8:	4b11      	ldr	r3, [pc, #68]	; (402110 <prvIdleTask+0x78>)
  4020ca:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4020cc:	4a11      	ldr	r2, [pc, #68]	; (402114 <prvIdleTask+0x7c>)
  4020ce:	6813      	ldr	r3, [r2, #0]
  4020d0:	3b01      	subs	r3, #1
  4020d2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4020d4:	682b      	ldr	r3, [r5, #0]
  4020d6:	3b01      	subs	r3, #1
  4020d8:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4020da:	4b0f      	ldr	r3, [pc, #60]	; (402118 <prvIdleTask+0x80>)
  4020dc:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4020de:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4020e0:	f8df a048 	ldr.w	sl, [pc, #72]	; 40212c <prvIdleTask+0x94>
  4020e4:	47d0      	blx	sl
		vPortFree( pxTCB );
  4020e6:	4620      	mov	r0, r4
  4020e8:	47d0      	blx	sl
  4020ea:	e7e0      	b.n	4020ae <prvIdleTask+0x16>
				taskYIELD();
  4020ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4020f0:	f8c9 3000 	str.w	r3, [r9]
  4020f4:	f3bf 8f4f 	dsb	sy
  4020f8:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4020fc:	4d07      	ldr	r5, [pc, #28]	; (40211c <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4020fe:	4f08      	ldr	r7, [pc, #32]	; (402120 <prvIdleTask+0x88>)
  402100:	e7d5      	b.n	4020ae <prvIdleTask+0x16>
  402102:	bf00      	nop
  402104:	20400b40 	.word	0x20400b40
  402108:	20400a68 	.word	0x20400a68
  40210c:	00400f5d 	.word	0x00400f5d
  402110:	00400e79 	.word	0x00400e79
  402114:	20400acc 	.word	0x20400acc
  402118:	00400fa9 	.word	0x00400fa9
  40211c:	20400adc 	.word	0x20400adc
  402120:	00401ee9 	.word	0x00401ee9
  402124:	00401d81 	.word	0x00401d81
  402128:	e000ed04 	.word	0xe000ed04
  40212c:	004011e9 	.word	0x004011e9

00402130 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402130:	4b2d      	ldr	r3, [pc, #180]	; (4021e8 <vTaskSwitchContext+0xb8>)
  402132:	681b      	ldr	r3, [r3, #0]
  402134:	2b00      	cmp	r3, #0
  402136:	d12c      	bne.n	402192 <vTaskSwitchContext+0x62>
{
  402138:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40213a:	2200      	movs	r2, #0
  40213c:	4b2b      	ldr	r3, [pc, #172]	; (4021ec <vTaskSwitchContext+0xbc>)
  40213e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402140:	4b2b      	ldr	r3, [pc, #172]	; (4021f0 <vTaskSwitchContext+0xc0>)
  402142:	681b      	ldr	r3, [r3, #0]
  402144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402146:	681a      	ldr	r2, [r3, #0]
  402148:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40214c:	d103      	bne.n	402156 <vTaskSwitchContext+0x26>
  40214e:	685a      	ldr	r2, [r3, #4]
  402150:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402154:	d021      	beq.n	40219a <vTaskSwitchContext+0x6a>
  402156:	4b26      	ldr	r3, [pc, #152]	; (4021f0 <vTaskSwitchContext+0xc0>)
  402158:	6818      	ldr	r0, [r3, #0]
  40215a:	6819      	ldr	r1, [r3, #0]
  40215c:	3134      	adds	r1, #52	; 0x34
  40215e:	4b25      	ldr	r3, [pc, #148]	; (4021f4 <vTaskSwitchContext+0xc4>)
  402160:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402162:	4b25      	ldr	r3, [pc, #148]	; (4021f8 <vTaskSwitchContext+0xc8>)
  402164:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402166:	fab3 f383 	clz	r3, r3
  40216a:	b2db      	uxtb	r3, r3
  40216c:	f1c3 031f 	rsb	r3, r3, #31
  402170:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402174:	4a21      	ldr	r2, [pc, #132]	; (4021fc <vTaskSwitchContext+0xcc>)
  402176:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40217a:	b9ba      	cbnz	r2, 4021ac <vTaskSwitchContext+0x7c>
	__asm volatile
  40217c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402180:	b672      	cpsid	i
  402182:	f383 8811 	msr	BASEPRI, r3
  402186:	f3bf 8f6f 	isb	sy
  40218a:	f3bf 8f4f 	dsb	sy
  40218e:	b662      	cpsie	i
  402190:	e7fe      	b.n	402190 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402192:	2201      	movs	r2, #1
  402194:	4b15      	ldr	r3, [pc, #84]	; (4021ec <vTaskSwitchContext+0xbc>)
  402196:	601a      	str	r2, [r3, #0]
  402198:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40219a:	689a      	ldr	r2, [r3, #8]
  40219c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4021a0:	d1d9      	bne.n	402156 <vTaskSwitchContext+0x26>
  4021a2:	68db      	ldr	r3, [r3, #12]
  4021a4:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4021a8:	d1d5      	bne.n	402156 <vTaskSwitchContext+0x26>
  4021aa:	e7da      	b.n	402162 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4021ac:	4a13      	ldr	r2, [pc, #76]	; (4021fc <vTaskSwitchContext+0xcc>)
  4021ae:	0099      	lsls	r1, r3, #2
  4021b0:	18c8      	adds	r0, r1, r3
  4021b2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4021b6:	6844      	ldr	r4, [r0, #4]
  4021b8:	6864      	ldr	r4, [r4, #4]
  4021ba:	6044      	str	r4, [r0, #4]
  4021bc:	4419      	add	r1, r3
  4021be:	4602      	mov	r2, r0
  4021c0:	3208      	adds	r2, #8
  4021c2:	4294      	cmp	r4, r2
  4021c4:	d009      	beq.n	4021da <vTaskSwitchContext+0xaa>
  4021c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4021ca:	4a0c      	ldr	r2, [pc, #48]	; (4021fc <vTaskSwitchContext+0xcc>)
  4021cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4021d0:	685b      	ldr	r3, [r3, #4]
  4021d2:	68da      	ldr	r2, [r3, #12]
  4021d4:	4b06      	ldr	r3, [pc, #24]	; (4021f0 <vTaskSwitchContext+0xc0>)
  4021d6:	601a      	str	r2, [r3, #0]
  4021d8:	bd10      	pop	{r4, pc}
  4021da:	6860      	ldr	r0, [r4, #4]
  4021dc:	4a07      	ldr	r2, [pc, #28]	; (4021fc <vTaskSwitchContext+0xcc>)
  4021de:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4021e2:	6050      	str	r0, [r2, #4]
  4021e4:	e7ef      	b.n	4021c6 <vTaskSwitchContext+0x96>
  4021e6:	bf00      	nop
  4021e8:	20400ad4 	.word	0x20400ad4
  4021ec:	20400b58 	.word	0x20400b58
  4021f0:	20400a5c 	.word	0x20400a5c
  4021f4:	00402c99 	.word	0x00402c99
  4021f8:	20400ae0 	.word	0x20400ae0
  4021fc:	20400a68 	.word	0x20400a68

00402200 <vTaskPlaceOnEventList>:
{
  402200:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402202:	b1e0      	cbz	r0, 40223e <vTaskPlaceOnEventList+0x3e>
  402204:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402206:	4d17      	ldr	r5, [pc, #92]	; (402264 <vTaskPlaceOnEventList+0x64>)
  402208:	6829      	ldr	r1, [r5, #0]
  40220a:	3118      	adds	r1, #24
  40220c:	4b16      	ldr	r3, [pc, #88]	; (402268 <vTaskPlaceOnEventList+0x68>)
  40220e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402210:	6828      	ldr	r0, [r5, #0]
  402212:	3004      	adds	r0, #4
  402214:	4b15      	ldr	r3, [pc, #84]	; (40226c <vTaskPlaceOnEventList+0x6c>)
  402216:	4798      	blx	r3
  402218:	b940      	cbnz	r0, 40222c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40221a:	682a      	ldr	r2, [r5, #0]
  40221c:	4914      	ldr	r1, [pc, #80]	; (402270 <vTaskPlaceOnEventList+0x70>)
  40221e:	680b      	ldr	r3, [r1, #0]
  402220:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402222:	2201      	movs	r2, #1
  402224:	4082      	lsls	r2, r0
  402226:	ea23 0302 	bic.w	r3, r3, r2
  40222a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  40222c:	f1b4 3fff 	cmp.w	r4, #4294967295
  402230:	d010      	beq.n	402254 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402232:	4b10      	ldr	r3, [pc, #64]	; (402274 <vTaskPlaceOnEventList+0x74>)
  402234:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402236:	4420      	add	r0, r4
  402238:	4b0f      	ldr	r3, [pc, #60]	; (402278 <vTaskPlaceOnEventList+0x78>)
  40223a:	4798      	blx	r3
  40223c:	bd38      	pop	{r3, r4, r5, pc}
  40223e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402242:	b672      	cpsid	i
  402244:	f383 8811 	msr	BASEPRI, r3
  402248:	f3bf 8f6f 	isb	sy
  40224c:	f3bf 8f4f 	dsb	sy
  402250:	b662      	cpsie	i
  402252:	e7fe      	b.n	402252 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402254:	4b03      	ldr	r3, [pc, #12]	; (402264 <vTaskPlaceOnEventList+0x64>)
  402256:	6819      	ldr	r1, [r3, #0]
  402258:	3104      	adds	r1, #4
  40225a:	4808      	ldr	r0, [pc, #32]	; (40227c <vTaskPlaceOnEventList+0x7c>)
  40225c:	4b08      	ldr	r3, [pc, #32]	; (402280 <vTaskPlaceOnEventList+0x80>)
  40225e:	4798      	blx	r3
  402260:	bd38      	pop	{r3, r4, r5, pc}
  402262:	bf00      	nop
  402264:	20400a5c 	.word	0x20400a5c
  402268:	00400e45 	.word	0x00400e45
  40226c:	00400e79 	.word	0x00400e79
  402270:	20400ae0 	.word	0x20400ae0
  402274:	20400b54 	.word	0x20400b54
  402278:	00401a65 	.word	0x00401a65
  40227c:	20400b2c 	.word	0x20400b2c
  402280:	00400e2d 	.word	0x00400e2d

00402284 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402284:	b1e8      	cbz	r0, 4022c2 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402286:	b570      	push	{r4, r5, r6, lr}
  402288:	4615      	mov	r5, r2
  40228a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40228c:	4e16      	ldr	r6, [pc, #88]	; (4022e8 <vTaskPlaceOnEventListRestricted+0x64>)
  40228e:	6831      	ldr	r1, [r6, #0]
  402290:	3118      	adds	r1, #24
  402292:	4b16      	ldr	r3, [pc, #88]	; (4022ec <vTaskPlaceOnEventListRestricted+0x68>)
  402294:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402296:	6830      	ldr	r0, [r6, #0]
  402298:	3004      	adds	r0, #4
  40229a:	4b15      	ldr	r3, [pc, #84]	; (4022f0 <vTaskPlaceOnEventListRestricted+0x6c>)
  40229c:	4798      	blx	r3
  40229e:	b940      	cbnz	r0, 4022b2 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4022a0:	6832      	ldr	r2, [r6, #0]
  4022a2:	4914      	ldr	r1, [pc, #80]	; (4022f4 <vTaskPlaceOnEventListRestricted+0x70>)
  4022a4:	680b      	ldr	r3, [r1, #0]
  4022a6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4022a8:	2201      	movs	r2, #1
  4022aa:	4082      	lsls	r2, r0
  4022ac:	ea23 0302 	bic.w	r3, r3, r2
  4022b0:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4022b2:	2d01      	cmp	r5, #1
  4022b4:	d010      	beq.n	4022d8 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4022b6:	4b10      	ldr	r3, [pc, #64]	; (4022f8 <vTaskPlaceOnEventListRestricted+0x74>)
  4022b8:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4022ba:	4420      	add	r0, r4
  4022bc:	4b0f      	ldr	r3, [pc, #60]	; (4022fc <vTaskPlaceOnEventListRestricted+0x78>)
  4022be:	4798      	blx	r3
  4022c0:	bd70      	pop	{r4, r5, r6, pc}
  4022c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022c6:	b672      	cpsid	i
  4022c8:	f383 8811 	msr	BASEPRI, r3
  4022cc:	f3bf 8f6f 	isb	sy
  4022d0:	f3bf 8f4f 	dsb	sy
  4022d4:	b662      	cpsie	i
  4022d6:	e7fe      	b.n	4022d6 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4022d8:	4b03      	ldr	r3, [pc, #12]	; (4022e8 <vTaskPlaceOnEventListRestricted+0x64>)
  4022da:	6819      	ldr	r1, [r3, #0]
  4022dc:	3104      	adds	r1, #4
  4022de:	4808      	ldr	r0, [pc, #32]	; (402300 <vTaskPlaceOnEventListRestricted+0x7c>)
  4022e0:	4b02      	ldr	r3, [pc, #8]	; (4022ec <vTaskPlaceOnEventListRestricted+0x68>)
  4022e2:	4798      	blx	r3
  4022e4:	bd70      	pop	{r4, r5, r6, pc}
  4022e6:	bf00      	nop
  4022e8:	20400a5c 	.word	0x20400a5c
  4022ec:	00400e2d 	.word	0x00400e2d
  4022f0:	00400e79 	.word	0x00400e79
  4022f4:	20400ae0 	.word	0x20400ae0
  4022f8:	20400b54 	.word	0x20400b54
  4022fc:	00401a65 	.word	0x00401a65
  402300:	20400b2c 	.word	0x20400b2c

00402304 <xTaskRemoveFromEventList>:
{
  402304:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402306:	68c3      	ldr	r3, [r0, #12]
  402308:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40230a:	b324      	cbz	r4, 402356 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40230c:	f104 0518 	add.w	r5, r4, #24
  402310:	4628      	mov	r0, r5
  402312:	4b1a      	ldr	r3, [pc, #104]	; (40237c <xTaskRemoveFromEventList+0x78>)
  402314:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402316:	4b1a      	ldr	r3, [pc, #104]	; (402380 <xTaskRemoveFromEventList+0x7c>)
  402318:	681b      	ldr	r3, [r3, #0]
  40231a:	bb3b      	cbnz	r3, 40236c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40231c:	1d25      	adds	r5, r4, #4
  40231e:	4628      	mov	r0, r5
  402320:	4b16      	ldr	r3, [pc, #88]	; (40237c <xTaskRemoveFromEventList+0x78>)
  402322:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402324:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402326:	4a17      	ldr	r2, [pc, #92]	; (402384 <xTaskRemoveFromEventList+0x80>)
  402328:	6811      	ldr	r1, [r2, #0]
  40232a:	2301      	movs	r3, #1
  40232c:	4083      	lsls	r3, r0
  40232e:	430b      	orrs	r3, r1
  402330:	6013      	str	r3, [r2, #0]
  402332:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402336:	4629      	mov	r1, r5
  402338:	4b13      	ldr	r3, [pc, #76]	; (402388 <xTaskRemoveFromEventList+0x84>)
  40233a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40233e:	4b13      	ldr	r3, [pc, #76]	; (40238c <xTaskRemoveFromEventList+0x88>)
  402340:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402342:	4b13      	ldr	r3, [pc, #76]	; (402390 <xTaskRemoveFromEventList+0x8c>)
  402344:	681b      	ldr	r3, [r3, #0]
  402346:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40234a:	429a      	cmp	r2, r3
  40234c:	d913      	bls.n	402376 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40234e:	2001      	movs	r0, #1
  402350:	4b10      	ldr	r3, [pc, #64]	; (402394 <xTaskRemoveFromEventList+0x90>)
  402352:	6018      	str	r0, [r3, #0]
  402354:	bd38      	pop	{r3, r4, r5, pc}
  402356:	f04f 0380 	mov.w	r3, #128	; 0x80
  40235a:	b672      	cpsid	i
  40235c:	f383 8811 	msr	BASEPRI, r3
  402360:	f3bf 8f6f 	isb	sy
  402364:	f3bf 8f4f 	dsb	sy
  402368:	b662      	cpsie	i
  40236a:	e7fe      	b.n	40236a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40236c:	4629      	mov	r1, r5
  40236e:	480a      	ldr	r0, [pc, #40]	; (402398 <xTaskRemoveFromEventList+0x94>)
  402370:	4b06      	ldr	r3, [pc, #24]	; (40238c <xTaskRemoveFromEventList+0x88>)
  402372:	4798      	blx	r3
  402374:	e7e5      	b.n	402342 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402376:	2000      	movs	r0, #0
}
  402378:	bd38      	pop	{r3, r4, r5, pc}
  40237a:	bf00      	nop
  40237c:	00400e79 	.word	0x00400e79
  402380:	20400ad4 	.word	0x20400ad4
  402384:	20400ae0 	.word	0x20400ae0
  402388:	20400a68 	.word	0x20400a68
  40238c:	00400e2d 	.word	0x00400e2d
  402390:	20400a5c 	.word	0x20400a5c
  402394:	20400b58 	.word	0x20400b58
  402398:	20400b14 	.word	0x20400b14

0040239c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  40239c:	b130      	cbz	r0, 4023ac <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40239e:	4a09      	ldr	r2, [pc, #36]	; (4023c4 <vTaskSetTimeOutState+0x28>)
  4023a0:	6812      	ldr	r2, [r2, #0]
  4023a2:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4023a4:	4a08      	ldr	r2, [pc, #32]	; (4023c8 <vTaskSetTimeOutState+0x2c>)
  4023a6:	6812      	ldr	r2, [r2, #0]
  4023a8:	6042      	str	r2, [r0, #4]
  4023aa:	4770      	bx	lr
  4023ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023b0:	b672      	cpsid	i
  4023b2:	f383 8811 	msr	BASEPRI, r3
  4023b6:	f3bf 8f6f 	isb	sy
  4023ba:	f3bf 8f4f 	dsb	sy
  4023be:	b662      	cpsie	i
  4023c0:	e7fe      	b.n	4023c0 <vTaskSetTimeOutState+0x24>
  4023c2:	bf00      	nop
  4023c4:	20400b10 	.word	0x20400b10
  4023c8:	20400b54 	.word	0x20400b54

004023cc <xTaskCheckForTimeOut>:
{
  4023cc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  4023ce:	b1c0      	cbz	r0, 402402 <xTaskCheckForTimeOut+0x36>
  4023d0:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4023d2:	b309      	cbz	r1, 402418 <xTaskCheckForTimeOut+0x4c>
  4023d4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4023d6:	4b1d      	ldr	r3, [pc, #116]	; (40244c <xTaskCheckForTimeOut+0x80>)
  4023d8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4023da:	4b1d      	ldr	r3, [pc, #116]	; (402450 <xTaskCheckForTimeOut+0x84>)
  4023dc:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4023de:	682b      	ldr	r3, [r5, #0]
  4023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4023e4:	d02e      	beq.n	402444 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4023e6:	491b      	ldr	r1, [pc, #108]	; (402454 <xTaskCheckForTimeOut+0x88>)
  4023e8:	6809      	ldr	r1, [r1, #0]
  4023ea:	6820      	ldr	r0, [r4, #0]
  4023ec:	4288      	cmp	r0, r1
  4023ee:	d002      	beq.n	4023f6 <xTaskCheckForTimeOut+0x2a>
  4023f0:	6861      	ldr	r1, [r4, #4]
  4023f2:	428a      	cmp	r2, r1
  4023f4:	d228      	bcs.n	402448 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4023f6:	6861      	ldr	r1, [r4, #4]
  4023f8:	1a50      	subs	r0, r2, r1
  4023fa:	4283      	cmp	r3, r0
  4023fc:	d817      	bhi.n	40242e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  4023fe:	2401      	movs	r4, #1
  402400:	e01c      	b.n	40243c <xTaskCheckForTimeOut+0x70>
  402402:	f04f 0380 	mov.w	r3, #128	; 0x80
  402406:	b672      	cpsid	i
  402408:	f383 8811 	msr	BASEPRI, r3
  40240c:	f3bf 8f6f 	isb	sy
  402410:	f3bf 8f4f 	dsb	sy
  402414:	b662      	cpsie	i
  402416:	e7fe      	b.n	402416 <xTaskCheckForTimeOut+0x4a>
  402418:	f04f 0380 	mov.w	r3, #128	; 0x80
  40241c:	b672      	cpsid	i
  40241e:	f383 8811 	msr	BASEPRI, r3
  402422:	f3bf 8f6f 	isb	sy
  402426:	f3bf 8f4f 	dsb	sy
  40242a:	b662      	cpsie	i
  40242c:	e7fe      	b.n	40242c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40242e:	1a9b      	subs	r3, r3, r2
  402430:	440b      	add	r3, r1
  402432:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402434:	4620      	mov	r0, r4
  402436:	4b08      	ldr	r3, [pc, #32]	; (402458 <xTaskCheckForTimeOut+0x8c>)
  402438:	4798      	blx	r3
			xReturn = pdFALSE;
  40243a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40243c:	4b07      	ldr	r3, [pc, #28]	; (40245c <xTaskCheckForTimeOut+0x90>)
  40243e:	4798      	blx	r3
}
  402440:	4620      	mov	r0, r4
  402442:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402444:	2400      	movs	r4, #0
  402446:	e7f9      	b.n	40243c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402448:	2401      	movs	r4, #1
  40244a:	e7f7      	b.n	40243c <xTaskCheckForTimeOut+0x70>
  40244c:	00400f5d 	.word	0x00400f5d
  402450:	20400b54 	.word	0x20400b54
  402454:	20400b10 	.word	0x20400b10
  402458:	0040239d 	.word	0x0040239d
  40245c:	00400fa9 	.word	0x00400fa9

00402460 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402460:	2201      	movs	r2, #1
  402462:	4b01      	ldr	r3, [pc, #4]	; (402468 <vTaskMissedYield+0x8>)
  402464:	601a      	str	r2, [r3, #0]
  402466:	4770      	bx	lr
  402468:	20400b58 	.word	0x20400b58

0040246c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  40246c:	4b05      	ldr	r3, [pc, #20]	; (402484 <xTaskGetSchedulerState+0x18>)
  40246e:	681b      	ldr	r3, [r3, #0]
  402470:	b133      	cbz	r3, 402480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402472:	4b05      	ldr	r3, [pc, #20]	; (402488 <xTaskGetSchedulerState+0x1c>)
  402474:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402476:	2b00      	cmp	r3, #0
  402478:	bf0c      	ite	eq
  40247a:	2002      	moveq	r0, #2
  40247c:	2000      	movne	r0, #0
  40247e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402480:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402482:	4770      	bx	lr
  402484:	20400b28 	.word	0x20400b28
  402488:	20400ad4 	.word	0x20400ad4

0040248c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  40248c:	2800      	cmp	r0, #0
  40248e:	d044      	beq.n	40251a <vTaskPriorityInherit+0x8e>
	{
  402490:	b538      	push	{r3, r4, r5, lr}
  402492:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402494:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402496:	4921      	ldr	r1, [pc, #132]	; (40251c <vTaskPriorityInherit+0x90>)
  402498:	6809      	ldr	r1, [r1, #0]
  40249a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40249c:	428a      	cmp	r2, r1
  40249e:	d214      	bcs.n	4024ca <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4024a0:	6981      	ldr	r1, [r0, #24]
  4024a2:	2900      	cmp	r1, #0
  4024a4:	db05      	blt.n	4024b2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4024a6:	491d      	ldr	r1, [pc, #116]	; (40251c <vTaskPriorityInherit+0x90>)
  4024a8:	6809      	ldr	r1, [r1, #0]
  4024aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4024ac:	f1c1 0105 	rsb	r1, r1, #5
  4024b0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4024b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4024b6:	491a      	ldr	r1, [pc, #104]	; (402520 <vTaskPriorityInherit+0x94>)
  4024b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4024bc:	6961      	ldr	r1, [r4, #20]
  4024be:	4291      	cmp	r1, r2
  4024c0:	d004      	beq.n	4024cc <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4024c2:	4a16      	ldr	r2, [pc, #88]	; (40251c <vTaskPriorityInherit+0x90>)
  4024c4:	6812      	ldr	r2, [r2, #0]
  4024c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4024c8:	62e2      	str	r2, [r4, #44]	; 0x2c
  4024ca:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4024cc:	1d25      	adds	r5, r4, #4
  4024ce:	4628      	mov	r0, r5
  4024d0:	4b14      	ldr	r3, [pc, #80]	; (402524 <vTaskPriorityInherit+0x98>)
  4024d2:	4798      	blx	r3
  4024d4:	b970      	cbnz	r0, 4024f4 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4024d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4024d8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4024dc:	4a10      	ldr	r2, [pc, #64]	; (402520 <vTaskPriorityInherit+0x94>)
  4024de:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4024e2:	b93a      	cbnz	r2, 4024f4 <vTaskPriorityInherit+0x68>
  4024e4:	4810      	ldr	r0, [pc, #64]	; (402528 <vTaskPriorityInherit+0x9c>)
  4024e6:	6802      	ldr	r2, [r0, #0]
  4024e8:	2101      	movs	r1, #1
  4024ea:	fa01 f303 	lsl.w	r3, r1, r3
  4024ee:	ea22 0303 	bic.w	r3, r2, r3
  4024f2:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4024f4:	4b09      	ldr	r3, [pc, #36]	; (40251c <vTaskPriorityInherit+0x90>)
  4024f6:	681b      	ldr	r3, [r3, #0]
  4024f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4024fa:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4024fc:	4a0a      	ldr	r2, [pc, #40]	; (402528 <vTaskPriorityInherit+0x9c>)
  4024fe:	6811      	ldr	r1, [r2, #0]
  402500:	2301      	movs	r3, #1
  402502:	4083      	lsls	r3, r0
  402504:	430b      	orrs	r3, r1
  402506:	6013      	str	r3, [r2, #0]
  402508:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40250c:	4629      	mov	r1, r5
  40250e:	4b04      	ldr	r3, [pc, #16]	; (402520 <vTaskPriorityInherit+0x94>)
  402510:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402514:	4b05      	ldr	r3, [pc, #20]	; (40252c <vTaskPriorityInherit+0xa0>)
  402516:	4798      	blx	r3
  402518:	bd38      	pop	{r3, r4, r5, pc}
  40251a:	4770      	bx	lr
  40251c:	20400a5c 	.word	0x20400a5c
  402520:	20400a68 	.word	0x20400a68
  402524:	00400e79 	.word	0x00400e79
  402528:	20400ae0 	.word	0x20400ae0
  40252c:	00400e2d 	.word	0x00400e2d

00402530 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402530:	2800      	cmp	r0, #0
  402532:	d04d      	beq.n	4025d0 <xTaskPriorityDisinherit+0xa0>
	{
  402534:	b538      	push	{r3, r4, r5, lr}
  402536:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402538:	4a27      	ldr	r2, [pc, #156]	; (4025d8 <xTaskPriorityDisinherit+0xa8>)
  40253a:	6812      	ldr	r2, [r2, #0]
  40253c:	4290      	cmp	r0, r2
  40253e:	d00a      	beq.n	402556 <xTaskPriorityDisinherit+0x26>
  402540:	f04f 0380 	mov.w	r3, #128	; 0x80
  402544:	b672      	cpsid	i
  402546:	f383 8811 	msr	BASEPRI, r3
  40254a:	f3bf 8f6f 	isb	sy
  40254e:	f3bf 8f4f 	dsb	sy
  402552:	b662      	cpsie	i
  402554:	e7fe      	b.n	402554 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402556:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402558:	b952      	cbnz	r2, 402570 <xTaskPriorityDisinherit+0x40>
  40255a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40255e:	b672      	cpsid	i
  402560:	f383 8811 	msr	BASEPRI, r3
  402564:	f3bf 8f6f 	isb	sy
  402568:	f3bf 8f4f 	dsb	sy
  40256c:	b662      	cpsie	i
  40256e:	e7fe      	b.n	40256e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402570:	3a01      	subs	r2, #1
  402572:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402574:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402576:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402578:	4288      	cmp	r0, r1
  40257a:	d02b      	beq.n	4025d4 <xTaskPriorityDisinherit+0xa4>
  40257c:	bb52      	cbnz	r2, 4025d4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40257e:	1d25      	adds	r5, r4, #4
  402580:	4628      	mov	r0, r5
  402582:	4b16      	ldr	r3, [pc, #88]	; (4025dc <xTaskPriorityDisinherit+0xac>)
  402584:	4798      	blx	r3
  402586:	b968      	cbnz	r0, 4025a4 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402588:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40258a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40258e:	4b14      	ldr	r3, [pc, #80]	; (4025e0 <xTaskPriorityDisinherit+0xb0>)
  402590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402594:	b933      	cbnz	r3, 4025a4 <xTaskPriorityDisinherit+0x74>
  402596:	4813      	ldr	r0, [pc, #76]	; (4025e4 <xTaskPriorityDisinherit+0xb4>)
  402598:	6803      	ldr	r3, [r0, #0]
  40259a:	2201      	movs	r2, #1
  40259c:	408a      	lsls	r2, r1
  40259e:	ea23 0302 	bic.w	r3, r3, r2
  4025a2:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4025a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4025a6:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4025a8:	f1c0 0305 	rsb	r3, r0, #5
  4025ac:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4025ae:	4a0d      	ldr	r2, [pc, #52]	; (4025e4 <xTaskPriorityDisinherit+0xb4>)
  4025b0:	6811      	ldr	r1, [r2, #0]
  4025b2:	2401      	movs	r4, #1
  4025b4:	fa04 f300 	lsl.w	r3, r4, r0
  4025b8:	430b      	orrs	r3, r1
  4025ba:	6013      	str	r3, [r2, #0]
  4025bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4025c0:	4629      	mov	r1, r5
  4025c2:	4b07      	ldr	r3, [pc, #28]	; (4025e0 <xTaskPriorityDisinherit+0xb0>)
  4025c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4025c8:	4b07      	ldr	r3, [pc, #28]	; (4025e8 <xTaskPriorityDisinherit+0xb8>)
  4025ca:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4025cc:	4620      	mov	r0, r4
  4025ce:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4025d0:	2000      	movs	r0, #0
  4025d2:	4770      	bx	lr
  4025d4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4025d6:	bd38      	pop	{r3, r4, r5, pc}
  4025d8:	20400a5c 	.word	0x20400a5c
  4025dc:	00400e79 	.word	0x00400e79
  4025e0:	20400a68 	.word	0x20400a68
  4025e4:	20400ae0 	.word	0x20400ae0
  4025e8:	00400e2d 	.word	0x00400e2d

004025ec <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4025ec:	4b05      	ldr	r3, [pc, #20]	; (402604 <pvTaskIncrementMutexHeldCount+0x18>)
  4025ee:	681b      	ldr	r3, [r3, #0]
  4025f0:	b123      	cbz	r3, 4025fc <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4025f2:	4b04      	ldr	r3, [pc, #16]	; (402604 <pvTaskIncrementMutexHeldCount+0x18>)
  4025f4:	681a      	ldr	r2, [r3, #0]
  4025f6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4025f8:	3301      	adds	r3, #1
  4025fa:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4025fc:	4b01      	ldr	r3, [pc, #4]	; (402604 <pvTaskIncrementMutexHeldCount+0x18>)
  4025fe:	6818      	ldr	r0, [r3, #0]
	}
  402600:	4770      	bx	lr
  402602:	bf00      	nop
  402604:	20400a5c 	.word	0x20400a5c

00402608 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402608:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40260a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40260c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40260e:	4291      	cmp	r1, r2
  402610:	d80c      	bhi.n	40262c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402612:	1ad2      	subs	r2, r2, r3
  402614:	6983      	ldr	r3, [r0, #24]
  402616:	429a      	cmp	r2, r3
  402618:	d301      	bcc.n	40261e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40261a:	2001      	movs	r0, #1
  40261c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40261e:	1d01      	adds	r1, r0, #4
  402620:	4b09      	ldr	r3, [pc, #36]	; (402648 <prvInsertTimerInActiveList+0x40>)
  402622:	6818      	ldr	r0, [r3, #0]
  402624:	4b09      	ldr	r3, [pc, #36]	; (40264c <prvInsertTimerInActiveList+0x44>)
  402626:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402628:	2000      	movs	r0, #0
  40262a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40262c:	429a      	cmp	r2, r3
  40262e:	d203      	bcs.n	402638 <prvInsertTimerInActiveList+0x30>
  402630:	4299      	cmp	r1, r3
  402632:	d301      	bcc.n	402638 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402634:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402636:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402638:	1d01      	adds	r1, r0, #4
  40263a:	4b05      	ldr	r3, [pc, #20]	; (402650 <prvInsertTimerInActiveList+0x48>)
  40263c:	6818      	ldr	r0, [r3, #0]
  40263e:	4b03      	ldr	r3, [pc, #12]	; (40264c <prvInsertTimerInActiveList+0x44>)
  402640:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402642:	2000      	movs	r0, #0
  402644:	bd08      	pop	{r3, pc}
  402646:	bf00      	nop
  402648:	20400b60 	.word	0x20400b60
  40264c:	00400e45 	.word	0x00400e45
  402650:	20400b5c 	.word	0x20400b5c

00402654 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402654:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402656:	4b15      	ldr	r3, [pc, #84]	; (4026ac <prvCheckForValidListAndQueue+0x58>)
  402658:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40265a:	4b15      	ldr	r3, [pc, #84]	; (4026b0 <prvCheckForValidListAndQueue+0x5c>)
  40265c:	681b      	ldr	r3, [r3, #0]
  40265e:	b113      	cbz	r3, 402666 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402660:	4b14      	ldr	r3, [pc, #80]	; (4026b4 <prvCheckForValidListAndQueue+0x60>)
  402662:	4798      	blx	r3
  402664:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402666:	4d14      	ldr	r5, [pc, #80]	; (4026b8 <prvCheckForValidListAndQueue+0x64>)
  402668:	4628      	mov	r0, r5
  40266a:	4e14      	ldr	r6, [pc, #80]	; (4026bc <prvCheckForValidListAndQueue+0x68>)
  40266c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40266e:	4c14      	ldr	r4, [pc, #80]	; (4026c0 <prvCheckForValidListAndQueue+0x6c>)
  402670:	4620      	mov	r0, r4
  402672:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402674:	4b13      	ldr	r3, [pc, #76]	; (4026c4 <prvCheckForValidListAndQueue+0x70>)
  402676:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402678:	4b13      	ldr	r3, [pc, #76]	; (4026c8 <prvCheckForValidListAndQueue+0x74>)
  40267a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  40267c:	2200      	movs	r2, #0
  40267e:	2110      	movs	r1, #16
  402680:	2005      	movs	r0, #5
  402682:	4b12      	ldr	r3, [pc, #72]	; (4026cc <prvCheckForValidListAndQueue+0x78>)
  402684:	4798      	blx	r3
  402686:	4b0a      	ldr	r3, [pc, #40]	; (4026b0 <prvCheckForValidListAndQueue+0x5c>)
  402688:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  40268a:	b118      	cbz	r0, 402694 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  40268c:	4910      	ldr	r1, [pc, #64]	; (4026d0 <prvCheckForValidListAndQueue+0x7c>)
  40268e:	4b11      	ldr	r3, [pc, #68]	; (4026d4 <prvCheckForValidListAndQueue+0x80>)
  402690:	4798      	blx	r3
  402692:	e7e5      	b.n	402660 <prvCheckForValidListAndQueue+0xc>
  402694:	f04f 0380 	mov.w	r3, #128	; 0x80
  402698:	b672      	cpsid	i
  40269a:	f383 8811 	msr	BASEPRI, r3
  40269e:	f3bf 8f6f 	isb	sy
  4026a2:	f3bf 8f4f 	dsb	sy
  4026a6:	b662      	cpsie	i
  4026a8:	e7fe      	b.n	4026a8 <prvCheckForValidListAndQueue+0x54>
  4026aa:	bf00      	nop
  4026ac:	00400f5d 	.word	0x00400f5d
  4026b0:	20400b90 	.word	0x20400b90
  4026b4:	00400fa9 	.word	0x00400fa9
  4026b8:	20400b64 	.word	0x20400b64
  4026bc:	00400e11 	.word	0x00400e11
  4026c0:	20400b78 	.word	0x20400b78
  4026c4:	20400b5c 	.word	0x20400b5c
  4026c8:	20400b60 	.word	0x20400b60
  4026cc:	0040147d 	.word	0x0040147d
  4026d0:	00409124 	.word	0x00409124
  4026d4:	004019ad 	.word	0x004019ad

004026d8 <xTimerCreateTimerTask>:
{
  4026d8:	b510      	push	{r4, lr}
  4026da:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  4026dc:	4b0f      	ldr	r3, [pc, #60]	; (40271c <xTimerCreateTimerTask+0x44>)
  4026de:	4798      	blx	r3
	if( xTimerQueue != NULL )
  4026e0:	4b0f      	ldr	r3, [pc, #60]	; (402720 <xTimerCreateTimerTask+0x48>)
  4026e2:	681b      	ldr	r3, [r3, #0]
  4026e4:	b173      	cbz	r3, 402704 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4026e6:	2300      	movs	r3, #0
  4026e8:	9303      	str	r3, [sp, #12]
  4026ea:	9302      	str	r3, [sp, #8]
  4026ec:	9301      	str	r3, [sp, #4]
  4026ee:	2204      	movs	r2, #4
  4026f0:	9200      	str	r2, [sp, #0]
  4026f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4026f6:	490b      	ldr	r1, [pc, #44]	; (402724 <xTimerCreateTimerTask+0x4c>)
  4026f8:	480b      	ldr	r0, [pc, #44]	; (402728 <xTimerCreateTimerTask+0x50>)
  4026fa:	4c0c      	ldr	r4, [pc, #48]	; (40272c <xTimerCreateTimerTask+0x54>)
  4026fc:	47a0      	blx	r4
	configASSERT( xReturn );
  4026fe:	b108      	cbz	r0, 402704 <xTimerCreateTimerTask+0x2c>
}
  402700:	b004      	add	sp, #16
  402702:	bd10      	pop	{r4, pc}
  402704:	f04f 0380 	mov.w	r3, #128	; 0x80
  402708:	b672      	cpsid	i
  40270a:	f383 8811 	msr	BASEPRI, r3
  40270e:	f3bf 8f6f 	isb	sy
  402712:	f3bf 8f4f 	dsb	sy
  402716:	b662      	cpsie	i
  402718:	e7fe      	b.n	402718 <xTimerCreateTimerTask+0x40>
  40271a:	bf00      	nop
  40271c:	00402655 	.word	0x00402655
  402720:	20400b90 	.word	0x20400b90
  402724:	0040912c 	.word	0x0040912c
  402728:	00402859 	.word	0x00402859
  40272c:	00401abd 	.word	0x00401abd

00402730 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402730:	b1d8      	cbz	r0, 40276a <xTimerGenericCommand+0x3a>
{
  402732:	b530      	push	{r4, r5, lr}
  402734:	b085      	sub	sp, #20
  402736:	4615      	mov	r5, r2
  402738:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40273a:	4a15      	ldr	r2, [pc, #84]	; (402790 <xTimerGenericCommand+0x60>)
  40273c:	6810      	ldr	r0, [r2, #0]
  40273e:	b320      	cbz	r0, 40278a <xTimerGenericCommand+0x5a>
  402740:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402742:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402744:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402746:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402748:	2905      	cmp	r1, #5
  40274a:	dc19      	bgt.n	402780 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40274c:	4b11      	ldr	r3, [pc, #68]	; (402794 <xTimerGenericCommand+0x64>)
  40274e:	4798      	blx	r3
  402750:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402752:	f04f 0300 	mov.w	r3, #0
  402756:	bf0c      	ite	eq
  402758:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40275a:	461a      	movne	r2, r3
  40275c:	4669      	mov	r1, sp
  40275e:	480c      	ldr	r0, [pc, #48]	; (402790 <xTimerGenericCommand+0x60>)
  402760:	6800      	ldr	r0, [r0, #0]
  402762:	4c0d      	ldr	r4, [pc, #52]	; (402798 <xTimerGenericCommand+0x68>)
  402764:	47a0      	blx	r4
}
  402766:	b005      	add	sp, #20
  402768:	bd30      	pop	{r4, r5, pc}
  40276a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40276e:	b672      	cpsid	i
  402770:	f383 8811 	msr	BASEPRI, r3
  402774:	f3bf 8f6f 	isb	sy
  402778:	f3bf 8f4f 	dsb	sy
  40277c:	b662      	cpsie	i
  40277e:	e7fe      	b.n	40277e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402780:	2300      	movs	r3, #0
  402782:	4669      	mov	r1, sp
  402784:	4c05      	ldr	r4, [pc, #20]	; (40279c <xTimerGenericCommand+0x6c>)
  402786:	47a0      	blx	r4
  402788:	e7ed      	b.n	402766 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  40278a:	2000      	movs	r0, #0
	return xReturn;
  40278c:	e7eb      	b.n	402766 <xTimerGenericCommand+0x36>
  40278e:	bf00      	nop
  402790:	20400b90 	.word	0x20400b90
  402794:	0040246d 	.word	0x0040246d
  402798:	004014f9 	.word	0x004014f9
  40279c:	004016dd 	.word	0x004016dd

004027a0 <prvSampleTimeNow>:
{
  4027a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4027a4:	b082      	sub	sp, #8
  4027a6:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4027a8:	4b24      	ldr	r3, [pc, #144]	; (40283c <prvSampleTimeNow+0x9c>)
  4027aa:	4798      	blx	r3
  4027ac:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  4027ae:	4b24      	ldr	r3, [pc, #144]	; (402840 <prvSampleTimeNow+0xa0>)
  4027b0:	681b      	ldr	r3, [r3, #0]
  4027b2:	4298      	cmp	r0, r3
  4027b4:	d31b      	bcc.n	4027ee <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  4027b6:	2300      	movs	r3, #0
  4027b8:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  4027bc:	4b20      	ldr	r3, [pc, #128]	; (402840 <prvSampleTimeNow+0xa0>)
  4027be:	601f      	str	r7, [r3, #0]
}
  4027c0:	4638      	mov	r0, r7
  4027c2:	b002      	add	sp, #8
  4027c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4027c8:	2100      	movs	r1, #0
  4027ca:	9100      	str	r1, [sp, #0]
  4027cc:	460b      	mov	r3, r1
  4027ce:	4652      	mov	r2, sl
  4027d0:	4620      	mov	r0, r4
  4027d2:	4c1c      	ldr	r4, [pc, #112]	; (402844 <prvSampleTimeNow+0xa4>)
  4027d4:	47a0      	blx	r4
				configASSERT( xResult );
  4027d6:	b960      	cbnz	r0, 4027f2 <prvSampleTimeNow+0x52>
  4027d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027dc:	b672      	cpsid	i
  4027de:	f383 8811 	msr	BASEPRI, r3
  4027e2:	f3bf 8f6f 	isb	sy
  4027e6:	f3bf 8f4f 	dsb	sy
  4027ea:	b662      	cpsie	i
  4027ec:	e7fe      	b.n	4027ec <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4027ee:	4d16      	ldr	r5, [pc, #88]	; (402848 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4027f0:	4e16      	ldr	r6, [pc, #88]	; (40284c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4027f2:	682b      	ldr	r3, [r5, #0]
  4027f4:	681a      	ldr	r2, [r3, #0]
  4027f6:	b1c2      	cbz	r2, 40282a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4027f8:	68db      	ldr	r3, [r3, #12]
  4027fa:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4027fe:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402800:	f104 0904 	add.w	r9, r4, #4
  402804:	4648      	mov	r0, r9
  402806:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402808:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40280a:	4620      	mov	r0, r4
  40280c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40280e:	69e3      	ldr	r3, [r4, #28]
  402810:	2b01      	cmp	r3, #1
  402812:	d1ee      	bne.n	4027f2 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402814:	69a3      	ldr	r3, [r4, #24]
  402816:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402818:	459a      	cmp	sl, r3
  40281a:	d2d5      	bcs.n	4027c8 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40281c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40281e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402820:	4649      	mov	r1, r9
  402822:	6828      	ldr	r0, [r5, #0]
  402824:	4b0a      	ldr	r3, [pc, #40]	; (402850 <prvSampleTimeNow+0xb0>)
  402826:	4798      	blx	r3
  402828:	e7e3      	b.n	4027f2 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40282a:	4a0a      	ldr	r2, [pc, #40]	; (402854 <prvSampleTimeNow+0xb4>)
  40282c:	6810      	ldr	r0, [r2, #0]
  40282e:	4906      	ldr	r1, [pc, #24]	; (402848 <prvSampleTimeNow+0xa8>)
  402830:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402832:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402834:	2301      	movs	r3, #1
  402836:	f8c8 3000 	str.w	r3, [r8]
  40283a:	e7bf      	b.n	4027bc <prvSampleTimeNow+0x1c>
  40283c:	00401d91 	.word	0x00401d91
  402840:	20400b8c 	.word	0x20400b8c
  402844:	00402731 	.word	0x00402731
  402848:	20400b5c 	.word	0x20400b5c
  40284c:	00400e79 	.word	0x00400e79
  402850:	00400e45 	.word	0x00400e45
  402854:	20400b60 	.word	0x20400b60

00402858 <prvTimerTask>:
{
  402858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40285c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40285e:	4e75      	ldr	r6, [pc, #468]	; (402a34 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402860:	4f75      	ldr	r7, [pc, #468]	; (402a38 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402862:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402a60 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402866:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402a64 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40286a:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  40286c:	681a      	ldr	r2, [r3, #0]
  40286e:	2a00      	cmp	r2, #0
  402870:	f000 80ce 	beq.w	402a10 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402874:	68db      	ldr	r3, [r3, #12]
  402876:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402878:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40287a:	a804      	add	r0, sp, #16
  40287c:	4b6f      	ldr	r3, [pc, #444]	; (402a3c <prvTimerTask+0x1e4>)
  40287e:	4798      	blx	r3
  402880:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402882:	9b04      	ldr	r3, [sp, #16]
  402884:	2b00      	cmp	r3, #0
  402886:	d144      	bne.n	402912 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402888:	42a0      	cmp	r0, r4
  40288a:	d212      	bcs.n	4028b2 <prvTimerTask+0x5a>
  40288c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40288e:	1b61      	subs	r1, r4, r5
  402890:	4b6b      	ldr	r3, [pc, #428]	; (402a40 <prvTimerTask+0x1e8>)
  402892:	6818      	ldr	r0, [r3, #0]
  402894:	4b6b      	ldr	r3, [pc, #428]	; (402a44 <prvTimerTask+0x1ec>)
  402896:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402898:	4b6b      	ldr	r3, [pc, #428]	; (402a48 <prvTimerTask+0x1f0>)
  40289a:	4798      	blx	r3
  40289c:	2800      	cmp	r0, #0
  40289e:	d13a      	bne.n	402916 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4028a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4028a4:	f8c9 3000 	str.w	r3, [r9]
  4028a8:	f3bf 8f4f 	dsb	sy
  4028ac:	f3bf 8f6f 	isb	sy
  4028b0:	e031      	b.n	402916 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  4028b2:	4b65      	ldr	r3, [pc, #404]	; (402a48 <prvTimerTask+0x1f0>)
  4028b4:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4028b6:	6833      	ldr	r3, [r6, #0]
  4028b8:	68db      	ldr	r3, [r3, #12]
  4028ba:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4028be:	f10a 0004 	add.w	r0, sl, #4
  4028c2:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4028c4:	f8da 301c 	ldr.w	r3, [sl, #28]
  4028c8:	2b01      	cmp	r3, #1
  4028ca:	d004      	beq.n	4028d6 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4028cc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4028d0:	4650      	mov	r0, sl
  4028d2:	4798      	blx	r3
  4028d4:	e01f      	b.n	402916 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4028d6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4028da:	4623      	mov	r3, r4
  4028dc:	462a      	mov	r2, r5
  4028de:	4421      	add	r1, r4
  4028e0:	4650      	mov	r0, sl
  4028e2:	4d5a      	ldr	r5, [pc, #360]	; (402a4c <prvTimerTask+0x1f4>)
  4028e4:	47a8      	blx	r5
  4028e6:	2801      	cmp	r0, #1
  4028e8:	d1f0      	bne.n	4028cc <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4028ea:	2100      	movs	r1, #0
  4028ec:	9100      	str	r1, [sp, #0]
  4028ee:	460b      	mov	r3, r1
  4028f0:	4622      	mov	r2, r4
  4028f2:	4650      	mov	r0, sl
  4028f4:	4c56      	ldr	r4, [pc, #344]	; (402a50 <prvTimerTask+0x1f8>)
  4028f6:	47a0      	blx	r4
			configASSERT( xResult );
  4028f8:	2800      	cmp	r0, #0
  4028fa:	d1e7      	bne.n	4028cc <prvTimerTask+0x74>
  4028fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402900:	b672      	cpsid	i
  402902:	f383 8811 	msr	BASEPRI, r3
  402906:	f3bf 8f6f 	isb	sy
  40290a:	f3bf 8f4f 	dsb	sy
  40290e:	b662      	cpsie	i
  402910:	e7fe      	b.n	402910 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402912:	4b4d      	ldr	r3, [pc, #308]	; (402a48 <prvTimerTask+0x1f0>)
  402914:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402916:	4d4a      	ldr	r5, [pc, #296]	; (402a40 <prvTimerTask+0x1e8>)
  402918:	4c4e      	ldr	r4, [pc, #312]	; (402a54 <prvTimerTask+0x1fc>)
  40291a:	e006      	b.n	40292a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40291c:	9907      	ldr	r1, [sp, #28]
  40291e:	9806      	ldr	r0, [sp, #24]
  402920:	9b05      	ldr	r3, [sp, #20]
  402922:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402924:	9b04      	ldr	r3, [sp, #16]
  402926:	2b00      	cmp	r3, #0
  402928:	da09      	bge.n	40293e <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40292a:	2300      	movs	r3, #0
  40292c:	461a      	mov	r2, r3
  40292e:	a904      	add	r1, sp, #16
  402930:	6828      	ldr	r0, [r5, #0]
  402932:	47a0      	blx	r4
  402934:	2800      	cmp	r0, #0
  402936:	d098      	beq.n	40286a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402938:	9b04      	ldr	r3, [sp, #16]
  40293a:	2b00      	cmp	r3, #0
  40293c:	dbee      	blt.n	40291c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40293e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402942:	f8da 3014 	ldr.w	r3, [sl, #20]
  402946:	b113      	cbz	r3, 40294e <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402948:	f10a 0004 	add.w	r0, sl, #4
  40294c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40294e:	a803      	add	r0, sp, #12
  402950:	4b3a      	ldr	r3, [pc, #232]	; (402a3c <prvTimerTask+0x1e4>)
  402952:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402954:	9b04      	ldr	r3, [sp, #16]
  402956:	2b09      	cmp	r3, #9
  402958:	d8e7      	bhi.n	40292a <prvTimerTask+0xd2>
  40295a:	a201      	add	r2, pc, #4	; (adr r2, 402960 <prvTimerTask+0x108>)
  40295c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402960:	00402989 	.word	0x00402989
  402964:	00402989 	.word	0x00402989
  402968:	00402989 	.word	0x00402989
  40296c:	0040292b 	.word	0x0040292b
  402970:	004029dd 	.word	0x004029dd
  402974:	00402a09 	.word	0x00402a09
  402978:	00402989 	.word	0x00402989
  40297c:	00402989 	.word	0x00402989
  402980:	0040292b 	.word	0x0040292b
  402984:	004029dd 	.word	0x004029dd
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402988:	9c05      	ldr	r4, [sp, #20]
  40298a:	f8da 1018 	ldr.w	r1, [sl, #24]
  40298e:	4623      	mov	r3, r4
  402990:	4602      	mov	r2, r0
  402992:	4421      	add	r1, r4
  402994:	4650      	mov	r0, sl
  402996:	4c2d      	ldr	r4, [pc, #180]	; (402a4c <prvTimerTask+0x1f4>)
  402998:	47a0      	blx	r4
  40299a:	2801      	cmp	r0, #1
  40299c:	d1bc      	bne.n	402918 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40299e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4029a2:	4650      	mov	r0, sl
  4029a4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4029a6:	f8da 301c 	ldr.w	r3, [sl, #28]
  4029aa:	2b01      	cmp	r3, #1
  4029ac:	d1b4      	bne.n	402918 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4029ae:	f8da 2018 	ldr.w	r2, [sl, #24]
  4029b2:	2100      	movs	r1, #0
  4029b4:	9100      	str	r1, [sp, #0]
  4029b6:	460b      	mov	r3, r1
  4029b8:	9805      	ldr	r0, [sp, #20]
  4029ba:	4402      	add	r2, r0
  4029bc:	4650      	mov	r0, sl
  4029be:	4c24      	ldr	r4, [pc, #144]	; (402a50 <prvTimerTask+0x1f8>)
  4029c0:	47a0      	blx	r4
							configASSERT( xResult );
  4029c2:	2800      	cmp	r0, #0
  4029c4:	d1a8      	bne.n	402918 <prvTimerTask+0xc0>
  4029c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029ca:	b672      	cpsid	i
  4029cc:	f383 8811 	msr	BASEPRI, r3
  4029d0:	f3bf 8f6f 	isb	sy
  4029d4:	f3bf 8f4f 	dsb	sy
  4029d8:	b662      	cpsie	i
  4029da:	e7fe      	b.n	4029da <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4029dc:	9905      	ldr	r1, [sp, #20]
  4029de:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4029e2:	b131      	cbz	r1, 4029f2 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4029e4:	4603      	mov	r3, r0
  4029e6:	4602      	mov	r2, r0
  4029e8:	4401      	add	r1, r0
  4029ea:	4650      	mov	r0, sl
  4029ec:	4c17      	ldr	r4, [pc, #92]	; (402a4c <prvTimerTask+0x1f4>)
  4029ee:	47a0      	blx	r4
  4029f0:	e792      	b.n	402918 <prvTimerTask+0xc0>
  4029f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029f6:	b672      	cpsid	i
  4029f8:	f383 8811 	msr	BASEPRI, r3
  4029fc:	f3bf 8f6f 	isb	sy
  402a00:	f3bf 8f4f 	dsb	sy
  402a04:	b662      	cpsie	i
  402a06:	e7fe      	b.n	402a06 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402a08:	4650      	mov	r0, sl
  402a0a:	4b13      	ldr	r3, [pc, #76]	; (402a58 <prvTimerTask+0x200>)
  402a0c:	4798      	blx	r3
  402a0e:	e783      	b.n	402918 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402a10:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402a12:	a804      	add	r0, sp, #16
  402a14:	4b09      	ldr	r3, [pc, #36]	; (402a3c <prvTimerTask+0x1e4>)
  402a16:	4798      	blx	r3
  402a18:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402a1a:	9b04      	ldr	r3, [sp, #16]
  402a1c:	2b00      	cmp	r3, #0
  402a1e:	f47f af78 	bne.w	402912 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402a22:	4b0e      	ldr	r3, [pc, #56]	; (402a5c <prvTimerTask+0x204>)
  402a24:	681b      	ldr	r3, [r3, #0]
  402a26:	681a      	ldr	r2, [r3, #0]
  402a28:	fab2 f282 	clz	r2, r2
  402a2c:	0952      	lsrs	r2, r2, #5
  402a2e:	2400      	movs	r4, #0
  402a30:	e72d      	b.n	40288e <prvTimerTask+0x36>
  402a32:	bf00      	nop
  402a34:	20400b5c 	.word	0x20400b5c
  402a38:	00401d81 	.word	0x00401d81
  402a3c:	004027a1 	.word	0x004027a1
  402a40:	20400b90 	.word	0x20400b90
  402a44:	004019e1 	.word	0x004019e1
  402a48:	00401ee9 	.word	0x00401ee9
  402a4c:	00402609 	.word	0x00402609
  402a50:	00402731 	.word	0x00402731
  402a54:	004017dd 	.word	0x004017dd
  402a58:	004011e9 	.word	0x004011e9
  402a5c:	20400b60 	.word	0x20400b60
  402a60:	e000ed04 	.word	0xe000ed04
  402a64:	00400e79 	.word	0x00400e79

00402a68 <task_house_down>:

/************************************************************************/
/* TASKS                                                                */
/************************************************************************/

static void task_house_down(void *pvParameters) {
  402a68:	b580      	push	{r7, lr}
	pmc_enable_periph_clk(LED_1_PIO_ID);
  402a6a:	200a      	movs	r0, #10
  402a6c:	4b14      	ldr	r3, [pc, #80]	; (402ac0 <task_house_down+0x58>)
  402a6e:	4798      	blx	r3
	pio_configure(LED_1_PIO, PIO_OUTPUT_0, LED_1_IDX_MASK, PIO_DEFAULT);
  402a70:	4c14      	ldr	r4, [pc, #80]	; (402ac4 <task_house_down+0x5c>)
  402a72:	2300      	movs	r3, #0
  402a74:	2201      	movs	r2, #1
  402a76:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402a7a:	4620      	mov	r0, r4
  402a7c:	4d12      	ldr	r5, [pc, #72]	; (402ac8 <task_house_down+0x60>)
  402a7e:	47a8      	blx	r5
	pio_set(LED_1_PIO, LED_1_IDX_MASK);
  402a80:	2101      	movs	r1, #1
  402a82:	4620      	mov	r0, r4
  402a84:	4b11      	ldr	r3, [pc, #68]	; (402acc <task_house_down+0x64>)
  402a86:	4798      	blx	r3

	for (;;)  {
		if (xSemaphoreTake(xSemaphoreDown, 1)) {
  402a88:	4f11      	ldr	r7, [pc, #68]	; (402ad0 <task_house_down+0x68>)
  402a8a:	2401      	movs	r4, #1
			printf("Cai \n");

			pio_clear(LED_1_PIO, LED_1_IDX_MASK);
  402a8c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 402ac4 <task_house_down+0x5c>
		if (xSemaphoreTake(xSemaphoreDown, 1)) {
  402a90:	2600      	movs	r6, #0
  402a92:	4d10      	ldr	r5, [pc, #64]	; (402ad4 <task_house_down+0x6c>)
  402a94:	4633      	mov	r3, r6
  402a96:	4622      	mov	r2, r4
  402a98:	4631      	mov	r1, r6
  402a9a:	6838      	ldr	r0, [r7, #0]
  402a9c:	47a8      	blx	r5
  402a9e:	2800      	cmp	r0, #0
  402aa0:	d0f8      	beq.n	402a94 <task_house_down+0x2c>
			printf("Cai \n");
  402aa2:	480d      	ldr	r0, [pc, #52]	; (402ad8 <task_house_down+0x70>)
  402aa4:	4b0d      	ldr	r3, [pc, #52]	; (402adc <task_house_down+0x74>)
  402aa6:	4798      	blx	r3
			pio_clear(LED_1_PIO, LED_1_IDX_MASK);
  402aa8:	4621      	mov	r1, r4
  402aaa:	4640      	mov	r0, r8
  402aac:	4b0c      	ldr	r3, [pc, #48]	; (402ae0 <task_house_down+0x78>)
  402aae:	4798      	blx	r3
			vTaskDelay(100);
  402ab0:	2064      	movs	r0, #100	; 0x64
  402ab2:	4b0c      	ldr	r3, [pc, #48]	; (402ae4 <task_house_down+0x7c>)
  402ab4:	4798      	blx	r3
			pio_set(LED_1_PIO, LED_1_IDX_MASK);
  402ab6:	4621      	mov	r1, r4
  402ab8:	4640      	mov	r0, r8
  402aba:	4b04      	ldr	r3, [pc, #16]	; (402acc <task_house_down+0x64>)
  402abc:	4798      	blx	r3
  402abe:	e7e7      	b.n	402a90 <task_house_down+0x28>
  402ac0:	004009d5 	.word	0x004009d5
  402ac4:	400e0e00 	.word	0x400e0e00
  402ac8:	00400769 	.word	0x00400769
  402acc:	00400671 	.word	0x00400671
  402ad0:	20400c14 	.word	0x20400c14
  402ad4:	004017dd 	.word	0x004017dd
  402ad8:	004091a0 	.word	0x004091a0
  402adc:	004049f9 	.word	0x004049f9
  402ae0:	00400675 	.word	0x00400675
  402ae4:	00402009 	.word	0x00402009

00402ae8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
  402aea:	b083      	sub	sp, #12
  402aec:	4605      	mov	r5, r0
  402aee:	460c      	mov	r4, r1
	uint32_t val = 0;
  402af0:	2300      	movs	r3, #0
  402af2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402af4:	4b2a      	ldr	r3, [pc, #168]	; (402ba0 <usart_serial_getchar+0xb8>)
  402af6:	4298      	cmp	r0, r3
  402af8:	d013      	beq.n	402b22 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402afa:	4b2a      	ldr	r3, [pc, #168]	; (402ba4 <usart_serial_getchar+0xbc>)
  402afc:	4298      	cmp	r0, r3
  402afe:	d018      	beq.n	402b32 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402b00:	4b29      	ldr	r3, [pc, #164]	; (402ba8 <usart_serial_getchar+0xc0>)
  402b02:	4298      	cmp	r0, r3
  402b04:	d01d      	beq.n	402b42 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402b06:	4b29      	ldr	r3, [pc, #164]	; (402bac <usart_serial_getchar+0xc4>)
  402b08:	429d      	cmp	r5, r3
  402b0a:	d022      	beq.n	402b52 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402b0c:	4b28      	ldr	r3, [pc, #160]	; (402bb0 <usart_serial_getchar+0xc8>)
  402b0e:	429d      	cmp	r5, r3
  402b10:	d027      	beq.n	402b62 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402b12:	4b28      	ldr	r3, [pc, #160]	; (402bb4 <usart_serial_getchar+0xcc>)
  402b14:	429d      	cmp	r5, r3
  402b16:	d02e      	beq.n	402b76 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402b18:	4b27      	ldr	r3, [pc, #156]	; (402bb8 <usart_serial_getchar+0xd0>)
  402b1a:	429d      	cmp	r5, r3
  402b1c:	d035      	beq.n	402b8a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402b1e:	b003      	add	sp, #12
  402b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402b22:	461f      	mov	r7, r3
  402b24:	4e25      	ldr	r6, [pc, #148]	; (402bbc <usart_serial_getchar+0xd4>)
  402b26:	4621      	mov	r1, r4
  402b28:	4638      	mov	r0, r7
  402b2a:	47b0      	blx	r6
  402b2c:	2800      	cmp	r0, #0
  402b2e:	d1fa      	bne.n	402b26 <usart_serial_getchar+0x3e>
  402b30:	e7e9      	b.n	402b06 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402b32:	461f      	mov	r7, r3
  402b34:	4e21      	ldr	r6, [pc, #132]	; (402bbc <usart_serial_getchar+0xd4>)
  402b36:	4621      	mov	r1, r4
  402b38:	4638      	mov	r0, r7
  402b3a:	47b0      	blx	r6
  402b3c:	2800      	cmp	r0, #0
  402b3e:	d1fa      	bne.n	402b36 <usart_serial_getchar+0x4e>
  402b40:	e7e4      	b.n	402b0c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402b42:	461f      	mov	r7, r3
  402b44:	4e1d      	ldr	r6, [pc, #116]	; (402bbc <usart_serial_getchar+0xd4>)
  402b46:	4621      	mov	r1, r4
  402b48:	4638      	mov	r0, r7
  402b4a:	47b0      	blx	r6
  402b4c:	2800      	cmp	r0, #0
  402b4e:	d1fa      	bne.n	402b46 <usart_serial_getchar+0x5e>
  402b50:	e7df      	b.n	402b12 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402b52:	461f      	mov	r7, r3
  402b54:	4e19      	ldr	r6, [pc, #100]	; (402bbc <usart_serial_getchar+0xd4>)
  402b56:	4621      	mov	r1, r4
  402b58:	4638      	mov	r0, r7
  402b5a:	47b0      	blx	r6
  402b5c:	2800      	cmp	r0, #0
  402b5e:	d1fa      	bne.n	402b56 <usart_serial_getchar+0x6e>
  402b60:	e7da      	b.n	402b18 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402b62:	461e      	mov	r6, r3
  402b64:	4d16      	ldr	r5, [pc, #88]	; (402bc0 <usart_serial_getchar+0xd8>)
  402b66:	a901      	add	r1, sp, #4
  402b68:	4630      	mov	r0, r6
  402b6a:	47a8      	blx	r5
  402b6c:	2800      	cmp	r0, #0
  402b6e:	d1fa      	bne.n	402b66 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402b70:	9b01      	ldr	r3, [sp, #4]
  402b72:	7023      	strb	r3, [r4, #0]
  402b74:	e7d3      	b.n	402b1e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402b76:	461e      	mov	r6, r3
  402b78:	4d11      	ldr	r5, [pc, #68]	; (402bc0 <usart_serial_getchar+0xd8>)
  402b7a:	a901      	add	r1, sp, #4
  402b7c:	4630      	mov	r0, r6
  402b7e:	47a8      	blx	r5
  402b80:	2800      	cmp	r0, #0
  402b82:	d1fa      	bne.n	402b7a <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402b84:	9b01      	ldr	r3, [sp, #4]
  402b86:	7023      	strb	r3, [r4, #0]
  402b88:	e7c9      	b.n	402b1e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402b8a:	461e      	mov	r6, r3
  402b8c:	4d0c      	ldr	r5, [pc, #48]	; (402bc0 <usart_serial_getchar+0xd8>)
  402b8e:	a901      	add	r1, sp, #4
  402b90:	4630      	mov	r0, r6
  402b92:	47a8      	blx	r5
  402b94:	2800      	cmp	r0, #0
  402b96:	d1fa      	bne.n	402b8e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402b98:	9b01      	ldr	r3, [sp, #4]
  402b9a:	7023      	strb	r3, [r4, #0]
}
  402b9c:	e7bf      	b.n	402b1e <usart_serial_getchar+0x36>
  402b9e:	bf00      	nop
  402ba0:	400e0800 	.word	0x400e0800
  402ba4:	400e0a00 	.word	0x400e0a00
  402ba8:	400e1a00 	.word	0x400e1a00
  402bac:	400e1c00 	.word	0x400e1c00
  402bb0:	40024000 	.word	0x40024000
  402bb4:	40028000 	.word	0x40028000
  402bb8:	4002c000 	.word	0x4002c000
  402bbc:	00400a3b 	.word	0x00400a3b
  402bc0:	00400b47 	.word	0x00400b47

00402bc4 <usart_serial_putchar>:
{
  402bc4:	b570      	push	{r4, r5, r6, lr}
  402bc6:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402bc8:	4b2a      	ldr	r3, [pc, #168]	; (402c74 <usart_serial_putchar+0xb0>)
  402bca:	4298      	cmp	r0, r3
  402bcc:	d013      	beq.n	402bf6 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402bce:	4b2a      	ldr	r3, [pc, #168]	; (402c78 <usart_serial_putchar+0xb4>)
  402bd0:	4298      	cmp	r0, r3
  402bd2:	d019      	beq.n	402c08 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402bd4:	4b29      	ldr	r3, [pc, #164]	; (402c7c <usart_serial_putchar+0xb8>)
  402bd6:	4298      	cmp	r0, r3
  402bd8:	d01f      	beq.n	402c1a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402bda:	4b29      	ldr	r3, [pc, #164]	; (402c80 <usart_serial_putchar+0xbc>)
  402bdc:	4298      	cmp	r0, r3
  402bde:	d025      	beq.n	402c2c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402be0:	4b28      	ldr	r3, [pc, #160]	; (402c84 <usart_serial_putchar+0xc0>)
  402be2:	4298      	cmp	r0, r3
  402be4:	d02b      	beq.n	402c3e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402be6:	4b28      	ldr	r3, [pc, #160]	; (402c88 <usart_serial_putchar+0xc4>)
  402be8:	4298      	cmp	r0, r3
  402bea:	d031      	beq.n	402c50 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402bec:	4b27      	ldr	r3, [pc, #156]	; (402c8c <usart_serial_putchar+0xc8>)
  402bee:	4298      	cmp	r0, r3
  402bf0:	d037      	beq.n	402c62 <usart_serial_putchar+0x9e>
	return 0;
  402bf2:	2000      	movs	r0, #0
}
  402bf4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402bf6:	461e      	mov	r6, r3
  402bf8:	4d25      	ldr	r5, [pc, #148]	; (402c90 <usart_serial_putchar+0xcc>)
  402bfa:	4621      	mov	r1, r4
  402bfc:	4630      	mov	r0, r6
  402bfe:	47a8      	blx	r5
  402c00:	2800      	cmp	r0, #0
  402c02:	d1fa      	bne.n	402bfa <usart_serial_putchar+0x36>
		return 1;
  402c04:	2001      	movs	r0, #1
  402c06:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402c08:	461e      	mov	r6, r3
  402c0a:	4d21      	ldr	r5, [pc, #132]	; (402c90 <usart_serial_putchar+0xcc>)
  402c0c:	4621      	mov	r1, r4
  402c0e:	4630      	mov	r0, r6
  402c10:	47a8      	blx	r5
  402c12:	2800      	cmp	r0, #0
  402c14:	d1fa      	bne.n	402c0c <usart_serial_putchar+0x48>
		return 1;
  402c16:	2001      	movs	r0, #1
  402c18:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402c1a:	461e      	mov	r6, r3
  402c1c:	4d1c      	ldr	r5, [pc, #112]	; (402c90 <usart_serial_putchar+0xcc>)
  402c1e:	4621      	mov	r1, r4
  402c20:	4630      	mov	r0, r6
  402c22:	47a8      	blx	r5
  402c24:	2800      	cmp	r0, #0
  402c26:	d1fa      	bne.n	402c1e <usart_serial_putchar+0x5a>
		return 1;
  402c28:	2001      	movs	r0, #1
  402c2a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402c2c:	461e      	mov	r6, r3
  402c2e:	4d18      	ldr	r5, [pc, #96]	; (402c90 <usart_serial_putchar+0xcc>)
  402c30:	4621      	mov	r1, r4
  402c32:	4630      	mov	r0, r6
  402c34:	47a8      	blx	r5
  402c36:	2800      	cmp	r0, #0
  402c38:	d1fa      	bne.n	402c30 <usart_serial_putchar+0x6c>
		return 1;
  402c3a:	2001      	movs	r0, #1
  402c3c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402c3e:	461e      	mov	r6, r3
  402c40:	4d14      	ldr	r5, [pc, #80]	; (402c94 <usart_serial_putchar+0xd0>)
  402c42:	4621      	mov	r1, r4
  402c44:	4630      	mov	r0, r6
  402c46:	47a8      	blx	r5
  402c48:	2800      	cmp	r0, #0
  402c4a:	d1fa      	bne.n	402c42 <usart_serial_putchar+0x7e>
		return 1;
  402c4c:	2001      	movs	r0, #1
  402c4e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402c50:	461e      	mov	r6, r3
  402c52:	4d10      	ldr	r5, [pc, #64]	; (402c94 <usart_serial_putchar+0xd0>)
  402c54:	4621      	mov	r1, r4
  402c56:	4630      	mov	r0, r6
  402c58:	47a8      	blx	r5
  402c5a:	2800      	cmp	r0, #0
  402c5c:	d1fa      	bne.n	402c54 <usart_serial_putchar+0x90>
		return 1;
  402c5e:	2001      	movs	r0, #1
  402c60:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402c62:	461e      	mov	r6, r3
  402c64:	4d0b      	ldr	r5, [pc, #44]	; (402c94 <usart_serial_putchar+0xd0>)
  402c66:	4621      	mov	r1, r4
  402c68:	4630      	mov	r0, r6
  402c6a:	47a8      	blx	r5
  402c6c:	2800      	cmp	r0, #0
  402c6e:	d1fa      	bne.n	402c66 <usart_serial_putchar+0xa2>
		return 1;
  402c70:	2001      	movs	r0, #1
  402c72:	bd70      	pop	{r4, r5, r6, pc}
  402c74:	400e0800 	.word	0x400e0800
  402c78:	400e0a00 	.word	0x400e0a00
  402c7c:	400e1a00 	.word	0x400e1a00
  402c80:	400e1c00 	.word	0x400e1c00
  402c84:	40024000 	.word	0x40024000
  402c88:	40028000 	.word	0x40028000
  402c8c:	4002c000 	.word	0x4002c000
  402c90:	00400a29 	.word	0x00400a29
  402c94:	00400b31 	.word	0x00400b31

00402c98 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  402c98:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402c9a:	460a      	mov	r2, r1
  402c9c:	4601      	mov	r1, r0
  402c9e:	4802      	ldr	r0, [pc, #8]	; (402ca8 <vApplicationStackOverflowHook+0x10>)
  402ca0:	4b02      	ldr	r3, [pc, #8]	; (402cac <vApplicationStackOverflowHook+0x14>)
  402ca2:	4798      	blx	r3
  402ca4:	e7fe      	b.n	402ca4 <vApplicationStackOverflowHook+0xc>
  402ca6:	bf00      	nop
  402ca8:	00409230 	.word	0x00409230
  402cac:	00404935 	.word	0x00404935

00402cb0 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  402cb0:	4770      	bx	lr

00402cb2 <vApplicationMallocFailedHook>:
  402cb2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cb6:	b672      	cpsid	i
  402cb8:	f383 8811 	msr	BASEPRI, r3
  402cbc:	f3bf 8f6f 	isb	sy
  402cc0:	f3bf 8f4f 	dsb	sy
  402cc4:	b662      	cpsie	i
  402cc6:	e7fe      	b.n	402cc6 <vApplicationMallocFailedHook+0x14>

00402cc8 <mcu6050_i2c_bus_init>:
	pio_enable_interrupt(BUT_PIO, BUT_PIO_PIN_MASK);
	pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIO_PIN_MASK, PIO_IT_FALL_EDGE , but_callback);
}

void mcu6050_i2c_bus_init(void)
{
  402cc8:	b530      	push	{r4, r5, lr}
  402cca:	b085      	sub	sp, #20
    twihs_options_t mcu6050_option;
    pmc_enable_periph_clk(ID_TWIHS2);
  402ccc:	2029      	movs	r0, #41	; 0x29
  402cce:	4c0e      	ldr	r4, [pc, #56]	; (402d08 <mcu6050_i2c_bus_init+0x40>)
  402cd0:	47a0      	blx	r4

    /* Configure the options of TWI driver */
    mcu6050_option.master_clk = sysclk_get_cpu_hz();
  402cd2:	4b0e      	ldr	r3, [pc, #56]	; (402d0c <mcu6050_i2c_bus_init+0x44>)
  402cd4:	9301      	str	r3, [sp, #4]
    mcu6050_option.speed      = 40000;
  402cd6:	f649 4340 	movw	r3, #40000	; 0x9c40
  402cda:	9302      	str	r3, [sp, #8]
    twihs_master_init(TWIHS2, &mcu6050_option);
  402cdc:	a901      	add	r1, sp, #4
  402cde:	480c      	ldr	r0, [pc, #48]	; (402d10 <mcu6050_i2c_bus_init+0x48>)
  402ce0:	4b0c      	ldr	r3, [pc, #48]	; (402d14 <mcu6050_i2c_bus_init+0x4c>)
  402ce2:	4798      	blx	r3

	/** Enable TWIHS port to control PIO pins */
	pmc_enable_periph_clk(ID_PIOD);
  402ce4:	2010      	movs	r0, #16
  402ce6:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 28);
  402ce8:	4d0b      	ldr	r5, [pc, #44]	; (402d18 <mcu6050_i2c_bus_init+0x50>)
  402cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402cee:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402cf2:	4628      	mov	r0, r5
  402cf4:	4c09      	ldr	r4, [pc, #36]	; (402d1c <mcu6050_i2c_bus_init+0x54>)
  402cf6:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 27);
  402cf8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402cfc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402d00:	4628      	mov	r0, r5
  402d02:	47a0      	blx	r4
}
  402d04:	b005      	add	sp, #20
  402d06:	bd30      	pop	{r4, r5, pc}
  402d08:	004009d5 	.word	0x004009d5
  402d0c:	11e1a300 	.word	0x11e1a300
  402d10:	40060000 	.word	0x40060000
  402d14:	0040025d 	.word	0x0040025d
  402d18:	400e1400 	.word	0x400e1400
  402d1c:	00400679 	.word	0x00400679

00402d20 <mcu6050_i2c_bus_write>:

int8_t mcu6050_i2c_bus_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  402d20:	b500      	push	{lr}
  402d22:	b087      	sub	sp, #28
    int32_t ierror = 0x00;

    twihs_packet_t p_packet;
    p_packet.chip         = dev_addr;
  402d24:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  402d28:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  402d2c:	2101      	movs	r1, #1
  402d2e:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  402d30:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  402d32:	9304      	str	r3, [sp, #16]

    ierror = twihs_master_write(TWIHS2, &p_packet);
  402d34:	a901      	add	r1, sp, #4
  402d36:	4803      	ldr	r0, [pc, #12]	; (402d44 <mcu6050_i2c_bus_write+0x24>)
  402d38:	4b03      	ldr	r3, [pc, #12]	; (402d48 <mcu6050_i2c_bus_write+0x28>)
  402d3a:	4798      	blx	r3

    return (int8_t)ierror;
}
  402d3c:	b240      	sxtb	r0, r0
  402d3e:	b007      	add	sp, #28
  402d40:	f85d fb04 	ldr.w	pc, [sp], #4
  402d44:	40060000 	.word	0x40060000
  402d48:	0040033d 	.word	0x0040033d

00402d4c <mcu6050_i2c_bus_read>:

int8_t mcu6050_i2c_bus_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  402d4c:	b500      	push	{lr}
  402d4e:	b087      	sub	sp, #28
    int32_t ierror = 0x00;

    twihs_packet_t p_packet;
    p_packet.chip         = dev_addr;
  402d50:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  402d54:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  402d58:	2101      	movs	r1, #1
  402d5a:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  402d5c:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  402d5e:	9304      	str	r3, [sp, #16]

// TODO: Algum problema no SPI faz com que devemos ler duas vezes o registrador para
//       conseguirmos pegar o valor correto.
    ierror = twihs_master_read(TWIHS2, &p_packet);
  402d60:	a901      	add	r1, sp, #4
  402d62:	4803      	ldr	r0, [pc, #12]	; (402d70 <mcu6050_i2c_bus_read+0x24>)
  402d64:	4b03      	ldr	r3, [pc, #12]	; (402d74 <mcu6050_i2c_bus_read+0x28>)
  402d66:	4798      	blx	r3

    return (int8_t)ierror;
}
  402d68:	b240      	sxtb	r0, r0
  402d6a:	b007      	add	sp, #28
  402d6c:	f85d fb04 	ldr.w	pc, [sp], #4
  402d70:	40060000 	.word	0x40060000
  402d74:	00400291 	.word	0x00400291

00402d78 <task_imu>:
static void task_imu(void *pvParameters) {
  402d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402d7c:	ed2d 8b02 	vpush	{d8}
  402d80:	b08b      	sub	sp, #44	; 0x2c
	mcu6050_i2c_bus_init();
  402d82:	4b81      	ldr	r3, [pc, #516]	; (402f88 <task_imu+0x210>)
  402d84:	4798      	blx	r3
	rtn = mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, bufferRX, 1);
  402d86:	2301      	movs	r3, #1
  402d88:	aa07      	add	r2, sp, #28
  402d8a:	2175      	movs	r1, #117	; 0x75
  402d8c:	2068      	movs	r0, #104	; 0x68
  402d8e:	4c7f      	ldr	r4, [pc, #508]	; (402f8c <task_imu+0x214>)
  402d90:	47a0      	blx	r4
    if(rtn != TWIHS_SUCCESS){
  402d92:	2800      	cmp	r0, #0
  402d94:	d02e      	beq.n	402df4 <task_imu+0x7c>
        printf("[ERRO] [i2c] [probe] \n");
  402d96:	487e      	ldr	r0, [pc, #504]	; (402f90 <task_imu+0x218>)
  402d98:	4b7e      	ldr	r3, [pc, #504]	; (402f94 <task_imu+0x21c>)
  402d9a:	4798      	blx	r3
	if (bufferRX[0] != 0x68) {
  402d9c:	f89d 301c 	ldrb.w	r3, [sp, #28]
  402da0:	2b68      	cmp	r3, #104	; 0x68
		printf("[ERRO] na leitura do who am i \n");
  402da2:	bf14      	ite	ne
  402da4:	487c      	ldrne	r0, [pc, #496]	; (402f98 <task_imu+0x220>)
		printf("[SUCESSO] na leitura do who am i \n");
  402da6:	487d      	ldreq	r0, [pc, #500]	; (402f9c <task_imu+0x224>)
  402da8:	4b7a      	ldr	r3, [pc, #488]	; (402f94 <task_imu+0x21c>)
  402daa:	4798      	blx	r3
	bufferTX[0] = MPU6050_CLOCK_PLL_XGYRO;
  402dac:	2301      	movs	r3, #1
  402dae:	aa0a      	add	r2, sp, #40	; 0x28
  402db0:	f802 3d18 	strb.w	r3, [r2, #-24]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, bufferTX, 1);
  402db4:	216b      	movs	r1, #107	; 0x6b
  402db6:	2068      	movs	r0, #104	; 0x68
  402db8:	4c79      	ldr	r4, [pc, #484]	; (402fa0 <task_imu+0x228>)
  402dba:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  402dbc:	bb08      	cbnz	r0, 402e02 <task_imu+0x8a>
	bufferTX[0] = MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT; 
  402dbe:	aa0a      	add	r2, sp, #40	; 0x28
  402dc0:	2300      	movs	r3, #0
  402dc2:	f802 3d18 	strb.w	r3, [r2, #-24]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, bufferTX, 1);
  402dc6:	2301      	movs	r3, #1
  402dc8:	211c      	movs	r1, #28
  402dca:	2068      	movs	r0, #104	; 0x68
  402dcc:	4c74      	ldr	r4, [pc, #464]	; (402fa0 <task_imu+0x228>)
  402dce:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  402dd0:	b9d8      	cbnz	r0, 402e0a <task_imu+0x92>
	bufferTX[0] = 0x00; // 250 °/s
  402dd2:	aa0a      	add	r2, sp, #40	; 0x28
  402dd4:	2300      	movs	r3, #0
  402dd6:	f802 3d18 	strb.w	r3, [r2, #-24]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, bufferTX, 1);
  402dda:	2301      	movs	r3, #1
  402ddc:	211b      	movs	r1, #27
  402dde:	2068      	movs	r0, #104	; 0x68
  402de0:	4c6f      	ldr	r4, [pc, #444]	; (402fa0 <task_imu+0x228>)
  402de2:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  402de4:	b9a8      	cbnz	r0, 402e12 <task_imu+0x9a>
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  402de6:	2401      	movs	r4, #1
  402de8:	f04f 0868 	mov.w	r8, #104	; 0x68
  402dec:	4d67      	ldr	r5, [pc, #412]	; (402f8c <task_imu+0x214>)
		proc_acc_x = (float)raw_acc_x/16384;
  402dee:	ed9f 8a6d 	vldr	s16, [pc, #436]	; 402fa4 <task_imu+0x22c>
  402df2:	e01a      	b.n	402e2a <task_imu+0xb2>
        printf("[DADO] [i2c] %x:%x\n", MPU6050_RA_WHO_AM_I, bufferRX[0]);
  402df4:	f89d 201c 	ldrb.w	r2, [sp, #28]
  402df8:	2175      	movs	r1, #117	; 0x75
  402dfa:	486b      	ldr	r0, [pc, #428]	; (402fa8 <task_imu+0x230>)
  402dfc:	4b6b      	ldr	r3, [pc, #428]	; (402fac <task_imu+0x234>)
  402dfe:	4798      	blx	r3
  402e00:	e7cc      	b.n	402d9c <task_imu+0x24>
		printf("[ERRO] [i2c] [write] \n");
  402e02:	486b      	ldr	r0, [pc, #428]	; (402fb0 <task_imu+0x238>)
  402e04:	4b63      	ldr	r3, [pc, #396]	; (402f94 <task_imu+0x21c>)
  402e06:	4798      	blx	r3
  402e08:	e7d9      	b.n	402dbe <task_imu+0x46>
		printf("[ERRO] [i2c] [write] \n");
  402e0a:	4869      	ldr	r0, [pc, #420]	; (402fb0 <task_imu+0x238>)
  402e0c:	4b61      	ldr	r3, [pc, #388]	; (402f94 <task_imu+0x21c>)
  402e0e:	4798      	blx	r3
  402e10:	e7df      	b.n	402dd2 <task_imu+0x5a>
		printf("[ERRO] [i2c] [write] \n");
  402e12:	4867      	ldr	r0, [pc, #412]	; (402fb0 <task_imu+0x238>)
  402e14:	4b5f      	ldr	r3, [pc, #380]	; (402f94 <task_imu+0x21c>)
  402e16:	4798      	blx	r3
  402e18:	e7e5      	b.n	402de6 <task_imu+0x6e>
		float modulo = sqrtf(soma_dos_quadrados) * 9.81;
  402e1a:	ee17 0a90 	vmov	r0, s15
  402e1e:	4b65      	ldr	r3, [pc, #404]	; (402fb4 <task_imu+0x23c>)
  402e20:	4798      	blx	r3
  402e22:	e08d      	b.n	402f40 <task_imu+0x1c8>
		vTaskDelay(1);
  402e24:	4620      	mov	r0, r4
  402e26:	4b64      	ldr	r3, [pc, #400]	; (402fb8 <task_imu+0x240>)
  402e28:	4798      	blx	r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  402e2a:	4623      	mov	r3, r4
  402e2c:	f10d 020f 	add.w	r2, sp, #15
  402e30:	213b      	movs	r1, #59	; 0x3b
  402e32:	4640      	mov	r0, r8
  402e34:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, &raw_acc_xLow,  1);
  402e36:	4623      	mov	r3, r4
  402e38:	aa03      	add	r2, sp, #12
  402e3a:	213c      	movs	r1, #60	; 0x3c
  402e3c:	4640      	mov	r0, r8
  402e3e:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
  402e40:	4623      	mov	r3, r4
  402e42:	f10d 020e 	add.w	r2, sp, #14
  402e46:	213d      	movs	r1, #61	; 0x3d
  402e48:	4640      	mov	r0, r8
  402e4a:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_yLow,  1);
  402e4c:	4623      	mov	r3, r4
  402e4e:	f10d 020b 	add.w	r2, sp, #11
  402e52:	2140      	movs	r1, #64	; 0x40
  402e54:	4640      	mov	r0, r8
  402e56:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, &raw_acc_zHigh, 1);
  402e58:	4623      	mov	r3, r4
  402e5a:	f10d 020d 	add.w	r2, sp, #13
  402e5e:	213f      	movs	r1, #63	; 0x3f
  402e60:	4640      	mov	r0, r8
  402e62:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_zLow,  1);
  402e64:	4623      	mov	r3, r4
  402e66:	f10d 020a 	add.w	r2, sp, #10
  402e6a:	2140      	movs	r1, #64	; 0x40
  402e6c:	4640      	mov	r0, r8
  402e6e:	47a8      	blx	r5
		raw_acc_x = (raw_acc_xHigh << 8) | (raw_acc_xLow << 0);
  402e70:	f89d 200f 	ldrb.w	r2, [sp, #15]
  402e74:	f89d 300c 	ldrb.w	r3, [sp, #12]
  402e78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402e7c:	fa0f f983 	sxth.w	r9, r3
		raw_acc_y = (raw_acc_yHigh << 8) | (raw_acc_yLow << 0);
  402e80:	f89d 200e 	ldrb.w	r2, [sp, #14]
  402e84:	f89d 300b 	ldrb.w	r3, [sp, #11]
  402e88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402e8c:	b21f      	sxth	r7, r3
		raw_acc_z = (raw_acc_zHigh << 8) | (raw_acc_zLow << 0);
  402e8e:	f89d 200d 	ldrb.w	r2, [sp, #13]
  402e92:	f89d 300a 	ldrb.w	r3, [sp, #10]
  402e96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402e9a:	b21e      	sxth	r6, r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_H, &raw_gyr_xHigh, 1);
  402e9c:	4623      	mov	r3, r4
  402e9e:	f10d 0209 	add.w	r2, sp, #9
  402ea2:	2143      	movs	r1, #67	; 0x43
  402ea4:	4640      	mov	r0, r8
  402ea6:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_L, &raw_gyr_xLow,  1);
  402ea8:	4623      	mov	r3, r4
  402eaa:	f10d 0206 	add.w	r2, sp, #6
  402eae:	2144      	movs	r1, #68	; 0x44
  402eb0:	4640      	mov	r0, r8
  402eb2:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
  402eb4:	4623      	mov	r3, r4
  402eb6:	aa02      	add	r2, sp, #8
  402eb8:	2145      	movs	r1, #69	; 0x45
  402eba:	4640      	mov	r0, r8
  402ebc:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_yLow,  1);
  402ebe:	4623      	mov	r3, r4
  402ec0:	f10d 0205 	add.w	r2, sp, #5
  402ec4:	2148      	movs	r1, #72	; 0x48
  402ec6:	4640      	mov	r0, r8
  402ec8:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, &raw_gyr_zHigh, 1);
  402eca:	4623      	mov	r3, r4
  402ecc:	f10d 0207 	add.w	r2, sp, #7
  402ed0:	2147      	movs	r1, #71	; 0x47
  402ed2:	4640      	mov	r0, r8
  402ed4:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_zLow,  1);
  402ed6:	4623      	mov	r3, r4
  402ed8:	aa01      	add	r2, sp, #4
  402eda:	2148      	movs	r1, #72	; 0x48
  402edc:	4640      	mov	r0, r8
  402ede:	47a8      	blx	r5
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  402ee0:	f89d 3009 	ldrb.w	r3, [sp, #9]
  402ee4:	f89d 3006 	ldrb.w	r3, [sp, #6]
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  402ee8:	f89d 3008 	ldrb.w	r3, [sp, #8]
  402eec:	f89d 3005 	ldrb.w	r3, [sp, #5]
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  402ef0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402ef4:	f89d 3004 	ldrb.w	r3, [sp, #4]
		proc_acc_x = (float)raw_acc_x/16384;
  402ef8:	ee07 9a90 	vmov	s15, r9
  402efc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
  402f00:	ee26 6a08 	vmul.f32	s12, s12, s16
		proc_acc_y = (float)raw_acc_y/16384;
  402f04:	ee07 7a90 	vmov	s15, r7
  402f08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  402f0c:	ee66 6a88 	vmul.f32	s13, s13, s16
		proc_acc_z = (float)raw_acc_z/16384;
  402f10:	ee07 6a90 	vmov	s15, r6
  402f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  402f18:	ee27 7a08 	vmul.f32	s14, s14, s16
		float soma_dos_quadrados = proc_acc_x*proc_acc_x + proc_acc_y*proc_acc_y + proc_acc_z*proc_acc_z;
  402f1c:	ee66 7a06 	vmul.f32	s15, s12, s12
  402f20:	ee66 6aa6 	vmul.f32	s13, s13, s13
  402f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
  402f28:	ee27 7a07 	vmul.f32	s14, s14, s14
  402f2c:	ee77 7a87 	vadd.f32	s15, s15, s14
		float modulo = sqrtf(soma_dos_quadrados) * 9.81;
  402f30:	eef1 8ae7 	vsqrt.f32	s17, s15
  402f34:	eef5 7a40 	vcmp.f32	s15, #0.0
  402f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402f3c:	f53f af6d 	bmi.w	402e1a <task_imu+0xa2>
  402f40:	4e1e      	ldr	r6, [pc, #120]	; (402fbc <task_imu+0x244>)
  402f42:	ee18 0a90 	vmov	r0, s17
  402f46:	47b0      	blx	r6
  402f48:	a30b      	add	r3, pc, #44	; (adr r3, 402f78 <task_imu+0x200>)
  402f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f4e:	4f1c      	ldr	r7, [pc, #112]	; (402fc0 <task_imu+0x248>)
  402f50:	47b8      	blx	r7
  402f52:	4b1c      	ldr	r3, [pc, #112]	; (402fc4 <task_imu+0x24c>)
  402f54:	4798      	blx	r3
		if (modulo < 5.6) {
  402f56:	47b0      	blx	r6
  402f58:	a309      	add	r3, pc, #36	; (adr r3, 402f80 <task_imu+0x208>)
  402f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f5e:	4e1a      	ldr	r6, [pc, #104]	; (402fc8 <task_imu+0x250>)
  402f60:	47b0      	blx	r6
  402f62:	2800      	cmp	r0, #0
  402f64:	f43f af5e 	beq.w	402e24 <task_imu+0xac>
			xSemaphoreGive(xSemaphoreDown);
  402f68:	2300      	movs	r3, #0
  402f6a:	461a      	mov	r2, r3
  402f6c:	4619      	mov	r1, r3
  402f6e:	4817      	ldr	r0, [pc, #92]	; (402fcc <task_imu+0x254>)
  402f70:	6800      	ldr	r0, [r0, #0]
  402f72:	4e17      	ldr	r6, [pc, #92]	; (402fd0 <task_imu+0x258>)
  402f74:	47b0      	blx	r6
  402f76:	e755      	b.n	402e24 <task_imu+0xac>
  402f78:	51eb851f 	.word	0x51eb851f
  402f7c:	40239eb8 	.word	0x40239eb8
  402f80:	66666666 	.word	0x66666666
  402f84:	40166666 	.word	0x40166666
  402f88:	00402cc9 	.word	0x00402cc9
  402f8c:	00402d4d 	.word	0x00402d4d
  402f90:	004091a8 	.word	0x004091a8
  402f94:	004049f9 	.word	0x004049f9
  402f98:	004091d4 	.word	0x004091d4
  402f9c:	004091f4 	.word	0x004091f4
  402fa0:	00402d21 	.word	0x00402d21
  402fa4:	38800000 	.word	0x38800000
  402fa8:	004091c0 	.word	0x004091c0
  402fac:	00404935 	.word	0x00404935
  402fb0:	00409218 	.word	0x00409218
  402fb4:	0040310d 	.word	0x0040310d
  402fb8:	00402009 	.word	0x00402009
  402fbc:	00403521 	.word	0x00403521
  402fc0:	004035c9 	.word	0x004035c9
  402fc4:	00403afd 	.word	0x00403afd
  402fc8:	00403aad 	.word	0x00403aad
  402fcc:	20400c14 	.word	0x20400c14
  402fd0:	004014f9 	.word	0x004014f9

00402fd4 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/


int main(void) {
  402fd4:	b500      	push	{lr}
  402fd6:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  402fd8:	4b31      	ldr	r3, [pc, #196]	; (4030a0 <main+0xcc>)
  402fda:	4798      	blx	r3
	board_init();
  402fdc:	4b31      	ldr	r3, [pc, #196]	; (4030a4 <main+0xd0>)
  402fde:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402fe0:	4d31      	ldr	r5, [pc, #196]	; (4030a8 <main+0xd4>)
  402fe2:	4b32      	ldr	r3, [pc, #200]	; (4030ac <main+0xd8>)
  402fe4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402fe6:	4a32      	ldr	r2, [pc, #200]	; (4030b0 <main+0xdc>)
  402fe8:	4b32      	ldr	r3, [pc, #200]	; (4030b4 <main+0xe0>)
  402fea:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402fec:	4a32      	ldr	r2, [pc, #200]	; (4030b8 <main+0xe4>)
  402fee:	4b33      	ldr	r3, [pc, #204]	; (4030bc <main+0xe8>)
  402ff0:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  402ff2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402ff6:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  402ff8:	23c0      	movs	r3, #192	; 0xc0
  402ffa:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  402ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403000:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403002:	2400      	movs	r4, #0
  403004:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403006:	9408      	str	r4, [sp, #32]
  403008:	200e      	movs	r0, #14
  40300a:	4b2d      	ldr	r3, [pc, #180]	; (4030c0 <main+0xec>)
  40300c:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40300e:	4a2d      	ldr	r2, [pc, #180]	; (4030c4 <main+0xf0>)
  403010:	a904      	add	r1, sp, #16
  403012:	4628      	mov	r0, r5
  403014:	4b2c      	ldr	r3, [pc, #176]	; (4030c8 <main+0xf4>)
  403016:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403018:	4628      	mov	r0, r5
  40301a:	4b2c      	ldr	r3, [pc, #176]	; (4030cc <main+0xf8>)
  40301c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40301e:	4628      	mov	r0, r5
  403020:	4b2b      	ldr	r3, [pc, #172]	; (4030d0 <main+0xfc>)
  403022:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403024:	4e2b      	ldr	r6, [pc, #172]	; (4030d4 <main+0x100>)
  403026:	6833      	ldr	r3, [r6, #0]
  403028:	4621      	mov	r1, r4
  40302a:	6898      	ldr	r0, [r3, #8]
  40302c:	4d2a      	ldr	r5, [pc, #168]	; (4030d8 <main+0x104>)
  40302e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403030:	6833      	ldr	r3, [r6, #0]
  403032:	4621      	mov	r1, r4
  403034:	6858      	ldr	r0, [r3, #4]
  403036:	47a8      	blx	r5
	setbuf(stdout, NULL);
  403038:	6833      	ldr	r3, [r6, #0]
  40303a:	4621      	mov	r1, r4
  40303c:	6898      	ldr	r0, [r3, #8]
  40303e:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	xSemaphoreDown = xSemaphoreCreateBinary();
  403040:	2203      	movs	r2, #3
  403042:	4621      	mov	r1, r4
  403044:	2001      	movs	r0, #1
  403046:	4b25      	ldr	r3, [pc, #148]	; (4030dc <main+0x108>)
  403048:	4798      	blx	r3
  40304a:	4b25      	ldr	r3, [pc, #148]	; (4030e0 <main+0x10c>)
  40304c:	6018      	str	r0, [r3, #0]
	if (xSemaphoreDown == NULL)
  40304e:	b310      	cbz	r0, 403096 <main+0xc2>
		printf("falha em criar o semaforo \n");

	/* Create task to control oled */
	if (xTaskCreate(task_house_down, "house down", TASK_HOUSE_DOWN_STACK_SIZE, NULL, TASK_HOUSE_DOWN_STACK_PRIORITY, NULL) != pdPASS) {
  403050:	2300      	movs	r3, #0
  403052:	9303      	str	r3, [sp, #12]
  403054:	9302      	str	r3, [sp, #8]
  403056:	9301      	str	r3, [sp, #4]
  403058:	9300      	str	r3, [sp, #0]
  40305a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40305e:	4921      	ldr	r1, [pc, #132]	; (4030e4 <main+0x110>)
  403060:	4821      	ldr	r0, [pc, #132]	; (4030e8 <main+0x114>)
  403062:	4c22      	ldr	r4, [pc, #136]	; (4030ec <main+0x118>)
  403064:	47a0      	blx	r4
  403066:	2801      	cmp	r0, #1
  403068:	d002      	beq.n	403070 <main+0x9c>
	  printf("Failed to create house down task\r\n");
  40306a:	4821      	ldr	r0, [pc, #132]	; (4030f0 <main+0x11c>)
  40306c:	4b21      	ldr	r3, [pc, #132]	; (4030f4 <main+0x120>)
  40306e:	4798      	blx	r3
	}

	if (xTaskCreate(task_imu, "imu", TASK_IMU_STACK_SIZE, NULL, TASK_IMU_STACK_PRIORITY, NULL) != pdPASS) {
  403070:	2300      	movs	r3, #0
  403072:	9303      	str	r3, [sp, #12]
  403074:	9302      	str	r3, [sp, #8]
  403076:	9301      	str	r3, [sp, #4]
  403078:	9300      	str	r3, [sp, #0]
  40307a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40307e:	491e      	ldr	r1, [pc, #120]	; (4030f8 <main+0x124>)
  403080:	481e      	ldr	r0, [pc, #120]	; (4030fc <main+0x128>)
  403082:	4c1a      	ldr	r4, [pc, #104]	; (4030ec <main+0x118>)
  403084:	47a0      	blx	r4
  403086:	2801      	cmp	r0, #1
  403088:	d002      	beq.n	403090 <main+0xbc>
	  printf("Failed to create imu task\r\n");
  40308a:	481d      	ldr	r0, [pc, #116]	; (403100 <main+0x12c>)
  40308c:	4b19      	ldr	r3, [pc, #100]	; (4030f4 <main+0x120>)
  40308e:	4798      	blx	r3
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
  403090:	4b1c      	ldr	r3, [pc, #112]	; (403104 <main+0x130>)
  403092:	4798      	blx	r3
  403094:	e7fe      	b.n	403094 <main+0xc0>
		printf("falha em criar o semaforo \n");
  403096:	481c      	ldr	r0, [pc, #112]	; (403108 <main+0x134>)
  403098:	4b16      	ldr	r3, [pc, #88]	; (4030f4 <main+0x120>)
  40309a:	4798      	blx	r3
  40309c:	e7d8      	b.n	403050 <main+0x7c>
  40309e:	bf00      	nop
  4030a0:	004003dd 	.word	0x004003dd
  4030a4:	004004d9 	.word	0x004004d9
  4030a8:	40028000 	.word	0x40028000
  4030ac:	20400bd0 	.word	0x20400bd0
  4030b0:	00402bc5 	.word	0x00402bc5
  4030b4:	20400bcc 	.word	0x20400bcc
  4030b8:	00402ae9 	.word	0x00402ae9
  4030bc:	20400bc8 	.word	0x20400bc8
  4030c0:	004009d5 	.word	0x004009d5
  4030c4:	08f0d180 	.word	0x08f0d180
  4030c8:	00400ad1 	.word	0x00400ad1
  4030cc:	00400b25 	.word	0x00400b25
  4030d0:	00400b2b 	.word	0x00400b2b
  4030d4:	20400010 	.word	0x20400010
  4030d8:	00404a2d 	.word	0x00404a2d
  4030dc:	0040147d 	.word	0x0040147d
  4030e0:	20400c14 	.word	0x20400c14
  4030e4:	00409150 	.word	0x00409150
  4030e8:	00402a69 	.word	0x00402a69
  4030ec:	00401abd 	.word	0x00401abd
  4030f0:	0040915c 	.word	0x0040915c
  4030f4:	004049f9 	.word	0x004049f9
  4030f8:	00409180 	.word	0x00409180
  4030fc:	00402d79 	.word	0x00402d79
  403100:	00409184 	.word	0x00409184
  403104:	00401cf1 	.word	0x00401cf1
  403108:	00409134 	.word	0x00409134

0040310c <sqrtf>:
  40310c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40310e:	b08b      	sub	sp, #44	; 0x2c
  403110:	4604      	mov	r4, r0
  403112:	f000 f84b 	bl	4031ac <__ieee754_sqrtf>
  403116:	4b23      	ldr	r3, [pc, #140]	; (4031a4 <sqrtf+0x98>)
  403118:	f993 5000 	ldrsb.w	r5, [r3]
  40311c:	1c6b      	adds	r3, r5, #1
  40311e:	4606      	mov	r6, r0
  403120:	d00a      	beq.n	403138 <sqrtf+0x2c>
  403122:	4621      	mov	r1, r4
  403124:	4620      	mov	r0, r4
  403126:	f001 f80d 	bl	404144 <__aeabi_fcmpun>
  40312a:	4607      	mov	r7, r0
  40312c:	b920      	cbnz	r0, 403138 <sqrtf+0x2c>
  40312e:	2100      	movs	r1, #0
  403130:	4620      	mov	r0, r4
  403132:	f000 ffdf 	bl	4040f4 <__aeabi_fcmplt>
  403136:	b910      	cbnz	r0, 40313e <sqrtf+0x32>
  403138:	4630      	mov	r0, r6
  40313a:	b00b      	add	sp, #44	; 0x2c
  40313c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40313e:	4b1a      	ldr	r3, [pc, #104]	; (4031a8 <sqrtf+0x9c>)
  403140:	9708      	str	r7, [sp, #32]
  403142:	2201      	movs	r2, #1
  403144:	4620      	mov	r0, r4
  403146:	e88d 000c 	stmia.w	sp, {r2, r3}
  40314a:	f000 f9e9 	bl	403520 <__aeabi_f2d>
  40314e:	2200      	movs	r2, #0
  403150:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403154:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403158:	2300      	movs	r3, #0
  40315a:	b1ad      	cbz	r5, 403188 <sqrtf+0x7c>
  40315c:	4610      	mov	r0, r2
  40315e:	4619      	mov	r1, r3
  403160:	f000 fb5c 	bl	40381c <__aeabi_ddiv>
  403164:	2d02      	cmp	r5, #2
  403166:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40316a:	d10f      	bne.n	40318c <sqrtf+0x80>
  40316c:	f001 f800 	bl	404170 <__errno>
  403170:	2321      	movs	r3, #33	; 0x21
  403172:	6003      	str	r3, [r0, #0]
  403174:	9b08      	ldr	r3, [sp, #32]
  403176:	b97b      	cbnz	r3, 403198 <sqrtf+0x8c>
  403178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40317c:	f000 fcbe 	bl	403afc <__aeabi_d2f>
  403180:	4606      	mov	r6, r0
  403182:	4630      	mov	r0, r6
  403184:	b00b      	add	sp, #44	; 0x2c
  403186:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403188:	e9cd 2306 	strd	r2, r3, [sp, #24]
  40318c:	4668      	mov	r0, sp
  40318e:	f000 f861 	bl	403254 <matherr>
  403192:	2800      	cmp	r0, #0
  403194:	d1ee      	bne.n	403174 <sqrtf+0x68>
  403196:	e7e9      	b.n	40316c <sqrtf+0x60>
  403198:	f000 ffea 	bl	404170 <__errno>
  40319c:	9b08      	ldr	r3, [sp, #32]
  40319e:	6003      	str	r3, [r0, #0]
  4031a0:	e7ea      	b.n	403178 <sqrtf+0x6c>
  4031a2:	bf00      	nop
  4031a4:	2040000c 	.word	0x2040000c
  4031a8:	00409248 	.word	0x00409248

004031ac <__ieee754_sqrtf>:
  4031ac:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
  4031b0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  4031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4031b6:	4604      	mov	r4, r0
  4031b8:	d22e      	bcs.n	403218 <__ieee754_sqrtf+0x6c>
  4031ba:	b362      	cbz	r2, 403216 <__ieee754_sqrtf+0x6a>
  4031bc:	2800      	cmp	r0, #0
  4031be:	4603      	mov	r3, r0
  4031c0:	db3d      	blt.n	40323e <__ieee754_sqrtf+0x92>
  4031c2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  4031c6:	ea4f 50e0 	mov.w	r0, r0, asr #23
  4031ca:	d32c      	bcc.n	403226 <__ieee754_sqrtf+0x7a>
  4031cc:	387f      	subs	r0, #127	; 0x7f
  4031ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
  4031d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  4031d6:	07c2      	lsls	r2, r0, #31
  4031d8:	bf48      	it	mi
  4031da:	005b      	lslmi	r3, r3, #1
  4031dc:	2600      	movs	r6, #0
  4031de:	1047      	asrs	r7, r0, #1
  4031e0:	005b      	lsls	r3, r3, #1
  4031e2:	4631      	mov	r1, r6
  4031e4:	2419      	movs	r4, #25
  4031e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4031ea:	188d      	adds	r5, r1, r2
  4031ec:	429d      	cmp	r5, r3
  4031ee:	dc02      	bgt.n	4031f6 <__ieee754_sqrtf+0x4a>
  4031f0:	1b5b      	subs	r3, r3, r5
  4031f2:	18a9      	adds	r1, r5, r2
  4031f4:	4416      	add	r6, r2
  4031f6:	3c01      	subs	r4, #1
  4031f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4031fc:	ea4f 0252 	mov.w	r2, r2, lsr #1
  403200:	d1f3      	bne.n	4031ea <__ieee754_sqrtf+0x3e>
  403202:	b113      	cbz	r3, 40320a <__ieee754_sqrtf+0x5e>
  403204:	3601      	adds	r6, #1
  403206:	f026 0601 	bic.w	r6, r6, #1
  40320a:	1070      	asrs	r0, r6, #1
  40320c:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
  403210:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
  403214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403218:	4601      	mov	r1, r0
  40321a:	f000 fdcd 	bl	403db8 <__aeabi_fmul>
  40321e:	4621      	mov	r1, r4
  403220:	f000 fcc2 	bl	403ba8 <__addsf3>
  403224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403226:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
  40322a:	d001      	beq.n	403230 <__ieee754_sqrtf+0x84>
  40322c:	e00e      	b.n	40324c <__ieee754_sqrtf+0xa0>
  40322e:	460a      	mov	r2, r1
  403230:	005b      	lsls	r3, r3, #1
  403232:	021c      	lsls	r4, r3, #8
  403234:	f102 0101 	add.w	r1, r2, #1
  403238:	d5f9      	bpl.n	40322e <__ieee754_sqrtf+0x82>
  40323a:	1a80      	subs	r0, r0, r2
  40323c:	e7c6      	b.n	4031cc <__ieee754_sqrtf+0x20>
  40323e:	4601      	mov	r1, r0
  403240:	f000 fcb0 	bl	403ba4 <__aeabi_fsub>
  403244:	4601      	mov	r1, r0
  403246:	f000 fe6b 	bl	403f20 <__aeabi_fdiv>
  40324a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40324c:	f04f 32ff 	mov.w	r2, #4294967295
  403250:	e7f3      	b.n	40323a <__ieee754_sqrtf+0x8e>
  403252:	bf00      	nop

00403254 <matherr>:
  403254:	2000      	movs	r0, #0
  403256:	4770      	bx	lr

00403258 <__aeabi_drsub>:
  403258:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40325c:	e002      	b.n	403264 <__adddf3>
  40325e:	bf00      	nop

00403260 <__aeabi_dsub>:
  403260:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403264 <__adddf3>:
  403264:	b530      	push	{r4, r5, lr}
  403266:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40326a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40326e:	ea94 0f05 	teq	r4, r5
  403272:	bf08      	it	eq
  403274:	ea90 0f02 	teqeq	r0, r2
  403278:	bf1f      	itttt	ne
  40327a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40327e:	ea55 0c02 	orrsne.w	ip, r5, r2
  403282:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403286:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40328a:	f000 80e2 	beq.w	403452 <__adddf3+0x1ee>
  40328e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403292:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403296:	bfb8      	it	lt
  403298:	426d      	neglt	r5, r5
  40329a:	dd0c      	ble.n	4032b6 <__adddf3+0x52>
  40329c:	442c      	add	r4, r5
  40329e:	ea80 0202 	eor.w	r2, r0, r2
  4032a2:	ea81 0303 	eor.w	r3, r1, r3
  4032a6:	ea82 0000 	eor.w	r0, r2, r0
  4032aa:	ea83 0101 	eor.w	r1, r3, r1
  4032ae:	ea80 0202 	eor.w	r2, r0, r2
  4032b2:	ea81 0303 	eor.w	r3, r1, r3
  4032b6:	2d36      	cmp	r5, #54	; 0x36
  4032b8:	bf88      	it	hi
  4032ba:	bd30      	pophi	{r4, r5, pc}
  4032bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4032c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4032c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4032c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4032cc:	d002      	beq.n	4032d4 <__adddf3+0x70>
  4032ce:	4240      	negs	r0, r0
  4032d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4032d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4032d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4032dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4032e0:	d002      	beq.n	4032e8 <__adddf3+0x84>
  4032e2:	4252      	negs	r2, r2
  4032e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4032e8:	ea94 0f05 	teq	r4, r5
  4032ec:	f000 80a7 	beq.w	40343e <__adddf3+0x1da>
  4032f0:	f1a4 0401 	sub.w	r4, r4, #1
  4032f4:	f1d5 0e20 	rsbs	lr, r5, #32
  4032f8:	db0d      	blt.n	403316 <__adddf3+0xb2>
  4032fa:	fa02 fc0e 	lsl.w	ip, r2, lr
  4032fe:	fa22 f205 	lsr.w	r2, r2, r5
  403302:	1880      	adds	r0, r0, r2
  403304:	f141 0100 	adc.w	r1, r1, #0
  403308:	fa03 f20e 	lsl.w	r2, r3, lr
  40330c:	1880      	adds	r0, r0, r2
  40330e:	fa43 f305 	asr.w	r3, r3, r5
  403312:	4159      	adcs	r1, r3
  403314:	e00e      	b.n	403334 <__adddf3+0xd0>
  403316:	f1a5 0520 	sub.w	r5, r5, #32
  40331a:	f10e 0e20 	add.w	lr, lr, #32
  40331e:	2a01      	cmp	r2, #1
  403320:	fa03 fc0e 	lsl.w	ip, r3, lr
  403324:	bf28      	it	cs
  403326:	f04c 0c02 	orrcs.w	ip, ip, #2
  40332a:	fa43 f305 	asr.w	r3, r3, r5
  40332e:	18c0      	adds	r0, r0, r3
  403330:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403334:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403338:	d507      	bpl.n	40334a <__adddf3+0xe6>
  40333a:	f04f 0e00 	mov.w	lr, #0
  40333e:	f1dc 0c00 	rsbs	ip, ip, #0
  403342:	eb7e 0000 	sbcs.w	r0, lr, r0
  403346:	eb6e 0101 	sbc.w	r1, lr, r1
  40334a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40334e:	d31b      	bcc.n	403388 <__adddf3+0x124>
  403350:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403354:	d30c      	bcc.n	403370 <__adddf3+0x10c>
  403356:	0849      	lsrs	r1, r1, #1
  403358:	ea5f 0030 	movs.w	r0, r0, rrx
  40335c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403360:	f104 0401 	add.w	r4, r4, #1
  403364:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403368:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40336c:	f080 809a 	bcs.w	4034a4 <__adddf3+0x240>
  403370:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403374:	bf08      	it	eq
  403376:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40337a:	f150 0000 	adcs.w	r0, r0, #0
  40337e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403382:	ea41 0105 	orr.w	r1, r1, r5
  403386:	bd30      	pop	{r4, r5, pc}
  403388:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40338c:	4140      	adcs	r0, r0
  40338e:	eb41 0101 	adc.w	r1, r1, r1
  403392:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403396:	f1a4 0401 	sub.w	r4, r4, #1
  40339a:	d1e9      	bne.n	403370 <__adddf3+0x10c>
  40339c:	f091 0f00 	teq	r1, #0
  4033a0:	bf04      	itt	eq
  4033a2:	4601      	moveq	r1, r0
  4033a4:	2000      	moveq	r0, #0
  4033a6:	fab1 f381 	clz	r3, r1
  4033aa:	bf08      	it	eq
  4033ac:	3320      	addeq	r3, #32
  4033ae:	f1a3 030b 	sub.w	r3, r3, #11
  4033b2:	f1b3 0220 	subs.w	r2, r3, #32
  4033b6:	da0c      	bge.n	4033d2 <__adddf3+0x16e>
  4033b8:	320c      	adds	r2, #12
  4033ba:	dd08      	ble.n	4033ce <__adddf3+0x16a>
  4033bc:	f102 0c14 	add.w	ip, r2, #20
  4033c0:	f1c2 020c 	rsb	r2, r2, #12
  4033c4:	fa01 f00c 	lsl.w	r0, r1, ip
  4033c8:	fa21 f102 	lsr.w	r1, r1, r2
  4033cc:	e00c      	b.n	4033e8 <__adddf3+0x184>
  4033ce:	f102 0214 	add.w	r2, r2, #20
  4033d2:	bfd8      	it	le
  4033d4:	f1c2 0c20 	rsble	ip, r2, #32
  4033d8:	fa01 f102 	lsl.w	r1, r1, r2
  4033dc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4033e0:	bfdc      	itt	le
  4033e2:	ea41 010c 	orrle.w	r1, r1, ip
  4033e6:	4090      	lslle	r0, r2
  4033e8:	1ae4      	subs	r4, r4, r3
  4033ea:	bfa2      	ittt	ge
  4033ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4033f0:	4329      	orrge	r1, r5
  4033f2:	bd30      	popge	{r4, r5, pc}
  4033f4:	ea6f 0404 	mvn.w	r4, r4
  4033f8:	3c1f      	subs	r4, #31
  4033fa:	da1c      	bge.n	403436 <__adddf3+0x1d2>
  4033fc:	340c      	adds	r4, #12
  4033fe:	dc0e      	bgt.n	40341e <__adddf3+0x1ba>
  403400:	f104 0414 	add.w	r4, r4, #20
  403404:	f1c4 0220 	rsb	r2, r4, #32
  403408:	fa20 f004 	lsr.w	r0, r0, r4
  40340c:	fa01 f302 	lsl.w	r3, r1, r2
  403410:	ea40 0003 	orr.w	r0, r0, r3
  403414:	fa21 f304 	lsr.w	r3, r1, r4
  403418:	ea45 0103 	orr.w	r1, r5, r3
  40341c:	bd30      	pop	{r4, r5, pc}
  40341e:	f1c4 040c 	rsb	r4, r4, #12
  403422:	f1c4 0220 	rsb	r2, r4, #32
  403426:	fa20 f002 	lsr.w	r0, r0, r2
  40342a:	fa01 f304 	lsl.w	r3, r1, r4
  40342e:	ea40 0003 	orr.w	r0, r0, r3
  403432:	4629      	mov	r1, r5
  403434:	bd30      	pop	{r4, r5, pc}
  403436:	fa21 f004 	lsr.w	r0, r1, r4
  40343a:	4629      	mov	r1, r5
  40343c:	bd30      	pop	{r4, r5, pc}
  40343e:	f094 0f00 	teq	r4, #0
  403442:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403446:	bf06      	itte	eq
  403448:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40344c:	3401      	addeq	r4, #1
  40344e:	3d01      	subne	r5, #1
  403450:	e74e      	b.n	4032f0 <__adddf3+0x8c>
  403452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403456:	bf18      	it	ne
  403458:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40345c:	d029      	beq.n	4034b2 <__adddf3+0x24e>
  40345e:	ea94 0f05 	teq	r4, r5
  403462:	bf08      	it	eq
  403464:	ea90 0f02 	teqeq	r0, r2
  403468:	d005      	beq.n	403476 <__adddf3+0x212>
  40346a:	ea54 0c00 	orrs.w	ip, r4, r0
  40346e:	bf04      	itt	eq
  403470:	4619      	moveq	r1, r3
  403472:	4610      	moveq	r0, r2
  403474:	bd30      	pop	{r4, r5, pc}
  403476:	ea91 0f03 	teq	r1, r3
  40347a:	bf1e      	ittt	ne
  40347c:	2100      	movne	r1, #0
  40347e:	2000      	movne	r0, #0
  403480:	bd30      	popne	{r4, r5, pc}
  403482:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403486:	d105      	bne.n	403494 <__adddf3+0x230>
  403488:	0040      	lsls	r0, r0, #1
  40348a:	4149      	adcs	r1, r1
  40348c:	bf28      	it	cs
  40348e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403492:	bd30      	pop	{r4, r5, pc}
  403494:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403498:	bf3c      	itt	cc
  40349a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40349e:	bd30      	popcc	{r4, r5, pc}
  4034a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4034a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4034a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4034ac:	f04f 0000 	mov.w	r0, #0
  4034b0:	bd30      	pop	{r4, r5, pc}
  4034b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4034b6:	bf1a      	itte	ne
  4034b8:	4619      	movne	r1, r3
  4034ba:	4610      	movne	r0, r2
  4034bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4034c0:	bf1c      	itt	ne
  4034c2:	460b      	movne	r3, r1
  4034c4:	4602      	movne	r2, r0
  4034c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4034ca:	bf06      	itte	eq
  4034cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4034d0:	ea91 0f03 	teqeq	r1, r3
  4034d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4034d8:	bd30      	pop	{r4, r5, pc}
  4034da:	bf00      	nop

004034dc <__aeabi_ui2d>:
  4034dc:	f090 0f00 	teq	r0, #0
  4034e0:	bf04      	itt	eq
  4034e2:	2100      	moveq	r1, #0
  4034e4:	4770      	bxeq	lr
  4034e6:	b530      	push	{r4, r5, lr}
  4034e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4034ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4034f0:	f04f 0500 	mov.w	r5, #0
  4034f4:	f04f 0100 	mov.w	r1, #0
  4034f8:	e750      	b.n	40339c <__adddf3+0x138>
  4034fa:	bf00      	nop

004034fc <__aeabi_i2d>:
  4034fc:	f090 0f00 	teq	r0, #0
  403500:	bf04      	itt	eq
  403502:	2100      	moveq	r1, #0
  403504:	4770      	bxeq	lr
  403506:	b530      	push	{r4, r5, lr}
  403508:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40350c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403510:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403514:	bf48      	it	mi
  403516:	4240      	negmi	r0, r0
  403518:	f04f 0100 	mov.w	r1, #0
  40351c:	e73e      	b.n	40339c <__adddf3+0x138>
  40351e:	bf00      	nop

00403520 <__aeabi_f2d>:
  403520:	0042      	lsls	r2, r0, #1
  403522:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403526:	ea4f 0131 	mov.w	r1, r1, rrx
  40352a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40352e:	bf1f      	itttt	ne
  403530:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403534:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403538:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40353c:	4770      	bxne	lr
  40353e:	f092 0f00 	teq	r2, #0
  403542:	bf14      	ite	ne
  403544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403548:	4770      	bxeq	lr
  40354a:	b530      	push	{r4, r5, lr}
  40354c:	f44f 7460 	mov.w	r4, #896	; 0x380
  403550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403558:	e720      	b.n	40339c <__adddf3+0x138>
  40355a:	bf00      	nop

0040355c <__aeabi_ul2d>:
  40355c:	ea50 0201 	orrs.w	r2, r0, r1
  403560:	bf08      	it	eq
  403562:	4770      	bxeq	lr
  403564:	b530      	push	{r4, r5, lr}
  403566:	f04f 0500 	mov.w	r5, #0
  40356a:	e00a      	b.n	403582 <__aeabi_l2d+0x16>

0040356c <__aeabi_l2d>:
  40356c:	ea50 0201 	orrs.w	r2, r0, r1
  403570:	bf08      	it	eq
  403572:	4770      	bxeq	lr
  403574:	b530      	push	{r4, r5, lr}
  403576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40357a:	d502      	bpl.n	403582 <__aeabi_l2d+0x16>
  40357c:	4240      	negs	r0, r0
  40357e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403582:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403586:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40358a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40358e:	f43f aedc 	beq.w	40334a <__adddf3+0xe6>
  403592:	f04f 0203 	mov.w	r2, #3
  403596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40359a:	bf18      	it	ne
  40359c:	3203      	addne	r2, #3
  40359e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4035a2:	bf18      	it	ne
  4035a4:	3203      	addne	r2, #3
  4035a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4035aa:	f1c2 0320 	rsb	r3, r2, #32
  4035ae:	fa00 fc03 	lsl.w	ip, r0, r3
  4035b2:	fa20 f002 	lsr.w	r0, r0, r2
  4035b6:	fa01 fe03 	lsl.w	lr, r1, r3
  4035ba:	ea40 000e 	orr.w	r0, r0, lr
  4035be:	fa21 f102 	lsr.w	r1, r1, r2
  4035c2:	4414      	add	r4, r2
  4035c4:	e6c1      	b.n	40334a <__adddf3+0xe6>
  4035c6:	bf00      	nop

004035c8 <__aeabi_dmul>:
  4035c8:	b570      	push	{r4, r5, r6, lr}
  4035ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4035ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4035d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4035d6:	bf1d      	ittte	ne
  4035d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4035dc:	ea94 0f0c 	teqne	r4, ip
  4035e0:	ea95 0f0c 	teqne	r5, ip
  4035e4:	f000 f8de 	bleq	4037a4 <__aeabi_dmul+0x1dc>
  4035e8:	442c      	add	r4, r5
  4035ea:	ea81 0603 	eor.w	r6, r1, r3
  4035ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4035f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4035f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4035fa:	bf18      	it	ne
  4035fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403608:	d038      	beq.n	40367c <__aeabi_dmul+0xb4>
  40360a:	fba0 ce02 	umull	ip, lr, r0, r2
  40360e:	f04f 0500 	mov.w	r5, #0
  403612:	fbe1 e502 	umlal	lr, r5, r1, r2
  403616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40361a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40361e:	f04f 0600 	mov.w	r6, #0
  403622:	fbe1 5603 	umlal	r5, r6, r1, r3
  403626:	f09c 0f00 	teq	ip, #0
  40362a:	bf18      	it	ne
  40362c:	f04e 0e01 	orrne.w	lr, lr, #1
  403630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40363c:	d204      	bcs.n	403648 <__aeabi_dmul+0x80>
  40363e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403642:	416d      	adcs	r5, r5
  403644:	eb46 0606 	adc.w	r6, r6, r6
  403648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40364c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40365c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403660:	bf88      	it	hi
  403662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403666:	d81e      	bhi.n	4036a6 <__aeabi_dmul+0xde>
  403668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40366c:	bf08      	it	eq
  40366e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403672:	f150 0000 	adcs.w	r0, r0, #0
  403676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40367a:	bd70      	pop	{r4, r5, r6, pc}
  40367c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403680:	ea46 0101 	orr.w	r1, r6, r1
  403684:	ea40 0002 	orr.w	r0, r0, r2
  403688:	ea81 0103 	eor.w	r1, r1, r3
  40368c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403690:	bfc2      	ittt	gt
  403692:	ebd4 050c 	rsbsgt	r5, r4, ip
  403696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40369a:	bd70      	popgt	{r4, r5, r6, pc}
  40369c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4036a0:	f04f 0e00 	mov.w	lr, #0
  4036a4:	3c01      	subs	r4, #1
  4036a6:	f300 80ab 	bgt.w	403800 <__aeabi_dmul+0x238>
  4036aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4036ae:	bfde      	ittt	le
  4036b0:	2000      	movle	r0, #0
  4036b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4036b6:	bd70      	pople	{r4, r5, r6, pc}
  4036b8:	f1c4 0400 	rsb	r4, r4, #0
  4036bc:	3c20      	subs	r4, #32
  4036be:	da35      	bge.n	40372c <__aeabi_dmul+0x164>
  4036c0:	340c      	adds	r4, #12
  4036c2:	dc1b      	bgt.n	4036fc <__aeabi_dmul+0x134>
  4036c4:	f104 0414 	add.w	r4, r4, #20
  4036c8:	f1c4 0520 	rsb	r5, r4, #32
  4036cc:	fa00 f305 	lsl.w	r3, r0, r5
  4036d0:	fa20 f004 	lsr.w	r0, r0, r4
  4036d4:	fa01 f205 	lsl.w	r2, r1, r5
  4036d8:	ea40 0002 	orr.w	r0, r0, r2
  4036dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4036e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4036e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4036e8:	fa21 f604 	lsr.w	r6, r1, r4
  4036ec:	eb42 0106 	adc.w	r1, r2, r6
  4036f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4036f4:	bf08      	it	eq
  4036f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4036fa:	bd70      	pop	{r4, r5, r6, pc}
  4036fc:	f1c4 040c 	rsb	r4, r4, #12
  403700:	f1c4 0520 	rsb	r5, r4, #32
  403704:	fa00 f304 	lsl.w	r3, r0, r4
  403708:	fa20 f005 	lsr.w	r0, r0, r5
  40370c:	fa01 f204 	lsl.w	r2, r1, r4
  403710:	ea40 0002 	orr.w	r0, r0, r2
  403714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40371c:	f141 0100 	adc.w	r1, r1, #0
  403720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403724:	bf08      	it	eq
  403726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40372a:	bd70      	pop	{r4, r5, r6, pc}
  40372c:	f1c4 0520 	rsb	r5, r4, #32
  403730:	fa00 f205 	lsl.w	r2, r0, r5
  403734:	ea4e 0e02 	orr.w	lr, lr, r2
  403738:	fa20 f304 	lsr.w	r3, r0, r4
  40373c:	fa01 f205 	lsl.w	r2, r1, r5
  403740:	ea43 0302 	orr.w	r3, r3, r2
  403744:	fa21 f004 	lsr.w	r0, r1, r4
  403748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40374c:	fa21 f204 	lsr.w	r2, r1, r4
  403750:	ea20 0002 	bic.w	r0, r0, r2
  403754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40375c:	bf08      	it	eq
  40375e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403762:	bd70      	pop	{r4, r5, r6, pc}
  403764:	f094 0f00 	teq	r4, #0
  403768:	d10f      	bne.n	40378a <__aeabi_dmul+0x1c2>
  40376a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40376e:	0040      	lsls	r0, r0, #1
  403770:	eb41 0101 	adc.w	r1, r1, r1
  403774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403778:	bf08      	it	eq
  40377a:	3c01      	subeq	r4, #1
  40377c:	d0f7      	beq.n	40376e <__aeabi_dmul+0x1a6>
  40377e:	ea41 0106 	orr.w	r1, r1, r6
  403782:	f095 0f00 	teq	r5, #0
  403786:	bf18      	it	ne
  403788:	4770      	bxne	lr
  40378a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40378e:	0052      	lsls	r2, r2, #1
  403790:	eb43 0303 	adc.w	r3, r3, r3
  403794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403798:	bf08      	it	eq
  40379a:	3d01      	subeq	r5, #1
  40379c:	d0f7      	beq.n	40378e <__aeabi_dmul+0x1c6>
  40379e:	ea43 0306 	orr.w	r3, r3, r6
  4037a2:	4770      	bx	lr
  4037a4:	ea94 0f0c 	teq	r4, ip
  4037a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4037ac:	bf18      	it	ne
  4037ae:	ea95 0f0c 	teqne	r5, ip
  4037b2:	d00c      	beq.n	4037ce <__aeabi_dmul+0x206>
  4037b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4037b8:	bf18      	it	ne
  4037ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4037be:	d1d1      	bne.n	403764 <__aeabi_dmul+0x19c>
  4037c0:	ea81 0103 	eor.w	r1, r1, r3
  4037c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4037c8:	f04f 0000 	mov.w	r0, #0
  4037cc:	bd70      	pop	{r4, r5, r6, pc}
  4037ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4037d2:	bf06      	itte	eq
  4037d4:	4610      	moveq	r0, r2
  4037d6:	4619      	moveq	r1, r3
  4037d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4037dc:	d019      	beq.n	403812 <__aeabi_dmul+0x24a>
  4037de:	ea94 0f0c 	teq	r4, ip
  4037e2:	d102      	bne.n	4037ea <__aeabi_dmul+0x222>
  4037e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4037e8:	d113      	bne.n	403812 <__aeabi_dmul+0x24a>
  4037ea:	ea95 0f0c 	teq	r5, ip
  4037ee:	d105      	bne.n	4037fc <__aeabi_dmul+0x234>
  4037f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4037f4:	bf1c      	itt	ne
  4037f6:	4610      	movne	r0, r2
  4037f8:	4619      	movne	r1, r3
  4037fa:	d10a      	bne.n	403812 <__aeabi_dmul+0x24a>
  4037fc:	ea81 0103 	eor.w	r1, r1, r3
  403800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40380c:	f04f 0000 	mov.w	r0, #0
  403810:	bd70      	pop	{r4, r5, r6, pc}
  403812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40381a:	bd70      	pop	{r4, r5, r6, pc}

0040381c <__aeabi_ddiv>:
  40381c:	b570      	push	{r4, r5, r6, lr}
  40381e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40382a:	bf1d      	ittte	ne
  40382c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403830:	ea94 0f0c 	teqne	r4, ip
  403834:	ea95 0f0c 	teqne	r5, ip
  403838:	f000 f8a7 	bleq	40398a <__aeabi_ddiv+0x16e>
  40383c:	eba4 0405 	sub.w	r4, r4, r5
  403840:	ea81 0e03 	eor.w	lr, r1, r3
  403844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403848:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40384c:	f000 8088 	beq.w	403960 <__aeabi_ddiv+0x144>
  403850:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40385c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403860:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40386c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403874:	429d      	cmp	r5, r3
  403876:	bf08      	it	eq
  403878:	4296      	cmpeq	r6, r2
  40387a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40387e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403882:	d202      	bcs.n	40388a <__aeabi_ddiv+0x6e>
  403884:	085b      	lsrs	r3, r3, #1
  403886:	ea4f 0232 	mov.w	r2, r2, rrx
  40388a:	1ab6      	subs	r6, r6, r2
  40388c:	eb65 0503 	sbc.w	r5, r5, r3
  403890:	085b      	lsrs	r3, r3, #1
  403892:	ea4f 0232 	mov.w	r2, r2, rrx
  403896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40389a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40389e:	ebb6 0e02 	subs.w	lr, r6, r2
  4038a2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038a6:	bf22      	ittt	cs
  4038a8:	1ab6      	subcs	r6, r6, r2
  4038aa:	4675      	movcs	r5, lr
  4038ac:	ea40 000c 	orrcs.w	r0, r0, ip
  4038b0:	085b      	lsrs	r3, r3, #1
  4038b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4038b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4038ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038be:	bf22      	ittt	cs
  4038c0:	1ab6      	subcs	r6, r6, r2
  4038c2:	4675      	movcs	r5, lr
  4038c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4038c8:	085b      	lsrs	r3, r3, #1
  4038ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4038ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4038d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038d6:	bf22      	ittt	cs
  4038d8:	1ab6      	subcs	r6, r6, r2
  4038da:	4675      	movcs	r5, lr
  4038dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4038e0:	085b      	lsrs	r3, r3, #1
  4038e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4038e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4038ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038ee:	bf22      	ittt	cs
  4038f0:	1ab6      	subcs	r6, r6, r2
  4038f2:	4675      	movcs	r5, lr
  4038f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4038f8:	ea55 0e06 	orrs.w	lr, r5, r6
  4038fc:	d018      	beq.n	403930 <__aeabi_ddiv+0x114>
  4038fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403906:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40390a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40390e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40391a:	d1c0      	bne.n	40389e <__aeabi_ddiv+0x82>
  40391c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403920:	d10b      	bne.n	40393a <__aeabi_ddiv+0x11e>
  403922:	ea41 0100 	orr.w	r1, r1, r0
  403926:	f04f 0000 	mov.w	r0, #0
  40392a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40392e:	e7b6      	b.n	40389e <__aeabi_ddiv+0x82>
  403930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403934:	bf04      	itt	eq
  403936:	4301      	orreq	r1, r0
  403938:	2000      	moveq	r0, #0
  40393a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40393e:	bf88      	it	hi
  403940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403944:	f63f aeaf 	bhi.w	4036a6 <__aeabi_dmul+0xde>
  403948:	ebb5 0c03 	subs.w	ip, r5, r3
  40394c:	bf04      	itt	eq
  40394e:	ebb6 0c02 	subseq.w	ip, r6, r2
  403952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403956:	f150 0000 	adcs.w	r0, r0, #0
  40395a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40395e:	bd70      	pop	{r4, r5, r6, pc}
  403960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40396c:	bfc2      	ittt	gt
  40396e:	ebd4 050c 	rsbsgt	r5, r4, ip
  403972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403976:	bd70      	popgt	{r4, r5, r6, pc}
  403978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40397c:	f04f 0e00 	mov.w	lr, #0
  403980:	3c01      	subs	r4, #1
  403982:	e690      	b.n	4036a6 <__aeabi_dmul+0xde>
  403984:	ea45 0e06 	orr.w	lr, r5, r6
  403988:	e68d      	b.n	4036a6 <__aeabi_dmul+0xde>
  40398a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40398e:	ea94 0f0c 	teq	r4, ip
  403992:	bf08      	it	eq
  403994:	ea95 0f0c 	teqeq	r5, ip
  403998:	f43f af3b 	beq.w	403812 <__aeabi_dmul+0x24a>
  40399c:	ea94 0f0c 	teq	r4, ip
  4039a0:	d10a      	bne.n	4039b8 <__aeabi_ddiv+0x19c>
  4039a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4039a6:	f47f af34 	bne.w	403812 <__aeabi_dmul+0x24a>
  4039aa:	ea95 0f0c 	teq	r5, ip
  4039ae:	f47f af25 	bne.w	4037fc <__aeabi_dmul+0x234>
  4039b2:	4610      	mov	r0, r2
  4039b4:	4619      	mov	r1, r3
  4039b6:	e72c      	b.n	403812 <__aeabi_dmul+0x24a>
  4039b8:	ea95 0f0c 	teq	r5, ip
  4039bc:	d106      	bne.n	4039cc <__aeabi_ddiv+0x1b0>
  4039be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4039c2:	f43f aefd 	beq.w	4037c0 <__aeabi_dmul+0x1f8>
  4039c6:	4610      	mov	r0, r2
  4039c8:	4619      	mov	r1, r3
  4039ca:	e722      	b.n	403812 <__aeabi_dmul+0x24a>
  4039cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4039d0:	bf18      	it	ne
  4039d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4039d6:	f47f aec5 	bne.w	403764 <__aeabi_dmul+0x19c>
  4039da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4039de:	f47f af0d 	bne.w	4037fc <__aeabi_dmul+0x234>
  4039e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4039e6:	f47f aeeb 	bne.w	4037c0 <__aeabi_dmul+0x1f8>
  4039ea:	e712      	b.n	403812 <__aeabi_dmul+0x24a>

004039ec <__gedf2>:
  4039ec:	f04f 3cff 	mov.w	ip, #4294967295
  4039f0:	e006      	b.n	403a00 <__cmpdf2+0x4>
  4039f2:	bf00      	nop

004039f4 <__ledf2>:
  4039f4:	f04f 0c01 	mov.w	ip, #1
  4039f8:	e002      	b.n	403a00 <__cmpdf2+0x4>
  4039fa:	bf00      	nop

004039fc <__cmpdf2>:
  4039fc:	f04f 0c01 	mov.w	ip, #1
  403a00:	f84d cd04 	str.w	ip, [sp, #-4]!
  403a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403a10:	bf18      	it	ne
  403a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  403a16:	d01b      	beq.n	403a50 <__cmpdf2+0x54>
  403a18:	b001      	add	sp, #4
  403a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403a1e:	bf0c      	ite	eq
  403a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403a24:	ea91 0f03 	teqne	r1, r3
  403a28:	bf02      	ittt	eq
  403a2a:	ea90 0f02 	teqeq	r0, r2
  403a2e:	2000      	moveq	r0, #0
  403a30:	4770      	bxeq	lr
  403a32:	f110 0f00 	cmn.w	r0, #0
  403a36:	ea91 0f03 	teq	r1, r3
  403a3a:	bf58      	it	pl
  403a3c:	4299      	cmppl	r1, r3
  403a3e:	bf08      	it	eq
  403a40:	4290      	cmpeq	r0, r2
  403a42:	bf2c      	ite	cs
  403a44:	17d8      	asrcs	r0, r3, #31
  403a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403a4a:	f040 0001 	orr.w	r0, r0, #1
  403a4e:	4770      	bx	lr
  403a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403a58:	d102      	bne.n	403a60 <__cmpdf2+0x64>
  403a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403a5e:	d107      	bne.n	403a70 <__cmpdf2+0x74>
  403a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403a68:	d1d6      	bne.n	403a18 <__cmpdf2+0x1c>
  403a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403a6e:	d0d3      	beq.n	403a18 <__cmpdf2+0x1c>
  403a70:	f85d 0b04 	ldr.w	r0, [sp], #4
  403a74:	4770      	bx	lr
  403a76:	bf00      	nop

00403a78 <__aeabi_cdrcmple>:
  403a78:	4684      	mov	ip, r0
  403a7a:	4610      	mov	r0, r2
  403a7c:	4662      	mov	r2, ip
  403a7e:	468c      	mov	ip, r1
  403a80:	4619      	mov	r1, r3
  403a82:	4663      	mov	r3, ip
  403a84:	e000      	b.n	403a88 <__aeabi_cdcmpeq>
  403a86:	bf00      	nop

00403a88 <__aeabi_cdcmpeq>:
  403a88:	b501      	push	{r0, lr}
  403a8a:	f7ff ffb7 	bl	4039fc <__cmpdf2>
  403a8e:	2800      	cmp	r0, #0
  403a90:	bf48      	it	mi
  403a92:	f110 0f00 	cmnmi.w	r0, #0
  403a96:	bd01      	pop	{r0, pc}

00403a98 <__aeabi_dcmpeq>:
  403a98:	f84d ed08 	str.w	lr, [sp, #-8]!
  403a9c:	f7ff fff4 	bl	403a88 <__aeabi_cdcmpeq>
  403aa0:	bf0c      	ite	eq
  403aa2:	2001      	moveq	r0, #1
  403aa4:	2000      	movne	r0, #0
  403aa6:	f85d fb08 	ldr.w	pc, [sp], #8
  403aaa:	bf00      	nop

00403aac <__aeabi_dcmplt>:
  403aac:	f84d ed08 	str.w	lr, [sp, #-8]!
  403ab0:	f7ff ffea 	bl	403a88 <__aeabi_cdcmpeq>
  403ab4:	bf34      	ite	cc
  403ab6:	2001      	movcc	r0, #1
  403ab8:	2000      	movcs	r0, #0
  403aba:	f85d fb08 	ldr.w	pc, [sp], #8
  403abe:	bf00      	nop

00403ac0 <__aeabi_dcmple>:
  403ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
  403ac4:	f7ff ffe0 	bl	403a88 <__aeabi_cdcmpeq>
  403ac8:	bf94      	ite	ls
  403aca:	2001      	movls	r0, #1
  403acc:	2000      	movhi	r0, #0
  403ace:	f85d fb08 	ldr.w	pc, [sp], #8
  403ad2:	bf00      	nop

00403ad4 <__aeabi_dcmpge>:
  403ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
  403ad8:	f7ff ffce 	bl	403a78 <__aeabi_cdrcmple>
  403adc:	bf94      	ite	ls
  403ade:	2001      	movls	r0, #1
  403ae0:	2000      	movhi	r0, #0
  403ae2:	f85d fb08 	ldr.w	pc, [sp], #8
  403ae6:	bf00      	nop

00403ae8 <__aeabi_dcmpgt>:
  403ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
  403aec:	f7ff ffc4 	bl	403a78 <__aeabi_cdrcmple>
  403af0:	bf34      	ite	cc
  403af2:	2001      	movcc	r0, #1
  403af4:	2000      	movcs	r0, #0
  403af6:	f85d fb08 	ldr.w	pc, [sp], #8
  403afa:	bf00      	nop

00403afc <__aeabi_d2f>:
  403afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  403b04:	bf24      	itt	cs
  403b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  403b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  403b0e:	d90d      	bls.n	403b2c <__aeabi_d2f+0x30>
  403b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  403b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  403b24:	bf08      	it	eq
  403b26:	f020 0001 	biceq.w	r0, r0, #1
  403b2a:	4770      	bx	lr
  403b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403b30:	d121      	bne.n	403b76 <__aeabi_d2f+0x7a>
  403b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  403b36:	bfbc      	itt	lt
  403b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403b3c:	4770      	bxlt	lr
  403b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
  403b46:	f1c2 0218 	rsb	r2, r2, #24
  403b4a:	f1c2 0c20 	rsb	ip, r2, #32
  403b4e:	fa10 f30c 	lsls.w	r3, r0, ip
  403b52:	fa20 f002 	lsr.w	r0, r0, r2
  403b56:	bf18      	it	ne
  403b58:	f040 0001 	orrne.w	r0, r0, #1
  403b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403b64:	fa03 fc0c 	lsl.w	ip, r3, ip
  403b68:	ea40 000c 	orr.w	r0, r0, ip
  403b6c:	fa23 f302 	lsr.w	r3, r3, r2
  403b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403b74:	e7cc      	b.n	403b10 <__aeabi_d2f+0x14>
  403b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
  403b7a:	d107      	bne.n	403b8c <__aeabi_d2f+0x90>
  403b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403b80:	bf1e      	ittt	ne
  403b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  403b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  403b8a:	4770      	bxne	lr
  403b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403b98:	4770      	bx	lr
  403b9a:	bf00      	nop

00403b9c <__aeabi_frsub>:
  403b9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  403ba0:	e002      	b.n	403ba8 <__addsf3>
  403ba2:	bf00      	nop

00403ba4 <__aeabi_fsub>:
  403ba4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00403ba8 <__addsf3>:
  403ba8:	0042      	lsls	r2, r0, #1
  403baa:	bf1f      	itttt	ne
  403bac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  403bb0:	ea92 0f03 	teqne	r2, r3
  403bb4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  403bb8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  403bbc:	d06a      	beq.n	403c94 <__addsf3+0xec>
  403bbe:	ea4f 6212 	mov.w	r2, r2, lsr #24
  403bc2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  403bc6:	bfc1      	itttt	gt
  403bc8:	18d2      	addgt	r2, r2, r3
  403bca:	4041      	eorgt	r1, r0
  403bcc:	4048      	eorgt	r0, r1
  403bce:	4041      	eorgt	r1, r0
  403bd0:	bfb8      	it	lt
  403bd2:	425b      	neglt	r3, r3
  403bd4:	2b19      	cmp	r3, #25
  403bd6:	bf88      	it	hi
  403bd8:	4770      	bxhi	lr
  403bda:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  403bde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403be2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  403be6:	bf18      	it	ne
  403be8:	4240      	negne	r0, r0
  403bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403bee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  403bf2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  403bf6:	bf18      	it	ne
  403bf8:	4249      	negne	r1, r1
  403bfa:	ea92 0f03 	teq	r2, r3
  403bfe:	d03f      	beq.n	403c80 <__addsf3+0xd8>
  403c00:	f1a2 0201 	sub.w	r2, r2, #1
  403c04:	fa41 fc03 	asr.w	ip, r1, r3
  403c08:	eb10 000c 	adds.w	r0, r0, ip
  403c0c:	f1c3 0320 	rsb	r3, r3, #32
  403c10:	fa01 f103 	lsl.w	r1, r1, r3
  403c14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  403c18:	d502      	bpl.n	403c20 <__addsf3+0x78>
  403c1a:	4249      	negs	r1, r1
  403c1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  403c20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  403c24:	d313      	bcc.n	403c4e <__addsf3+0xa6>
  403c26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  403c2a:	d306      	bcc.n	403c3a <__addsf3+0x92>
  403c2c:	0840      	lsrs	r0, r0, #1
  403c2e:	ea4f 0131 	mov.w	r1, r1, rrx
  403c32:	f102 0201 	add.w	r2, r2, #1
  403c36:	2afe      	cmp	r2, #254	; 0xfe
  403c38:	d251      	bcs.n	403cde <__addsf3+0x136>
  403c3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  403c3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  403c42:	bf08      	it	eq
  403c44:	f020 0001 	biceq.w	r0, r0, #1
  403c48:	ea40 0003 	orr.w	r0, r0, r3
  403c4c:	4770      	bx	lr
  403c4e:	0049      	lsls	r1, r1, #1
  403c50:	eb40 0000 	adc.w	r0, r0, r0
  403c54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  403c58:	f1a2 0201 	sub.w	r2, r2, #1
  403c5c:	d1ed      	bne.n	403c3a <__addsf3+0x92>
  403c5e:	fab0 fc80 	clz	ip, r0
  403c62:	f1ac 0c08 	sub.w	ip, ip, #8
  403c66:	ebb2 020c 	subs.w	r2, r2, ip
  403c6a:	fa00 f00c 	lsl.w	r0, r0, ip
  403c6e:	bfaa      	itet	ge
  403c70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  403c74:	4252      	neglt	r2, r2
  403c76:	4318      	orrge	r0, r3
  403c78:	bfbc      	itt	lt
  403c7a:	40d0      	lsrlt	r0, r2
  403c7c:	4318      	orrlt	r0, r3
  403c7e:	4770      	bx	lr
  403c80:	f092 0f00 	teq	r2, #0
  403c84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  403c88:	bf06      	itte	eq
  403c8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  403c8e:	3201      	addeq	r2, #1
  403c90:	3b01      	subne	r3, #1
  403c92:	e7b5      	b.n	403c00 <__addsf3+0x58>
  403c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
  403c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  403c9c:	bf18      	it	ne
  403c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  403ca2:	d021      	beq.n	403ce8 <__addsf3+0x140>
  403ca4:	ea92 0f03 	teq	r2, r3
  403ca8:	d004      	beq.n	403cb4 <__addsf3+0x10c>
  403caa:	f092 0f00 	teq	r2, #0
  403cae:	bf08      	it	eq
  403cb0:	4608      	moveq	r0, r1
  403cb2:	4770      	bx	lr
  403cb4:	ea90 0f01 	teq	r0, r1
  403cb8:	bf1c      	itt	ne
  403cba:	2000      	movne	r0, #0
  403cbc:	4770      	bxne	lr
  403cbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  403cc2:	d104      	bne.n	403cce <__addsf3+0x126>
  403cc4:	0040      	lsls	r0, r0, #1
  403cc6:	bf28      	it	cs
  403cc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  403ccc:	4770      	bx	lr
  403cce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  403cd2:	bf3c      	itt	cc
  403cd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  403cd8:	4770      	bxcc	lr
  403cda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  403cde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  403ce2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403ce6:	4770      	bx	lr
  403ce8:	ea7f 6222 	mvns.w	r2, r2, asr #24
  403cec:	bf16      	itet	ne
  403cee:	4608      	movne	r0, r1
  403cf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  403cf4:	4601      	movne	r1, r0
  403cf6:	0242      	lsls	r2, r0, #9
  403cf8:	bf06      	itte	eq
  403cfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  403cfe:	ea90 0f01 	teqeq	r0, r1
  403d02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  403d06:	4770      	bx	lr

00403d08 <__aeabi_ui2f>:
  403d08:	f04f 0300 	mov.w	r3, #0
  403d0c:	e004      	b.n	403d18 <__aeabi_i2f+0x8>
  403d0e:	bf00      	nop

00403d10 <__aeabi_i2f>:
  403d10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  403d14:	bf48      	it	mi
  403d16:	4240      	negmi	r0, r0
  403d18:	ea5f 0c00 	movs.w	ip, r0
  403d1c:	bf08      	it	eq
  403d1e:	4770      	bxeq	lr
  403d20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  403d24:	4601      	mov	r1, r0
  403d26:	f04f 0000 	mov.w	r0, #0
  403d2a:	e01c      	b.n	403d66 <__aeabi_l2f+0x2a>

00403d2c <__aeabi_ul2f>:
  403d2c:	ea50 0201 	orrs.w	r2, r0, r1
  403d30:	bf08      	it	eq
  403d32:	4770      	bxeq	lr
  403d34:	f04f 0300 	mov.w	r3, #0
  403d38:	e00a      	b.n	403d50 <__aeabi_l2f+0x14>
  403d3a:	bf00      	nop

00403d3c <__aeabi_l2f>:
  403d3c:	ea50 0201 	orrs.w	r2, r0, r1
  403d40:	bf08      	it	eq
  403d42:	4770      	bxeq	lr
  403d44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  403d48:	d502      	bpl.n	403d50 <__aeabi_l2f+0x14>
  403d4a:	4240      	negs	r0, r0
  403d4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403d50:	ea5f 0c01 	movs.w	ip, r1
  403d54:	bf02      	ittt	eq
  403d56:	4684      	moveq	ip, r0
  403d58:	4601      	moveq	r1, r0
  403d5a:	2000      	moveq	r0, #0
  403d5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  403d60:	bf08      	it	eq
  403d62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  403d66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  403d6a:	fabc f28c 	clz	r2, ip
  403d6e:	3a08      	subs	r2, #8
  403d70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  403d74:	db10      	blt.n	403d98 <__aeabi_l2f+0x5c>
  403d76:	fa01 fc02 	lsl.w	ip, r1, r2
  403d7a:	4463      	add	r3, ip
  403d7c:	fa00 fc02 	lsl.w	ip, r0, r2
  403d80:	f1c2 0220 	rsb	r2, r2, #32
  403d84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403d88:	fa20 f202 	lsr.w	r2, r0, r2
  403d8c:	eb43 0002 	adc.w	r0, r3, r2
  403d90:	bf08      	it	eq
  403d92:	f020 0001 	biceq.w	r0, r0, #1
  403d96:	4770      	bx	lr
  403d98:	f102 0220 	add.w	r2, r2, #32
  403d9c:	fa01 fc02 	lsl.w	ip, r1, r2
  403da0:	f1c2 0220 	rsb	r2, r2, #32
  403da4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  403da8:	fa21 f202 	lsr.w	r2, r1, r2
  403dac:	eb43 0002 	adc.w	r0, r3, r2
  403db0:	bf08      	it	eq
  403db2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  403db6:	4770      	bx	lr

00403db8 <__aeabi_fmul>:
  403db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  403dc0:	bf1e      	ittt	ne
  403dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  403dc6:	ea92 0f0c 	teqne	r2, ip
  403dca:	ea93 0f0c 	teqne	r3, ip
  403dce:	d06f      	beq.n	403eb0 <__aeabi_fmul+0xf8>
  403dd0:	441a      	add	r2, r3
  403dd2:	ea80 0c01 	eor.w	ip, r0, r1
  403dd6:	0240      	lsls	r0, r0, #9
  403dd8:	bf18      	it	ne
  403dda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  403dde:	d01e      	beq.n	403e1e <__aeabi_fmul+0x66>
  403de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  403de4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  403de8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  403dec:	fba0 3101 	umull	r3, r1, r0, r1
  403df0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  403df4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  403df8:	bf3e      	ittt	cc
  403dfa:	0049      	lslcc	r1, r1, #1
  403dfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  403e00:	005b      	lslcc	r3, r3, #1
  403e02:	ea40 0001 	orr.w	r0, r0, r1
  403e06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  403e0a:	2afd      	cmp	r2, #253	; 0xfd
  403e0c:	d81d      	bhi.n	403e4a <__aeabi_fmul+0x92>
  403e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  403e12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  403e16:	bf08      	it	eq
  403e18:	f020 0001 	biceq.w	r0, r0, #1
  403e1c:	4770      	bx	lr
  403e1e:	f090 0f00 	teq	r0, #0
  403e22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  403e26:	bf08      	it	eq
  403e28:	0249      	lsleq	r1, r1, #9
  403e2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  403e2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  403e32:	3a7f      	subs	r2, #127	; 0x7f
  403e34:	bfc2      	ittt	gt
  403e36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  403e3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  403e3e:	4770      	bxgt	lr
  403e40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403e44:	f04f 0300 	mov.w	r3, #0
  403e48:	3a01      	subs	r2, #1
  403e4a:	dc5d      	bgt.n	403f08 <__aeabi_fmul+0x150>
  403e4c:	f112 0f19 	cmn.w	r2, #25
  403e50:	bfdc      	itt	le
  403e52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  403e56:	4770      	bxle	lr
  403e58:	f1c2 0200 	rsb	r2, r2, #0
  403e5c:	0041      	lsls	r1, r0, #1
  403e5e:	fa21 f102 	lsr.w	r1, r1, r2
  403e62:	f1c2 0220 	rsb	r2, r2, #32
  403e66:	fa00 fc02 	lsl.w	ip, r0, r2
  403e6a:	ea5f 0031 	movs.w	r0, r1, rrx
  403e6e:	f140 0000 	adc.w	r0, r0, #0
  403e72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  403e76:	bf08      	it	eq
  403e78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  403e7c:	4770      	bx	lr
  403e7e:	f092 0f00 	teq	r2, #0
  403e82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  403e86:	bf02      	ittt	eq
  403e88:	0040      	lsleq	r0, r0, #1
  403e8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  403e8e:	3a01      	subeq	r2, #1
  403e90:	d0f9      	beq.n	403e86 <__aeabi_fmul+0xce>
  403e92:	ea40 000c 	orr.w	r0, r0, ip
  403e96:	f093 0f00 	teq	r3, #0
  403e9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403e9e:	bf02      	ittt	eq
  403ea0:	0049      	lsleq	r1, r1, #1
  403ea2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  403ea6:	3b01      	subeq	r3, #1
  403ea8:	d0f9      	beq.n	403e9e <__aeabi_fmul+0xe6>
  403eaa:	ea41 010c 	orr.w	r1, r1, ip
  403eae:	e78f      	b.n	403dd0 <__aeabi_fmul+0x18>
  403eb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  403eb4:	ea92 0f0c 	teq	r2, ip
  403eb8:	bf18      	it	ne
  403eba:	ea93 0f0c 	teqne	r3, ip
  403ebe:	d00a      	beq.n	403ed6 <__aeabi_fmul+0x11e>
  403ec0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  403ec4:	bf18      	it	ne
  403ec6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  403eca:	d1d8      	bne.n	403e7e <__aeabi_fmul+0xc6>
  403ecc:	ea80 0001 	eor.w	r0, r0, r1
  403ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  403ed4:	4770      	bx	lr
  403ed6:	f090 0f00 	teq	r0, #0
  403eda:	bf17      	itett	ne
  403edc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  403ee0:	4608      	moveq	r0, r1
  403ee2:	f091 0f00 	teqne	r1, #0
  403ee6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  403eea:	d014      	beq.n	403f16 <__aeabi_fmul+0x15e>
  403eec:	ea92 0f0c 	teq	r2, ip
  403ef0:	d101      	bne.n	403ef6 <__aeabi_fmul+0x13e>
  403ef2:	0242      	lsls	r2, r0, #9
  403ef4:	d10f      	bne.n	403f16 <__aeabi_fmul+0x15e>
  403ef6:	ea93 0f0c 	teq	r3, ip
  403efa:	d103      	bne.n	403f04 <__aeabi_fmul+0x14c>
  403efc:	024b      	lsls	r3, r1, #9
  403efe:	bf18      	it	ne
  403f00:	4608      	movne	r0, r1
  403f02:	d108      	bne.n	403f16 <__aeabi_fmul+0x15e>
  403f04:	ea80 0001 	eor.w	r0, r0, r1
  403f08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  403f0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403f10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403f14:	4770      	bx	lr
  403f16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403f1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  403f1e:	4770      	bx	lr

00403f20 <__aeabi_fdiv>:
  403f20:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403f24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  403f28:	bf1e      	ittt	ne
  403f2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  403f2e:	ea92 0f0c 	teqne	r2, ip
  403f32:	ea93 0f0c 	teqne	r3, ip
  403f36:	d069      	beq.n	40400c <__aeabi_fdiv+0xec>
  403f38:	eba2 0203 	sub.w	r2, r2, r3
  403f3c:	ea80 0c01 	eor.w	ip, r0, r1
  403f40:	0249      	lsls	r1, r1, #9
  403f42:	ea4f 2040 	mov.w	r0, r0, lsl #9
  403f46:	d037      	beq.n	403fb8 <__aeabi_fdiv+0x98>
  403f48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403f4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  403f50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  403f54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  403f58:	428b      	cmp	r3, r1
  403f5a:	bf38      	it	cc
  403f5c:	005b      	lslcc	r3, r3, #1
  403f5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  403f62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  403f66:	428b      	cmp	r3, r1
  403f68:	bf24      	itt	cs
  403f6a:	1a5b      	subcs	r3, r3, r1
  403f6c:	ea40 000c 	orrcs.w	r0, r0, ip
  403f70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  403f74:	bf24      	itt	cs
  403f76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  403f7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403f7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  403f82:	bf24      	itt	cs
  403f84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  403f88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403f8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  403f90:	bf24      	itt	cs
  403f92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  403f96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403f9a:	011b      	lsls	r3, r3, #4
  403f9c:	bf18      	it	ne
  403f9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  403fa2:	d1e0      	bne.n	403f66 <__aeabi_fdiv+0x46>
  403fa4:	2afd      	cmp	r2, #253	; 0xfd
  403fa6:	f63f af50 	bhi.w	403e4a <__aeabi_fmul+0x92>
  403faa:	428b      	cmp	r3, r1
  403fac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  403fb0:	bf08      	it	eq
  403fb2:	f020 0001 	biceq.w	r0, r0, #1
  403fb6:	4770      	bx	lr
  403fb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  403fbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  403fc0:	327f      	adds	r2, #127	; 0x7f
  403fc2:	bfc2      	ittt	gt
  403fc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  403fc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  403fcc:	4770      	bxgt	lr
  403fce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403fd2:	f04f 0300 	mov.w	r3, #0
  403fd6:	3a01      	subs	r2, #1
  403fd8:	e737      	b.n	403e4a <__aeabi_fmul+0x92>
  403fda:	f092 0f00 	teq	r2, #0
  403fde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  403fe2:	bf02      	ittt	eq
  403fe4:	0040      	lsleq	r0, r0, #1
  403fe6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  403fea:	3a01      	subeq	r2, #1
  403fec:	d0f9      	beq.n	403fe2 <__aeabi_fdiv+0xc2>
  403fee:	ea40 000c 	orr.w	r0, r0, ip
  403ff2:	f093 0f00 	teq	r3, #0
  403ff6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403ffa:	bf02      	ittt	eq
  403ffc:	0049      	lsleq	r1, r1, #1
  403ffe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  404002:	3b01      	subeq	r3, #1
  404004:	d0f9      	beq.n	403ffa <__aeabi_fdiv+0xda>
  404006:	ea41 010c 	orr.w	r1, r1, ip
  40400a:	e795      	b.n	403f38 <__aeabi_fdiv+0x18>
  40400c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  404010:	ea92 0f0c 	teq	r2, ip
  404014:	d108      	bne.n	404028 <__aeabi_fdiv+0x108>
  404016:	0242      	lsls	r2, r0, #9
  404018:	f47f af7d 	bne.w	403f16 <__aeabi_fmul+0x15e>
  40401c:	ea93 0f0c 	teq	r3, ip
  404020:	f47f af70 	bne.w	403f04 <__aeabi_fmul+0x14c>
  404024:	4608      	mov	r0, r1
  404026:	e776      	b.n	403f16 <__aeabi_fmul+0x15e>
  404028:	ea93 0f0c 	teq	r3, ip
  40402c:	d104      	bne.n	404038 <__aeabi_fdiv+0x118>
  40402e:	024b      	lsls	r3, r1, #9
  404030:	f43f af4c 	beq.w	403ecc <__aeabi_fmul+0x114>
  404034:	4608      	mov	r0, r1
  404036:	e76e      	b.n	403f16 <__aeabi_fmul+0x15e>
  404038:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40403c:	bf18      	it	ne
  40403e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  404042:	d1ca      	bne.n	403fda <__aeabi_fdiv+0xba>
  404044:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  404048:	f47f af5c 	bne.w	403f04 <__aeabi_fmul+0x14c>
  40404c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  404050:	f47f af3c 	bne.w	403ecc <__aeabi_fmul+0x114>
  404054:	e75f      	b.n	403f16 <__aeabi_fmul+0x15e>
  404056:	bf00      	nop

00404058 <__gesf2>:
  404058:	f04f 3cff 	mov.w	ip, #4294967295
  40405c:	e006      	b.n	40406c <__cmpsf2+0x4>
  40405e:	bf00      	nop

00404060 <__lesf2>:
  404060:	f04f 0c01 	mov.w	ip, #1
  404064:	e002      	b.n	40406c <__cmpsf2+0x4>
  404066:	bf00      	nop

00404068 <__cmpsf2>:
  404068:	f04f 0c01 	mov.w	ip, #1
  40406c:	f84d cd04 	str.w	ip, [sp, #-4]!
  404070:	ea4f 0240 	mov.w	r2, r0, lsl #1
  404074:	ea4f 0341 	mov.w	r3, r1, lsl #1
  404078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40407c:	bf18      	it	ne
  40407e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404082:	d011      	beq.n	4040a8 <__cmpsf2+0x40>
  404084:	b001      	add	sp, #4
  404086:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  40408a:	bf18      	it	ne
  40408c:	ea90 0f01 	teqne	r0, r1
  404090:	bf58      	it	pl
  404092:	ebb2 0003 	subspl.w	r0, r2, r3
  404096:	bf88      	it	hi
  404098:	17c8      	asrhi	r0, r1, #31
  40409a:	bf38      	it	cc
  40409c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  4040a0:	bf18      	it	ne
  4040a2:	f040 0001 	orrne.w	r0, r0, #1
  4040a6:	4770      	bx	lr
  4040a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4040ac:	d102      	bne.n	4040b4 <__cmpsf2+0x4c>
  4040ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  4040b2:	d105      	bne.n	4040c0 <__cmpsf2+0x58>
  4040b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  4040b8:	d1e4      	bne.n	404084 <__cmpsf2+0x1c>
  4040ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  4040be:	d0e1      	beq.n	404084 <__cmpsf2+0x1c>
  4040c0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4040c4:	4770      	bx	lr
  4040c6:	bf00      	nop

004040c8 <__aeabi_cfrcmple>:
  4040c8:	4684      	mov	ip, r0
  4040ca:	4608      	mov	r0, r1
  4040cc:	4661      	mov	r1, ip
  4040ce:	e7ff      	b.n	4040d0 <__aeabi_cfcmpeq>

004040d0 <__aeabi_cfcmpeq>:
  4040d0:	b50f      	push	{r0, r1, r2, r3, lr}
  4040d2:	f7ff ffc9 	bl	404068 <__cmpsf2>
  4040d6:	2800      	cmp	r0, #0
  4040d8:	bf48      	it	mi
  4040da:	f110 0f00 	cmnmi.w	r0, #0
  4040de:	bd0f      	pop	{r0, r1, r2, r3, pc}

004040e0 <__aeabi_fcmpeq>:
  4040e0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4040e4:	f7ff fff4 	bl	4040d0 <__aeabi_cfcmpeq>
  4040e8:	bf0c      	ite	eq
  4040ea:	2001      	moveq	r0, #1
  4040ec:	2000      	movne	r0, #0
  4040ee:	f85d fb08 	ldr.w	pc, [sp], #8
  4040f2:	bf00      	nop

004040f4 <__aeabi_fcmplt>:
  4040f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4040f8:	f7ff ffea 	bl	4040d0 <__aeabi_cfcmpeq>
  4040fc:	bf34      	ite	cc
  4040fe:	2001      	movcc	r0, #1
  404100:	2000      	movcs	r0, #0
  404102:	f85d fb08 	ldr.w	pc, [sp], #8
  404106:	bf00      	nop

00404108 <__aeabi_fcmple>:
  404108:	f84d ed08 	str.w	lr, [sp, #-8]!
  40410c:	f7ff ffe0 	bl	4040d0 <__aeabi_cfcmpeq>
  404110:	bf94      	ite	ls
  404112:	2001      	movls	r0, #1
  404114:	2000      	movhi	r0, #0
  404116:	f85d fb08 	ldr.w	pc, [sp], #8
  40411a:	bf00      	nop

0040411c <__aeabi_fcmpge>:
  40411c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404120:	f7ff ffd2 	bl	4040c8 <__aeabi_cfrcmple>
  404124:	bf94      	ite	ls
  404126:	2001      	movls	r0, #1
  404128:	2000      	movhi	r0, #0
  40412a:	f85d fb08 	ldr.w	pc, [sp], #8
  40412e:	bf00      	nop

00404130 <__aeabi_fcmpgt>:
  404130:	f84d ed08 	str.w	lr, [sp, #-8]!
  404134:	f7ff ffc8 	bl	4040c8 <__aeabi_cfrcmple>
  404138:	bf34      	ite	cc
  40413a:	2001      	movcc	r0, #1
  40413c:	2000      	movcs	r0, #0
  40413e:	f85d fb08 	ldr.w	pc, [sp], #8
  404142:	bf00      	nop

00404144 <__aeabi_fcmpun>:
  404144:	ea4f 0240 	mov.w	r2, r0, lsl #1
  404148:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40414c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  404150:	d102      	bne.n	404158 <__aeabi_fcmpun+0x14>
  404152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  404156:	d108      	bne.n	40416a <__aeabi_fcmpun+0x26>
  404158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  40415c:	d102      	bne.n	404164 <__aeabi_fcmpun+0x20>
  40415e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  404162:	d102      	bne.n	40416a <__aeabi_fcmpun+0x26>
  404164:	f04f 0000 	mov.w	r0, #0
  404168:	4770      	bx	lr
  40416a:	f04f 0001 	mov.w	r0, #1
  40416e:	4770      	bx	lr

00404170 <__errno>:
  404170:	4b01      	ldr	r3, [pc, #4]	; (404178 <__errno+0x8>)
  404172:	6818      	ldr	r0, [r3, #0]
  404174:	4770      	bx	lr
  404176:	bf00      	nop
  404178:	20400010 	.word	0x20400010

0040417c <__libc_init_array>:
  40417c:	b570      	push	{r4, r5, r6, lr}
  40417e:	4e0f      	ldr	r6, [pc, #60]	; (4041bc <__libc_init_array+0x40>)
  404180:	4d0f      	ldr	r5, [pc, #60]	; (4041c0 <__libc_init_array+0x44>)
  404182:	1b76      	subs	r6, r6, r5
  404184:	10b6      	asrs	r6, r6, #2
  404186:	bf18      	it	ne
  404188:	2400      	movne	r4, #0
  40418a:	d005      	beq.n	404198 <__libc_init_array+0x1c>
  40418c:	3401      	adds	r4, #1
  40418e:	f855 3b04 	ldr.w	r3, [r5], #4
  404192:	4798      	blx	r3
  404194:	42a6      	cmp	r6, r4
  404196:	d1f9      	bne.n	40418c <__libc_init_array+0x10>
  404198:	4e0a      	ldr	r6, [pc, #40]	; (4041c4 <__libc_init_array+0x48>)
  40419a:	4d0b      	ldr	r5, [pc, #44]	; (4041c8 <__libc_init_array+0x4c>)
  40419c:	1b76      	subs	r6, r6, r5
  40419e:	f005 f99f 	bl	4094e0 <_init>
  4041a2:	10b6      	asrs	r6, r6, #2
  4041a4:	bf18      	it	ne
  4041a6:	2400      	movne	r4, #0
  4041a8:	d006      	beq.n	4041b8 <__libc_init_array+0x3c>
  4041aa:	3401      	adds	r4, #1
  4041ac:	f855 3b04 	ldr.w	r3, [r5], #4
  4041b0:	4798      	blx	r3
  4041b2:	42a6      	cmp	r6, r4
  4041b4:	d1f9      	bne.n	4041aa <__libc_init_array+0x2e>
  4041b6:	bd70      	pop	{r4, r5, r6, pc}
  4041b8:	bd70      	pop	{r4, r5, r6, pc}
  4041ba:	bf00      	nop
  4041bc:	004094ec 	.word	0x004094ec
  4041c0:	004094ec 	.word	0x004094ec
  4041c4:	004094f4 	.word	0x004094f4
  4041c8:	004094ec 	.word	0x004094ec

004041cc <malloc>:
  4041cc:	4b02      	ldr	r3, [pc, #8]	; (4041d8 <malloc+0xc>)
  4041ce:	4601      	mov	r1, r0
  4041d0:	6818      	ldr	r0, [r3, #0]
  4041d2:	f000 b80b 	b.w	4041ec <_malloc_r>
  4041d6:	bf00      	nop
  4041d8:	20400010 	.word	0x20400010

004041dc <free>:
  4041dc:	4b02      	ldr	r3, [pc, #8]	; (4041e8 <free+0xc>)
  4041de:	4601      	mov	r1, r0
  4041e0:	6818      	ldr	r0, [r3, #0]
  4041e2:	f003 ba35 	b.w	407650 <_free_r>
  4041e6:	bf00      	nop
  4041e8:	20400010 	.word	0x20400010

004041ec <_malloc_r>:
  4041ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041f0:	f101 060b 	add.w	r6, r1, #11
  4041f4:	2e16      	cmp	r6, #22
  4041f6:	b083      	sub	sp, #12
  4041f8:	4605      	mov	r5, r0
  4041fa:	f240 809e 	bls.w	40433a <_malloc_r+0x14e>
  4041fe:	f036 0607 	bics.w	r6, r6, #7
  404202:	f100 80bd 	bmi.w	404380 <_malloc_r+0x194>
  404206:	42b1      	cmp	r1, r6
  404208:	f200 80ba 	bhi.w	404380 <_malloc_r+0x194>
  40420c:	f000 fb86 	bl	40491c <__malloc_lock>
  404210:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404214:	f0c0 8293 	bcc.w	40473e <_malloc_r+0x552>
  404218:	0a73      	lsrs	r3, r6, #9
  40421a:	f000 80b8 	beq.w	40438e <_malloc_r+0x1a2>
  40421e:	2b04      	cmp	r3, #4
  404220:	f200 8179 	bhi.w	404516 <_malloc_r+0x32a>
  404224:	09b3      	lsrs	r3, r6, #6
  404226:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40422a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40422e:	00c3      	lsls	r3, r0, #3
  404230:	4fbf      	ldr	r7, [pc, #764]	; (404530 <_malloc_r+0x344>)
  404232:	443b      	add	r3, r7
  404234:	f1a3 0108 	sub.w	r1, r3, #8
  404238:	685c      	ldr	r4, [r3, #4]
  40423a:	42a1      	cmp	r1, r4
  40423c:	d106      	bne.n	40424c <_malloc_r+0x60>
  40423e:	e00c      	b.n	40425a <_malloc_r+0x6e>
  404240:	2a00      	cmp	r2, #0
  404242:	f280 80aa 	bge.w	40439a <_malloc_r+0x1ae>
  404246:	68e4      	ldr	r4, [r4, #12]
  404248:	42a1      	cmp	r1, r4
  40424a:	d006      	beq.n	40425a <_malloc_r+0x6e>
  40424c:	6863      	ldr	r3, [r4, #4]
  40424e:	f023 0303 	bic.w	r3, r3, #3
  404252:	1b9a      	subs	r2, r3, r6
  404254:	2a0f      	cmp	r2, #15
  404256:	ddf3      	ble.n	404240 <_malloc_r+0x54>
  404258:	4670      	mov	r0, lr
  40425a:	693c      	ldr	r4, [r7, #16]
  40425c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404544 <_malloc_r+0x358>
  404260:	4574      	cmp	r4, lr
  404262:	f000 81ab 	beq.w	4045bc <_malloc_r+0x3d0>
  404266:	6863      	ldr	r3, [r4, #4]
  404268:	f023 0303 	bic.w	r3, r3, #3
  40426c:	1b9a      	subs	r2, r3, r6
  40426e:	2a0f      	cmp	r2, #15
  404270:	f300 8190 	bgt.w	404594 <_malloc_r+0x3a8>
  404274:	2a00      	cmp	r2, #0
  404276:	f8c7 e014 	str.w	lr, [r7, #20]
  40427a:	f8c7 e010 	str.w	lr, [r7, #16]
  40427e:	f280 809d 	bge.w	4043bc <_malloc_r+0x1d0>
  404282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404286:	f080 8161 	bcs.w	40454c <_malloc_r+0x360>
  40428a:	08db      	lsrs	r3, r3, #3
  40428c:	f103 0c01 	add.w	ip, r3, #1
  404290:	1099      	asrs	r1, r3, #2
  404292:	687a      	ldr	r2, [r7, #4]
  404294:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404298:	f8c4 8008 	str.w	r8, [r4, #8]
  40429c:	2301      	movs	r3, #1
  40429e:	408b      	lsls	r3, r1
  4042a0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4042a4:	4313      	orrs	r3, r2
  4042a6:	3908      	subs	r1, #8
  4042a8:	60e1      	str	r1, [r4, #12]
  4042aa:	607b      	str	r3, [r7, #4]
  4042ac:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4042b0:	f8c8 400c 	str.w	r4, [r8, #12]
  4042b4:	1082      	asrs	r2, r0, #2
  4042b6:	2401      	movs	r4, #1
  4042b8:	4094      	lsls	r4, r2
  4042ba:	429c      	cmp	r4, r3
  4042bc:	f200 808b 	bhi.w	4043d6 <_malloc_r+0x1ea>
  4042c0:	421c      	tst	r4, r3
  4042c2:	d106      	bne.n	4042d2 <_malloc_r+0xe6>
  4042c4:	f020 0003 	bic.w	r0, r0, #3
  4042c8:	0064      	lsls	r4, r4, #1
  4042ca:	421c      	tst	r4, r3
  4042cc:	f100 0004 	add.w	r0, r0, #4
  4042d0:	d0fa      	beq.n	4042c8 <_malloc_r+0xdc>
  4042d2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4042d6:	46cc      	mov	ip, r9
  4042d8:	4680      	mov	r8, r0
  4042da:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4042de:	459c      	cmp	ip, r3
  4042e0:	d107      	bne.n	4042f2 <_malloc_r+0x106>
  4042e2:	e16d      	b.n	4045c0 <_malloc_r+0x3d4>
  4042e4:	2a00      	cmp	r2, #0
  4042e6:	f280 817b 	bge.w	4045e0 <_malloc_r+0x3f4>
  4042ea:	68db      	ldr	r3, [r3, #12]
  4042ec:	459c      	cmp	ip, r3
  4042ee:	f000 8167 	beq.w	4045c0 <_malloc_r+0x3d4>
  4042f2:	6859      	ldr	r1, [r3, #4]
  4042f4:	f021 0103 	bic.w	r1, r1, #3
  4042f8:	1b8a      	subs	r2, r1, r6
  4042fa:	2a0f      	cmp	r2, #15
  4042fc:	ddf2      	ble.n	4042e4 <_malloc_r+0xf8>
  4042fe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404302:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404306:	9300      	str	r3, [sp, #0]
  404308:	199c      	adds	r4, r3, r6
  40430a:	4628      	mov	r0, r5
  40430c:	f046 0601 	orr.w	r6, r6, #1
  404310:	f042 0501 	orr.w	r5, r2, #1
  404314:	605e      	str	r6, [r3, #4]
  404316:	f8c8 c00c 	str.w	ip, [r8, #12]
  40431a:	f8cc 8008 	str.w	r8, [ip, #8]
  40431e:	617c      	str	r4, [r7, #20]
  404320:	613c      	str	r4, [r7, #16]
  404322:	f8c4 e00c 	str.w	lr, [r4, #12]
  404326:	f8c4 e008 	str.w	lr, [r4, #8]
  40432a:	6065      	str	r5, [r4, #4]
  40432c:	505a      	str	r2, [r3, r1]
  40432e:	f000 fafb 	bl	404928 <__malloc_unlock>
  404332:	9b00      	ldr	r3, [sp, #0]
  404334:	f103 0408 	add.w	r4, r3, #8
  404338:	e01e      	b.n	404378 <_malloc_r+0x18c>
  40433a:	2910      	cmp	r1, #16
  40433c:	d820      	bhi.n	404380 <_malloc_r+0x194>
  40433e:	f000 faed 	bl	40491c <__malloc_lock>
  404342:	2610      	movs	r6, #16
  404344:	2318      	movs	r3, #24
  404346:	2002      	movs	r0, #2
  404348:	4f79      	ldr	r7, [pc, #484]	; (404530 <_malloc_r+0x344>)
  40434a:	443b      	add	r3, r7
  40434c:	f1a3 0208 	sub.w	r2, r3, #8
  404350:	685c      	ldr	r4, [r3, #4]
  404352:	4294      	cmp	r4, r2
  404354:	f000 813d 	beq.w	4045d2 <_malloc_r+0x3e6>
  404358:	6863      	ldr	r3, [r4, #4]
  40435a:	68e1      	ldr	r1, [r4, #12]
  40435c:	68a6      	ldr	r6, [r4, #8]
  40435e:	f023 0303 	bic.w	r3, r3, #3
  404362:	4423      	add	r3, r4
  404364:	4628      	mov	r0, r5
  404366:	685a      	ldr	r2, [r3, #4]
  404368:	60f1      	str	r1, [r6, #12]
  40436a:	f042 0201 	orr.w	r2, r2, #1
  40436e:	608e      	str	r6, [r1, #8]
  404370:	605a      	str	r2, [r3, #4]
  404372:	f000 fad9 	bl	404928 <__malloc_unlock>
  404376:	3408      	adds	r4, #8
  404378:	4620      	mov	r0, r4
  40437a:	b003      	add	sp, #12
  40437c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404380:	2400      	movs	r4, #0
  404382:	230c      	movs	r3, #12
  404384:	4620      	mov	r0, r4
  404386:	602b      	str	r3, [r5, #0]
  404388:	b003      	add	sp, #12
  40438a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40438e:	2040      	movs	r0, #64	; 0x40
  404390:	f44f 7300 	mov.w	r3, #512	; 0x200
  404394:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404398:	e74a      	b.n	404230 <_malloc_r+0x44>
  40439a:	4423      	add	r3, r4
  40439c:	68e1      	ldr	r1, [r4, #12]
  40439e:	685a      	ldr	r2, [r3, #4]
  4043a0:	68a6      	ldr	r6, [r4, #8]
  4043a2:	f042 0201 	orr.w	r2, r2, #1
  4043a6:	60f1      	str	r1, [r6, #12]
  4043a8:	4628      	mov	r0, r5
  4043aa:	608e      	str	r6, [r1, #8]
  4043ac:	605a      	str	r2, [r3, #4]
  4043ae:	f000 fabb 	bl	404928 <__malloc_unlock>
  4043b2:	3408      	adds	r4, #8
  4043b4:	4620      	mov	r0, r4
  4043b6:	b003      	add	sp, #12
  4043b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043bc:	4423      	add	r3, r4
  4043be:	4628      	mov	r0, r5
  4043c0:	685a      	ldr	r2, [r3, #4]
  4043c2:	f042 0201 	orr.w	r2, r2, #1
  4043c6:	605a      	str	r2, [r3, #4]
  4043c8:	f000 faae 	bl	404928 <__malloc_unlock>
  4043cc:	3408      	adds	r4, #8
  4043ce:	4620      	mov	r0, r4
  4043d0:	b003      	add	sp, #12
  4043d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043d6:	68bc      	ldr	r4, [r7, #8]
  4043d8:	6863      	ldr	r3, [r4, #4]
  4043da:	f023 0803 	bic.w	r8, r3, #3
  4043de:	45b0      	cmp	r8, r6
  4043e0:	d304      	bcc.n	4043ec <_malloc_r+0x200>
  4043e2:	eba8 0306 	sub.w	r3, r8, r6
  4043e6:	2b0f      	cmp	r3, #15
  4043e8:	f300 8085 	bgt.w	4044f6 <_malloc_r+0x30a>
  4043ec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404548 <_malloc_r+0x35c>
  4043f0:	4b50      	ldr	r3, [pc, #320]	; (404534 <_malloc_r+0x348>)
  4043f2:	f8d9 2000 	ldr.w	r2, [r9]
  4043f6:	681b      	ldr	r3, [r3, #0]
  4043f8:	3201      	adds	r2, #1
  4043fa:	4433      	add	r3, r6
  4043fc:	eb04 0a08 	add.w	sl, r4, r8
  404400:	f000 8155 	beq.w	4046ae <_malloc_r+0x4c2>
  404404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404408:	330f      	adds	r3, #15
  40440a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40440e:	f02b 0b0f 	bic.w	fp, fp, #15
  404412:	4659      	mov	r1, fp
  404414:	4628      	mov	r0, r5
  404416:	f000 faf7 	bl	404a08 <_sbrk_r>
  40441a:	1c41      	adds	r1, r0, #1
  40441c:	4602      	mov	r2, r0
  40441e:	f000 80fc 	beq.w	40461a <_malloc_r+0x42e>
  404422:	4582      	cmp	sl, r0
  404424:	f200 80f7 	bhi.w	404616 <_malloc_r+0x42a>
  404428:	4b43      	ldr	r3, [pc, #268]	; (404538 <_malloc_r+0x34c>)
  40442a:	6819      	ldr	r1, [r3, #0]
  40442c:	4459      	add	r1, fp
  40442e:	6019      	str	r1, [r3, #0]
  404430:	f000 814d 	beq.w	4046ce <_malloc_r+0x4e2>
  404434:	f8d9 0000 	ldr.w	r0, [r9]
  404438:	3001      	adds	r0, #1
  40443a:	bf1b      	ittet	ne
  40443c:	eba2 0a0a 	subne.w	sl, r2, sl
  404440:	4451      	addne	r1, sl
  404442:	f8c9 2000 	streq.w	r2, [r9]
  404446:	6019      	strne	r1, [r3, #0]
  404448:	f012 0107 	ands.w	r1, r2, #7
  40444c:	f000 8115 	beq.w	40467a <_malloc_r+0x48e>
  404450:	f1c1 0008 	rsb	r0, r1, #8
  404454:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404458:	4402      	add	r2, r0
  40445a:	3108      	adds	r1, #8
  40445c:	eb02 090b 	add.w	r9, r2, fp
  404460:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404464:	eba1 0909 	sub.w	r9, r1, r9
  404468:	4649      	mov	r1, r9
  40446a:	4628      	mov	r0, r5
  40446c:	9301      	str	r3, [sp, #4]
  40446e:	9200      	str	r2, [sp, #0]
  404470:	f000 faca 	bl	404a08 <_sbrk_r>
  404474:	1c43      	adds	r3, r0, #1
  404476:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40447a:	f000 8143 	beq.w	404704 <_malloc_r+0x518>
  40447e:	1a80      	subs	r0, r0, r2
  404480:	4448      	add	r0, r9
  404482:	f040 0001 	orr.w	r0, r0, #1
  404486:	6819      	ldr	r1, [r3, #0]
  404488:	60ba      	str	r2, [r7, #8]
  40448a:	4449      	add	r1, r9
  40448c:	42bc      	cmp	r4, r7
  40448e:	6050      	str	r0, [r2, #4]
  404490:	6019      	str	r1, [r3, #0]
  404492:	d017      	beq.n	4044c4 <_malloc_r+0x2d8>
  404494:	f1b8 0f0f 	cmp.w	r8, #15
  404498:	f240 80fb 	bls.w	404692 <_malloc_r+0x4a6>
  40449c:	6860      	ldr	r0, [r4, #4]
  40449e:	f1a8 020c 	sub.w	r2, r8, #12
  4044a2:	f022 0207 	bic.w	r2, r2, #7
  4044a6:	eb04 0e02 	add.w	lr, r4, r2
  4044aa:	f000 0001 	and.w	r0, r0, #1
  4044ae:	f04f 0c05 	mov.w	ip, #5
  4044b2:	4310      	orrs	r0, r2
  4044b4:	2a0f      	cmp	r2, #15
  4044b6:	6060      	str	r0, [r4, #4]
  4044b8:	f8ce c004 	str.w	ip, [lr, #4]
  4044bc:	f8ce c008 	str.w	ip, [lr, #8]
  4044c0:	f200 8117 	bhi.w	4046f2 <_malloc_r+0x506>
  4044c4:	4b1d      	ldr	r3, [pc, #116]	; (40453c <_malloc_r+0x350>)
  4044c6:	68bc      	ldr	r4, [r7, #8]
  4044c8:	681a      	ldr	r2, [r3, #0]
  4044ca:	4291      	cmp	r1, r2
  4044cc:	bf88      	it	hi
  4044ce:	6019      	strhi	r1, [r3, #0]
  4044d0:	4b1b      	ldr	r3, [pc, #108]	; (404540 <_malloc_r+0x354>)
  4044d2:	681a      	ldr	r2, [r3, #0]
  4044d4:	4291      	cmp	r1, r2
  4044d6:	6862      	ldr	r2, [r4, #4]
  4044d8:	bf88      	it	hi
  4044da:	6019      	strhi	r1, [r3, #0]
  4044dc:	f022 0203 	bic.w	r2, r2, #3
  4044e0:	4296      	cmp	r6, r2
  4044e2:	eba2 0306 	sub.w	r3, r2, r6
  4044e6:	d801      	bhi.n	4044ec <_malloc_r+0x300>
  4044e8:	2b0f      	cmp	r3, #15
  4044ea:	dc04      	bgt.n	4044f6 <_malloc_r+0x30a>
  4044ec:	4628      	mov	r0, r5
  4044ee:	f000 fa1b 	bl	404928 <__malloc_unlock>
  4044f2:	2400      	movs	r4, #0
  4044f4:	e740      	b.n	404378 <_malloc_r+0x18c>
  4044f6:	19a2      	adds	r2, r4, r6
  4044f8:	f043 0301 	orr.w	r3, r3, #1
  4044fc:	f046 0601 	orr.w	r6, r6, #1
  404500:	6066      	str	r6, [r4, #4]
  404502:	4628      	mov	r0, r5
  404504:	60ba      	str	r2, [r7, #8]
  404506:	6053      	str	r3, [r2, #4]
  404508:	f000 fa0e 	bl	404928 <__malloc_unlock>
  40450c:	3408      	adds	r4, #8
  40450e:	4620      	mov	r0, r4
  404510:	b003      	add	sp, #12
  404512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404516:	2b14      	cmp	r3, #20
  404518:	d971      	bls.n	4045fe <_malloc_r+0x412>
  40451a:	2b54      	cmp	r3, #84	; 0x54
  40451c:	f200 80a3 	bhi.w	404666 <_malloc_r+0x47a>
  404520:	0b33      	lsrs	r3, r6, #12
  404522:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404526:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40452a:	00c3      	lsls	r3, r0, #3
  40452c:	e680      	b.n	404230 <_malloc_r+0x44>
  40452e:	bf00      	nop
  404530:	20400440 	.word	0x20400440
  404534:	20400bc4 	.word	0x20400bc4
  404538:	20400b94 	.word	0x20400b94
  40453c:	20400bbc 	.word	0x20400bbc
  404540:	20400bc0 	.word	0x20400bc0
  404544:	20400448 	.word	0x20400448
  404548:	20400848 	.word	0x20400848
  40454c:	0a5a      	lsrs	r2, r3, #9
  40454e:	2a04      	cmp	r2, #4
  404550:	d95b      	bls.n	40460a <_malloc_r+0x41e>
  404552:	2a14      	cmp	r2, #20
  404554:	f200 80ae 	bhi.w	4046b4 <_malloc_r+0x4c8>
  404558:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40455c:	00c9      	lsls	r1, r1, #3
  40455e:	325b      	adds	r2, #91	; 0x5b
  404560:	eb07 0c01 	add.w	ip, r7, r1
  404564:	5879      	ldr	r1, [r7, r1]
  404566:	f1ac 0c08 	sub.w	ip, ip, #8
  40456a:	458c      	cmp	ip, r1
  40456c:	f000 8088 	beq.w	404680 <_malloc_r+0x494>
  404570:	684a      	ldr	r2, [r1, #4]
  404572:	f022 0203 	bic.w	r2, r2, #3
  404576:	4293      	cmp	r3, r2
  404578:	d273      	bcs.n	404662 <_malloc_r+0x476>
  40457a:	6889      	ldr	r1, [r1, #8]
  40457c:	458c      	cmp	ip, r1
  40457e:	d1f7      	bne.n	404570 <_malloc_r+0x384>
  404580:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404584:	687b      	ldr	r3, [r7, #4]
  404586:	60e2      	str	r2, [r4, #12]
  404588:	f8c4 c008 	str.w	ip, [r4, #8]
  40458c:	6094      	str	r4, [r2, #8]
  40458e:	f8cc 400c 	str.w	r4, [ip, #12]
  404592:	e68f      	b.n	4042b4 <_malloc_r+0xc8>
  404594:	19a1      	adds	r1, r4, r6
  404596:	f046 0c01 	orr.w	ip, r6, #1
  40459a:	f042 0601 	orr.w	r6, r2, #1
  40459e:	f8c4 c004 	str.w	ip, [r4, #4]
  4045a2:	4628      	mov	r0, r5
  4045a4:	6179      	str	r1, [r7, #20]
  4045a6:	6139      	str	r1, [r7, #16]
  4045a8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4045ac:	f8c1 e008 	str.w	lr, [r1, #8]
  4045b0:	604e      	str	r6, [r1, #4]
  4045b2:	50e2      	str	r2, [r4, r3]
  4045b4:	f000 f9b8 	bl	404928 <__malloc_unlock>
  4045b8:	3408      	adds	r4, #8
  4045ba:	e6dd      	b.n	404378 <_malloc_r+0x18c>
  4045bc:	687b      	ldr	r3, [r7, #4]
  4045be:	e679      	b.n	4042b4 <_malloc_r+0xc8>
  4045c0:	f108 0801 	add.w	r8, r8, #1
  4045c4:	f018 0f03 	tst.w	r8, #3
  4045c8:	f10c 0c08 	add.w	ip, ip, #8
  4045cc:	f47f ae85 	bne.w	4042da <_malloc_r+0xee>
  4045d0:	e02d      	b.n	40462e <_malloc_r+0x442>
  4045d2:	68dc      	ldr	r4, [r3, #12]
  4045d4:	42a3      	cmp	r3, r4
  4045d6:	bf08      	it	eq
  4045d8:	3002      	addeq	r0, #2
  4045da:	f43f ae3e 	beq.w	40425a <_malloc_r+0x6e>
  4045de:	e6bb      	b.n	404358 <_malloc_r+0x16c>
  4045e0:	4419      	add	r1, r3
  4045e2:	461c      	mov	r4, r3
  4045e4:	684a      	ldr	r2, [r1, #4]
  4045e6:	68db      	ldr	r3, [r3, #12]
  4045e8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4045ec:	f042 0201 	orr.w	r2, r2, #1
  4045f0:	604a      	str	r2, [r1, #4]
  4045f2:	4628      	mov	r0, r5
  4045f4:	60f3      	str	r3, [r6, #12]
  4045f6:	609e      	str	r6, [r3, #8]
  4045f8:	f000 f996 	bl	404928 <__malloc_unlock>
  4045fc:	e6bc      	b.n	404378 <_malloc_r+0x18c>
  4045fe:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404602:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404606:	00c3      	lsls	r3, r0, #3
  404608:	e612      	b.n	404230 <_malloc_r+0x44>
  40460a:	099a      	lsrs	r2, r3, #6
  40460c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404610:	00c9      	lsls	r1, r1, #3
  404612:	3238      	adds	r2, #56	; 0x38
  404614:	e7a4      	b.n	404560 <_malloc_r+0x374>
  404616:	42bc      	cmp	r4, r7
  404618:	d054      	beq.n	4046c4 <_malloc_r+0x4d8>
  40461a:	68bc      	ldr	r4, [r7, #8]
  40461c:	6862      	ldr	r2, [r4, #4]
  40461e:	f022 0203 	bic.w	r2, r2, #3
  404622:	e75d      	b.n	4044e0 <_malloc_r+0x2f4>
  404624:	f859 3908 	ldr.w	r3, [r9], #-8
  404628:	4599      	cmp	r9, r3
  40462a:	f040 8086 	bne.w	40473a <_malloc_r+0x54e>
  40462e:	f010 0f03 	tst.w	r0, #3
  404632:	f100 30ff 	add.w	r0, r0, #4294967295
  404636:	d1f5      	bne.n	404624 <_malloc_r+0x438>
  404638:	687b      	ldr	r3, [r7, #4]
  40463a:	ea23 0304 	bic.w	r3, r3, r4
  40463e:	607b      	str	r3, [r7, #4]
  404640:	0064      	lsls	r4, r4, #1
  404642:	429c      	cmp	r4, r3
  404644:	f63f aec7 	bhi.w	4043d6 <_malloc_r+0x1ea>
  404648:	2c00      	cmp	r4, #0
  40464a:	f43f aec4 	beq.w	4043d6 <_malloc_r+0x1ea>
  40464e:	421c      	tst	r4, r3
  404650:	4640      	mov	r0, r8
  404652:	f47f ae3e 	bne.w	4042d2 <_malloc_r+0xe6>
  404656:	0064      	lsls	r4, r4, #1
  404658:	421c      	tst	r4, r3
  40465a:	f100 0004 	add.w	r0, r0, #4
  40465e:	d0fa      	beq.n	404656 <_malloc_r+0x46a>
  404660:	e637      	b.n	4042d2 <_malloc_r+0xe6>
  404662:	468c      	mov	ip, r1
  404664:	e78c      	b.n	404580 <_malloc_r+0x394>
  404666:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40466a:	d815      	bhi.n	404698 <_malloc_r+0x4ac>
  40466c:	0bf3      	lsrs	r3, r6, #15
  40466e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404672:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404676:	00c3      	lsls	r3, r0, #3
  404678:	e5da      	b.n	404230 <_malloc_r+0x44>
  40467a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40467e:	e6ed      	b.n	40445c <_malloc_r+0x270>
  404680:	687b      	ldr	r3, [r7, #4]
  404682:	1092      	asrs	r2, r2, #2
  404684:	2101      	movs	r1, #1
  404686:	fa01 f202 	lsl.w	r2, r1, r2
  40468a:	4313      	orrs	r3, r2
  40468c:	607b      	str	r3, [r7, #4]
  40468e:	4662      	mov	r2, ip
  404690:	e779      	b.n	404586 <_malloc_r+0x39a>
  404692:	2301      	movs	r3, #1
  404694:	6053      	str	r3, [r2, #4]
  404696:	e729      	b.n	4044ec <_malloc_r+0x300>
  404698:	f240 5254 	movw	r2, #1364	; 0x554
  40469c:	4293      	cmp	r3, r2
  40469e:	d822      	bhi.n	4046e6 <_malloc_r+0x4fa>
  4046a0:	0cb3      	lsrs	r3, r6, #18
  4046a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4046a6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4046aa:	00c3      	lsls	r3, r0, #3
  4046ac:	e5c0      	b.n	404230 <_malloc_r+0x44>
  4046ae:	f103 0b10 	add.w	fp, r3, #16
  4046b2:	e6ae      	b.n	404412 <_malloc_r+0x226>
  4046b4:	2a54      	cmp	r2, #84	; 0x54
  4046b6:	d829      	bhi.n	40470c <_malloc_r+0x520>
  4046b8:	0b1a      	lsrs	r2, r3, #12
  4046ba:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4046be:	00c9      	lsls	r1, r1, #3
  4046c0:	326e      	adds	r2, #110	; 0x6e
  4046c2:	e74d      	b.n	404560 <_malloc_r+0x374>
  4046c4:	4b20      	ldr	r3, [pc, #128]	; (404748 <_malloc_r+0x55c>)
  4046c6:	6819      	ldr	r1, [r3, #0]
  4046c8:	4459      	add	r1, fp
  4046ca:	6019      	str	r1, [r3, #0]
  4046cc:	e6b2      	b.n	404434 <_malloc_r+0x248>
  4046ce:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4046d2:	2800      	cmp	r0, #0
  4046d4:	f47f aeae 	bne.w	404434 <_malloc_r+0x248>
  4046d8:	eb08 030b 	add.w	r3, r8, fp
  4046dc:	68ba      	ldr	r2, [r7, #8]
  4046de:	f043 0301 	orr.w	r3, r3, #1
  4046e2:	6053      	str	r3, [r2, #4]
  4046e4:	e6ee      	b.n	4044c4 <_malloc_r+0x2d8>
  4046e6:	207f      	movs	r0, #127	; 0x7f
  4046e8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4046ec:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4046f0:	e59e      	b.n	404230 <_malloc_r+0x44>
  4046f2:	f104 0108 	add.w	r1, r4, #8
  4046f6:	4628      	mov	r0, r5
  4046f8:	9300      	str	r3, [sp, #0]
  4046fa:	f002 ffa9 	bl	407650 <_free_r>
  4046fe:	9b00      	ldr	r3, [sp, #0]
  404700:	6819      	ldr	r1, [r3, #0]
  404702:	e6df      	b.n	4044c4 <_malloc_r+0x2d8>
  404704:	2001      	movs	r0, #1
  404706:	f04f 0900 	mov.w	r9, #0
  40470a:	e6bc      	b.n	404486 <_malloc_r+0x29a>
  40470c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404710:	d805      	bhi.n	40471e <_malloc_r+0x532>
  404712:	0bda      	lsrs	r2, r3, #15
  404714:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404718:	00c9      	lsls	r1, r1, #3
  40471a:	3277      	adds	r2, #119	; 0x77
  40471c:	e720      	b.n	404560 <_malloc_r+0x374>
  40471e:	f240 5154 	movw	r1, #1364	; 0x554
  404722:	428a      	cmp	r2, r1
  404724:	d805      	bhi.n	404732 <_malloc_r+0x546>
  404726:	0c9a      	lsrs	r2, r3, #18
  404728:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40472c:	00c9      	lsls	r1, r1, #3
  40472e:	327c      	adds	r2, #124	; 0x7c
  404730:	e716      	b.n	404560 <_malloc_r+0x374>
  404732:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404736:	227e      	movs	r2, #126	; 0x7e
  404738:	e712      	b.n	404560 <_malloc_r+0x374>
  40473a:	687b      	ldr	r3, [r7, #4]
  40473c:	e780      	b.n	404640 <_malloc_r+0x454>
  40473e:	08f0      	lsrs	r0, r6, #3
  404740:	f106 0308 	add.w	r3, r6, #8
  404744:	e600      	b.n	404348 <_malloc_r+0x15c>
  404746:	bf00      	nop
  404748:	20400b94 	.word	0x20400b94

0040474c <memcpy>:
  40474c:	4684      	mov	ip, r0
  40474e:	ea41 0300 	orr.w	r3, r1, r0
  404752:	f013 0303 	ands.w	r3, r3, #3
  404756:	d16d      	bne.n	404834 <memcpy+0xe8>
  404758:	3a40      	subs	r2, #64	; 0x40
  40475a:	d341      	bcc.n	4047e0 <memcpy+0x94>
  40475c:	f851 3b04 	ldr.w	r3, [r1], #4
  404760:	f840 3b04 	str.w	r3, [r0], #4
  404764:	f851 3b04 	ldr.w	r3, [r1], #4
  404768:	f840 3b04 	str.w	r3, [r0], #4
  40476c:	f851 3b04 	ldr.w	r3, [r1], #4
  404770:	f840 3b04 	str.w	r3, [r0], #4
  404774:	f851 3b04 	ldr.w	r3, [r1], #4
  404778:	f840 3b04 	str.w	r3, [r0], #4
  40477c:	f851 3b04 	ldr.w	r3, [r1], #4
  404780:	f840 3b04 	str.w	r3, [r0], #4
  404784:	f851 3b04 	ldr.w	r3, [r1], #4
  404788:	f840 3b04 	str.w	r3, [r0], #4
  40478c:	f851 3b04 	ldr.w	r3, [r1], #4
  404790:	f840 3b04 	str.w	r3, [r0], #4
  404794:	f851 3b04 	ldr.w	r3, [r1], #4
  404798:	f840 3b04 	str.w	r3, [r0], #4
  40479c:	f851 3b04 	ldr.w	r3, [r1], #4
  4047a0:	f840 3b04 	str.w	r3, [r0], #4
  4047a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047a8:	f840 3b04 	str.w	r3, [r0], #4
  4047ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4047b0:	f840 3b04 	str.w	r3, [r0], #4
  4047b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047b8:	f840 3b04 	str.w	r3, [r0], #4
  4047bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4047c0:	f840 3b04 	str.w	r3, [r0], #4
  4047c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047c8:	f840 3b04 	str.w	r3, [r0], #4
  4047cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4047d0:	f840 3b04 	str.w	r3, [r0], #4
  4047d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047d8:	f840 3b04 	str.w	r3, [r0], #4
  4047dc:	3a40      	subs	r2, #64	; 0x40
  4047de:	d2bd      	bcs.n	40475c <memcpy+0x10>
  4047e0:	3230      	adds	r2, #48	; 0x30
  4047e2:	d311      	bcc.n	404808 <memcpy+0xbc>
  4047e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047e8:	f840 3b04 	str.w	r3, [r0], #4
  4047ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4047f0:	f840 3b04 	str.w	r3, [r0], #4
  4047f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047f8:	f840 3b04 	str.w	r3, [r0], #4
  4047fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404800:	f840 3b04 	str.w	r3, [r0], #4
  404804:	3a10      	subs	r2, #16
  404806:	d2ed      	bcs.n	4047e4 <memcpy+0x98>
  404808:	320c      	adds	r2, #12
  40480a:	d305      	bcc.n	404818 <memcpy+0xcc>
  40480c:	f851 3b04 	ldr.w	r3, [r1], #4
  404810:	f840 3b04 	str.w	r3, [r0], #4
  404814:	3a04      	subs	r2, #4
  404816:	d2f9      	bcs.n	40480c <memcpy+0xc0>
  404818:	3204      	adds	r2, #4
  40481a:	d008      	beq.n	40482e <memcpy+0xe2>
  40481c:	07d2      	lsls	r2, r2, #31
  40481e:	bf1c      	itt	ne
  404820:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404824:	f800 3b01 	strbne.w	r3, [r0], #1
  404828:	d301      	bcc.n	40482e <memcpy+0xe2>
  40482a:	880b      	ldrh	r3, [r1, #0]
  40482c:	8003      	strh	r3, [r0, #0]
  40482e:	4660      	mov	r0, ip
  404830:	4770      	bx	lr
  404832:	bf00      	nop
  404834:	2a08      	cmp	r2, #8
  404836:	d313      	bcc.n	404860 <memcpy+0x114>
  404838:	078b      	lsls	r3, r1, #30
  40483a:	d08d      	beq.n	404758 <memcpy+0xc>
  40483c:	f010 0303 	ands.w	r3, r0, #3
  404840:	d08a      	beq.n	404758 <memcpy+0xc>
  404842:	f1c3 0304 	rsb	r3, r3, #4
  404846:	1ad2      	subs	r2, r2, r3
  404848:	07db      	lsls	r3, r3, #31
  40484a:	bf1c      	itt	ne
  40484c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404850:	f800 3b01 	strbne.w	r3, [r0], #1
  404854:	d380      	bcc.n	404758 <memcpy+0xc>
  404856:	f831 3b02 	ldrh.w	r3, [r1], #2
  40485a:	f820 3b02 	strh.w	r3, [r0], #2
  40485e:	e77b      	b.n	404758 <memcpy+0xc>
  404860:	3a04      	subs	r2, #4
  404862:	d3d9      	bcc.n	404818 <memcpy+0xcc>
  404864:	3a01      	subs	r2, #1
  404866:	f811 3b01 	ldrb.w	r3, [r1], #1
  40486a:	f800 3b01 	strb.w	r3, [r0], #1
  40486e:	d2f9      	bcs.n	404864 <memcpy+0x118>
  404870:	780b      	ldrb	r3, [r1, #0]
  404872:	7003      	strb	r3, [r0, #0]
  404874:	784b      	ldrb	r3, [r1, #1]
  404876:	7043      	strb	r3, [r0, #1]
  404878:	788b      	ldrb	r3, [r1, #2]
  40487a:	7083      	strb	r3, [r0, #2]
  40487c:	4660      	mov	r0, ip
  40487e:	4770      	bx	lr

00404880 <memset>:
  404880:	b470      	push	{r4, r5, r6}
  404882:	0786      	lsls	r6, r0, #30
  404884:	d046      	beq.n	404914 <memset+0x94>
  404886:	1e54      	subs	r4, r2, #1
  404888:	2a00      	cmp	r2, #0
  40488a:	d041      	beq.n	404910 <memset+0x90>
  40488c:	b2ca      	uxtb	r2, r1
  40488e:	4603      	mov	r3, r0
  404890:	e002      	b.n	404898 <memset+0x18>
  404892:	f114 34ff 	adds.w	r4, r4, #4294967295
  404896:	d33b      	bcc.n	404910 <memset+0x90>
  404898:	f803 2b01 	strb.w	r2, [r3], #1
  40489c:	079d      	lsls	r5, r3, #30
  40489e:	d1f8      	bne.n	404892 <memset+0x12>
  4048a0:	2c03      	cmp	r4, #3
  4048a2:	d92e      	bls.n	404902 <memset+0x82>
  4048a4:	b2cd      	uxtb	r5, r1
  4048a6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4048aa:	2c0f      	cmp	r4, #15
  4048ac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4048b0:	d919      	bls.n	4048e6 <memset+0x66>
  4048b2:	f103 0210 	add.w	r2, r3, #16
  4048b6:	4626      	mov	r6, r4
  4048b8:	3e10      	subs	r6, #16
  4048ba:	2e0f      	cmp	r6, #15
  4048bc:	f842 5c10 	str.w	r5, [r2, #-16]
  4048c0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4048c4:	f842 5c08 	str.w	r5, [r2, #-8]
  4048c8:	f842 5c04 	str.w	r5, [r2, #-4]
  4048cc:	f102 0210 	add.w	r2, r2, #16
  4048d0:	d8f2      	bhi.n	4048b8 <memset+0x38>
  4048d2:	f1a4 0210 	sub.w	r2, r4, #16
  4048d6:	f022 020f 	bic.w	r2, r2, #15
  4048da:	f004 040f 	and.w	r4, r4, #15
  4048de:	3210      	adds	r2, #16
  4048e0:	2c03      	cmp	r4, #3
  4048e2:	4413      	add	r3, r2
  4048e4:	d90d      	bls.n	404902 <memset+0x82>
  4048e6:	461e      	mov	r6, r3
  4048e8:	4622      	mov	r2, r4
  4048ea:	3a04      	subs	r2, #4
  4048ec:	2a03      	cmp	r2, #3
  4048ee:	f846 5b04 	str.w	r5, [r6], #4
  4048f2:	d8fa      	bhi.n	4048ea <memset+0x6a>
  4048f4:	1f22      	subs	r2, r4, #4
  4048f6:	f022 0203 	bic.w	r2, r2, #3
  4048fa:	3204      	adds	r2, #4
  4048fc:	4413      	add	r3, r2
  4048fe:	f004 0403 	and.w	r4, r4, #3
  404902:	b12c      	cbz	r4, 404910 <memset+0x90>
  404904:	b2c9      	uxtb	r1, r1
  404906:	441c      	add	r4, r3
  404908:	f803 1b01 	strb.w	r1, [r3], #1
  40490c:	429c      	cmp	r4, r3
  40490e:	d1fb      	bne.n	404908 <memset+0x88>
  404910:	bc70      	pop	{r4, r5, r6}
  404912:	4770      	bx	lr
  404914:	4614      	mov	r4, r2
  404916:	4603      	mov	r3, r0
  404918:	e7c2      	b.n	4048a0 <memset+0x20>
  40491a:	bf00      	nop

0040491c <__malloc_lock>:
  40491c:	4801      	ldr	r0, [pc, #4]	; (404924 <__malloc_lock+0x8>)
  40491e:	f003 b931 	b.w	407b84 <__retarget_lock_acquire_recursive>
  404922:	bf00      	nop
  404924:	20400c28 	.word	0x20400c28

00404928 <__malloc_unlock>:
  404928:	4801      	ldr	r0, [pc, #4]	; (404930 <__malloc_unlock+0x8>)
  40492a:	f003 b92d 	b.w	407b88 <__retarget_lock_release_recursive>
  40492e:	bf00      	nop
  404930:	20400c28 	.word	0x20400c28

00404934 <printf>:
  404934:	b40f      	push	{r0, r1, r2, r3}
  404936:	b500      	push	{lr}
  404938:	4907      	ldr	r1, [pc, #28]	; (404958 <printf+0x24>)
  40493a:	b083      	sub	sp, #12
  40493c:	ab04      	add	r3, sp, #16
  40493e:	6808      	ldr	r0, [r1, #0]
  404940:	f853 2b04 	ldr.w	r2, [r3], #4
  404944:	6881      	ldr	r1, [r0, #8]
  404946:	9301      	str	r3, [sp, #4]
  404948:	f000 f9c8 	bl	404cdc <_vfprintf_r>
  40494c:	b003      	add	sp, #12
  40494e:	f85d eb04 	ldr.w	lr, [sp], #4
  404952:	b004      	add	sp, #16
  404954:	4770      	bx	lr
  404956:	bf00      	nop
  404958:	20400010 	.word	0x20400010

0040495c <_puts_r>:
  40495c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40495e:	4605      	mov	r5, r0
  404960:	b089      	sub	sp, #36	; 0x24
  404962:	4608      	mov	r0, r1
  404964:	460c      	mov	r4, r1
  404966:	f000 f94b 	bl	404c00 <strlen>
  40496a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40496c:	4f21      	ldr	r7, [pc, #132]	; (4049f4 <_puts_r+0x98>)
  40496e:	9404      	str	r4, [sp, #16]
  404970:	2601      	movs	r6, #1
  404972:	1c44      	adds	r4, r0, #1
  404974:	a904      	add	r1, sp, #16
  404976:	2202      	movs	r2, #2
  404978:	9403      	str	r4, [sp, #12]
  40497a:	9005      	str	r0, [sp, #20]
  40497c:	68ac      	ldr	r4, [r5, #8]
  40497e:	9706      	str	r7, [sp, #24]
  404980:	9607      	str	r6, [sp, #28]
  404982:	9101      	str	r1, [sp, #4]
  404984:	9202      	str	r2, [sp, #8]
  404986:	b353      	cbz	r3, 4049de <_puts_r+0x82>
  404988:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40498a:	f013 0f01 	tst.w	r3, #1
  40498e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404992:	b29a      	uxth	r2, r3
  404994:	d101      	bne.n	40499a <_puts_r+0x3e>
  404996:	0590      	lsls	r0, r2, #22
  404998:	d525      	bpl.n	4049e6 <_puts_r+0x8a>
  40499a:	0491      	lsls	r1, r2, #18
  40499c:	d406      	bmi.n	4049ac <_puts_r+0x50>
  40499e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4049a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4049a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4049a8:	81a3      	strh	r3, [r4, #12]
  4049aa:	6662      	str	r2, [r4, #100]	; 0x64
  4049ac:	4628      	mov	r0, r5
  4049ae:	aa01      	add	r2, sp, #4
  4049b0:	4621      	mov	r1, r4
  4049b2:	f002 ff33 	bl	40781c <__sfvwrite_r>
  4049b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4049b8:	2800      	cmp	r0, #0
  4049ba:	bf0c      	ite	eq
  4049bc:	250a      	moveq	r5, #10
  4049be:	f04f 35ff 	movne.w	r5, #4294967295
  4049c2:	07da      	lsls	r2, r3, #31
  4049c4:	d402      	bmi.n	4049cc <_puts_r+0x70>
  4049c6:	89a3      	ldrh	r3, [r4, #12]
  4049c8:	059b      	lsls	r3, r3, #22
  4049ca:	d502      	bpl.n	4049d2 <_puts_r+0x76>
  4049cc:	4628      	mov	r0, r5
  4049ce:	b009      	add	sp, #36	; 0x24
  4049d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4049d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049d4:	f003 f8d8 	bl	407b88 <__retarget_lock_release_recursive>
  4049d8:	4628      	mov	r0, r5
  4049da:	b009      	add	sp, #36	; 0x24
  4049dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4049de:	4628      	mov	r0, r5
  4049e0:	f002 fd94 	bl	40750c <__sinit>
  4049e4:	e7d0      	b.n	404988 <_puts_r+0x2c>
  4049e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049e8:	f003 f8cc 	bl	407b84 <__retarget_lock_acquire_recursive>
  4049ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049f0:	b29a      	uxth	r2, r3
  4049f2:	e7d2      	b.n	40499a <_puts_r+0x3e>
  4049f4:	00409254 	.word	0x00409254

004049f8 <puts>:
  4049f8:	4b02      	ldr	r3, [pc, #8]	; (404a04 <puts+0xc>)
  4049fa:	4601      	mov	r1, r0
  4049fc:	6818      	ldr	r0, [r3, #0]
  4049fe:	f7ff bfad 	b.w	40495c <_puts_r>
  404a02:	bf00      	nop
  404a04:	20400010 	.word	0x20400010

00404a08 <_sbrk_r>:
  404a08:	b538      	push	{r3, r4, r5, lr}
  404a0a:	4c07      	ldr	r4, [pc, #28]	; (404a28 <_sbrk_r+0x20>)
  404a0c:	2300      	movs	r3, #0
  404a0e:	4605      	mov	r5, r0
  404a10:	4608      	mov	r0, r1
  404a12:	6023      	str	r3, [r4, #0]
  404a14:	f7fc f9d4 	bl	400dc0 <_sbrk>
  404a18:	1c43      	adds	r3, r0, #1
  404a1a:	d000      	beq.n	404a1e <_sbrk_r+0x16>
  404a1c:	bd38      	pop	{r3, r4, r5, pc}
  404a1e:	6823      	ldr	r3, [r4, #0]
  404a20:	2b00      	cmp	r3, #0
  404a22:	d0fb      	beq.n	404a1c <_sbrk_r+0x14>
  404a24:	602b      	str	r3, [r5, #0]
  404a26:	bd38      	pop	{r3, r4, r5, pc}
  404a28:	20400c3c 	.word	0x20400c3c

00404a2c <setbuf>:
  404a2c:	2900      	cmp	r1, #0
  404a2e:	bf0c      	ite	eq
  404a30:	2202      	moveq	r2, #2
  404a32:	2200      	movne	r2, #0
  404a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404a38:	f000 b800 	b.w	404a3c <setvbuf>

00404a3c <setvbuf>:
  404a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404a40:	4c61      	ldr	r4, [pc, #388]	; (404bc8 <setvbuf+0x18c>)
  404a42:	6825      	ldr	r5, [r4, #0]
  404a44:	b083      	sub	sp, #12
  404a46:	4604      	mov	r4, r0
  404a48:	460f      	mov	r7, r1
  404a4a:	4690      	mov	r8, r2
  404a4c:	461e      	mov	r6, r3
  404a4e:	b115      	cbz	r5, 404a56 <setvbuf+0x1a>
  404a50:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404a52:	2b00      	cmp	r3, #0
  404a54:	d064      	beq.n	404b20 <setvbuf+0xe4>
  404a56:	f1b8 0f02 	cmp.w	r8, #2
  404a5a:	d006      	beq.n	404a6a <setvbuf+0x2e>
  404a5c:	f1b8 0f01 	cmp.w	r8, #1
  404a60:	f200 809f 	bhi.w	404ba2 <setvbuf+0x166>
  404a64:	2e00      	cmp	r6, #0
  404a66:	f2c0 809c 	blt.w	404ba2 <setvbuf+0x166>
  404a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404a6c:	07d8      	lsls	r0, r3, #31
  404a6e:	d534      	bpl.n	404ada <setvbuf+0x9e>
  404a70:	4621      	mov	r1, r4
  404a72:	4628      	mov	r0, r5
  404a74:	f002 fcf2 	bl	40745c <_fflush_r>
  404a78:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a7a:	b141      	cbz	r1, 404a8e <setvbuf+0x52>
  404a7c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a80:	4299      	cmp	r1, r3
  404a82:	d002      	beq.n	404a8a <setvbuf+0x4e>
  404a84:	4628      	mov	r0, r5
  404a86:	f002 fde3 	bl	407650 <_free_r>
  404a8a:	2300      	movs	r3, #0
  404a8c:	6323      	str	r3, [r4, #48]	; 0x30
  404a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a92:	2200      	movs	r2, #0
  404a94:	61a2      	str	r2, [r4, #24]
  404a96:	6062      	str	r2, [r4, #4]
  404a98:	061a      	lsls	r2, r3, #24
  404a9a:	d43a      	bmi.n	404b12 <setvbuf+0xd6>
  404a9c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404aa0:	f023 0303 	bic.w	r3, r3, #3
  404aa4:	f1b8 0f02 	cmp.w	r8, #2
  404aa8:	81a3      	strh	r3, [r4, #12]
  404aaa:	d01d      	beq.n	404ae8 <setvbuf+0xac>
  404aac:	ab01      	add	r3, sp, #4
  404aae:	466a      	mov	r2, sp
  404ab0:	4621      	mov	r1, r4
  404ab2:	4628      	mov	r0, r5
  404ab4:	f003 f86a 	bl	407b8c <__swhatbuf_r>
  404ab8:	89a3      	ldrh	r3, [r4, #12]
  404aba:	4318      	orrs	r0, r3
  404abc:	81a0      	strh	r0, [r4, #12]
  404abe:	2e00      	cmp	r6, #0
  404ac0:	d132      	bne.n	404b28 <setvbuf+0xec>
  404ac2:	9e00      	ldr	r6, [sp, #0]
  404ac4:	4630      	mov	r0, r6
  404ac6:	f7ff fb81 	bl	4041cc <malloc>
  404aca:	4607      	mov	r7, r0
  404acc:	2800      	cmp	r0, #0
  404ace:	d06b      	beq.n	404ba8 <setvbuf+0x16c>
  404ad0:	89a3      	ldrh	r3, [r4, #12]
  404ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404ad6:	81a3      	strh	r3, [r4, #12]
  404ad8:	e028      	b.n	404b2c <setvbuf+0xf0>
  404ada:	89a3      	ldrh	r3, [r4, #12]
  404adc:	0599      	lsls	r1, r3, #22
  404ade:	d4c7      	bmi.n	404a70 <setvbuf+0x34>
  404ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404ae2:	f003 f84f 	bl	407b84 <__retarget_lock_acquire_recursive>
  404ae6:	e7c3      	b.n	404a70 <setvbuf+0x34>
  404ae8:	2500      	movs	r5, #0
  404aea:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404aec:	2600      	movs	r6, #0
  404aee:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404af2:	f043 0302 	orr.w	r3, r3, #2
  404af6:	2001      	movs	r0, #1
  404af8:	60a6      	str	r6, [r4, #8]
  404afa:	07ce      	lsls	r6, r1, #31
  404afc:	81a3      	strh	r3, [r4, #12]
  404afe:	6022      	str	r2, [r4, #0]
  404b00:	6122      	str	r2, [r4, #16]
  404b02:	6160      	str	r0, [r4, #20]
  404b04:	d401      	bmi.n	404b0a <setvbuf+0xce>
  404b06:	0598      	lsls	r0, r3, #22
  404b08:	d53e      	bpl.n	404b88 <setvbuf+0x14c>
  404b0a:	4628      	mov	r0, r5
  404b0c:	b003      	add	sp, #12
  404b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b12:	6921      	ldr	r1, [r4, #16]
  404b14:	4628      	mov	r0, r5
  404b16:	f002 fd9b 	bl	407650 <_free_r>
  404b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b1e:	e7bd      	b.n	404a9c <setvbuf+0x60>
  404b20:	4628      	mov	r0, r5
  404b22:	f002 fcf3 	bl	40750c <__sinit>
  404b26:	e796      	b.n	404a56 <setvbuf+0x1a>
  404b28:	2f00      	cmp	r7, #0
  404b2a:	d0cb      	beq.n	404ac4 <setvbuf+0x88>
  404b2c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404b2e:	2b00      	cmp	r3, #0
  404b30:	d033      	beq.n	404b9a <setvbuf+0x15e>
  404b32:	9b00      	ldr	r3, [sp, #0]
  404b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404b38:	6027      	str	r7, [r4, #0]
  404b3a:	429e      	cmp	r6, r3
  404b3c:	bf1c      	itt	ne
  404b3e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404b42:	81a2      	strhne	r2, [r4, #12]
  404b44:	f1b8 0f01 	cmp.w	r8, #1
  404b48:	bf04      	itt	eq
  404b4a:	f042 0201 	orreq.w	r2, r2, #1
  404b4e:	81a2      	strheq	r2, [r4, #12]
  404b50:	b292      	uxth	r2, r2
  404b52:	f012 0308 	ands.w	r3, r2, #8
  404b56:	6127      	str	r7, [r4, #16]
  404b58:	6166      	str	r6, [r4, #20]
  404b5a:	d00e      	beq.n	404b7a <setvbuf+0x13e>
  404b5c:	07d1      	lsls	r1, r2, #31
  404b5e:	d51a      	bpl.n	404b96 <setvbuf+0x15a>
  404b60:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b62:	4276      	negs	r6, r6
  404b64:	2300      	movs	r3, #0
  404b66:	f015 0501 	ands.w	r5, r5, #1
  404b6a:	61a6      	str	r6, [r4, #24]
  404b6c:	60a3      	str	r3, [r4, #8]
  404b6e:	d009      	beq.n	404b84 <setvbuf+0x148>
  404b70:	2500      	movs	r5, #0
  404b72:	4628      	mov	r0, r5
  404b74:	b003      	add	sp, #12
  404b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b7a:	60a3      	str	r3, [r4, #8]
  404b7c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b7e:	f015 0501 	ands.w	r5, r5, #1
  404b82:	d1f5      	bne.n	404b70 <setvbuf+0x134>
  404b84:	0593      	lsls	r3, r2, #22
  404b86:	d4c0      	bmi.n	404b0a <setvbuf+0xce>
  404b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b8a:	f002 fffd 	bl	407b88 <__retarget_lock_release_recursive>
  404b8e:	4628      	mov	r0, r5
  404b90:	b003      	add	sp, #12
  404b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b96:	60a6      	str	r6, [r4, #8]
  404b98:	e7f0      	b.n	404b7c <setvbuf+0x140>
  404b9a:	4628      	mov	r0, r5
  404b9c:	f002 fcb6 	bl	40750c <__sinit>
  404ba0:	e7c7      	b.n	404b32 <setvbuf+0xf6>
  404ba2:	f04f 35ff 	mov.w	r5, #4294967295
  404ba6:	e7b0      	b.n	404b0a <setvbuf+0xce>
  404ba8:	f8dd 9000 	ldr.w	r9, [sp]
  404bac:	45b1      	cmp	r9, r6
  404bae:	d004      	beq.n	404bba <setvbuf+0x17e>
  404bb0:	4648      	mov	r0, r9
  404bb2:	f7ff fb0b 	bl	4041cc <malloc>
  404bb6:	4607      	mov	r7, r0
  404bb8:	b920      	cbnz	r0, 404bc4 <setvbuf+0x188>
  404bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bbe:	f04f 35ff 	mov.w	r5, #4294967295
  404bc2:	e792      	b.n	404aea <setvbuf+0xae>
  404bc4:	464e      	mov	r6, r9
  404bc6:	e783      	b.n	404ad0 <setvbuf+0x94>
  404bc8:	20400010 	.word	0x20400010
	...

00404c00 <strlen>:
  404c00:	f890 f000 	pld	[r0]
  404c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404c08:	f020 0107 	bic.w	r1, r0, #7
  404c0c:	f06f 0c00 	mvn.w	ip, #0
  404c10:	f010 0407 	ands.w	r4, r0, #7
  404c14:	f891 f020 	pld	[r1, #32]
  404c18:	f040 8049 	bne.w	404cae <strlen+0xae>
  404c1c:	f04f 0400 	mov.w	r4, #0
  404c20:	f06f 0007 	mvn.w	r0, #7
  404c24:	e9d1 2300 	ldrd	r2, r3, [r1]
  404c28:	f891 f040 	pld	[r1, #64]	; 0x40
  404c2c:	f100 0008 	add.w	r0, r0, #8
  404c30:	fa82 f24c 	uadd8	r2, r2, ip
  404c34:	faa4 f28c 	sel	r2, r4, ip
  404c38:	fa83 f34c 	uadd8	r3, r3, ip
  404c3c:	faa2 f38c 	sel	r3, r2, ip
  404c40:	bb4b      	cbnz	r3, 404c96 <strlen+0x96>
  404c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404c46:	fa82 f24c 	uadd8	r2, r2, ip
  404c4a:	f100 0008 	add.w	r0, r0, #8
  404c4e:	faa4 f28c 	sel	r2, r4, ip
  404c52:	fa83 f34c 	uadd8	r3, r3, ip
  404c56:	faa2 f38c 	sel	r3, r2, ip
  404c5a:	b9e3      	cbnz	r3, 404c96 <strlen+0x96>
  404c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404c60:	fa82 f24c 	uadd8	r2, r2, ip
  404c64:	f100 0008 	add.w	r0, r0, #8
  404c68:	faa4 f28c 	sel	r2, r4, ip
  404c6c:	fa83 f34c 	uadd8	r3, r3, ip
  404c70:	faa2 f38c 	sel	r3, r2, ip
  404c74:	b97b      	cbnz	r3, 404c96 <strlen+0x96>
  404c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404c7a:	f101 0120 	add.w	r1, r1, #32
  404c7e:	fa82 f24c 	uadd8	r2, r2, ip
  404c82:	f100 0008 	add.w	r0, r0, #8
  404c86:	faa4 f28c 	sel	r2, r4, ip
  404c8a:	fa83 f34c 	uadd8	r3, r3, ip
  404c8e:	faa2 f38c 	sel	r3, r2, ip
  404c92:	2b00      	cmp	r3, #0
  404c94:	d0c6      	beq.n	404c24 <strlen+0x24>
  404c96:	2a00      	cmp	r2, #0
  404c98:	bf04      	itt	eq
  404c9a:	3004      	addeq	r0, #4
  404c9c:	461a      	moveq	r2, r3
  404c9e:	ba12      	rev	r2, r2
  404ca0:	fab2 f282 	clz	r2, r2
  404ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404cac:	4770      	bx	lr
  404cae:	e9d1 2300 	ldrd	r2, r3, [r1]
  404cb2:	f004 0503 	and.w	r5, r4, #3
  404cb6:	f1c4 0000 	rsb	r0, r4, #0
  404cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404cbe:	f014 0f04 	tst.w	r4, #4
  404cc2:	f891 f040 	pld	[r1, #64]	; 0x40
  404cc6:	fa0c f505 	lsl.w	r5, ip, r5
  404cca:	ea62 0205 	orn	r2, r2, r5
  404cce:	bf1c      	itt	ne
  404cd0:	ea63 0305 	ornne	r3, r3, r5
  404cd4:	4662      	movne	r2, ip
  404cd6:	f04f 0400 	mov.w	r4, #0
  404cda:	e7a9      	b.n	404c30 <strlen+0x30>

00404cdc <_vfprintf_r>:
  404cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ce0:	b0c1      	sub	sp, #260	; 0x104
  404ce2:	461d      	mov	r5, r3
  404ce4:	468a      	mov	sl, r1
  404ce6:	4691      	mov	r9, r2
  404ce8:	4604      	mov	r4, r0
  404cea:	9008      	str	r0, [sp, #32]
  404cec:	f002 ff38 	bl	407b60 <_localeconv_r>
  404cf0:	6803      	ldr	r3, [r0, #0]
  404cf2:	9315      	str	r3, [sp, #84]	; 0x54
  404cf4:	4618      	mov	r0, r3
  404cf6:	f7ff ff83 	bl	404c00 <strlen>
  404cfa:	950e      	str	r5, [sp, #56]	; 0x38
  404cfc:	9014      	str	r0, [sp, #80]	; 0x50
  404cfe:	b11c      	cbz	r4, 404d08 <_vfprintf_r+0x2c>
  404d00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404d02:	2b00      	cmp	r3, #0
  404d04:	f000 825f 	beq.w	4051c6 <_vfprintf_r+0x4ea>
  404d08:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  404d0c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  404d10:	f013 0f01 	tst.w	r3, #1
  404d14:	b293      	uxth	r3, r2
  404d16:	d102      	bne.n	404d1e <_vfprintf_r+0x42>
  404d18:	0599      	lsls	r1, r3, #22
  404d1a:	f140 8275 	bpl.w	405208 <_vfprintf_r+0x52c>
  404d1e:	049f      	lsls	r7, r3, #18
  404d20:	d40a      	bmi.n	404d38 <_vfprintf_r+0x5c>
  404d22:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  404d26:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  404d2a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404d2e:	f8aa 300c 	strh.w	r3, [sl, #12]
  404d32:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  404d36:	b29b      	uxth	r3, r3
  404d38:	071e      	lsls	r6, r3, #28
  404d3a:	f140 8223 	bpl.w	405184 <_vfprintf_r+0x4a8>
  404d3e:	f8da 2010 	ldr.w	r2, [sl, #16]
  404d42:	2a00      	cmp	r2, #0
  404d44:	f000 821e 	beq.w	405184 <_vfprintf_r+0x4a8>
  404d48:	f003 021a 	and.w	r2, r3, #26
  404d4c:	2a0a      	cmp	r2, #10
  404d4e:	f000 823e 	beq.w	4051ce <_vfprintf_r+0x4f2>
  404d52:	2300      	movs	r3, #0
  404d54:	4618      	mov	r0, r3
  404d56:	9311      	str	r3, [sp, #68]	; 0x44
  404d58:	9313      	str	r3, [sp, #76]	; 0x4c
  404d5a:	9312      	str	r3, [sp, #72]	; 0x48
  404d5c:	9325      	str	r3, [sp, #148]	; 0x94
  404d5e:	9324      	str	r3, [sp, #144]	; 0x90
  404d60:	9318      	str	r3, [sp, #96]	; 0x60
  404d62:	9319      	str	r3, [sp, #100]	; 0x64
  404d64:	930b      	str	r3, [sp, #44]	; 0x2c
  404d66:	ab30      	add	r3, sp, #192	; 0xc0
  404d68:	9323      	str	r3, [sp, #140]	; 0x8c
  404d6a:	4698      	mov	r8, r3
  404d6c:	9016      	str	r0, [sp, #88]	; 0x58
  404d6e:	9017      	str	r0, [sp, #92]	; 0x5c
  404d70:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  404d74:	f899 3000 	ldrb.w	r3, [r9]
  404d78:	464c      	mov	r4, r9
  404d7a:	b1eb      	cbz	r3, 404db8 <_vfprintf_r+0xdc>
  404d7c:	2b25      	cmp	r3, #37	; 0x25
  404d7e:	d102      	bne.n	404d86 <_vfprintf_r+0xaa>
  404d80:	e01a      	b.n	404db8 <_vfprintf_r+0xdc>
  404d82:	2b25      	cmp	r3, #37	; 0x25
  404d84:	d003      	beq.n	404d8e <_vfprintf_r+0xb2>
  404d86:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404d8a:	2b00      	cmp	r3, #0
  404d8c:	d1f9      	bne.n	404d82 <_vfprintf_r+0xa6>
  404d8e:	eba4 0509 	sub.w	r5, r4, r9
  404d92:	b18d      	cbz	r5, 404db8 <_vfprintf_r+0xdc>
  404d94:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d96:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404d98:	f8c8 9000 	str.w	r9, [r8]
  404d9c:	3301      	adds	r3, #1
  404d9e:	442a      	add	r2, r5
  404da0:	2b07      	cmp	r3, #7
  404da2:	f8c8 5004 	str.w	r5, [r8, #4]
  404da6:	9225      	str	r2, [sp, #148]	; 0x94
  404da8:	9324      	str	r3, [sp, #144]	; 0x90
  404daa:	f300 8201 	bgt.w	4051b0 <_vfprintf_r+0x4d4>
  404dae:	f108 0808 	add.w	r8, r8, #8
  404db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404db4:	442b      	add	r3, r5
  404db6:	930b      	str	r3, [sp, #44]	; 0x2c
  404db8:	7823      	ldrb	r3, [r4, #0]
  404dba:	2b00      	cmp	r3, #0
  404dbc:	f000 83f0 	beq.w	4055a0 <_vfprintf_r+0x8c4>
  404dc0:	2300      	movs	r3, #0
  404dc2:	461a      	mov	r2, r3
  404dc4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404dc8:	4619      	mov	r1, r3
  404dca:	930c      	str	r3, [sp, #48]	; 0x30
  404dcc:	469b      	mov	fp, r3
  404dce:	7866      	ldrb	r6, [r4, #1]
  404dd0:	f04f 33ff 	mov.w	r3, #4294967295
  404dd4:	f104 0901 	add.w	r9, r4, #1
  404dd8:	9309      	str	r3, [sp, #36]	; 0x24
  404dda:	f109 0901 	add.w	r9, r9, #1
  404dde:	f1a6 0320 	sub.w	r3, r6, #32
  404de2:	2b58      	cmp	r3, #88	; 0x58
  404de4:	f200 83bf 	bhi.w	405566 <_vfprintf_r+0x88a>
  404de8:	e8df f013 	tbh	[pc, r3, lsl #1]
  404dec:	03bd02e0 	.word	0x03bd02e0
  404df0:	034f03bd 	.word	0x034f03bd
  404df4:	03bd03bd 	.word	0x03bd03bd
  404df8:	03bd03bd 	.word	0x03bd03bd
  404dfc:	03bd03bd 	.word	0x03bd03bd
  404e00:	03080354 	.word	0x03080354
  404e04:	021a03bd 	.word	0x021a03bd
  404e08:	03bd02e8 	.word	0x03bd02e8
  404e0c:	033a0303 	.word	0x033a0303
  404e10:	033a033a 	.word	0x033a033a
  404e14:	033a033a 	.word	0x033a033a
  404e18:	033a033a 	.word	0x033a033a
  404e1c:	033a033a 	.word	0x033a033a
  404e20:	03bd03bd 	.word	0x03bd03bd
  404e24:	03bd03bd 	.word	0x03bd03bd
  404e28:	03bd03bd 	.word	0x03bd03bd
  404e2c:	03bd03bd 	.word	0x03bd03bd
  404e30:	03bd03bd 	.word	0x03bd03bd
  404e34:	03620349 	.word	0x03620349
  404e38:	036203bd 	.word	0x036203bd
  404e3c:	03bd03bd 	.word	0x03bd03bd
  404e40:	03bd03bd 	.word	0x03bd03bd
  404e44:	03bd03a2 	.word	0x03bd03a2
  404e48:	006f03bd 	.word	0x006f03bd
  404e4c:	03bd03bd 	.word	0x03bd03bd
  404e50:	03bd03bd 	.word	0x03bd03bd
  404e54:	005903bd 	.word	0x005903bd
  404e58:	03bd03bd 	.word	0x03bd03bd
  404e5c:	03bd031e 	.word	0x03bd031e
  404e60:	03bd03bd 	.word	0x03bd03bd
  404e64:	03bd03bd 	.word	0x03bd03bd
  404e68:	03bd03bd 	.word	0x03bd03bd
  404e6c:	03bd03bd 	.word	0x03bd03bd
  404e70:	032403bd 	.word	0x032403bd
  404e74:	03620273 	.word	0x03620273
  404e78:	03620362 	.word	0x03620362
  404e7c:	027302b7 	.word	0x027302b7
  404e80:	03bd03bd 	.word	0x03bd03bd
  404e84:	03bd02bc 	.word	0x03bd02bc
  404e88:	007102c9 	.word	0x007102c9
  404e8c:	0247030d 	.word	0x0247030d
  404e90:	025203bd 	.word	0x025203bd
  404e94:	005b03bd 	.word	0x005b03bd
  404e98:	03bd03bd 	.word	0x03bd03bd
  404e9c:	021f      	.short	0x021f
  404e9e:	f04b 0b10 	orr.w	fp, fp, #16
  404ea2:	f01b 0f20 	tst.w	fp, #32
  404ea6:	f040 8353 	bne.w	405550 <_vfprintf_r+0x874>
  404eaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404eac:	f01b 0f10 	tst.w	fp, #16
  404eb0:	4613      	mov	r3, r2
  404eb2:	f040 85b4 	bne.w	405a1e <_vfprintf_r+0xd42>
  404eb6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404eba:	f000 85b0 	beq.w	405a1e <_vfprintf_r+0xd42>
  404ebe:	8814      	ldrh	r4, [r2, #0]
  404ec0:	3204      	adds	r2, #4
  404ec2:	2500      	movs	r5, #0
  404ec4:	2301      	movs	r3, #1
  404ec6:	920e      	str	r2, [sp, #56]	; 0x38
  404ec8:	e014      	b.n	404ef4 <_vfprintf_r+0x218>
  404eca:	f04b 0b10 	orr.w	fp, fp, #16
  404ece:	f01b 0320 	ands.w	r3, fp, #32
  404ed2:	f040 8332 	bne.w	40553a <_vfprintf_r+0x85e>
  404ed6:	f01b 0210 	ands.w	r2, fp, #16
  404eda:	f040 8589 	bne.w	4059f0 <_vfprintf_r+0xd14>
  404ede:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404ee2:	f000 8585 	beq.w	4059f0 <_vfprintf_r+0xd14>
  404ee6:	990e      	ldr	r1, [sp, #56]	; 0x38
  404ee8:	4613      	mov	r3, r2
  404eea:	460a      	mov	r2, r1
  404eec:	3204      	adds	r2, #4
  404eee:	880c      	ldrh	r4, [r1, #0]
  404ef0:	920e      	str	r2, [sp, #56]	; 0x38
  404ef2:	2500      	movs	r5, #0
  404ef4:	f04f 0a00 	mov.w	sl, #0
  404ef8:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404efc:	9909      	ldr	r1, [sp, #36]	; 0x24
  404efe:	1c4a      	adds	r2, r1, #1
  404f00:	f000 820b 	beq.w	40531a <_vfprintf_r+0x63e>
  404f04:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404f08:	9206      	str	r2, [sp, #24]
  404f0a:	ea54 0205 	orrs.w	r2, r4, r5
  404f0e:	f040 820a 	bne.w	405326 <_vfprintf_r+0x64a>
  404f12:	2900      	cmp	r1, #0
  404f14:	f040 846f 	bne.w	4057f6 <_vfprintf_r+0xb1a>
  404f18:	2b00      	cmp	r3, #0
  404f1a:	f040 852d 	bne.w	405978 <_vfprintf_r+0xc9c>
  404f1e:	f01b 0301 	ands.w	r3, fp, #1
  404f22:	930d      	str	r3, [sp, #52]	; 0x34
  404f24:	f000 8668 	beq.w	405bf8 <_vfprintf_r+0xf1c>
  404f28:	af40      	add	r7, sp, #256	; 0x100
  404f2a:	2330      	movs	r3, #48	; 0x30
  404f2c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  404f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404f34:	4293      	cmp	r3, r2
  404f36:	bfb8      	it	lt
  404f38:	4613      	movlt	r3, r2
  404f3a:	9307      	str	r3, [sp, #28]
  404f3c:	2300      	movs	r3, #0
  404f3e:	9310      	str	r3, [sp, #64]	; 0x40
  404f40:	f1ba 0f00 	cmp.w	sl, #0
  404f44:	d002      	beq.n	404f4c <_vfprintf_r+0x270>
  404f46:	9b07      	ldr	r3, [sp, #28]
  404f48:	3301      	adds	r3, #1
  404f4a:	9307      	str	r3, [sp, #28]
  404f4c:	9b06      	ldr	r3, [sp, #24]
  404f4e:	f013 0302 	ands.w	r3, r3, #2
  404f52:	930f      	str	r3, [sp, #60]	; 0x3c
  404f54:	d002      	beq.n	404f5c <_vfprintf_r+0x280>
  404f56:	9b07      	ldr	r3, [sp, #28]
  404f58:	3302      	adds	r3, #2
  404f5a:	9307      	str	r3, [sp, #28]
  404f5c:	9b06      	ldr	r3, [sp, #24]
  404f5e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404f62:	f040 831b 	bne.w	40559c <_vfprintf_r+0x8c0>
  404f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404f68:	9a07      	ldr	r2, [sp, #28]
  404f6a:	eba3 0b02 	sub.w	fp, r3, r2
  404f6e:	f1bb 0f00 	cmp.w	fp, #0
  404f72:	f340 8313 	ble.w	40559c <_vfprintf_r+0x8c0>
  404f76:	f1bb 0f10 	cmp.w	fp, #16
  404f7a:	9925      	ldr	r1, [sp, #148]	; 0x94
  404f7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404f7e:	dd28      	ble.n	404fd2 <_vfprintf_r+0x2f6>
  404f80:	4643      	mov	r3, r8
  404f82:	2410      	movs	r4, #16
  404f84:	46a8      	mov	r8, r5
  404f86:	f8dd a020 	ldr.w	sl, [sp, #32]
  404f8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404f8c:	e006      	b.n	404f9c <_vfprintf_r+0x2c0>
  404f8e:	f1ab 0b10 	sub.w	fp, fp, #16
  404f92:	f1bb 0f10 	cmp.w	fp, #16
  404f96:	f103 0308 	add.w	r3, r3, #8
  404f9a:	dd18      	ble.n	404fce <_vfprintf_r+0x2f2>
  404f9c:	3201      	adds	r2, #1
  404f9e:	48b9      	ldr	r0, [pc, #740]	; (405284 <_vfprintf_r+0x5a8>)
  404fa0:	9224      	str	r2, [sp, #144]	; 0x90
  404fa2:	3110      	adds	r1, #16
  404fa4:	2a07      	cmp	r2, #7
  404fa6:	9125      	str	r1, [sp, #148]	; 0x94
  404fa8:	e883 0011 	stmia.w	r3, {r0, r4}
  404fac:	ddef      	ble.n	404f8e <_vfprintf_r+0x2b2>
  404fae:	aa23      	add	r2, sp, #140	; 0x8c
  404fb0:	4629      	mov	r1, r5
  404fb2:	4650      	mov	r0, sl
  404fb4:	f003 fc3c 	bl	408830 <__sprint_r>
  404fb8:	2800      	cmp	r0, #0
  404fba:	f040 836a 	bne.w	405692 <_vfprintf_r+0x9b6>
  404fbe:	f1ab 0b10 	sub.w	fp, fp, #16
  404fc2:	f1bb 0f10 	cmp.w	fp, #16
  404fc6:	9925      	ldr	r1, [sp, #148]	; 0x94
  404fc8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404fca:	ab30      	add	r3, sp, #192	; 0xc0
  404fcc:	dce6      	bgt.n	404f9c <_vfprintf_r+0x2c0>
  404fce:	4645      	mov	r5, r8
  404fd0:	4698      	mov	r8, r3
  404fd2:	3201      	adds	r2, #1
  404fd4:	4bab      	ldr	r3, [pc, #684]	; (405284 <_vfprintf_r+0x5a8>)
  404fd6:	9224      	str	r2, [sp, #144]	; 0x90
  404fd8:	eb0b 0401 	add.w	r4, fp, r1
  404fdc:	2a07      	cmp	r2, #7
  404fde:	9425      	str	r4, [sp, #148]	; 0x94
  404fe0:	e888 0808 	stmia.w	r8, {r3, fp}
  404fe4:	f300 84cd 	bgt.w	405982 <_vfprintf_r+0xca6>
  404fe8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404fec:	f108 0808 	add.w	r8, r8, #8
  404ff0:	f1ba 0f00 	cmp.w	sl, #0
  404ff4:	d00e      	beq.n	405014 <_vfprintf_r+0x338>
  404ff6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ff8:	3301      	adds	r3, #1
  404ffa:	3401      	adds	r4, #1
  404ffc:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  405000:	2201      	movs	r2, #1
  405002:	2b07      	cmp	r3, #7
  405004:	9425      	str	r4, [sp, #148]	; 0x94
  405006:	9324      	str	r3, [sp, #144]	; 0x90
  405008:	e888 0006 	stmia.w	r8, {r1, r2}
  40500c:	f300 840a 	bgt.w	405824 <_vfprintf_r+0xb48>
  405010:	f108 0808 	add.w	r8, r8, #8
  405014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405016:	b16b      	cbz	r3, 405034 <_vfprintf_r+0x358>
  405018:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40501a:	3301      	adds	r3, #1
  40501c:	3402      	adds	r4, #2
  40501e:	a91c      	add	r1, sp, #112	; 0x70
  405020:	2202      	movs	r2, #2
  405022:	2b07      	cmp	r3, #7
  405024:	9425      	str	r4, [sp, #148]	; 0x94
  405026:	9324      	str	r3, [sp, #144]	; 0x90
  405028:	e888 0006 	stmia.w	r8, {r1, r2}
  40502c:	f300 8406 	bgt.w	40583c <_vfprintf_r+0xb60>
  405030:	f108 0808 	add.w	r8, r8, #8
  405034:	2d80      	cmp	r5, #128	; 0x80
  405036:	f000 832e 	beq.w	405696 <_vfprintf_r+0x9ba>
  40503a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40503c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40503e:	eba3 0a02 	sub.w	sl, r3, r2
  405042:	f1ba 0f00 	cmp.w	sl, #0
  405046:	dd3b      	ble.n	4050c0 <_vfprintf_r+0x3e4>
  405048:	f1ba 0f10 	cmp.w	sl, #16
  40504c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40504e:	4d8e      	ldr	r5, [pc, #568]	; (405288 <_vfprintf_r+0x5ac>)
  405050:	dd2b      	ble.n	4050aa <_vfprintf_r+0x3ce>
  405052:	4642      	mov	r2, r8
  405054:	4621      	mov	r1, r4
  405056:	46b0      	mov	r8, r6
  405058:	f04f 0b10 	mov.w	fp, #16
  40505c:	462e      	mov	r6, r5
  40505e:	9c08      	ldr	r4, [sp, #32]
  405060:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405062:	e006      	b.n	405072 <_vfprintf_r+0x396>
  405064:	f1aa 0a10 	sub.w	sl, sl, #16
  405068:	f1ba 0f10 	cmp.w	sl, #16
  40506c:	f102 0208 	add.w	r2, r2, #8
  405070:	dd17      	ble.n	4050a2 <_vfprintf_r+0x3c6>
  405072:	3301      	adds	r3, #1
  405074:	3110      	adds	r1, #16
  405076:	2b07      	cmp	r3, #7
  405078:	9125      	str	r1, [sp, #148]	; 0x94
  40507a:	9324      	str	r3, [sp, #144]	; 0x90
  40507c:	e882 0840 	stmia.w	r2, {r6, fp}
  405080:	ddf0      	ble.n	405064 <_vfprintf_r+0x388>
  405082:	aa23      	add	r2, sp, #140	; 0x8c
  405084:	4629      	mov	r1, r5
  405086:	4620      	mov	r0, r4
  405088:	f003 fbd2 	bl	408830 <__sprint_r>
  40508c:	2800      	cmp	r0, #0
  40508e:	f040 8300 	bne.w	405692 <_vfprintf_r+0x9b6>
  405092:	f1aa 0a10 	sub.w	sl, sl, #16
  405096:	f1ba 0f10 	cmp.w	sl, #16
  40509a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40509c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40509e:	aa30      	add	r2, sp, #192	; 0xc0
  4050a0:	dce7      	bgt.n	405072 <_vfprintf_r+0x396>
  4050a2:	4635      	mov	r5, r6
  4050a4:	460c      	mov	r4, r1
  4050a6:	4646      	mov	r6, r8
  4050a8:	4690      	mov	r8, r2
  4050aa:	3301      	adds	r3, #1
  4050ac:	4454      	add	r4, sl
  4050ae:	2b07      	cmp	r3, #7
  4050b0:	9425      	str	r4, [sp, #148]	; 0x94
  4050b2:	9324      	str	r3, [sp, #144]	; 0x90
  4050b4:	e888 0420 	stmia.w	r8, {r5, sl}
  4050b8:	f300 83a9 	bgt.w	40580e <_vfprintf_r+0xb32>
  4050bc:	f108 0808 	add.w	r8, r8, #8
  4050c0:	9b06      	ldr	r3, [sp, #24]
  4050c2:	05db      	lsls	r3, r3, #23
  4050c4:	f100 8285 	bmi.w	4055d2 <_vfprintf_r+0x8f6>
  4050c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4050ca:	990d      	ldr	r1, [sp, #52]	; 0x34
  4050cc:	f8c8 7000 	str.w	r7, [r8]
  4050d0:	3301      	adds	r3, #1
  4050d2:	440c      	add	r4, r1
  4050d4:	2b07      	cmp	r3, #7
  4050d6:	9425      	str	r4, [sp, #148]	; 0x94
  4050d8:	f8c8 1004 	str.w	r1, [r8, #4]
  4050dc:	9324      	str	r3, [sp, #144]	; 0x90
  4050de:	f300 8375 	bgt.w	4057cc <_vfprintf_r+0xaf0>
  4050e2:	f108 0808 	add.w	r8, r8, #8
  4050e6:	9b06      	ldr	r3, [sp, #24]
  4050e8:	0759      	lsls	r1, r3, #29
  4050ea:	d53b      	bpl.n	405164 <_vfprintf_r+0x488>
  4050ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4050ee:	9a07      	ldr	r2, [sp, #28]
  4050f0:	1a9d      	subs	r5, r3, r2
  4050f2:	2d00      	cmp	r5, #0
  4050f4:	dd36      	ble.n	405164 <_vfprintf_r+0x488>
  4050f6:	2d10      	cmp	r5, #16
  4050f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4050fa:	dd21      	ble.n	405140 <_vfprintf_r+0x464>
  4050fc:	2610      	movs	r6, #16
  4050fe:	9f08      	ldr	r7, [sp, #32]
  405100:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  405104:	e004      	b.n	405110 <_vfprintf_r+0x434>
  405106:	3d10      	subs	r5, #16
  405108:	2d10      	cmp	r5, #16
  40510a:	f108 0808 	add.w	r8, r8, #8
  40510e:	dd17      	ble.n	405140 <_vfprintf_r+0x464>
  405110:	3301      	adds	r3, #1
  405112:	4a5c      	ldr	r2, [pc, #368]	; (405284 <_vfprintf_r+0x5a8>)
  405114:	9324      	str	r3, [sp, #144]	; 0x90
  405116:	3410      	adds	r4, #16
  405118:	2b07      	cmp	r3, #7
  40511a:	9425      	str	r4, [sp, #148]	; 0x94
  40511c:	e888 0044 	stmia.w	r8, {r2, r6}
  405120:	ddf1      	ble.n	405106 <_vfprintf_r+0x42a>
  405122:	aa23      	add	r2, sp, #140	; 0x8c
  405124:	4651      	mov	r1, sl
  405126:	4638      	mov	r0, r7
  405128:	f003 fb82 	bl	408830 <__sprint_r>
  40512c:	2800      	cmp	r0, #0
  40512e:	f040 823f 	bne.w	4055b0 <_vfprintf_r+0x8d4>
  405132:	3d10      	subs	r5, #16
  405134:	2d10      	cmp	r5, #16
  405136:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405138:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40513a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40513e:	dce7      	bgt.n	405110 <_vfprintf_r+0x434>
  405140:	3301      	adds	r3, #1
  405142:	4a50      	ldr	r2, [pc, #320]	; (405284 <_vfprintf_r+0x5a8>)
  405144:	9324      	str	r3, [sp, #144]	; 0x90
  405146:	442c      	add	r4, r5
  405148:	2b07      	cmp	r3, #7
  40514a:	9425      	str	r4, [sp, #148]	; 0x94
  40514c:	e888 0024 	stmia.w	r8, {r2, r5}
  405150:	dd08      	ble.n	405164 <_vfprintf_r+0x488>
  405152:	aa23      	add	r2, sp, #140	; 0x8c
  405154:	990a      	ldr	r1, [sp, #40]	; 0x28
  405156:	9808      	ldr	r0, [sp, #32]
  405158:	f003 fb6a 	bl	408830 <__sprint_r>
  40515c:	2800      	cmp	r0, #0
  40515e:	f040 8347 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405162:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405166:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405168:	9907      	ldr	r1, [sp, #28]
  40516a:	428a      	cmp	r2, r1
  40516c:	bfac      	ite	ge
  40516e:	189b      	addge	r3, r3, r2
  405170:	185b      	addlt	r3, r3, r1
  405172:	930b      	str	r3, [sp, #44]	; 0x2c
  405174:	2c00      	cmp	r4, #0
  405176:	f040 8333 	bne.w	4057e0 <_vfprintf_r+0xb04>
  40517a:	2300      	movs	r3, #0
  40517c:	9324      	str	r3, [sp, #144]	; 0x90
  40517e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405182:	e5f7      	b.n	404d74 <_vfprintf_r+0x98>
  405184:	4651      	mov	r1, sl
  405186:	9808      	ldr	r0, [sp, #32]
  405188:	f001 f896 	bl	4062b8 <__swsetup_r>
  40518c:	2800      	cmp	r0, #0
  40518e:	d038      	beq.n	405202 <_vfprintf_r+0x526>
  405190:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  405194:	07dd      	lsls	r5, r3, #31
  405196:	d404      	bmi.n	4051a2 <_vfprintf_r+0x4c6>
  405198:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40519c:	059c      	lsls	r4, r3, #22
  40519e:	f140 85ca 	bpl.w	405d36 <_vfprintf_r+0x105a>
  4051a2:	f04f 33ff 	mov.w	r3, #4294967295
  4051a6:	930b      	str	r3, [sp, #44]	; 0x2c
  4051a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4051aa:	b041      	add	sp, #260	; 0x104
  4051ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051b0:	aa23      	add	r2, sp, #140	; 0x8c
  4051b2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4051b4:	9808      	ldr	r0, [sp, #32]
  4051b6:	f003 fb3b 	bl	408830 <__sprint_r>
  4051ba:	2800      	cmp	r0, #0
  4051bc:	f040 8318 	bne.w	4057f0 <_vfprintf_r+0xb14>
  4051c0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4051c4:	e5f5      	b.n	404db2 <_vfprintf_r+0xd6>
  4051c6:	9808      	ldr	r0, [sp, #32]
  4051c8:	f002 f9a0 	bl	40750c <__sinit>
  4051cc:	e59c      	b.n	404d08 <_vfprintf_r+0x2c>
  4051ce:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  4051d2:	2a00      	cmp	r2, #0
  4051d4:	f6ff adbd 	blt.w	404d52 <_vfprintf_r+0x76>
  4051d8:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  4051dc:	07d0      	lsls	r0, r2, #31
  4051de:	d405      	bmi.n	4051ec <_vfprintf_r+0x510>
  4051e0:	0599      	lsls	r1, r3, #22
  4051e2:	d403      	bmi.n	4051ec <_vfprintf_r+0x510>
  4051e4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4051e8:	f002 fcce 	bl	407b88 <__retarget_lock_release_recursive>
  4051ec:	462b      	mov	r3, r5
  4051ee:	464a      	mov	r2, r9
  4051f0:	4651      	mov	r1, sl
  4051f2:	9808      	ldr	r0, [sp, #32]
  4051f4:	f001 f81e 	bl	406234 <__sbprintf>
  4051f8:	900b      	str	r0, [sp, #44]	; 0x2c
  4051fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4051fc:	b041      	add	sp, #260	; 0x104
  4051fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405202:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  405206:	e59f      	b.n	404d48 <_vfprintf_r+0x6c>
  405208:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40520c:	f002 fcba 	bl	407b84 <__retarget_lock_acquire_recursive>
  405210:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  405214:	b293      	uxth	r3, r2
  405216:	e582      	b.n	404d1e <_vfprintf_r+0x42>
  405218:	980c      	ldr	r0, [sp, #48]	; 0x30
  40521a:	930e      	str	r3, [sp, #56]	; 0x38
  40521c:	4240      	negs	r0, r0
  40521e:	900c      	str	r0, [sp, #48]	; 0x30
  405220:	f04b 0b04 	orr.w	fp, fp, #4
  405224:	f899 6000 	ldrb.w	r6, [r9]
  405228:	e5d7      	b.n	404dda <_vfprintf_r+0xfe>
  40522a:	2a00      	cmp	r2, #0
  40522c:	f040 87df 	bne.w	4061ee <_vfprintf_r+0x1512>
  405230:	4b16      	ldr	r3, [pc, #88]	; (40528c <_vfprintf_r+0x5b0>)
  405232:	9318      	str	r3, [sp, #96]	; 0x60
  405234:	f01b 0f20 	tst.w	fp, #32
  405238:	f040 84b9 	bne.w	405bae <_vfprintf_r+0xed2>
  40523c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40523e:	f01b 0f10 	tst.w	fp, #16
  405242:	4613      	mov	r3, r2
  405244:	f040 83dc 	bne.w	405a00 <_vfprintf_r+0xd24>
  405248:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40524c:	f000 83d8 	beq.w	405a00 <_vfprintf_r+0xd24>
  405250:	3304      	adds	r3, #4
  405252:	8814      	ldrh	r4, [r2, #0]
  405254:	930e      	str	r3, [sp, #56]	; 0x38
  405256:	2500      	movs	r5, #0
  405258:	f01b 0f01 	tst.w	fp, #1
  40525c:	f000 8322 	beq.w	4058a4 <_vfprintf_r+0xbc8>
  405260:	ea54 0305 	orrs.w	r3, r4, r5
  405264:	f000 831e 	beq.w	4058a4 <_vfprintf_r+0xbc8>
  405268:	2330      	movs	r3, #48	; 0x30
  40526a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40526e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  405272:	f04b 0b02 	orr.w	fp, fp, #2
  405276:	2302      	movs	r3, #2
  405278:	e63c      	b.n	404ef4 <_vfprintf_r+0x218>
  40527a:	f04b 0b20 	orr.w	fp, fp, #32
  40527e:	f899 6000 	ldrb.w	r6, [r9]
  405282:	e5aa      	b.n	404dda <_vfprintf_r+0xfe>
  405284:	0040929c 	.word	0x0040929c
  405288:	004092ac 	.word	0x004092ac
  40528c:	0040927c 	.word	0x0040927c
  405290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405292:	6817      	ldr	r7, [r2, #0]
  405294:	2400      	movs	r4, #0
  405296:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40529a:	1d15      	adds	r5, r2, #4
  40529c:	2f00      	cmp	r7, #0
  40529e:	f000 864e 	beq.w	405f3e <_vfprintf_r+0x1262>
  4052a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4052a4:	1c53      	adds	r3, r2, #1
  4052a6:	f000 85cc 	beq.w	405e42 <_vfprintf_r+0x1166>
  4052aa:	4621      	mov	r1, r4
  4052ac:	4638      	mov	r0, r7
  4052ae:	f002 fce7 	bl	407c80 <memchr>
  4052b2:	2800      	cmp	r0, #0
  4052b4:	f000 8697 	beq.w	405fe6 <_vfprintf_r+0x130a>
  4052b8:	1bc3      	subs	r3, r0, r7
  4052ba:	930d      	str	r3, [sp, #52]	; 0x34
  4052bc:	9409      	str	r4, [sp, #36]	; 0x24
  4052be:	950e      	str	r5, [sp, #56]	; 0x38
  4052c0:	f8cd b018 	str.w	fp, [sp, #24]
  4052c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4052c8:	9307      	str	r3, [sp, #28]
  4052ca:	9410      	str	r4, [sp, #64]	; 0x40
  4052cc:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4052d0:	e636      	b.n	404f40 <_vfprintf_r+0x264>
  4052d2:	2a00      	cmp	r2, #0
  4052d4:	f040 8796 	bne.w	406204 <_vfprintf_r+0x1528>
  4052d8:	f01b 0f20 	tst.w	fp, #32
  4052dc:	f040 845a 	bne.w	405b94 <_vfprintf_r+0xeb8>
  4052e0:	f01b 0f10 	tst.w	fp, #16
  4052e4:	f040 83a2 	bne.w	405a2c <_vfprintf_r+0xd50>
  4052e8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4052ec:	f000 839e 	beq.w	405a2c <_vfprintf_r+0xd50>
  4052f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4052f2:	f9b1 4000 	ldrsh.w	r4, [r1]
  4052f6:	3104      	adds	r1, #4
  4052f8:	17e5      	asrs	r5, r4, #31
  4052fa:	4622      	mov	r2, r4
  4052fc:	462b      	mov	r3, r5
  4052fe:	910e      	str	r1, [sp, #56]	; 0x38
  405300:	2a00      	cmp	r2, #0
  405302:	f173 0300 	sbcs.w	r3, r3, #0
  405306:	f2c0 8487 	blt.w	405c18 <_vfprintf_r+0xf3c>
  40530a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40530c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405310:	1c4a      	adds	r2, r1, #1
  405312:	f04f 0301 	mov.w	r3, #1
  405316:	f47f adf5 	bne.w	404f04 <_vfprintf_r+0x228>
  40531a:	ea54 0205 	orrs.w	r2, r4, r5
  40531e:	f000 826c 	beq.w	4057fa <_vfprintf_r+0xb1e>
  405322:	f8cd b018 	str.w	fp, [sp, #24]
  405326:	2b01      	cmp	r3, #1
  405328:	f000 8308 	beq.w	40593c <_vfprintf_r+0xc60>
  40532c:	2b02      	cmp	r3, #2
  40532e:	f040 8295 	bne.w	40585c <_vfprintf_r+0xb80>
  405332:	9818      	ldr	r0, [sp, #96]	; 0x60
  405334:	af30      	add	r7, sp, #192	; 0xc0
  405336:	0923      	lsrs	r3, r4, #4
  405338:	f004 010f 	and.w	r1, r4, #15
  40533c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405340:	092a      	lsrs	r2, r5, #4
  405342:	461c      	mov	r4, r3
  405344:	4615      	mov	r5, r2
  405346:	5c43      	ldrb	r3, [r0, r1]
  405348:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40534c:	ea54 0305 	orrs.w	r3, r4, r5
  405350:	d1f1      	bne.n	405336 <_vfprintf_r+0x65a>
  405352:	ab30      	add	r3, sp, #192	; 0xc0
  405354:	1bdb      	subs	r3, r3, r7
  405356:	930d      	str	r3, [sp, #52]	; 0x34
  405358:	e5ea      	b.n	404f30 <_vfprintf_r+0x254>
  40535a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40535e:	f899 6000 	ldrb.w	r6, [r9]
  405362:	e53a      	b.n	404dda <_vfprintf_r+0xfe>
  405364:	f899 6000 	ldrb.w	r6, [r9]
  405368:	2e6c      	cmp	r6, #108	; 0x6c
  40536a:	bf03      	ittte	eq
  40536c:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  405370:	f04b 0b20 	orreq.w	fp, fp, #32
  405374:	f109 0901 	addeq.w	r9, r9, #1
  405378:	f04b 0b10 	orrne.w	fp, fp, #16
  40537c:	e52d      	b.n	404dda <_vfprintf_r+0xfe>
  40537e:	2a00      	cmp	r2, #0
  405380:	f040 874c 	bne.w	40621c <_vfprintf_r+0x1540>
  405384:	f01b 0f20 	tst.w	fp, #32
  405388:	f040 853f 	bne.w	405e0a <_vfprintf_r+0x112e>
  40538c:	f01b 0f10 	tst.w	fp, #16
  405390:	f040 80fc 	bne.w	40558c <_vfprintf_r+0x8b0>
  405394:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405398:	f000 80f8 	beq.w	40558c <_vfprintf_r+0x8b0>
  40539c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40539e:	6813      	ldr	r3, [r2, #0]
  4053a0:	3204      	adds	r2, #4
  4053a2:	920e      	str	r2, [sp, #56]	; 0x38
  4053a4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4053a8:	801a      	strh	r2, [r3, #0]
  4053aa:	e4e3      	b.n	404d74 <_vfprintf_r+0x98>
  4053ac:	f899 6000 	ldrb.w	r6, [r9]
  4053b0:	2900      	cmp	r1, #0
  4053b2:	f47f ad12 	bne.w	404dda <_vfprintf_r+0xfe>
  4053b6:	2201      	movs	r2, #1
  4053b8:	2120      	movs	r1, #32
  4053ba:	e50e      	b.n	404dda <_vfprintf_r+0xfe>
  4053bc:	f899 6000 	ldrb.w	r6, [r9]
  4053c0:	2e2a      	cmp	r6, #42	; 0x2a
  4053c2:	f109 0001 	add.w	r0, r9, #1
  4053c6:	f000 86f1 	beq.w	4061ac <_vfprintf_r+0x14d0>
  4053ca:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4053ce:	2b09      	cmp	r3, #9
  4053d0:	4681      	mov	r9, r0
  4053d2:	bf98      	it	ls
  4053d4:	2000      	movls	r0, #0
  4053d6:	f200 863d 	bhi.w	406054 <_vfprintf_r+0x1378>
  4053da:	f819 6b01 	ldrb.w	r6, [r9], #1
  4053de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4053e2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  4053e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4053ea:	2b09      	cmp	r3, #9
  4053ec:	d9f5      	bls.n	4053da <_vfprintf_r+0x6fe>
  4053ee:	9009      	str	r0, [sp, #36]	; 0x24
  4053f0:	e4f5      	b.n	404dde <_vfprintf_r+0x102>
  4053f2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4053f6:	f899 6000 	ldrb.w	r6, [r9]
  4053fa:	e4ee      	b.n	404dda <_vfprintf_r+0xfe>
  4053fc:	f899 6000 	ldrb.w	r6, [r9]
  405400:	2201      	movs	r2, #1
  405402:	212b      	movs	r1, #43	; 0x2b
  405404:	e4e9      	b.n	404dda <_vfprintf_r+0xfe>
  405406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405408:	4bae      	ldr	r3, [pc, #696]	; (4056c4 <_vfprintf_r+0x9e8>)
  40540a:	6814      	ldr	r4, [r2, #0]
  40540c:	9318      	str	r3, [sp, #96]	; 0x60
  40540e:	2678      	movs	r6, #120	; 0x78
  405410:	2330      	movs	r3, #48	; 0x30
  405412:	3204      	adds	r2, #4
  405414:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  405418:	f04b 0b02 	orr.w	fp, fp, #2
  40541c:	920e      	str	r2, [sp, #56]	; 0x38
  40541e:	2500      	movs	r5, #0
  405420:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  405424:	2302      	movs	r3, #2
  405426:	e565      	b.n	404ef4 <_vfprintf_r+0x218>
  405428:	2a00      	cmp	r2, #0
  40542a:	f040 86e4 	bne.w	4061f6 <_vfprintf_r+0x151a>
  40542e:	4ba6      	ldr	r3, [pc, #664]	; (4056c8 <_vfprintf_r+0x9ec>)
  405430:	9318      	str	r3, [sp, #96]	; 0x60
  405432:	e6ff      	b.n	405234 <_vfprintf_r+0x558>
  405434:	990e      	ldr	r1, [sp, #56]	; 0x38
  405436:	f8cd b018 	str.w	fp, [sp, #24]
  40543a:	680a      	ldr	r2, [r1, #0]
  40543c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  405440:	2300      	movs	r3, #0
  405442:	460a      	mov	r2, r1
  405444:	469a      	mov	sl, r3
  405446:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40544a:	3204      	adds	r2, #4
  40544c:	2301      	movs	r3, #1
  40544e:	9307      	str	r3, [sp, #28]
  405450:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  405454:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  405458:	920e      	str	r2, [sp, #56]	; 0x38
  40545a:	930d      	str	r3, [sp, #52]	; 0x34
  40545c:	af26      	add	r7, sp, #152	; 0x98
  40545e:	e575      	b.n	404f4c <_vfprintf_r+0x270>
  405460:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  405464:	2000      	movs	r0, #0
  405466:	f819 6b01 	ldrb.w	r6, [r9], #1
  40546a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40546e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  405472:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  405476:	2b09      	cmp	r3, #9
  405478:	d9f5      	bls.n	405466 <_vfprintf_r+0x78a>
  40547a:	900c      	str	r0, [sp, #48]	; 0x30
  40547c:	e4af      	b.n	404dde <_vfprintf_r+0x102>
  40547e:	2a00      	cmp	r2, #0
  405480:	f040 86c8 	bne.w	406214 <_vfprintf_r+0x1538>
  405484:	f04b 0b10 	orr.w	fp, fp, #16
  405488:	e726      	b.n	4052d8 <_vfprintf_r+0x5fc>
  40548a:	f04b 0b01 	orr.w	fp, fp, #1
  40548e:	f899 6000 	ldrb.w	r6, [r9]
  405492:	e4a2      	b.n	404dda <_vfprintf_r+0xfe>
  405494:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  405496:	6823      	ldr	r3, [r4, #0]
  405498:	930c      	str	r3, [sp, #48]	; 0x30
  40549a:	4618      	mov	r0, r3
  40549c:	2800      	cmp	r0, #0
  40549e:	4623      	mov	r3, r4
  4054a0:	f103 0304 	add.w	r3, r3, #4
  4054a4:	f6ff aeb8 	blt.w	405218 <_vfprintf_r+0x53c>
  4054a8:	930e      	str	r3, [sp, #56]	; 0x38
  4054aa:	f899 6000 	ldrb.w	r6, [r9]
  4054ae:	e494      	b.n	404dda <_vfprintf_r+0xfe>
  4054b0:	2a00      	cmp	r2, #0
  4054b2:	f040 86b7 	bne.w	406224 <_vfprintf_r+0x1548>
  4054b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4054b8:	3507      	adds	r5, #7
  4054ba:	f025 0307 	bic.w	r3, r5, #7
  4054be:	f103 0208 	add.w	r2, r3, #8
  4054c2:	920e      	str	r2, [sp, #56]	; 0x38
  4054c4:	681a      	ldr	r2, [r3, #0]
  4054c6:	9213      	str	r2, [sp, #76]	; 0x4c
  4054c8:	685b      	ldr	r3, [r3, #4]
  4054ca:	9312      	str	r3, [sp, #72]	; 0x48
  4054cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4054ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  4054d0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4054d4:	4628      	mov	r0, r5
  4054d6:	4621      	mov	r1, r4
  4054d8:	f04f 32ff 	mov.w	r2, #4294967295
  4054dc:	4b7b      	ldr	r3, [pc, #492]	; (4056cc <_vfprintf_r+0x9f0>)
  4054de:	f003 fc57 	bl	408d90 <__aeabi_dcmpun>
  4054e2:	2800      	cmp	r0, #0
  4054e4:	f040 83a2 	bne.w	405c2c <_vfprintf_r+0xf50>
  4054e8:	4628      	mov	r0, r5
  4054ea:	4621      	mov	r1, r4
  4054ec:	f04f 32ff 	mov.w	r2, #4294967295
  4054f0:	4b76      	ldr	r3, [pc, #472]	; (4056cc <_vfprintf_r+0x9f0>)
  4054f2:	f7fe fae5 	bl	403ac0 <__aeabi_dcmple>
  4054f6:	2800      	cmp	r0, #0
  4054f8:	f040 8398 	bne.w	405c2c <_vfprintf_r+0xf50>
  4054fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4054fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405502:	9912      	ldr	r1, [sp, #72]	; 0x48
  405504:	f7fe fad2 	bl	403aac <__aeabi_dcmplt>
  405508:	2800      	cmp	r0, #0
  40550a:	f040 8435 	bne.w	405d78 <_vfprintf_r+0x109c>
  40550e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405512:	4f6f      	ldr	r7, [pc, #444]	; (4056d0 <_vfprintf_r+0x9f4>)
  405514:	4b6f      	ldr	r3, [pc, #444]	; (4056d4 <_vfprintf_r+0x9f8>)
  405516:	2203      	movs	r2, #3
  405518:	2100      	movs	r1, #0
  40551a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40551e:	9207      	str	r2, [sp, #28]
  405520:	9109      	str	r1, [sp, #36]	; 0x24
  405522:	9006      	str	r0, [sp, #24]
  405524:	2e47      	cmp	r6, #71	; 0x47
  405526:	bfd8      	it	le
  405528:	461f      	movle	r7, r3
  40552a:	920d      	str	r2, [sp, #52]	; 0x34
  40552c:	9110      	str	r1, [sp, #64]	; 0x40
  40552e:	e507      	b.n	404f40 <_vfprintf_r+0x264>
  405530:	f04b 0b08 	orr.w	fp, fp, #8
  405534:	f899 6000 	ldrb.w	r6, [r9]
  405538:	e44f      	b.n	404dda <_vfprintf_r+0xfe>
  40553a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40553c:	3507      	adds	r5, #7
  40553e:	f025 0307 	bic.w	r3, r5, #7
  405542:	f103 0208 	add.w	r2, r3, #8
  405546:	e9d3 4500 	ldrd	r4, r5, [r3]
  40554a:	920e      	str	r2, [sp, #56]	; 0x38
  40554c:	2300      	movs	r3, #0
  40554e:	e4d1      	b.n	404ef4 <_vfprintf_r+0x218>
  405550:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405552:	3507      	adds	r5, #7
  405554:	f025 0307 	bic.w	r3, r5, #7
  405558:	f103 0208 	add.w	r2, r3, #8
  40555c:	e9d3 4500 	ldrd	r4, r5, [r3]
  405560:	920e      	str	r2, [sp, #56]	; 0x38
  405562:	2301      	movs	r3, #1
  405564:	e4c6      	b.n	404ef4 <_vfprintf_r+0x218>
  405566:	2a00      	cmp	r2, #0
  405568:	f040 8650 	bne.w	40620c <_vfprintf_r+0x1530>
  40556c:	b1c6      	cbz	r6, 4055a0 <_vfprintf_r+0x8c4>
  40556e:	2300      	movs	r3, #0
  405570:	2201      	movs	r2, #1
  405572:	469a      	mov	sl, r3
  405574:	9207      	str	r2, [sp, #28]
  405576:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  40557a:	f8cd b018 	str.w	fp, [sp, #24]
  40557e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405582:	9309      	str	r3, [sp, #36]	; 0x24
  405584:	9310      	str	r3, [sp, #64]	; 0x40
  405586:	920d      	str	r2, [sp, #52]	; 0x34
  405588:	af26      	add	r7, sp, #152	; 0x98
  40558a:	e4df      	b.n	404f4c <_vfprintf_r+0x270>
  40558c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40558e:	6813      	ldr	r3, [r2, #0]
  405590:	3204      	adds	r2, #4
  405592:	920e      	str	r2, [sp, #56]	; 0x38
  405594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405596:	601a      	str	r2, [r3, #0]
  405598:	f7ff bbec 	b.w	404d74 <_vfprintf_r+0x98>
  40559c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40559e:	e527      	b.n	404ff0 <_vfprintf_r+0x314>
  4055a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4055a2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4055a6:	2b00      	cmp	r3, #0
  4055a8:	f040 8594 	bne.w	4060d4 <_vfprintf_r+0x13f8>
  4055ac:	2300      	movs	r3, #0
  4055ae:	9324      	str	r3, [sp, #144]	; 0x90
  4055b0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4055b4:	f013 0f01 	tst.w	r3, #1
  4055b8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4055bc:	d102      	bne.n	4055c4 <_vfprintf_r+0x8e8>
  4055be:	059a      	lsls	r2, r3, #22
  4055c0:	f140 8249 	bpl.w	405a56 <_vfprintf_r+0xd7a>
  4055c4:	065b      	lsls	r3, r3, #25
  4055c6:	f53f adec 	bmi.w	4051a2 <_vfprintf_r+0x4c6>
  4055ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4055cc:	b041      	add	sp, #260	; 0x104
  4055ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055d2:	2e65      	cmp	r6, #101	; 0x65
  4055d4:	f340 80b2 	ble.w	40573c <_vfprintf_r+0xa60>
  4055d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4055da:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4055dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4055de:	9912      	ldr	r1, [sp, #72]	; 0x48
  4055e0:	f7fe fa5a 	bl	403a98 <__aeabi_dcmpeq>
  4055e4:	2800      	cmp	r0, #0
  4055e6:	f000 8160 	beq.w	4058aa <_vfprintf_r+0xbce>
  4055ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055ec:	4a3a      	ldr	r2, [pc, #232]	; (4056d8 <_vfprintf_r+0x9fc>)
  4055ee:	f8c8 2000 	str.w	r2, [r8]
  4055f2:	3301      	adds	r3, #1
  4055f4:	3401      	adds	r4, #1
  4055f6:	2201      	movs	r2, #1
  4055f8:	2b07      	cmp	r3, #7
  4055fa:	9425      	str	r4, [sp, #148]	; 0x94
  4055fc:	9324      	str	r3, [sp, #144]	; 0x90
  4055fe:	f8c8 2004 	str.w	r2, [r8, #4]
  405602:	f300 83bf 	bgt.w	405d84 <_vfprintf_r+0x10a8>
  405606:	f108 0808 	add.w	r8, r8, #8
  40560a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40560c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40560e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405610:	4293      	cmp	r3, r2
  405612:	db03      	blt.n	40561c <_vfprintf_r+0x940>
  405614:	9b06      	ldr	r3, [sp, #24]
  405616:	07df      	lsls	r7, r3, #31
  405618:	f57f ad65 	bpl.w	4050e6 <_vfprintf_r+0x40a>
  40561c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40561e:	9914      	ldr	r1, [sp, #80]	; 0x50
  405620:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405622:	f8c8 2000 	str.w	r2, [r8]
  405626:	3301      	adds	r3, #1
  405628:	440c      	add	r4, r1
  40562a:	2b07      	cmp	r3, #7
  40562c:	f8c8 1004 	str.w	r1, [r8, #4]
  405630:	9425      	str	r4, [sp, #148]	; 0x94
  405632:	9324      	str	r3, [sp, #144]	; 0x90
  405634:	f300 83f8 	bgt.w	405e28 <_vfprintf_r+0x114c>
  405638:	f108 0808 	add.w	r8, r8, #8
  40563c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40563e:	1e5e      	subs	r6, r3, #1
  405640:	2e00      	cmp	r6, #0
  405642:	f77f ad50 	ble.w	4050e6 <_vfprintf_r+0x40a>
  405646:	2e10      	cmp	r6, #16
  405648:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40564a:	4d24      	ldr	r5, [pc, #144]	; (4056dc <_vfprintf_r+0xa00>)
  40564c:	f340 81dd 	ble.w	405a0a <_vfprintf_r+0xd2e>
  405650:	2710      	movs	r7, #16
  405652:	f8dd a020 	ldr.w	sl, [sp, #32]
  405656:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40565a:	e005      	b.n	405668 <_vfprintf_r+0x98c>
  40565c:	f108 0808 	add.w	r8, r8, #8
  405660:	3e10      	subs	r6, #16
  405662:	2e10      	cmp	r6, #16
  405664:	f340 81d1 	ble.w	405a0a <_vfprintf_r+0xd2e>
  405668:	3301      	adds	r3, #1
  40566a:	3410      	adds	r4, #16
  40566c:	2b07      	cmp	r3, #7
  40566e:	9425      	str	r4, [sp, #148]	; 0x94
  405670:	9324      	str	r3, [sp, #144]	; 0x90
  405672:	e888 00a0 	stmia.w	r8, {r5, r7}
  405676:	ddf1      	ble.n	40565c <_vfprintf_r+0x980>
  405678:	aa23      	add	r2, sp, #140	; 0x8c
  40567a:	4659      	mov	r1, fp
  40567c:	4650      	mov	r0, sl
  40567e:	f003 f8d7 	bl	408830 <__sprint_r>
  405682:	2800      	cmp	r0, #0
  405684:	f040 83cd 	bne.w	405e22 <_vfprintf_r+0x1146>
  405688:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40568a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40568c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405690:	e7e6      	b.n	405660 <_vfprintf_r+0x984>
  405692:	46aa      	mov	sl, r5
  405694:	e78c      	b.n	4055b0 <_vfprintf_r+0x8d4>
  405696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405698:	9a07      	ldr	r2, [sp, #28]
  40569a:	eba3 0a02 	sub.w	sl, r3, r2
  40569e:	f1ba 0f00 	cmp.w	sl, #0
  4056a2:	f77f acca 	ble.w	40503a <_vfprintf_r+0x35e>
  4056a6:	f1ba 0f10 	cmp.w	sl, #16
  4056aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4056ac:	4d0b      	ldr	r5, [pc, #44]	; (4056dc <_vfprintf_r+0xa00>)
  4056ae:	dd39      	ble.n	405724 <_vfprintf_r+0xa48>
  4056b0:	4642      	mov	r2, r8
  4056b2:	4621      	mov	r1, r4
  4056b4:	46b0      	mov	r8, r6
  4056b6:	f04f 0b10 	mov.w	fp, #16
  4056ba:	462e      	mov	r6, r5
  4056bc:	9c08      	ldr	r4, [sp, #32]
  4056be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4056c0:	e015      	b.n	4056ee <_vfprintf_r+0xa12>
  4056c2:	bf00      	nop
  4056c4:	0040927c 	.word	0x0040927c
  4056c8:	00409268 	.word	0x00409268
  4056cc:	7fefffff 	.word	0x7fefffff
  4056d0:	0040925c 	.word	0x0040925c
  4056d4:	00409258 	.word	0x00409258
  4056d8:	00409298 	.word	0x00409298
  4056dc:	004092ac 	.word	0x004092ac
  4056e0:	f1aa 0a10 	sub.w	sl, sl, #16
  4056e4:	f1ba 0f10 	cmp.w	sl, #16
  4056e8:	f102 0208 	add.w	r2, r2, #8
  4056ec:	dd16      	ble.n	40571c <_vfprintf_r+0xa40>
  4056ee:	3301      	adds	r3, #1
  4056f0:	3110      	adds	r1, #16
  4056f2:	2b07      	cmp	r3, #7
  4056f4:	9125      	str	r1, [sp, #148]	; 0x94
  4056f6:	9324      	str	r3, [sp, #144]	; 0x90
  4056f8:	e882 0840 	stmia.w	r2, {r6, fp}
  4056fc:	ddf0      	ble.n	4056e0 <_vfprintf_r+0xa04>
  4056fe:	aa23      	add	r2, sp, #140	; 0x8c
  405700:	4629      	mov	r1, r5
  405702:	4620      	mov	r0, r4
  405704:	f003 f894 	bl	408830 <__sprint_r>
  405708:	2800      	cmp	r0, #0
  40570a:	d1c2      	bne.n	405692 <_vfprintf_r+0x9b6>
  40570c:	f1aa 0a10 	sub.w	sl, sl, #16
  405710:	f1ba 0f10 	cmp.w	sl, #16
  405714:	9925      	ldr	r1, [sp, #148]	; 0x94
  405716:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405718:	aa30      	add	r2, sp, #192	; 0xc0
  40571a:	dce8      	bgt.n	4056ee <_vfprintf_r+0xa12>
  40571c:	4635      	mov	r5, r6
  40571e:	460c      	mov	r4, r1
  405720:	4646      	mov	r6, r8
  405722:	4690      	mov	r8, r2
  405724:	3301      	adds	r3, #1
  405726:	4454      	add	r4, sl
  405728:	2b07      	cmp	r3, #7
  40572a:	9425      	str	r4, [sp, #148]	; 0x94
  40572c:	9324      	str	r3, [sp, #144]	; 0x90
  40572e:	e888 0420 	stmia.w	r8, {r5, sl}
  405732:	f300 8264 	bgt.w	405bfe <_vfprintf_r+0xf22>
  405736:	f108 0808 	add.w	r8, r8, #8
  40573a:	e47e      	b.n	40503a <_vfprintf_r+0x35e>
  40573c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40573e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405740:	2b01      	cmp	r3, #1
  405742:	f340 81fd 	ble.w	405b40 <_vfprintf_r+0xe64>
  405746:	3601      	adds	r6, #1
  405748:	3401      	adds	r4, #1
  40574a:	2301      	movs	r3, #1
  40574c:	2e07      	cmp	r6, #7
  40574e:	9425      	str	r4, [sp, #148]	; 0x94
  405750:	9624      	str	r6, [sp, #144]	; 0x90
  405752:	f8c8 7000 	str.w	r7, [r8]
  405756:	f8c8 3004 	str.w	r3, [r8, #4]
  40575a:	f300 820e 	bgt.w	405b7a <_vfprintf_r+0xe9e>
  40575e:	f108 0808 	add.w	r8, r8, #8
  405762:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405764:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405766:	f8c8 3000 	str.w	r3, [r8]
  40576a:	3601      	adds	r6, #1
  40576c:	4414      	add	r4, r2
  40576e:	2e07      	cmp	r6, #7
  405770:	9425      	str	r4, [sp, #148]	; 0x94
  405772:	9624      	str	r6, [sp, #144]	; 0x90
  405774:	f8c8 2004 	str.w	r2, [r8, #4]
  405778:	f300 822e 	bgt.w	405bd8 <_vfprintf_r+0xefc>
  40577c:	f108 0808 	add.w	r8, r8, #8
  405780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405782:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405784:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405786:	9912      	ldr	r1, [sp, #72]	; 0x48
  405788:	f7fe f986 	bl	403a98 <__aeabi_dcmpeq>
  40578c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40578e:	2800      	cmp	r0, #0
  405790:	f040 8106 	bne.w	4059a0 <_vfprintf_r+0xcc4>
  405794:	3b01      	subs	r3, #1
  405796:	3601      	adds	r6, #1
  405798:	3701      	adds	r7, #1
  40579a:	441c      	add	r4, r3
  40579c:	2e07      	cmp	r6, #7
  40579e:	9624      	str	r6, [sp, #144]	; 0x90
  4057a0:	9425      	str	r4, [sp, #148]	; 0x94
  4057a2:	f8c8 7000 	str.w	r7, [r8]
  4057a6:	f8c8 3004 	str.w	r3, [r8, #4]
  4057aa:	f300 81d9 	bgt.w	405b60 <_vfprintf_r+0xe84>
  4057ae:	f108 0808 	add.w	r8, r8, #8
  4057b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4057b4:	f8c8 2004 	str.w	r2, [r8, #4]
  4057b8:	3601      	adds	r6, #1
  4057ba:	4414      	add	r4, r2
  4057bc:	ab1f      	add	r3, sp, #124	; 0x7c
  4057be:	2e07      	cmp	r6, #7
  4057c0:	9425      	str	r4, [sp, #148]	; 0x94
  4057c2:	9624      	str	r6, [sp, #144]	; 0x90
  4057c4:	f8c8 3000 	str.w	r3, [r8]
  4057c8:	f77f ac8b 	ble.w	4050e2 <_vfprintf_r+0x406>
  4057cc:	aa23      	add	r2, sp, #140	; 0x8c
  4057ce:	990a      	ldr	r1, [sp, #40]	; 0x28
  4057d0:	9808      	ldr	r0, [sp, #32]
  4057d2:	f003 f82d 	bl	408830 <__sprint_r>
  4057d6:	b958      	cbnz	r0, 4057f0 <_vfprintf_r+0xb14>
  4057d8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4057da:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4057de:	e482      	b.n	4050e6 <_vfprintf_r+0x40a>
  4057e0:	aa23      	add	r2, sp, #140	; 0x8c
  4057e2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4057e4:	9808      	ldr	r0, [sp, #32]
  4057e6:	f003 f823 	bl	408830 <__sprint_r>
  4057ea:	2800      	cmp	r0, #0
  4057ec:	f43f acc5 	beq.w	40517a <_vfprintf_r+0x49e>
  4057f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4057f4:	e6dc      	b.n	4055b0 <_vfprintf_r+0x8d4>
  4057f6:	f8dd b018 	ldr.w	fp, [sp, #24]
  4057fa:	2b01      	cmp	r3, #1
  4057fc:	f000 8121 	beq.w	405a42 <_vfprintf_r+0xd66>
  405800:	2b02      	cmp	r3, #2
  405802:	d127      	bne.n	405854 <_vfprintf_r+0xb78>
  405804:	f8cd b018 	str.w	fp, [sp, #24]
  405808:	2400      	movs	r4, #0
  40580a:	2500      	movs	r5, #0
  40580c:	e591      	b.n	405332 <_vfprintf_r+0x656>
  40580e:	aa23      	add	r2, sp, #140	; 0x8c
  405810:	990a      	ldr	r1, [sp, #40]	; 0x28
  405812:	9808      	ldr	r0, [sp, #32]
  405814:	f003 f80c 	bl	408830 <__sprint_r>
  405818:	2800      	cmp	r0, #0
  40581a:	d1e9      	bne.n	4057f0 <_vfprintf_r+0xb14>
  40581c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40581e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405822:	e44d      	b.n	4050c0 <_vfprintf_r+0x3e4>
  405824:	aa23      	add	r2, sp, #140	; 0x8c
  405826:	990a      	ldr	r1, [sp, #40]	; 0x28
  405828:	9808      	ldr	r0, [sp, #32]
  40582a:	f003 f801 	bl	408830 <__sprint_r>
  40582e:	2800      	cmp	r0, #0
  405830:	d1de      	bne.n	4057f0 <_vfprintf_r+0xb14>
  405832:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405834:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405838:	f7ff bbec 	b.w	405014 <_vfprintf_r+0x338>
  40583c:	aa23      	add	r2, sp, #140	; 0x8c
  40583e:	990a      	ldr	r1, [sp, #40]	; 0x28
  405840:	9808      	ldr	r0, [sp, #32]
  405842:	f002 fff5 	bl	408830 <__sprint_r>
  405846:	2800      	cmp	r0, #0
  405848:	d1d2      	bne.n	4057f0 <_vfprintf_r+0xb14>
  40584a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40584c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405850:	f7ff bbf0 	b.w	405034 <_vfprintf_r+0x358>
  405854:	f8cd b018 	str.w	fp, [sp, #24]
  405858:	2400      	movs	r4, #0
  40585a:	2500      	movs	r5, #0
  40585c:	a930      	add	r1, sp, #192	; 0xc0
  40585e:	e000      	b.n	405862 <_vfprintf_r+0xb86>
  405860:	4639      	mov	r1, r7
  405862:	08e2      	lsrs	r2, r4, #3
  405864:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405868:	08e8      	lsrs	r0, r5, #3
  40586a:	f004 0307 	and.w	r3, r4, #7
  40586e:	4605      	mov	r5, r0
  405870:	4614      	mov	r4, r2
  405872:	3330      	adds	r3, #48	; 0x30
  405874:	ea54 0205 	orrs.w	r2, r4, r5
  405878:	f801 3c01 	strb.w	r3, [r1, #-1]
  40587c:	f101 37ff 	add.w	r7, r1, #4294967295
  405880:	d1ee      	bne.n	405860 <_vfprintf_r+0xb84>
  405882:	9a06      	ldr	r2, [sp, #24]
  405884:	07d2      	lsls	r2, r2, #31
  405886:	f57f ad64 	bpl.w	405352 <_vfprintf_r+0x676>
  40588a:	2b30      	cmp	r3, #48	; 0x30
  40588c:	f43f ad61 	beq.w	405352 <_vfprintf_r+0x676>
  405890:	2330      	movs	r3, #48	; 0x30
  405892:	3902      	subs	r1, #2
  405894:	f807 3c01 	strb.w	r3, [r7, #-1]
  405898:	ab30      	add	r3, sp, #192	; 0xc0
  40589a:	1a5b      	subs	r3, r3, r1
  40589c:	930d      	str	r3, [sp, #52]	; 0x34
  40589e:	460f      	mov	r7, r1
  4058a0:	f7ff bb46 	b.w	404f30 <_vfprintf_r+0x254>
  4058a4:	2302      	movs	r3, #2
  4058a6:	f7ff bb25 	b.w	404ef4 <_vfprintf_r+0x218>
  4058aa:	991d      	ldr	r1, [sp, #116]	; 0x74
  4058ac:	2900      	cmp	r1, #0
  4058ae:	f340 8274 	ble.w	405d9a <_vfprintf_r+0x10be>
  4058b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4058b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4058b6:	4293      	cmp	r3, r2
  4058b8:	bfa8      	it	ge
  4058ba:	4613      	movge	r3, r2
  4058bc:	2b00      	cmp	r3, #0
  4058be:	461e      	mov	r6, r3
  4058c0:	dd0d      	ble.n	4058de <_vfprintf_r+0xc02>
  4058c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058c4:	f8c8 7000 	str.w	r7, [r8]
  4058c8:	3301      	adds	r3, #1
  4058ca:	4434      	add	r4, r6
  4058cc:	2b07      	cmp	r3, #7
  4058ce:	9425      	str	r4, [sp, #148]	; 0x94
  4058d0:	f8c8 6004 	str.w	r6, [r8, #4]
  4058d4:	9324      	str	r3, [sp, #144]	; 0x90
  4058d6:	f300 8324 	bgt.w	405f22 <_vfprintf_r+0x1246>
  4058da:	f108 0808 	add.w	r8, r8, #8
  4058de:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4058e0:	2e00      	cmp	r6, #0
  4058e2:	bfa8      	it	ge
  4058e4:	1b9b      	subge	r3, r3, r6
  4058e6:	2b00      	cmp	r3, #0
  4058e8:	461e      	mov	r6, r3
  4058ea:	f340 80d0 	ble.w	405a8e <_vfprintf_r+0xdb2>
  4058ee:	2e10      	cmp	r6, #16
  4058f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058f2:	4dc0      	ldr	r5, [pc, #768]	; (405bf4 <_vfprintf_r+0xf18>)
  4058f4:	f340 80b7 	ble.w	405a66 <_vfprintf_r+0xd8a>
  4058f8:	4622      	mov	r2, r4
  4058fa:	f04f 0a10 	mov.w	sl, #16
  4058fe:	f8dd b020 	ldr.w	fp, [sp, #32]
  405902:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405904:	e005      	b.n	405912 <_vfprintf_r+0xc36>
  405906:	f108 0808 	add.w	r8, r8, #8
  40590a:	3e10      	subs	r6, #16
  40590c:	2e10      	cmp	r6, #16
  40590e:	f340 80a9 	ble.w	405a64 <_vfprintf_r+0xd88>
  405912:	3301      	adds	r3, #1
  405914:	3210      	adds	r2, #16
  405916:	2b07      	cmp	r3, #7
  405918:	9225      	str	r2, [sp, #148]	; 0x94
  40591a:	9324      	str	r3, [sp, #144]	; 0x90
  40591c:	e888 0420 	stmia.w	r8, {r5, sl}
  405920:	ddf1      	ble.n	405906 <_vfprintf_r+0xc2a>
  405922:	aa23      	add	r2, sp, #140	; 0x8c
  405924:	4621      	mov	r1, r4
  405926:	4658      	mov	r0, fp
  405928:	f002 ff82 	bl	408830 <__sprint_r>
  40592c:	2800      	cmp	r0, #0
  40592e:	f040 8324 	bne.w	405f7a <_vfprintf_r+0x129e>
  405932:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405934:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405936:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40593a:	e7e6      	b.n	40590a <_vfprintf_r+0xc2e>
  40593c:	2d00      	cmp	r5, #0
  40593e:	bf08      	it	eq
  405940:	2c0a      	cmpeq	r4, #10
  405942:	d37c      	bcc.n	405a3e <_vfprintf_r+0xd62>
  405944:	af30      	add	r7, sp, #192	; 0xc0
  405946:	4620      	mov	r0, r4
  405948:	4629      	mov	r1, r5
  40594a:	220a      	movs	r2, #10
  40594c:	2300      	movs	r3, #0
  40594e:	f003 fa5d 	bl	408e0c <__aeabi_uldivmod>
  405952:	3230      	adds	r2, #48	; 0x30
  405954:	f807 2d01 	strb.w	r2, [r7, #-1]!
  405958:	4620      	mov	r0, r4
  40595a:	4629      	mov	r1, r5
  40595c:	2300      	movs	r3, #0
  40595e:	220a      	movs	r2, #10
  405960:	f003 fa54 	bl	408e0c <__aeabi_uldivmod>
  405964:	4604      	mov	r4, r0
  405966:	460d      	mov	r5, r1
  405968:	ea54 0305 	orrs.w	r3, r4, r5
  40596c:	d1eb      	bne.n	405946 <_vfprintf_r+0xc6a>
  40596e:	ab30      	add	r3, sp, #192	; 0xc0
  405970:	1bdb      	subs	r3, r3, r7
  405972:	930d      	str	r3, [sp, #52]	; 0x34
  405974:	f7ff badc 	b.w	404f30 <_vfprintf_r+0x254>
  405978:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40597a:	930d      	str	r3, [sp, #52]	; 0x34
  40597c:	af30      	add	r7, sp, #192	; 0xc0
  40597e:	f7ff bad7 	b.w	404f30 <_vfprintf_r+0x254>
  405982:	aa23      	add	r2, sp, #140	; 0x8c
  405984:	990a      	ldr	r1, [sp, #40]	; 0x28
  405986:	9808      	ldr	r0, [sp, #32]
  405988:	f002 ff52 	bl	408830 <__sprint_r>
  40598c:	2800      	cmp	r0, #0
  40598e:	f47f af2f 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405992:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405996:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405998:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40599c:	f7ff bb28 	b.w	404ff0 <_vfprintf_r+0x314>
  4059a0:	1e5f      	subs	r7, r3, #1
  4059a2:	2f00      	cmp	r7, #0
  4059a4:	f77f af05 	ble.w	4057b2 <_vfprintf_r+0xad6>
  4059a8:	2f10      	cmp	r7, #16
  4059aa:	4d92      	ldr	r5, [pc, #584]	; (405bf4 <_vfprintf_r+0xf18>)
  4059ac:	f340 810a 	ble.w	405bc4 <_vfprintf_r+0xee8>
  4059b0:	f04f 0a10 	mov.w	sl, #16
  4059b4:	f8dd b020 	ldr.w	fp, [sp, #32]
  4059b8:	e005      	b.n	4059c6 <_vfprintf_r+0xcea>
  4059ba:	f108 0808 	add.w	r8, r8, #8
  4059be:	3f10      	subs	r7, #16
  4059c0:	2f10      	cmp	r7, #16
  4059c2:	f340 80ff 	ble.w	405bc4 <_vfprintf_r+0xee8>
  4059c6:	3601      	adds	r6, #1
  4059c8:	3410      	adds	r4, #16
  4059ca:	2e07      	cmp	r6, #7
  4059cc:	9425      	str	r4, [sp, #148]	; 0x94
  4059ce:	9624      	str	r6, [sp, #144]	; 0x90
  4059d0:	e888 0420 	stmia.w	r8, {r5, sl}
  4059d4:	ddf1      	ble.n	4059ba <_vfprintf_r+0xcde>
  4059d6:	aa23      	add	r2, sp, #140	; 0x8c
  4059d8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4059da:	4658      	mov	r0, fp
  4059dc:	f002 ff28 	bl	408830 <__sprint_r>
  4059e0:	2800      	cmp	r0, #0
  4059e2:	f47f af05 	bne.w	4057f0 <_vfprintf_r+0xb14>
  4059e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4059e8:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4059ea:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4059ee:	e7e6      	b.n	4059be <_vfprintf_r+0xce2>
  4059f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4059f2:	460a      	mov	r2, r1
  4059f4:	3204      	adds	r2, #4
  4059f6:	680c      	ldr	r4, [r1, #0]
  4059f8:	920e      	str	r2, [sp, #56]	; 0x38
  4059fa:	2500      	movs	r5, #0
  4059fc:	f7ff ba7a 	b.w	404ef4 <_vfprintf_r+0x218>
  405a00:	681c      	ldr	r4, [r3, #0]
  405a02:	3304      	adds	r3, #4
  405a04:	930e      	str	r3, [sp, #56]	; 0x38
  405a06:	2500      	movs	r5, #0
  405a08:	e426      	b.n	405258 <_vfprintf_r+0x57c>
  405a0a:	3301      	adds	r3, #1
  405a0c:	4434      	add	r4, r6
  405a0e:	2b07      	cmp	r3, #7
  405a10:	9425      	str	r4, [sp, #148]	; 0x94
  405a12:	9324      	str	r3, [sp, #144]	; 0x90
  405a14:	e888 0060 	stmia.w	r8, {r5, r6}
  405a18:	f77f ab63 	ble.w	4050e2 <_vfprintf_r+0x406>
  405a1c:	e6d6      	b.n	4057cc <_vfprintf_r+0xaf0>
  405a1e:	3204      	adds	r2, #4
  405a20:	681c      	ldr	r4, [r3, #0]
  405a22:	920e      	str	r2, [sp, #56]	; 0x38
  405a24:	2301      	movs	r3, #1
  405a26:	2500      	movs	r5, #0
  405a28:	f7ff ba64 	b.w	404ef4 <_vfprintf_r+0x218>
  405a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405a2e:	6814      	ldr	r4, [r2, #0]
  405a30:	4613      	mov	r3, r2
  405a32:	3304      	adds	r3, #4
  405a34:	17e5      	asrs	r5, r4, #31
  405a36:	930e      	str	r3, [sp, #56]	; 0x38
  405a38:	4622      	mov	r2, r4
  405a3a:	462b      	mov	r3, r5
  405a3c:	e460      	b.n	405300 <_vfprintf_r+0x624>
  405a3e:	f8dd b018 	ldr.w	fp, [sp, #24]
  405a42:	f8cd b018 	str.w	fp, [sp, #24]
  405a46:	af40      	add	r7, sp, #256	; 0x100
  405a48:	3430      	adds	r4, #48	; 0x30
  405a4a:	2301      	movs	r3, #1
  405a4c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  405a50:	930d      	str	r3, [sp, #52]	; 0x34
  405a52:	f7ff ba6d 	b.w	404f30 <_vfprintf_r+0x254>
  405a56:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  405a5a:	f002 f895 	bl	407b88 <__retarget_lock_release_recursive>
  405a5e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  405a62:	e5af      	b.n	4055c4 <_vfprintf_r+0x8e8>
  405a64:	4614      	mov	r4, r2
  405a66:	3301      	adds	r3, #1
  405a68:	4434      	add	r4, r6
  405a6a:	2b07      	cmp	r3, #7
  405a6c:	9425      	str	r4, [sp, #148]	; 0x94
  405a6e:	9324      	str	r3, [sp, #144]	; 0x90
  405a70:	e888 0060 	stmia.w	r8, {r5, r6}
  405a74:	f340 816d 	ble.w	405d52 <_vfprintf_r+0x1076>
  405a78:	aa23      	add	r2, sp, #140	; 0x8c
  405a7a:	990a      	ldr	r1, [sp, #40]	; 0x28
  405a7c:	9808      	ldr	r0, [sp, #32]
  405a7e:	f002 fed7 	bl	408830 <__sprint_r>
  405a82:	2800      	cmp	r0, #0
  405a84:	f47f aeb4 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405a88:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405a8a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405a8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405a90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a92:	4293      	cmp	r3, r2
  405a94:	f280 8158 	bge.w	405d48 <_vfprintf_r+0x106c>
  405a98:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405a9a:	9814      	ldr	r0, [sp, #80]	; 0x50
  405a9c:	9915      	ldr	r1, [sp, #84]	; 0x54
  405a9e:	f8c8 1000 	str.w	r1, [r8]
  405aa2:	3201      	adds	r2, #1
  405aa4:	4404      	add	r4, r0
  405aa6:	2a07      	cmp	r2, #7
  405aa8:	9425      	str	r4, [sp, #148]	; 0x94
  405aaa:	f8c8 0004 	str.w	r0, [r8, #4]
  405aae:	9224      	str	r2, [sp, #144]	; 0x90
  405ab0:	f300 8152 	bgt.w	405d58 <_vfprintf_r+0x107c>
  405ab4:	f108 0808 	add.w	r8, r8, #8
  405ab8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405aba:	9910      	ldr	r1, [sp, #64]	; 0x40
  405abc:	1ad3      	subs	r3, r2, r3
  405abe:	1a56      	subs	r6, r2, r1
  405ac0:	429e      	cmp	r6, r3
  405ac2:	bfa8      	it	ge
  405ac4:	461e      	movge	r6, r3
  405ac6:	2e00      	cmp	r6, #0
  405ac8:	dd0e      	ble.n	405ae8 <_vfprintf_r+0xe0c>
  405aca:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405acc:	f8c8 6004 	str.w	r6, [r8, #4]
  405ad0:	3201      	adds	r2, #1
  405ad2:	440f      	add	r7, r1
  405ad4:	4434      	add	r4, r6
  405ad6:	2a07      	cmp	r2, #7
  405ad8:	f8c8 7000 	str.w	r7, [r8]
  405adc:	9425      	str	r4, [sp, #148]	; 0x94
  405ade:	9224      	str	r2, [sp, #144]	; 0x90
  405ae0:	f300 823c 	bgt.w	405f5c <_vfprintf_r+0x1280>
  405ae4:	f108 0808 	add.w	r8, r8, #8
  405ae8:	2e00      	cmp	r6, #0
  405aea:	bfac      	ite	ge
  405aec:	1b9e      	subge	r6, r3, r6
  405aee:	461e      	movlt	r6, r3
  405af0:	2e00      	cmp	r6, #0
  405af2:	f77f aaf8 	ble.w	4050e6 <_vfprintf_r+0x40a>
  405af6:	2e10      	cmp	r6, #16
  405af8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405afa:	4d3e      	ldr	r5, [pc, #248]	; (405bf4 <_vfprintf_r+0xf18>)
  405afc:	dd85      	ble.n	405a0a <_vfprintf_r+0xd2e>
  405afe:	2710      	movs	r7, #16
  405b00:	f8dd a020 	ldr.w	sl, [sp, #32]
  405b04:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405b08:	e005      	b.n	405b16 <_vfprintf_r+0xe3a>
  405b0a:	f108 0808 	add.w	r8, r8, #8
  405b0e:	3e10      	subs	r6, #16
  405b10:	2e10      	cmp	r6, #16
  405b12:	f77f af7a 	ble.w	405a0a <_vfprintf_r+0xd2e>
  405b16:	3301      	adds	r3, #1
  405b18:	3410      	adds	r4, #16
  405b1a:	2b07      	cmp	r3, #7
  405b1c:	9425      	str	r4, [sp, #148]	; 0x94
  405b1e:	9324      	str	r3, [sp, #144]	; 0x90
  405b20:	e888 00a0 	stmia.w	r8, {r5, r7}
  405b24:	ddf1      	ble.n	405b0a <_vfprintf_r+0xe2e>
  405b26:	aa23      	add	r2, sp, #140	; 0x8c
  405b28:	4659      	mov	r1, fp
  405b2a:	4650      	mov	r0, sl
  405b2c:	f002 fe80 	bl	408830 <__sprint_r>
  405b30:	2800      	cmp	r0, #0
  405b32:	f040 8176 	bne.w	405e22 <_vfprintf_r+0x1146>
  405b36:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405b38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405b3a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405b3e:	e7e6      	b.n	405b0e <_vfprintf_r+0xe32>
  405b40:	9b06      	ldr	r3, [sp, #24]
  405b42:	07d8      	lsls	r0, r3, #31
  405b44:	f53f adff 	bmi.w	405746 <_vfprintf_r+0xa6a>
  405b48:	3601      	adds	r6, #1
  405b4a:	3401      	adds	r4, #1
  405b4c:	2301      	movs	r3, #1
  405b4e:	2e07      	cmp	r6, #7
  405b50:	9425      	str	r4, [sp, #148]	; 0x94
  405b52:	9624      	str	r6, [sp, #144]	; 0x90
  405b54:	f8c8 7000 	str.w	r7, [r8]
  405b58:	f8c8 3004 	str.w	r3, [r8, #4]
  405b5c:	f77f ae27 	ble.w	4057ae <_vfprintf_r+0xad2>
  405b60:	aa23      	add	r2, sp, #140	; 0x8c
  405b62:	990a      	ldr	r1, [sp, #40]	; 0x28
  405b64:	9808      	ldr	r0, [sp, #32]
  405b66:	f002 fe63 	bl	408830 <__sprint_r>
  405b6a:	2800      	cmp	r0, #0
  405b6c:	f47f ae40 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405b70:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405b72:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405b74:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405b78:	e61b      	b.n	4057b2 <_vfprintf_r+0xad6>
  405b7a:	aa23      	add	r2, sp, #140	; 0x8c
  405b7c:	990a      	ldr	r1, [sp, #40]	; 0x28
  405b7e:	9808      	ldr	r0, [sp, #32]
  405b80:	f002 fe56 	bl	408830 <__sprint_r>
  405b84:	2800      	cmp	r0, #0
  405b86:	f47f ae33 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405b8a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405b8c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405b8e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405b92:	e5e6      	b.n	405762 <_vfprintf_r+0xa86>
  405b94:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405b96:	3507      	adds	r5, #7
  405b98:	f025 0507 	bic.w	r5, r5, #7
  405b9c:	e9d5 2300 	ldrd	r2, r3, [r5]
  405ba0:	f105 0108 	add.w	r1, r5, #8
  405ba4:	910e      	str	r1, [sp, #56]	; 0x38
  405ba6:	4614      	mov	r4, r2
  405ba8:	461d      	mov	r5, r3
  405baa:	f7ff bba9 	b.w	405300 <_vfprintf_r+0x624>
  405bae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405bb0:	3507      	adds	r5, #7
  405bb2:	f025 0307 	bic.w	r3, r5, #7
  405bb6:	f103 0208 	add.w	r2, r3, #8
  405bba:	920e      	str	r2, [sp, #56]	; 0x38
  405bbc:	e9d3 4500 	ldrd	r4, r5, [r3]
  405bc0:	f7ff bb4a 	b.w	405258 <_vfprintf_r+0x57c>
  405bc4:	3601      	adds	r6, #1
  405bc6:	443c      	add	r4, r7
  405bc8:	2e07      	cmp	r6, #7
  405bca:	9425      	str	r4, [sp, #148]	; 0x94
  405bcc:	9624      	str	r6, [sp, #144]	; 0x90
  405bce:	e888 00a0 	stmia.w	r8, {r5, r7}
  405bd2:	f77f adec 	ble.w	4057ae <_vfprintf_r+0xad2>
  405bd6:	e7c3      	b.n	405b60 <_vfprintf_r+0xe84>
  405bd8:	aa23      	add	r2, sp, #140	; 0x8c
  405bda:	990a      	ldr	r1, [sp, #40]	; 0x28
  405bdc:	9808      	ldr	r0, [sp, #32]
  405bde:	f002 fe27 	bl	408830 <__sprint_r>
  405be2:	2800      	cmp	r0, #0
  405be4:	f47f ae04 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405be8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405bea:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405bec:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405bf0:	e5c6      	b.n	405780 <_vfprintf_r+0xaa4>
  405bf2:	bf00      	nop
  405bf4:	004092ac 	.word	0x004092ac
  405bf8:	af30      	add	r7, sp, #192	; 0xc0
  405bfa:	f7ff b999 	b.w	404f30 <_vfprintf_r+0x254>
  405bfe:	aa23      	add	r2, sp, #140	; 0x8c
  405c00:	990a      	ldr	r1, [sp, #40]	; 0x28
  405c02:	9808      	ldr	r0, [sp, #32]
  405c04:	f002 fe14 	bl	408830 <__sprint_r>
  405c08:	2800      	cmp	r0, #0
  405c0a:	f47f adf1 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405c0e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405c10:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405c14:	f7ff ba11 	b.w	40503a <_vfprintf_r+0x35e>
  405c18:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  405c1c:	4264      	negs	r4, r4
  405c1e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405c22:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405c26:	2301      	movs	r3, #1
  405c28:	f7ff b968 	b.w	404efc <_vfprintf_r+0x220>
  405c2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  405c2e:	4622      	mov	r2, r4
  405c30:	4620      	mov	r0, r4
  405c32:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405c34:	4623      	mov	r3, r4
  405c36:	4621      	mov	r1, r4
  405c38:	f003 f8aa 	bl	408d90 <__aeabi_dcmpun>
  405c3c:	2800      	cmp	r0, #0
  405c3e:	f040 828c 	bne.w	40615a <_vfprintf_r+0x147e>
  405c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405c44:	3301      	adds	r3, #1
  405c46:	f026 0320 	bic.w	r3, r6, #32
  405c4a:	930d      	str	r3, [sp, #52]	; 0x34
  405c4c:	f000 8091 	beq.w	405d72 <_vfprintf_r+0x1096>
  405c50:	2b47      	cmp	r3, #71	; 0x47
  405c52:	d104      	bne.n	405c5e <_vfprintf_r+0xf82>
  405c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405c56:	2b00      	cmp	r3, #0
  405c58:	bf08      	it	eq
  405c5a:	2301      	moveq	r3, #1
  405c5c:	9309      	str	r3, [sp, #36]	; 0x24
  405c5e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405c62:	9306      	str	r3, [sp, #24]
  405c64:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405c66:	f1b3 0a00 	subs.w	sl, r3, #0
  405c6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405c6c:	9307      	str	r3, [sp, #28]
  405c6e:	bfbb      	ittet	lt
  405c70:	4653      	movlt	r3, sl
  405c72:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  405c76:	2300      	movge	r3, #0
  405c78:	232d      	movlt	r3, #45	; 0x2d
  405c7a:	2e66      	cmp	r6, #102	; 0x66
  405c7c:	930f      	str	r3, [sp, #60]	; 0x3c
  405c7e:	f000 817f 	beq.w	405f80 <_vfprintf_r+0x12a4>
  405c82:	2e46      	cmp	r6, #70	; 0x46
  405c84:	f000 81d4 	beq.w	406030 <_vfprintf_r+0x1354>
  405c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405c8a:	9a07      	ldr	r2, [sp, #28]
  405c8c:	2b45      	cmp	r3, #69	; 0x45
  405c8e:	bf0c      	ite	eq
  405c90:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  405c92:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  405c94:	a821      	add	r0, sp, #132	; 0x84
  405c96:	a91e      	add	r1, sp, #120	; 0x78
  405c98:	bf08      	it	eq
  405c9a:	1c5d      	addeq	r5, r3, #1
  405c9c:	9004      	str	r0, [sp, #16]
  405c9e:	9103      	str	r1, [sp, #12]
  405ca0:	a81d      	add	r0, sp, #116	; 0x74
  405ca2:	2102      	movs	r1, #2
  405ca4:	9002      	str	r0, [sp, #8]
  405ca6:	4653      	mov	r3, sl
  405ca8:	9501      	str	r5, [sp, #4]
  405caa:	9100      	str	r1, [sp, #0]
  405cac:	9808      	ldr	r0, [sp, #32]
  405cae:	f000 fc0b 	bl	4064c8 <_dtoa_r>
  405cb2:	2e67      	cmp	r6, #103	; 0x67
  405cb4:	4607      	mov	r7, r0
  405cb6:	f040 81af 	bne.w	406018 <_vfprintf_r+0x133c>
  405cba:	f01b 0f01 	tst.w	fp, #1
  405cbe:	f000 8213 	beq.w	4060e8 <_vfprintf_r+0x140c>
  405cc2:	197c      	adds	r4, r7, r5
  405cc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405cc6:	9807      	ldr	r0, [sp, #28]
  405cc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405cca:	4651      	mov	r1, sl
  405ccc:	f7fd fee4 	bl	403a98 <__aeabi_dcmpeq>
  405cd0:	2800      	cmp	r0, #0
  405cd2:	f040 8132 	bne.w	405f3a <_vfprintf_r+0x125e>
  405cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405cd8:	42a3      	cmp	r3, r4
  405cda:	d206      	bcs.n	405cea <_vfprintf_r+0x100e>
  405cdc:	2130      	movs	r1, #48	; 0x30
  405cde:	1c5a      	adds	r2, r3, #1
  405ce0:	9221      	str	r2, [sp, #132]	; 0x84
  405ce2:	7019      	strb	r1, [r3, #0]
  405ce4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405ce6:	429c      	cmp	r4, r3
  405ce8:	d8f9      	bhi.n	405cde <_vfprintf_r+0x1002>
  405cea:	1bdb      	subs	r3, r3, r7
  405cec:	9311      	str	r3, [sp, #68]	; 0x44
  405cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405cf0:	2b47      	cmp	r3, #71	; 0x47
  405cf2:	f000 80b9 	beq.w	405e68 <_vfprintf_r+0x118c>
  405cf6:	2e65      	cmp	r6, #101	; 0x65
  405cf8:	f340 8276 	ble.w	4061e8 <_vfprintf_r+0x150c>
  405cfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405cfe:	9310      	str	r3, [sp, #64]	; 0x40
  405d00:	2e66      	cmp	r6, #102	; 0x66
  405d02:	f000 8162 	beq.w	405fca <_vfprintf_r+0x12ee>
  405d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d08:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405d0a:	4619      	mov	r1, r3
  405d0c:	4291      	cmp	r1, r2
  405d0e:	f300 814f 	bgt.w	405fb0 <_vfprintf_r+0x12d4>
  405d12:	f01b 0f01 	tst.w	fp, #1
  405d16:	f040 8209 	bne.w	40612c <_vfprintf_r+0x1450>
  405d1a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405d1e:	9307      	str	r3, [sp, #28]
  405d20:	920d      	str	r2, [sp, #52]	; 0x34
  405d22:	2667      	movs	r6, #103	; 0x67
  405d24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405d26:	2b00      	cmp	r3, #0
  405d28:	f040 8096 	bne.w	405e58 <_vfprintf_r+0x117c>
  405d2c:	9309      	str	r3, [sp, #36]	; 0x24
  405d2e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405d32:	f7ff b905 	b.w	404f40 <_vfprintf_r+0x264>
  405d36:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  405d3a:	f001 ff25 	bl	407b88 <__retarget_lock_release_recursive>
  405d3e:	f04f 33ff 	mov.w	r3, #4294967295
  405d42:	930b      	str	r3, [sp, #44]	; 0x2c
  405d44:	f7ff ba30 	b.w	4051a8 <_vfprintf_r+0x4cc>
  405d48:	9a06      	ldr	r2, [sp, #24]
  405d4a:	07d5      	lsls	r5, r2, #31
  405d4c:	f57f aeb4 	bpl.w	405ab8 <_vfprintf_r+0xddc>
  405d50:	e6a2      	b.n	405a98 <_vfprintf_r+0xdbc>
  405d52:	f108 0808 	add.w	r8, r8, #8
  405d56:	e69a      	b.n	405a8e <_vfprintf_r+0xdb2>
  405d58:	aa23      	add	r2, sp, #140	; 0x8c
  405d5a:	990a      	ldr	r1, [sp, #40]	; 0x28
  405d5c:	9808      	ldr	r0, [sp, #32]
  405d5e:	f002 fd67 	bl	408830 <__sprint_r>
  405d62:	2800      	cmp	r0, #0
  405d64:	f47f ad44 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405d68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405d6a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405d6c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405d70:	e6a2      	b.n	405ab8 <_vfprintf_r+0xddc>
  405d72:	2306      	movs	r3, #6
  405d74:	9309      	str	r3, [sp, #36]	; 0x24
  405d76:	e772      	b.n	405c5e <_vfprintf_r+0xf82>
  405d78:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  405d7c:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405d80:	f7ff bbc7 	b.w	405512 <_vfprintf_r+0x836>
  405d84:	aa23      	add	r2, sp, #140	; 0x8c
  405d86:	990a      	ldr	r1, [sp, #40]	; 0x28
  405d88:	9808      	ldr	r0, [sp, #32]
  405d8a:	f002 fd51 	bl	408830 <__sprint_r>
  405d8e:	2800      	cmp	r0, #0
  405d90:	f47f ad2e 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405d94:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405d98:	e437      	b.n	40560a <_vfprintf_r+0x92e>
  405d9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405d9c:	4ab4      	ldr	r2, [pc, #720]	; (406070 <_vfprintf_r+0x1394>)
  405d9e:	f8c8 2000 	str.w	r2, [r8]
  405da2:	3301      	adds	r3, #1
  405da4:	3401      	adds	r4, #1
  405da6:	2201      	movs	r2, #1
  405da8:	2b07      	cmp	r3, #7
  405daa:	9425      	str	r4, [sp, #148]	; 0x94
  405dac:	9324      	str	r3, [sp, #144]	; 0x90
  405dae:	f8c8 2004 	str.w	r2, [r8, #4]
  405db2:	f300 8124 	bgt.w	405ffe <_vfprintf_r+0x1322>
  405db6:	f108 0808 	add.w	r8, r8, #8
  405dba:	b929      	cbnz	r1, 405dc8 <_vfprintf_r+0x10ec>
  405dbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405dbe:	b91b      	cbnz	r3, 405dc8 <_vfprintf_r+0x10ec>
  405dc0:	9b06      	ldr	r3, [sp, #24]
  405dc2:	07de      	lsls	r6, r3, #31
  405dc4:	f57f a98f 	bpl.w	4050e6 <_vfprintf_r+0x40a>
  405dc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405dca:	9814      	ldr	r0, [sp, #80]	; 0x50
  405dcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405dce:	f8c8 2000 	str.w	r2, [r8]
  405dd2:	3301      	adds	r3, #1
  405dd4:	4602      	mov	r2, r0
  405dd6:	4422      	add	r2, r4
  405dd8:	2b07      	cmp	r3, #7
  405dda:	9225      	str	r2, [sp, #148]	; 0x94
  405ddc:	f8c8 0004 	str.w	r0, [r8, #4]
  405de0:	9324      	str	r3, [sp, #144]	; 0x90
  405de2:	f300 8169 	bgt.w	4060b8 <_vfprintf_r+0x13dc>
  405de6:	f108 0808 	add.w	r8, r8, #8
  405dea:	2900      	cmp	r1, #0
  405dec:	f2c0 8136 	blt.w	40605c <_vfprintf_r+0x1380>
  405df0:	9911      	ldr	r1, [sp, #68]	; 0x44
  405df2:	f8c8 7000 	str.w	r7, [r8]
  405df6:	3301      	adds	r3, #1
  405df8:	188c      	adds	r4, r1, r2
  405dfa:	2b07      	cmp	r3, #7
  405dfc:	9425      	str	r4, [sp, #148]	; 0x94
  405dfe:	9324      	str	r3, [sp, #144]	; 0x90
  405e00:	f8c8 1004 	str.w	r1, [r8, #4]
  405e04:	f77f a96d 	ble.w	4050e2 <_vfprintf_r+0x406>
  405e08:	e4e0      	b.n	4057cc <_vfprintf_r+0xaf0>
  405e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e0e:	6813      	ldr	r3, [r2, #0]
  405e10:	17cd      	asrs	r5, r1, #31
  405e12:	4608      	mov	r0, r1
  405e14:	3204      	adds	r2, #4
  405e16:	4629      	mov	r1, r5
  405e18:	920e      	str	r2, [sp, #56]	; 0x38
  405e1a:	e9c3 0100 	strd	r0, r1, [r3]
  405e1e:	f7fe bfa9 	b.w	404d74 <_vfprintf_r+0x98>
  405e22:	46da      	mov	sl, fp
  405e24:	f7ff bbc4 	b.w	4055b0 <_vfprintf_r+0x8d4>
  405e28:	aa23      	add	r2, sp, #140	; 0x8c
  405e2a:	990a      	ldr	r1, [sp, #40]	; 0x28
  405e2c:	9808      	ldr	r0, [sp, #32]
  405e2e:	f002 fcff 	bl	408830 <__sprint_r>
  405e32:	2800      	cmp	r0, #0
  405e34:	f47f acdc 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405e38:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405e3a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405e3e:	f7ff bbfd 	b.w	40563c <_vfprintf_r+0x960>
  405e42:	4638      	mov	r0, r7
  405e44:	9409      	str	r4, [sp, #36]	; 0x24
  405e46:	f7fe fedb 	bl	404c00 <strlen>
  405e4a:	950e      	str	r5, [sp, #56]	; 0x38
  405e4c:	900d      	str	r0, [sp, #52]	; 0x34
  405e4e:	f8cd b018 	str.w	fp, [sp, #24]
  405e52:	4603      	mov	r3, r0
  405e54:	f7ff ba36 	b.w	4052c4 <_vfprintf_r+0x5e8>
  405e58:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  405e5c:	2300      	movs	r3, #0
  405e5e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405e62:	9309      	str	r3, [sp, #36]	; 0x24
  405e64:	f7ff b86f 	b.w	404f46 <_vfprintf_r+0x26a>
  405e68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405e6a:	9310      	str	r3, [sp, #64]	; 0x40
  405e6c:	461a      	mov	r2, r3
  405e6e:	3303      	adds	r3, #3
  405e70:	db04      	blt.n	405e7c <_vfprintf_r+0x11a0>
  405e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405e74:	4619      	mov	r1, r3
  405e76:	4291      	cmp	r1, r2
  405e78:	f6bf af45 	bge.w	405d06 <_vfprintf_r+0x102a>
  405e7c:	3e02      	subs	r6, #2
  405e7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405e80:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  405e84:	3b01      	subs	r3, #1
  405e86:	2b00      	cmp	r3, #0
  405e88:	931d      	str	r3, [sp, #116]	; 0x74
  405e8a:	bfbd      	ittte	lt
  405e8c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  405e8e:	f1c3 0301 	rsblt	r3, r3, #1
  405e92:	222d      	movlt	r2, #45	; 0x2d
  405e94:	222b      	movge	r2, #43	; 0x2b
  405e96:	2b09      	cmp	r3, #9
  405e98:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  405e9c:	f340 813e 	ble.w	40611c <_vfprintf_r+0x1440>
  405ea0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  405ea4:	4620      	mov	r0, r4
  405ea6:	4d73      	ldr	r5, [pc, #460]	; (406074 <_vfprintf_r+0x1398>)
  405ea8:	e000      	b.n	405eac <_vfprintf_r+0x11d0>
  405eaa:	4610      	mov	r0, r2
  405eac:	fb85 1203 	smull	r1, r2, r5, r3
  405eb0:	17d9      	asrs	r1, r3, #31
  405eb2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405eb6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405eba:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405ebe:	3230      	adds	r2, #48	; 0x30
  405ec0:	2909      	cmp	r1, #9
  405ec2:	f800 2c01 	strb.w	r2, [r0, #-1]
  405ec6:	460b      	mov	r3, r1
  405ec8:	f100 32ff 	add.w	r2, r0, #4294967295
  405ecc:	dced      	bgt.n	405eaa <_vfprintf_r+0x11ce>
  405ece:	3330      	adds	r3, #48	; 0x30
  405ed0:	3802      	subs	r0, #2
  405ed2:	b2d9      	uxtb	r1, r3
  405ed4:	4284      	cmp	r4, r0
  405ed6:	f802 1c01 	strb.w	r1, [r2, #-1]
  405eda:	f240 8190 	bls.w	4061fe <_vfprintf_r+0x1522>
  405ede:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  405ee2:	4613      	mov	r3, r2
  405ee4:	e001      	b.n	405eea <_vfprintf_r+0x120e>
  405ee6:	f813 1b01 	ldrb.w	r1, [r3], #1
  405eea:	f800 1b01 	strb.w	r1, [r0], #1
  405eee:	42a3      	cmp	r3, r4
  405ef0:	d1f9      	bne.n	405ee6 <_vfprintf_r+0x120a>
  405ef2:	3301      	adds	r3, #1
  405ef4:	1a9b      	subs	r3, r3, r2
  405ef6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  405efa:	4413      	add	r3, r2
  405efc:	aa1f      	add	r2, sp, #124	; 0x7c
  405efe:	1a9b      	subs	r3, r3, r2
  405f00:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405f02:	9319      	str	r3, [sp, #100]	; 0x64
  405f04:	2a01      	cmp	r2, #1
  405f06:	4413      	add	r3, r2
  405f08:	930d      	str	r3, [sp, #52]	; 0x34
  405f0a:	f340 8145 	ble.w	406198 <_vfprintf_r+0x14bc>
  405f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405f10:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405f12:	4413      	add	r3, r2
  405f14:	930d      	str	r3, [sp, #52]	; 0x34
  405f16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405f1a:	9307      	str	r3, [sp, #28]
  405f1c:	2300      	movs	r3, #0
  405f1e:	9310      	str	r3, [sp, #64]	; 0x40
  405f20:	e700      	b.n	405d24 <_vfprintf_r+0x1048>
  405f22:	aa23      	add	r2, sp, #140	; 0x8c
  405f24:	990a      	ldr	r1, [sp, #40]	; 0x28
  405f26:	9808      	ldr	r0, [sp, #32]
  405f28:	f002 fc82 	bl	408830 <__sprint_r>
  405f2c:	2800      	cmp	r0, #0
  405f2e:	f47f ac5f 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405f32:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405f34:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405f38:	e4d1      	b.n	4058de <_vfprintf_r+0xc02>
  405f3a:	4623      	mov	r3, r4
  405f3c:	e6d5      	b.n	405cea <_vfprintf_r+0x100e>
  405f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f40:	9710      	str	r7, [sp, #64]	; 0x40
  405f42:	2b06      	cmp	r3, #6
  405f44:	bf28      	it	cs
  405f46:	2306      	movcs	r3, #6
  405f48:	9709      	str	r7, [sp, #36]	; 0x24
  405f4a:	46ba      	mov	sl, r7
  405f4c:	9307      	str	r3, [sp, #28]
  405f4e:	950e      	str	r5, [sp, #56]	; 0x38
  405f50:	f8cd b018 	str.w	fp, [sp, #24]
  405f54:	930d      	str	r3, [sp, #52]	; 0x34
  405f56:	4f48      	ldr	r7, [pc, #288]	; (406078 <_vfprintf_r+0x139c>)
  405f58:	f7fe bff2 	b.w	404f40 <_vfprintf_r+0x264>
  405f5c:	aa23      	add	r2, sp, #140	; 0x8c
  405f5e:	990a      	ldr	r1, [sp, #40]	; 0x28
  405f60:	9808      	ldr	r0, [sp, #32]
  405f62:	f002 fc65 	bl	408830 <__sprint_r>
  405f66:	2800      	cmp	r0, #0
  405f68:	f47f ac42 	bne.w	4057f0 <_vfprintf_r+0xb14>
  405f6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405f6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405f70:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405f72:	1ad3      	subs	r3, r2, r3
  405f74:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405f78:	e5b6      	b.n	405ae8 <_vfprintf_r+0xe0c>
  405f7a:	46a2      	mov	sl, r4
  405f7c:	f7ff bb18 	b.w	4055b0 <_vfprintf_r+0x8d4>
  405f80:	a821      	add	r0, sp, #132	; 0x84
  405f82:	a91e      	add	r1, sp, #120	; 0x78
  405f84:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405f86:	9004      	str	r0, [sp, #16]
  405f88:	9103      	str	r1, [sp, #12]
  405f8a:	a81d      	add	r0, sp, #116	; 0x74
  405f8c:	2103      	movs	r1, #3
  405f8e:	9002      	str	r0, [sp, #8]
  405f90:	9a07      	ldr	r2, [sp, #28]
  405f92:	9501      	str	r5, [sp, #4]
  405f94:	4653      	mov	r3, sl
  405f96:	9100      	str	r1, [sp, #0]
  405f98:	9808      	ldr	r0, [sp, #32]
  405f9a:	f000 fa95 	bl	4064c8 <_dtoa_r>
  405f9e:	4607      	mov	r7, r0
  405fa0:	1944      	adds	r4, r0, r5
  405fa2:	783b      	ldrb	r3, [r7, #0]
  405fa4:	2b30      	cmp	r3, #48	; 0x30
  405fa6:	f000 80ca 	beq.w	40613e <_vfprintf_r+0x1462>
  405faa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  405fac:	442c      	add	r4, r5
  405fae:	e689      	b.n	405cc4 <_vfprintf_r+0xfe8>
  405fb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405fb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405fb4:	4413      	add	r3, r2
  405fb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405fb8:	930d      	str	r3, [sp, #52]	; 0x34
  405fba:	2a00      	cmp	r2, #0
  405fbc:	f340 80e4 	ble.w	406188 <_vfprintf_r+0x14ac>
  405fc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405fc4:	9307      	str	r3, [sp, #28]
  405fc6:	2667      	movs	r6, #103	; 0x67
  405fc8:	e6ac      	b.n	405d24 <_vfprintf_r+0x1048>
  405fca:	2b00      	cmp	r3, #0
  405fcc:	f340 80fb 	ble.w	4061c6 <_vfprintf_r+0x14ea>
  405fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405fd2:	2a00      	cmp	r2, #0
  405fd4:	f040 80ce 	bne.w	406174 <_vfprintf_r+0x1498>
  405fd8:	f01b 0f01 	tst.w	fp, #1
  405fdc:	f040 80ca 	bne.w	406174 <_vfprintf_r+0x1498>
  405fe0:	9307      	str	r3, [sp, #28]
  405fe2:	930d      	str	r3, [sp, #52]	; 0x34
  405fe4:	e69e      	b.n	405d24 <_vfprintf_r+0x1048>
  405fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405fe8:	9307      	str	r3, [sp, #28]
  405fea:	930d      	str	r3, [sp, #52]	; 0x34
  405fec:	9009      	str	r0, [sp, #36]	; 0x24
  405fee:	950e      	str	r5, [sp, #56]	; 0x38
  405ff0:	f8cd b018 	str.w	fp, [sp, #24]
  405ff4:	9010      	str	r0, [sp, #64]	; 0x40
  405ff6:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405ffa:	f7fe bfa1 	b.w	404f40 <_vfprintf_r+0x264>
  405ffe:	aa23      	add	r2, sp, #140	; 0x8c
  406000:	990a      	ldr	r1, [sp, #40]	; 0x28
  406002:	9808      	ldr	r0, [sp, #32]
  406004:	f002 fc14 	bl	408830 <__sprint_r>
  406008:	2800      	cmp	r0, #0
  40600a:	f47f abf1 	bne.w	4057f0 <_vfprintf_r+0xb14>
  40600e:	991d      	ldr	r1, [sp, #116]	; 0x74
  406010:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406012:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406016:	e6d0      	b.n	405dba <_vfprintf_r+0x10de>
  406018:	2e47      	cmp	r6, #71	; 0x47
  40601a:	f47f ae52 	bne.w	405cc2 <_vfprintf_r+0xfe6>
  40601e:	f01b 0f01 	tst.w	fp, #1
  406022:	f000 80da 	beq.w	4061da <_vfprintf_r+0x14fe>
  406026:	2e46      	cmp	r6, #70	; 0x46
  406028:	eb07 0405 	add.w	r4, r7, r5
  40602c:	d0b9      	beq.n	405fa2 <_vfprintf_r+0x12c6>
  40602e:	e649      	b.n	405cc4 <_vfprintf_r+0xfe8>
  406030:	a821      	add	r0, sp, #132	; 0x84
  406032:	a91e      	add	r1, sp, #120	; 0x78
  406034:	9c09      	ldr	r4, [sp, #36]	; 0x24
  406036:	9004      	str	r0, [sp, #16]
  406038:	9103      	str	r1, [sp, #12]
  40603a:	a81d      	add	r0, sp, #116	; 0x74
  40603c:	2103      	movs	r1, #3
  40603e:	9002      	str	r0, [sp, #8]
  406040:	9a07      	ldr	r2, [sp, #28]
  406042:	9401      	str	r4, [sp, #4]
  406044:	4653      	mov	r3, sl
  406046:	9100      	str	r1, [sp, #0]
  406048:	9808      	ldr	r0, [sp, #32]
  40604a:	f000 fa3d 	bl	4064c8 <_dtoa_r>
  40604e:	4625      	mov	r5, r4
  406050:	4607      	mov	r7, r0
  406052:	e7e8      	b.n	406026 <_vfprintf_r+0x134a>
  406054:	2300      	movs	r3, #0
  406056:	9309      	str	r3, [sp, #36]	; 0x24
  406058:	f7fe bec1 	b.w	404dde <_vfprintf_r+0x102>
  40605c:	424e      	negs	r6, r1
  40605e:	3110      	adds	r1, #16
  406060:	4d06      	ldr	r5, [pc, #24]	; (40607c <_vfprintf_r+0x13a0>)
  406062:	da43      	bge.n	4060ec <_vfprintf_r+0x1410>
  406064:	2410      	movs	r4, #16
  406066:	f8dd a020 	ldr.w	sl, [sp, #32]
  40606a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40606e:	e00c      	b.n	40608a <_vfprintf_r+0x13ae>
  406070:	00409298 	.word	0x00409298
  406074:	66666667 	.word	0x66666667
  406078:	00409290 	.word	0x00409290
  40607c:	004092ac 	.word	0x004092ac
  406080:	f108 0808 	add.w	r8, r8, #8
  406084:	3e10      	subs	r6, #16
  406086:	2e10      	cmp	r6, #16
  406088:	dd30      	ble.n	4060ec <_vfprintf_r+0x1410>
  40608a:	3301      	adds	r3, #1
  40608c:	3210      	adds	r2, #16
  40608e:	2b07      	cmp	r3, #7
  406090:	9225      	str	r2, [sp, #148]	; 0x94
  406092:	9324      	str	r3, [sp, #144]	; 0x90
  406094:	f8c8 5000 	str.w	r5, [r8]
  406098:	f8c8 4004 	str.w	r4, [r8, #4]
  40609c:	ddf0      	ble.n	406080 <_vfprintf_r+0x13a4>
  40609e:	aa23      	add	r2, sp, #140	; 0x8c
  4060a0:	4659      	mov	r1, fp
  4060a2:	4650      	mov	r0, sl
  4060a4:	f002 fbc4 	bl	408830 <__sprint_r>
  4060a8:	2800      	cmp	r0, #0
  4060aa:	f47f aeba 	bne.w	405e22 <_vfprintf_r+0x1146>
  4060ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4060b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4060b2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4060b6:	e7e5      	b.n	406084 <_vfprintf_r+0x13a8>
  4060b8:	aa23      	add	r2, sp, #140	; 0x8c
  4060ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  4060bc:	9808      	ldr	r0, [sp, #32]
  4060be:	f002 fbb7 	bl	408830 <__sprint_r>
  4060c2:	2800      	cmp	r0, #0
  4060c4:	f47f ab94 	bne.w	4057f0 <_vfprintf_r+0xb14>
  4060c8:	991d      	ldr	r1, [sp, #116]	; 0x74
  4060ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4060cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4060ce:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4060d2:	e68a      	b.n	405dea <_vfprintf_r+0x110e>
  4060d4:	9808      	ldr	r0, [sp, #32]
  4060d6:	aa23      	add	r2, sp, #140	; 0x8c
  4060d8:	4651      	mov	r1, sl
  4060da:	f002 fba9 	bl	408830 <__sprint_r>
  4060de:	2800      	cmp	r0, #0
  4060e0:	f43f aa64 	beq.w	4055ac <_vfprintf_r+0x8d0>
  4060e4:	f7ff ba64 	b.w	4055b0 <_vfprintf_r+0x8d4>
  4060e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4060ea:	e5fe      	b.n	405cea <_vfprintf_r+0x100e>
  4060ec:	3301      	adds	r3, #1
  4060ee:	4432      	add	r2, r6
  4060f0:	2b07      	cmp	r3, #7
  4060f2:	e888 0060 	stmia.w	r8, {r5, r6}
  4060f6:	9225      	str	r2, [sp, #148]	; 0x94
  4060f8:	9324      	str	r3, [sp, #144]	; 0x90
  4060fa:	f108 0808 	add.w	r8, r8, #8
  4060fe:	f77f ae77 	ble.w	405df0 <_vfprintf_r+0x1114>
  406102:	aa23      	add	r2, sp, #140	; 0x8c
  406104:	990a      	ldr	r1, [sp, #40]	; 0x28
  406106:	9808      	ldr	r0, [sp, #32]
  406108:	f002 fb92 	bl	408830 <__sprint_r>
  40610c:	2800      	cmp	r0, #0
  40610e:	f47f ab6f 	bne.w	4057f0 <_vfprintf_r+0xb14>
  406112:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406114:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406116:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40611a:	e669      	b.n	405df0 <_vfprintf_r+0x1114>
  40611c:	3330      	adds	r3, #48	; 0x30
  40611e:	2230      	movs	r2, #48	; 0x30
  406120:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  406124:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  406128:	ab20      	add	r3, sp, #128	; 0x80
  40612a:	e6e7      	b.n	405efc <_vfprintf_r+0x1220>
  40612c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40612e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406130:	4413      	add	r3, r2
  406132:	930d      	str	r3, [sp, #52]	; 0x34
  406134:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406138:	9307      	str	r3, [sp, #28]
  40613a:	2667      	movs	r6, #103	; 0x67
  40613c:	e5f2      	b.n	405d24 <_vfprintf_r+0x1048>
  40613e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406140:	9807      	ldr	r0, [sp, #28]
  406142:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406144:	4651      	mov	r1, sl
  406146:	f7fd fca7 	bl	403a98 <__aeabi_dcmpeq>
  40614a:	2800      	cmp	r0, #0
  40614c:	f47f af2d 	bne.w	405faa <_vfprintf_r+0x12ce>
  406150:	f1c5 0501 	rsb	r5, r5, #1
  406154:	951d      	str	r5, [sp, #116]	; 0x74
  406156:	442c      	add	r4, r5
  406158:	e5b4      	b.n	405cc4 <_vfprintf_r+0xfe8>
  40615a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40615c:	4f33      	ldr	r7, [pc, #204]	; (40622c <_vfprintf_r+0x1550>)
  40615e:	2b00      	cmp	r3, #0
  406160:	bfb6      	itet	lt
  406162:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  406166:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  40616a:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  40616e:	4b30      	ldr	r3, [pc, #192]	; (406230 <_vfprintf_r+0x1554>)
  406170:	f7ff b9d1 	b.w	405516 <_vfprintf_r+0x83a>
  406174:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406176:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406178:	4413      	add	r3, r2
  40617a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40617c:	441a      	add	r2, r3
  40617e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406182:	920d      	str	r2, [sp, #52]	; 0x34
  406184:	9307      	str	r3, [sp, #28]
  406186:	e5cd      	b.n	405d24 <_vfprintf_r+0x1048>
  406188:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40618a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40618c:	f1c3 0301 	rsb	r3, r3, #1
  406190:	441a      	add	r2, r3
  406192:	4613      	mov	r3, r2
  406194:	920d      	str	r2, [sp, #52]	; 0x34
  406196:	e713      	b.n	405fc0 <_vfprintf_r+0x12e4>
  406198:	f01b 0301 	ands.w	r3, fp, #1
  40619c:	9310      	str	r3, [sp, #64]	; 0x40
  40619e:	f47f aeb6 	bne.w	405f0e <_vfprintf_r+0x1232>
  4061a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4061a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4061a8:	9307      	str	r3, [sp, #28]
  4061aa:	e5bb      	b.n	405d24 <_vfprintf_r+0x1048>
  4061ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4061ae:	f899 6001 	ldrb.w	r6, [r9, #1]
  4061b2:	6823      	ldr	r3, [r4, #0]
  4061b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  4061b8:	9309      	str	r3, [sp, #36]	; 0x24
  4061ba:	4623      	mov	r3, r4
  4061bc:	3304      	adds	r3, #4
  4061be:	4681      	mov	r9, r0
  4061c0:	930e      	str	r3, [sp, #56]	; 0x38
  4061c2:	f7fe be0a 	b.w	404dda <_vfprintf_r+0xfe>
  4061c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4061c8:	b913      	cbnz	r3, 4061d0 <_vfprintf_r+0x14f4>
  4061ca:	f01b 0f01 	tst.w	fp, #1
  4061ce:	d002      	beq.n	4061d6 <_vfprintf_r+0x14fa>
  4061d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4061d2:	3301      	adds	r3, #1
  4061d4:	e7d1      	b.n	40617a <_vfprintf_r+0x149e>
  4061d6:	2301      	movs	r3, #1
  4061d8:	e702      	b.n	405fe0 <_vfprintf_r+0x1304>
  4061da:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4061dc:	1bdb      	subs	r3, r3, r7
  4061de:	9311      	str	r3, [sp, #68]	; 0x44
  4061e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4061e2:	2b47      	cmp	r3, #71	; 0x47
  4061e4:	f43f ae40 	beq.w	405e68 <_vfprintf_r+0x118c>
  4061e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4061ea:	9310      	str	r3, [sp, #64]	; 0x40
  4061ec:	e647      	b.n	405e7e <_vfprintf_r+0x11a2>
  4061ee:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4061f2:	f7ff b81d 	b.w	405230 <_vfprintf_r+0x554>
  4061f6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4061fa:	f7ff b918 	b.w	40542e <_vfprintf_r+0x752>
  4061fe:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  406202:	e67b      	b.n	405efc <_vfprintf_r+0x1220>
  406204:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406208:	f7ff b866 	b.w	4052d8 <_vfprintf_r+0x5fc>
  40620c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406210:	f7ff b9ac 	b.w	40556c <_vfprintf_r+0x890>
  406214:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406218:	f7ff b934 	b.w	405484 <_vfprintf_r+0x7a8>
  40621c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406220:	f7ff b8b0 	b.w	405384 <_vfprintf_r+0x6a8>
  406224:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406228:	f7ff b945 	b.w	4054b6 <_vfprintf_r+0x7da>
  40622c:	00409264 	.word	0x00409264
  406230:	00409260 	.word	0x00409260

00406234 <__sbprintf>:
  406234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406238:	460c      	mov	r4, r1
  40623a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40623e:	8989      	ldrh	r1, [r1, #12]
  406240:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406242:	89e5      	ldrh	r5, [r4, #14]
  406244:	9619      	str	r6, [sp, #100]	; 0x64
  406246:	f021 0102 	bic.w	r1, r1, #2
  40624a:	4606      	mov	r6, r0
  40624c:	69e0      	ldr	r0, [r4, #28]
  40624e:	f8ad 100c 	strh.w	r1, [sp, #12]
  406252:	4617      	mov	r7, r2
  406254:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406258:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40625a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40625e:	4698      	mov	r8, r3
  406260:	ad1a      	add	r5, sp, #104	; 0x68
  406262:	2300      	movs	r3, #0
  406264:	9007      	str	r0, [sp, #28]
  406266:	a816      	add	r0, sp, #88	; 0x58
  406268:	9209      	str	r2, [sp, #36]	; 0x24
  40626a:	9306      	str	r3, [sp, #24]
  40626c:	9500      	str	r5, [sp, #0]
  40626e:	9504      	str	r5, [sp, #16]
  406270:	9102      	str	r1, [sp, #8]
  406272:	9105      	str	r1, [sp, #20]
  406274:	f001 fc82 	bl	407b7c <__retarget_lock_init_recursive>
  406278:	4643      	mov	r3, r8
  40627a:	463a      	mov	r2, r7
  40627c:	4669      	mov	r1, sp
  40627e:	4630      	mov	r0, r6
  406280:	f7fe fd2c 	bl	404cdc <_vfprintf_r>
  406284:	1e05      	subs	r5, r0, #0
  406286:	db07      	blt.n	406298 <__sbprintf+0x64>
  406288:	4630      	mov	r0, r6
  40628a:	4669      	mov	r1, sp
  40628c:	f001 f8e6 	bl	40745c <_fflush_r>
  406290:	2800      	cmp	r0, #0
  406292:	bf18      	it	ne
  406294:	f04f 35ff 	movne.w	r5, #4294967295
  406298:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40629c:	065b      	lsls	r3, r3, #25
  40629e:	d503      	bpl.n	4062a8 <__sbprintf+0x74>
  4062a0:	89a3      	ldrh	r3, [r4, #12]
  4062a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4062a6:	81a3      	strh	r3, [r4, #12]
  4062a8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4062aa:	f001 fc69 	bl	407b80 <__retarget_lock_close_recursive>
  4062ae:	4628      	mov	r0, r5
  4062b0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4062b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004062b8 <__swsetup_r>:
  4062b8:	b538      	push	{r3, r4, r5, lr}
  4062ba:	4b30      	ldr	r3, [pc, #192]	; (40637c <__swsetup_r+0xc4>)
  4062bc:	681b      	ldr	r3, [r3, #0]
  4062be:	4605      	mov	r5, r0
  4062c0:	460c      	mov	r4, r1
  4062c2:	b113      	cbz	r3, 4062ca <__swsetup_r+0x12>
  4062c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4062c6:	2a00      	cmp	r2, #0
  4062c8:	d038      	beq.n	40633c <__swsetup_r+0x84>
  4062ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4062ce:	b293      	uxth	r3, r2
  4062d0:	0718      	lsls	r0, r3, #28
  4062d2:	d50c      	bpl.n	4062ee <__swsetup_r+0x36>
  4062d4:	6920      	ldr	r0, [r4, #16]
  4062d6:	b1a8      	cbz	r0, 406304 <__swsetup_r+0x4c>
  4062d8:	f013 0201 	ands.w	r2, r3, #1
  4062dc:	d01e      	beq.n	40631c <__swsetup_r+0x64>
  4062de:	6963      	ldr	r3, [r4, #20]
  4062e0:	2200      	movs	r2, #0
  4062e2:	425b      	negs	r3, r3
  4062e4:	61a3      	str	r3, [r4, #24]
  4062e6:	60a2      	str	r2, [r4, #8]
  4062e8:	b1f0      	cbz	r0, 406328 <__swsetup_r+0x70>
  4062ea:	2000      	movs	r0, #0
  4062ec:	bd38      	pop	{r3, r4, r5, pc}
  4062ee:	06d9      	lsls	r1, r3, #27
  4062f0:	d53c      	bpl.n	40636c <__swsetup_r+0xb4>
  4062f2:	0758      	lsls	r0, r3, #29
  4062f4:	d426      	bmi.n	406344 <__swsetup_r+0x8c>
  4062f6:	6920      	ldr	r0, [r4, #16]
  4062f8:	f042 0308 	orr.w	r3, r2, #8
  4062fc:	81a3      	strh	r3, [r4, #12]
  4062fe:	b29b      	uxth	r3, r3
  406300:	2800      	cmp	r0, #0
  406302:	d1e9      	bne.n	4062d8 <__swsetup_r+0x20>
  406304:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406308:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40630c:	d0e4      	beq.n	4062d8 <__swsetup_r+0x20>
  40630e:	4628      	mov	r0, r5
  406310:	4621      	mov	r1, r4
  406312:	f001 fc69 	bl	407be8 <__smakebuf_r>
  406316:	89a3      	ldrh	r3, [r4, #12]
  406318:	6920      	ldr	r0, [r4, #16]
  40631a:	e7dd      	b.n	4062d8 <__swsetup_r+0x20>
  40631c:	0799      	lsls	r1, r3, #30
  40631e:	bf58      	it	pl
  406320:	6962      	ldrpl	r2, [r4, #20]
  406322:	60a2      	str	r2, [r4, #8]
  406324:	2800      	cmp	r0, #0
  406326:	d1e0      	bne.n	4062ea <__swsetup_r+0x32>
  406328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40632c:	061a      	lsls	r2, r3, #24
  40632e:	d5dd      	bpl.n	4062ec <__swsetup_r+0x34>
  406330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406334:	81a3      	strh	r3, [r4, #12]
  406336:	f04f 30ff 	mov.w	r0, #4294967295
  40633a:	bd38      	pop	{r3, r4, r5, pc}
  40633c:	4618      	mov	r0, r3
  40633e:	f001 f8e5 	bl	40750c <__sinit>
  406342:	e7c2      	b.n	4062ca <__swsetup_r+0x12>
  406344:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406346:	b151      	cbz	r1, 40635e <__swsetup_r+0xa6>
  406348:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40634c:	4299      	cmp	r1, r3
  40634e:	d004      	beq.n	40635a <__swsetup_r+0xa2>
  406350:	4628      	mov	r0, r5
  406352:	f001 f97d 	bl	407650 <_free_r>
  406356:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40635a:	2300      	movs	r3, #0
  40635c:	6323      	str	r3, [r4, #48]	; 0x30
  40635e:	2300      	movs	r3, #0
  406360:	6920      	ldr	r0, [r4, #16]
  406362:	6063      	str	r3, [r4, #4]
  406364:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406368:	6020      	str	r0, [r4, #0]
  40636a:	e7c5      	b.n	4062f8 <__swsetup_r+0x40>
  40636c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406370:	2309      	movs	r3, #9
  406372:	602b      	str	r3, [r5, #0]
  406374:	f04f 30ff 	mov.w	r0, #4294967295
  406378:	81a2      	strh	r2, [r4, #12]
  40637a:	bd38      	pop	{r3, r4, r5, pc}
  40637c:	20400010 	.word	0x20400010

00406380 <register_fini>:
  406380:	4b02      	ldr	r3, [pc, #8]	; (40638c <register_fini+0xc>)
  406382:	b113      	cbz	r3, 40638a <register_fini+0xa>
  406384:	4802      	ldr	r0, [pc, #8]	; (406390 <register_fini+0x10>)
  406386:	f000 b805 	b.w	406394 <atexit>
  40638a:	4770      	bx	lr
  40638c:	00000000 	.word	0x00000000
  406390:	0040757d 	.word	0x0040757d

00406394 <atexit>:
  406394:	2300      	movs	r3, #0
  406396:	4601      	mov	r1, r0
  406398:	461a      	mov	r2, r3
  40639a:	4618      	mov	r0, r3
  40639c:	f002 ba68 	b.w	408870 <__register_exitproc>

004063a0 <quorem>:
  4063a0:	6902      	ldr	r2, [r0, #16]
  4063a2:	690b      	ldr	r3, [r1, #16]
  4063a4:	4293      	cmp	r3, r2
  4063a6:	f300 808d 	bgt.w	4064c4 <quorem+0x124>
  4063aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063ae:	f103 38ff 	add.w	r8, r3, #4294967295
  4063b2:	f101 0714 	add.w	r7, r1, #20
  4063b6:	f100 0b14 	add.w	fp, r0, #20
  4063ba:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4063be:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4063c2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4063c6:	b083      	sub	sp, #12
  4063c8:	3201      	adds	r2, #1
  4063ca:	fbb3 f9f2 	udiv	r9, r3, r2
  4063ce:	eb0b 0304 	add.w	r3, fp, r4
  4063d2:	9400      	str	r4, [sp, #0]
  4063d4:	eb07 0a04 	add.w	sl, r7, r4
  4063d8:	9301      	str	r3, [sp, #4]
  4063da:	f1b9 0f00 	cmp.w	r9, #0
  4063de:	d039      	beq.n	406454 <quorem+0xb4>
  4063e0:	2500      	movs	r5, #0
  4063e2:	462e      	mov	r6, r5
  4063e4:	46bc      	mov	ip, r7
  4063e6:	46de      	mov	lr, fp
  4063e8:	f85c 4b04 	ldr.w	r4, [ip], #4
  4063ec:	f8de 3000 	ldr.w	r3, [lr]
  4063f0:	b2a2      	uxth	r2, r4
  4063f2:	fb09 5502 	mla	r5, r9, r2, r5
  4063f6:	0c22      	lsrs	r2, r4, #16
  4063f8:	0c2c      	lsrs	r4, r5, #16
  4063fa:	fb09 4202 	mla	r2, r9, r2, r4
  4063fe:	b2ad      	uxth	r5, r5
  406400:	1b75      	subs	r5, r6, r5
  406402:	b296      	uxth	r6, r2
  406404:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  406408:	fa15 f383 	uxtah	r3, r5, r3
  40640c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  406410:	b29b      	uxth	r3, r3
  406412:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  406416:	45e2      	cmp	sl, ip
  406418:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40641c:	f84e 3b04 	str.w	r3, [lr], #4
  406420:	ea4f 4626 	mov.w	r6, r6, asr #16
  406424:	d2e0      	bcs.n	4063e8 <quorem+0x48>
  406426:	9b00      	ldr	r3, [sp, #0]
  406428:	f85b 3003 	ldr.w	r3, [fp, r3]
  40642c:	b993      	cbnz	r3, 406454 <quorem+0xb4>
  40642e:	9c01      	ldr	r4, [sp, #4]
  406430:	1f23      	subs	r3, r4, #4
  406432:	459b      	cmp	fp, r3
  406434:	d20c      	bcs.n	406450 <quorem+0xb0>
  406436:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40643a:	b94b      	cbnz	r3, 406450 <quorem+0xb0>
  40643c:	f1a4 0308 	sub.w	r3, r4, #8
  406440:	e002      	b.n	406448 <quorem+0xa8>
  406442:	681a      	ldr	r2, [r3, #0]
  406444:	3b04      	subs	r3, #4
  406446:	b91a      	cbnz	r2, 406450 <quorem+0xb0>
  406448:	459b      	cmp	fp, r3
  40644a:	f108 38ff 	add.w	r8, r8, #4294967295
  40644e:	d3f8      	bcc.n	406442 <quorem+0xa2>
  406450:	f8c0 8010 	str.w	r8, [r0, #16]
  406454:	4604      	mov	r4, r0
  406456:	f001 fec5 	bl	4081e4 <__mcmp>
  40645a:	2800      	cmp	r0, #0
  40645c:	db2e      	blt.n	4064bc <quorem+0x11c>
  40645e:	f109 0901 	add.w	r9, r9, #1
  406462:	465d      	mov	r5, fp
  406464:	2300      	movs	r3, #0
  406466:	f857 1b04 	ldr.w	r1, [r7], #4
  40646a:	6828      	ldr	r0, [r5, #0]
  40646c:	b28a      	uxth	r2, r1
  40646e:	1a9a      	subs	r2, r3, r2
  406470:	0c0b      	lsrs	r3, r1, #16
  406472:	fa12 f280 	uxtah	r2, r2, r0
  406476:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40647a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40647e:	b292      	uxth	r2, r2
  406480:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406484:	45ba      	cmp	sl, r7
  406486:	f845 2b04 	str.w	r2, [r5], #4
  40648a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40648e:	d2ea      	bcs.n	406466 <quorem+0xc6>
  406490:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  406494:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  406498:	b982      	cbnz	r2, 4064bc <quorem+0x11c>
  40649a:	1f1a      	subs	r2, r3, #4
  40649c:	4593      	cmp	fp, r2
  40649e:	d20b      	bcs.n	4064b8 <quorem+0x118>
  4064a0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4064a4:	b942      	cbnz	r2, 4064b8 <quorem+0x118>
  4064a6:	3b08      	subs	r3, #8
  4064a8:	e002      	b.n	4064b0 <quorem+0x110>
  4064aa:	681a      	ldr	r2, [r3, #0]
  4064ac:	3b04      	subs	r3, #4
  4064ae:	b91a      	cbnz	r2, 4064b8 <quorem+0x118>
  4064b0:	459b      	cmp	fp, r3
  4064b2:	f108 38ff 	add.w	r8, r8, #4294967295
  4064b6:	d3f8      	bcc.n	4064aa <quorem+0x10a>
  4064b8:	f8c4 8010 	str.w	r8, [r4, #16]
  4064bc:	4648      	mov	r0, r9
  4064be:	b003      	add	sp, #12
  4064c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064c4:	2000      	movs	r0, #0
  4064c6:	4770      	bx	lr

004064c8 <_dtoa_r>:
  4064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4064cc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4064ce:	b09b      	sub	sp, #108	; 0x6c
  4064d0:	4604      	mov	r4, r0
  4064d2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4064d4:	4692      	mov	sl, r2
  4064d6:	469b      	mov	fp, r3
  4064d8:	b141      	cbz	r1, 4064ec <_dtoa_r+0x24>
  4064da:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4064dc:	604a      	str	r2, [r1, #4]
  4064de:	2301      	movs	r3, #1
  4064e0:	4093      	lsls	r3, r2
  4064e2:	608b      	str	r3, [r1, #8]
  4064e4:	f001 fca6 	bl	407e34 <_Bfree>
  4064e8:	2300      	movs	r3, #0
  4064ea:	6423      	str	r3, [r4, #64]	; 0x40
  4064ec:	f1bb 0f00 	cmp.w	fp, #0
  4064f0:	465d      	mov	r5, fp
  4064f2:	db35      	blt.n	406560 <_dtoa_r+0x98>
  4064f4:	2300      	movs	r3, #0
  4064f6:	6033      	str	r3, [r6, #0]
  4064f8:	4b9d      	ldr	r3, [pc, #628]	; (406770 <_dtoa_r+0x2a8>)
  4064fa:	43ab      	bics	r3, r5
  4064fc:	d015      	beq.n	40652a <_dtoa_r+0x62>
  4064fe:	4650      	mov	r0, sl
  406500:	4659      	mov	r1, fp
  406502:	2200      	movs	r2, #0
  406504:	2300      	movs	r3, #0
  406506:	f7fd fac7 	bl	403a98 <__aeabi_dcmpeq>
  40650a:	4680      	mov	r8, r0
  40650c:	2800      	cmp	r0, #0
  40650e:	d02d      	beq.n	40656c <_dtoa_r+0xa4>
  406510:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406512:	2301      	movs	r3, #1
  406514:	6013      	str	r3, [r2, #0]
  406516:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406518:	2b00      	cmp	r3, #0
  40651a:	f000 80bd 	beq.w	406698 <_dtoa_r+0x1d0>
  40651e:	4895      	ldr	r0, [pc, #596]	; (406774 <_dtoa_r+0x2ac>)
  406520:	6018      	str	r0, [r3, #0]
  406522:	3801      	subs	r0, #1
  406524:	b01b      	add	sp, #108	; 0x6c
  406526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40652a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40652c:	f242 730f 	movw	r3, #9999	; 0x270f
  406530:	6013      	str	r3, [r2, #0]
  406532:	f1ba 0f00 	cmp.w	sl, #0
  406536:	d10d      	bne.n	406554 <_dtoa_r+0x8c>
  406538:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40653c:	b955      	cbnz	r5, 406554 <_dtoa_r+0x8c>
  40653e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406540:	488d      	ldr	r0, [pc, #564]	; (406778 <_dtoa_r+0x2b0>)
  406542:	2b00      	cmp	r3, #0
  406544:	d0ee      	beq.n	406524 <_dtoa_r+0x5c>
  406546:	f100 0308 	add.w	r3, r0, #8
  40654a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40654c:	6013      	str	r3, [r2, #0]
  40654e:	b01b      	add	sp, #108	; 0x6c
  406550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406554:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406556:	4889      	ldr	r0, [pc, #548]	; (40677c <_dtoa_r+0x2b4>)
  406558:	2b00      	cmp	r3, #0
  40655a:	d0e3      	beq.n	406524 <_dtoa_r+0x5c>
  40655c:	1cc3      	adds	r3, r0, #3
  40655e:	e7f4      	b.n	40654a <_dtoa_r+0x82>
  406560:	2301      	movs	r3, #1
  406562:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  406566:	6033      	str	r3, [r6, #0]
  406568:	46ab      	mov	fp, r5
  40656a:	e7c5      	b.n	4064f8 <_dtoa_r+0x30>
  40656c:	aa18      	add	r2, sp, #96	; 0x60
  40656e:	ab19      	add	r3, sp, #100	; 0x64
  406570:	9201      	str	r2, [sp, #4]
  406572:	9300      	str	r3, [sp, #0]
  406574:	4652      	mov	r2, sl
  406576:	465b      	mov	r3, fp
  406578:	4620      	mov	r0, r4
  40657a:	f001 fed3 	bl	408324 <__d2b>
  40657e:	0d2b      	lsrs	r3, r5, #20
  406580:	4681      	mov	r9, r0
  406582:	d071      	beq.n	406668 <_dtoa_r+0x1a0>
  406584:	f3cb 0213 	ubfx	r2, fp, #0, #20
  406588:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40658c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40658e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  406592:	4650      	mov	r0, sl
  406594:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  406598:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40659c:	2200      	movs	r2, #0
  40659e:	4b78      	ldr	r3, [pc, #480]	; (406780 <_dtoa_r+0x2b8>)
  4065a0:	f7fc fe5e 	bl	403260 <__aeabi_dsub>
  4065a4:	a36c      	add	r3, pc, #432	; (adr r3, 406758 <_dtoa_r+0x290>)
  4065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4065aa:	f7fd f80d 	bl	4035c8 <__aeabi_dmul>
  4065ae:	a36c      	add	r3, pc, #432	; (adr r3, 406760 <_dtoa_r+0x298>)
  4065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4065b4:	f7fc fe56 	bl	403264 <__adddf3>
  4065b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4065bc:	4630      	mov	r0, r6
  4065be:	f7fc ff9d 	bl	4034fc <__aeabi_i2d>
  4065c2:	a369      	add	r3, pc, #420	; (adr r3, 406768 <_dtoa_r+0x2a0>)
  4065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4065c8:	f7fc fffe 	bl	4035c8 <__aeabi_dmul>
  4065cc:	4602      	mov	r2, r0
  4065ce:	460b      	mov	r3, r1
  4065d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4065d4:	f7fc fe46 	bl	403264 <__adddf3>
  4065d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4065dc:	f002 fbee 	bl	408dbc <__aeabi_d2iz>
  4065e0:	2200      	movs	r2, #0
  4065e2:	9002      	str	r0, [sp, #8]
  4065e4:	2300      	movs	r3, #0
  4065e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4065ea:	f7fd fa5f 	bl	403aac <__aeabi_dcmplt>
  4065ee:	2800      	cmp	r0, #0
  4065f0:	f040 8173 	bne.w	4068da <_dtoa_r+0x412>
  4065f4:	9d02      	ldr	r5, [sp, #8]
  4065f6:	2d16      	cmp	r5, #22
  4065f8:	f200 815d 	bhi.w	4068b6 <_dtoa_r+0x3ee>
  4065fc:	4b61      	ldr	r3, [pc, #388]	; (406784 <_dtoa_r+0x2bc>)
  4065fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  406602:	e9d3 0100 	ldrd	r0, r1, [r3]
  406606:	4652      	mov	r2, sl
  406608:	465b      	mov	r3, fp
  40660a:	f7fd fa6d 	bl	403ae8 <__aeabi_dcmpgt>
  40660e:	2800      	cmp	r0, #0
  406610:	f000 81c5 	beq.w	40699e <_dtoa_r+0x4d6>
  406614:	1e6b      	subs	r3, r5, #1
  406616:	9302      	str	r3, [sp, #8]
  406618:	2300      	movs	r3, #0
  40661a:	930e      	str	r3, [sp, #56]	; 0x38
  40661c:	1bbf      	subs	r7, r7, r6
  40661e:	1e7b      	subs	r3, r7, #1
  406620:	9306      	str	r3, [sp, #24]
  406622:	f100 8154 	bmi.w	4068ce <_dtoa_r+0x406>
  406626:	2300      	movs	r3, #0
  406628:	9308      	str	r3, [sp, #32]
  40662a:	9b02      	ldr	r3, [sp, #8]
  40662c:	2b00      	cmp	r3, #0
  40662e:	f2c0 8145 	blt.w	4068bc <_dtoa_r+0x3f4>
  406632:	9a06      	ldr	r2, [sp, #24]
  406634:	930d      	str	r3, [sp, #52]	; 0x34
  406636:	4611      	mov	r1, r2
  406638:	4419      	add	r1, r3
  40663a:	2300      	movs	r3, #0
  40663c:	9106      	str	r1, [sp, #24]
  40663e:	930c      	str	r3, [sp, #48]	; 0x30
  406640:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406642:	2b09      	cmp	r3, #9
  406644:	d82a      	bhi.n	40669c <_dtoa_r+0x1d4>
  406646:	2b05      	cmp	r3, #5
  406648:	f340 865b 	ble.w	407302 <_dtoa_r+0xe3a>
  40664c:	3b04      	subs	r3, #4
  40664e:	9324      	str	r3, [sp, #144]	; 0x90
  406650:	2500      	movs	r5, #0
  406652:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406654:	3b02      	subs	r3, #2
  406656:	2b03      	cmp	r3, #3
  406658:	f200 8642 	bhi.w	4072e0 <_dtoa_r+0xe18>
  40665c:	e8df f013 	tbh	[pc, r3, lsl #1]
  406660:	02c903d4 	.word	0x02c903d4
  406664:	046103df 	.word	0x046103df
  406668:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40666a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40666c:	443e      	add	r6, r7
  40666e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  406672:	2b20      	cmp	r3, #32
  406674:	f340 818e 	ble.w	406994 <_dtoa_r+0x4cc>
  406678:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40667c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  406680:	409d      	lsls	r5, r3
  406682:	fa2a f000 	lsr.w	r0, sl, r0
  406686:	4328      	orrs	r0, r5
  406688:	f7fc ff28 	bl	4034dc <__aeabi_ui2d>
  40668c:	2301      	movs	r3, #1
  40668e:	3e01      	subs	r6, #1
  406690:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406694:	9314      	str	r3, [sp, #80]	; 0x50
  406696:	e781      	b.n	40659c <_dtoa_r+0xd4>
  406698:	483b      	ldr	r0, [pc, #236]	; (406788 <_dtoa_r+0x2c0>)
  40669a:	e743      	b.n	406524 <_dtoa_r+0x5c>
  40669c:	2100      	movs	r1, #0
  40669e:	6461      	str	r1, [r4, #68]	; 0x44
  4066a0:	4620      	mov	r0, r4
  4066a2:	9125      	str	r1, [sp, #148]	; 0x94
  4066a4:	f001 fba0 	bl	407de8 <_Balloc>
  4066a8:	f04f 33ff 	mov.w	r3, #4294967295
  4066ac:	930a      	str	r3, [sp, #40]	; 0x28
  4066ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4066b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4066b2:	2301      	movs	r3, #1
  4066b4:	9004      	str	r0, [sp, #16]
  4066b6:	6420      	str	r0, [r4, #64]	; 0x40
  4066b8:	9224      	str	r2, [sp, #144]	; 0x90
  4066ba:	930b      	str	r3, [sp, #44]	; 0x2c
  4066bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4066be:	2b00      	cmp	r3, #0
  4066c0:	f2c0 80d9 	blt.w	406876 <_dtoa_r+0x3ae>
  4066c4:	9a02      	ldr	r2, [sp, #8]
  4066c6:	2a0e      	cmp	r2, #14
  4066c8:	f300 80d5 	bgt.w	406876 <_dtoa_r+0x3ae>
  4066cc:	4b2d      	ldr	r3, [pc, #180]	; (406784 <_dtoa_r+0x2bc>)
  4066ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4066d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4066da:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4066dc:	2b00      	cmp	r3, #0
  4066de:	f2c0 83ba 	blt.w	406e56 <_dtoa_r+0x98e>
  4066e2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4066e6:	4650      	mov	r0, sl
  4066e8:	462a      	mov	r2, r5
  4066ea:	4633      	mov	r3, r6
  4066ec:	4659      	mov	r1, fp
  4066ee:	f7fd f895 	bl	40381c <__aeabi_ddiv>
  4066f2:	f002 fb63 	bl	408dbc <__aeabi_d2iz>
  4066f6:	4680      	mov	r8, r0
  4066f8:	f7fc ff00 	bl	4034fc <__aeabi_i2d>
  4066fc:	462a      	mov	r2, r5
  4066fe:	4633      	mov	r3, r6
  406700:	f7fc ff62 	bl	4035c8 <__aeabi_dmul>
  406704:	460b      	mov	r3, r1
  406706:	4602      	mov	r2, r0
  406708:	4659      	mov	r1, fp
  40670a:	4650      	mov	r0, sl
  40670c:	f7fc fda8 	bl	403260 <__aeabi_dsub>
  406710:	9d04      	ldr	r5, [sp, #16]
  406712:	f108 0330 	add.w	r3, r8, #48	; 0x30
  406716:	702b      	strb	r3, [r5, #0]
  406718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40671a:	2b01      	cmp	r3, #1
  40671c:	4606      	mov	r6, r0
  40671e:	460f      	mov	r7, r1
  406720:	f105 0501 	add.w	r5, r5, #1
  406724:	d068      	beq.n	4067f8 <_dtoa_r+0x330>
  406726:	2200      	movs	r2, #0
  406728:	4b18      	ldr	r3, [pc, #96]	; (40678c <_dtoa_r+0x2c4>)
  40672a:	f7fc ff4d 	bl	4035c8 <__aeabi_dmul>
  40672e:	2200      	movs	r2, #0
  406730:	2300      	movs	r3, #0
  406732:	4606      	mov	r6, r0
  406734:	460f      	mov	r7, r1
  406736:	f7fd f9af 	bl	403a98 <__aeabi_dcmpeq>
  40673a:	2800      	cmp	r0, #0
  40673c:	f040 8088 	bne.w	406850 <_dtoa_r+0x388>
  406740:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  406744:	f04f 0a00 	mov.w	sl, #0
  406748:	f8df b040 	ldr.w	fp, [pc, #64]	; 40678c <_dtoa_r+0x2c4>
  40674c:	940c      	str	r4, [sp, #48]	; 0x30
  40674e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406752:	e028      	b.n	4067a6 <_dtoa_r+0x2de>
  406754:	f3af 8000 	nop.w
  406758:	636f4361 	.word	0x636f4361
  40675c:	3fd287a7 	.word	0x3fd287a7
  406760:	8b60c8b3 	.word	0x8b60c8b3
  406764:	3fc68a28 	.word	0x3fc68a28
  406768:	509f79fb 	.word	0x509f79fb
  40676c:	3fd34413 	.word	0x3fd34413
  406770:	7ff00000 	.word	0x7ff00000
  406774:	00409299 	.word	0x00409299
  406778:	004092bc 	.word	0x004092bc
  40677c:	004092c8 	.word	0x004092c8
  406780:	3ff80000 	.word	0x3ff80000
  406784:	004092f8 	.word	0x004092f8
  406788:	00409298 	.word	0x00409298
  40678c:	40240000 	.word	0x40240000
  406790:	f7fc ff1a 	bl	4035c8 <__aeabi_dmul>
  406794:	2200      	movs	r2, #0
  406796:	2300      	movs	r3, #0
  406798:	4606      	mov	r6, r0
  40679a:	460f      	mov	r7, r1
  40679c:	f7fd f97c 	bl	403a98 <__aeabi_dcmpeq>
  4067a0:	2800      	cmp	r0, #0
  4067a2:	f040 83c1 	bne.w	406f28 <_dtoa_r+0xa60>
  4067a6:	4642      	mov	r2, r8
  4067a8:	464b      	mov	r3, r9
  4067aa:	4630      	mov	r0, r6
  4067ac:	4639      	mov	r1, r7
  4067ae:	f7fd f835 	bl	40381c <__aeabi_ddiv>
  4067b2:	f002 fb03 	bl	408dbc <__aeabi_d2iz>
  4067b6:	4604      	mov	r4, r0
  4067b8:	f7fc fea0 	bl	4034fc <__aeabi_i2d>
  4067bc:	4642      	mov	r2, r8
  4067be:	464b      	mov	r3, r9
  4067c0:	f7fc ff02 	bl	4035c8 <__aeabi_dmul>
  4067c4:	4602      	mov	r2, r0
  4067c6:	460b      	mov	r3, r1
  4067c8:	4630      	mov	r0, r6
  4067ca:	4639      	mov	r1, r7
  4067cc:	f7fc fd48 	bl	403260 <__aeabi_dsub>
  4067d0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4067d4:	9e04      	ldr	r6, [sp, #16]
  4067d6:	f805 eb01 	strb.w	lr, [r5], #1
  4067da:	eba5 0e06 	sub.w	lr, r5, r6
  4067de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4067e0:	45b6      	cmp	lr, r6
  4067e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4067e6:	4652      	mov	r2, sl
  4067e8:	465b      	mov	r3, fp
  4067ea:	d1d1      	bne.n	406790 <_dtoa_r+0x2c8>
  4067ec:	46a0      	mov	r8, r4
  4067ee:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4067f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4067f4:	4606      	mov	r6, r0
  4067f6:	460f      	mov	r7, r1
  4067f8:	4632      	mov	r2, r6
  4067fa:	463b      	mov	r3, r7
  4067fc:	4630      	mov	r0, r6
  4067fe:	4639      	mov	r1, r7
  406800:	f7fc fd30 	bl	403264 <__adddf3>
  406804:	4606      	mov	r6, r0
  406806:	460f      	mov	r7, r1
  406808:	4602      	mov	r2, r0
  40680a:	460b      	mov	r3, r1
  40680c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406810:	f7fd f94c 	bl	403aac <__aeabi_dcmplt>
  406814:	b948      	cbnz	r0, 40682a <_dtoa_r+0x362>
  406816:	4632      	mov	r2, r6
  406818:	463b      	mov	r3, r7
  40681a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40681e:	f7fd f93b 	bl	403a98 <__aeabi_dcmpeq>
  406822:	b1a8      	cbz	r0, 406850 <_dtoa_r+0x388>
  406824:	f018 0f01 	tst.w	r8, #1
  406828:	d012      	beq.n	406850 <_dtoa_r+0x388>
  40682a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40682e:	9a04      	ldr	r2, [sp, #16]
  406830:	1e6b      	subs	r3, r5, #1
  406832:	e004      	b.n	40683e <_dtoa_r+0x376>
  406834:	429a      	cmp	r2, r3
  406836:	f000 8401 	beq.w	40703c <_dtoa_r+0xb74>
  40683a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40683e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406842:	f103 0501 	add.w	r5, r3, #1
  406846:	d0f5      	beq.n	406834 <_dtoa_r+0x36c>
  406848:	f108 0801 	add.w	r8, r8, #1
  40684c:	f883 8000 	strb.w	r8, [r3]
  406850:	4649      	mov	r1, r9
  406852:	4620      	mov	r0, r4
  406854:	f001 faee 	bl	407e34 <_Bfree>
  406858:	2200      	movs	r2, #0
  40685a:	9b02      	ldr	r3, [sp, #8]
  40685c:	702a      	strb	r2, [r5, #0]
  40685e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406860:	3301      	adds	r3, #1
  406862:	6013      	str	r3, [r2, #0]
  406864:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406866:	2b00      	cmp	r3, #0
  406868:	f000 839e 	beq.w	406fa8 <_dtoa_r+0xae0>
  40686c:	9804      	ldr	r0, [sp, #16]
  40686e:	601d      	str	r5, [r3, #0]
  406870:	b01b      	add	sp, #108	; 0x6c
  406872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406876:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406878:	2a00      	cmp	r2, #0
  40687a:	d03e      	beq.n	4068fa <_dtoa_r+0x432>
  40687c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40687e:	2a01      	cmp	r2, #1
  406880:	f340 8311 	ble.w	406ea6 <_dtoa_r+0x9de>
  406884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406888:	1e5f      	subs	r7, r3, #1
  40688a:	42ba      	cmp	r2, r7
  40688c:	f2c0 838f 	blt.w	406fae <_dtoa_r+0xae6>
  406890:	1bd7      	subs	r7, r2, r7
  406892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406894:	2b00      	cmp	r3, #0
  406896:	f2c0 848b 	blt.w	4071b0 <_dtoa_r+0xce8>
  40689a:	9d08      	ldr	r5, [sp, #32]
  40689c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40689e:	9a08      	ldr	r2, [sp, #32]
  4068a0:	441a      	add	r2, r3
  4068a2:	9208      	str	r2, [sp, #32]
  4068a4:	9a06      	ldr	r2, [sp, #24]
  4068a6:	2101      	movs	r1, #1
  4068a8:	441a      	add	r2, r3
  4068aa:	4620      	mov	r0, r4
  4068ac:	9206      	str	r2, [sp, #24]
  4068ae:	f001 fb5b 	bl	407f68 <__i2b>
  4068b2:	4606      	mov	r6, r0
  4068b4:	e024      	b.n	406900 <_dtoa_r+0x438>
  4068b6:	2301      	movs	r3, #1
  4068b8:	930e      	str	r3, [sp, #56]	; 0x38
  4068ba:	e6af      	b.n	40661c <_dtoa_r+0x154>
  4068bc:	9a08      	ldr	r2, [sp, #32]
  4068be:	9b02      	ldr	r3, [sp, #8]
  4068c0:	1ad2      	subs	r2, r2, r3
  4068c2:	425b      	negs	r3, r3
  4068c4:	930c      	str	r3, [sp, #48]	; 0x30
  4068c6:	2300      	movs	r3, #0
  4068c8:	9208      	str	r2, [sp, #32]
  4068ca:	930d      	str	r3, [sp, #52]	; 0x34
  4068cc:	e6b8      	b.n	406640 <_dtoa_r+0x178>
  4068ce:	f1c7 0301 	rsb	r3, r7, #1
  4068d2:	9308      	str	r3, [sp, #32]
  4068d4:	2300      	movs	r3, #0
  4068d6:	9306      	str	r3, [sp, #24]
  4068d8:	e6a7      	b.n	40662a <_dtoa_r+0x162>
  4068da:	9d02      	ldr	r5, [sp, #8]
  4068dc:	4628      	mov	r0, r5
  4068de:	f7fc fe0d 	bl	4034fc <__aeabi_i2d>
  4068e2:	4602      	mov	r2, r0
  4068e4:	460b      	mov	r3, r1
  4068e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4068ea:	f7fd f8d5 	bl	403a98 <__aeabi_dcmpeq>
  4068ee:	2800      	cmp	r0, #0
  4068f0:	f47f ae80 	bne.w	4065f4 <_dtoa_r+0x12c>
  4068f4:	1e6b      	subs	r3, r5, #1
  4068f6:	9302      	str	r3, [sp, #8]
  4068f8:	e67c      	b.n	4065f4 <_dtoa_r+0x12c>
  4068fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4068fc:	9d08      	ldr	r5, [sp, #32]
  4068fe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406900:	2d00      	cmp	r5, #0
  406902:	dd0c      	ble.n	40691e <_dtoa_r+0x456>
  406904:	9906      	ldr	r1, [sp, #24]
  406906:	2900      	cmp	r1, #0
  406908:	460b      	mov	r3, r1
  40690a:	dd08      	ble.n	40691e <_dtoa_r+0x456>
  40690c:	42a9      	cmp	r1, r5
  40690e:	9a08      	ldr	r2, [sp, #32]
  406910:	bfa8      	it	ge
  406912:	462b      	movge	r3, r5
  406914:	1ad2      	subs	r2, r2, r3
  406916:	1aed      	subs	r5, r5, r3
  406918:	1acb      	subs	r3, r1, r3
  40691a:	9208      	str	r2, [sp, #32]
  40691c:	9306      	str	r3, [sp, #24]
  40691e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406920:	b1d3      	cbz	r3, 406958 <_dtoa_r+0x490>
  406922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406924:	2b00      	cmp	r3, #0
  406926:	f000 82b7 	beq.w	406e98 <_dtoa_r+0x9d0>
  40692a:	2f00      	cmp	r7, #0
  40692c:	dd10      	ble.n	406950 <_dtoa_r+0x488>
  40692e:	4631      	mov	r1, r6
  406930:	463a      	mov	r2, r7
  406932:	4620      	mov	r0, r4
  406934:	f001 fbb4 	bl	4080a0 <__pow5mult>
  406938:	464a      	mov	r2, r9
  40693a:	4601      	mov	r1, r0
  40693c:	4606      	mov	r6, r0
  40693e:	4620      	mov	r0, r4
  406940:	f001 fb1c 	bl	407f7c <__multiply>
  406944:	4649      	mov	r1, r9
  406946:	4680      	mov	r8, r0
  406948:	4620      	mov	r0, r4
  40694a:	f001 fa73 	bl	407e34 <_Bfree>
  40694e:	46c1      	mov	r9, r8
  406950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406952:	1bda      	subs	r2, r3, r7
  406954:	f040 82a1 	bne.w	406e9a <_dtoa_r+0x9d2>
  406958:	2101      	movs	r1, #1
  40695a:	4620      	mov	r0, r4
  40695c:	f001 fb04 	bl	407f68 <__i2b>
  406960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406962:	2b00      	cmp	r3, #0
  406964:	4680      	mov	r8, r0
  406966:	dd1c      	ble.n	4069a2 <_dtoa_r+0x4da>
  406968:	4601      	mov	r1, r0
  40696a:	461a      	mov	r2, r3
  40696c:	4620      	mov	r0, r4
  40696e:	f001 fb97 	bl	4080a0 <__pow5mult>
  406972:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406974:	2b01      	cmp	r3, #1
  406976:	4680      	mov	r8, r0
  406978:	f340 8254 	ble.w	406e24 <_dtoa_r+0x95c>
  40697c:	2300      	movs	r3, #0
  40697e:	930c      	str	r3, [sp, #48]	; 0x30
  406980:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406984:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406988:	6918      	ldr	r0, [r3, #16]
  40698a:	f001 fa9d 	bl	407ec8 <__hi0bits>
  40698e:	f1c0 0020 	rsb	r0, r0, #32
  406992:	e010      	b.n	4069b6 <_dtoa_r+0x4ee>
  406994:	f1c3 0520 	rsb	r5, r3, #32
  406998:	fa0a f005 	lsl.w	r0, sl, r5
  40699c:	e674      	b.n	406688 <_dtoa_r+0x1c0>
  40699e:	900e      	str	r0, [sp, #56]	; 0x38
  4069a0:	e63c      	b.n	40661c <_dtoa_r+0x154>
  4069a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4069a4:	2b01      	cmp	r3, #1
  4069a6:	f340 8287 	ble.w	406eb8 <_dtoa_r+0x9f0>
  4069aa:	2300      	movs	r3, #0
  4069ac:	930c      	str	r3, [sp, #48]	; 0x30
  4069ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4069b0:	2001      	movs	r0, #1
  4069b2:	2b00      	cmp	r3, #0
  4069b4:	d1e4      	bne.n	406980 <_dtoa_r+0x4b8>
  4069b6:	9a06      	ldr	r2, [sp, #24]
  4069b8:	4410      	add	r0, r2
  4069ba:	f010 001f 	ands.w	r0, r0, #31
  4069be:	f000 80a1 	beq.w	406b04 <_dtoa_r+0x63c>
  4069c2:	f1c0 0320 	rsb	r3, r0, #32
  4069c6:	2b04      	cmp	r3, #4
  4069c8:	f340 849e 	ble.w	407308 <_dtoa_r+0xe40>
  4069cc:	9b08      	ldr	r3, [sp, #32]
  4069ce:	f1c0 001c 	rsb	r0, r0, #28
  4069d2:	4403      	add	r3, r0
  4069d4:	9308      	str	r3, [sp, #32]
  4069d6:	4613      	mov	r3, r2
  4069d8:	4403      	add	r3, r0
  4069da:	4405      	add	r5, r0
  4069dc:	9306      	str	r3, [sp, #24]
  4069de:	9b08      	ldr	r3, [sp, #32]
  4069e0:	2b00      	cmp	r3, #0
  4069e2:	dd05      	ble.n	4069f0 <_dtoa_r+0x528>
  4069e4:	4649      	mov	r1, r9
  4069e6:	461a      	mov	r2, r3
  4069e8:	4620      	mov	r0, r4
  4069ea:	f001 fba9 	bl	408140 <__lshift>
  4069ee:	4681      	mov	r9, r0
  4069f0:	9b06      	ldr	r3, [sp, #24]
  4069f2:	2b00      	cmp	r3, #0
  4069f4:	dd05      	ble.n	406a02 <_dtoa_r+0x53a>
  4069f6:	4641      	mov	r1, r8
  4069f8:	461a      	mov	r2, r3
  4069fa:	4620      	mov	r0, r4
  4069fc:	f001 fba0 	bl	408140 <__lshift>
  406a00:	4680      	mov	r8, r0
  406a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406a04:	2b00      	cmp	r3, #0
  406a06:	f040 8086 	bne.w	406b16 <_dtoa_r+0x64e>
  406a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406a0c:	2b00      	cmp	r3, #0
  406a0e:	f340 8266 	ble.w	406ede <_dtoa_r+0xa16>
  406a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406a14:	2b00      	cmp	r3, #0
  406a16:	f000 8098 	beq.w	406b4a <_dtoa_r+0x682>
  406a1a:	2d00      	cmp	r5, #0
  406a1c:	dd05      	ble.n	406a2a <_dtoa_r+0x562>
  406a1e:	4631      	mov	r1, r6
  406a20:	462a      	mov	r2, r5
  406a22:	4620      	mov	r0, r4
  406a24:	f001 fb8c 	bl	408140 <__lshift>
  406a28:	4606      	mov	r6, r0
  406a2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406a2c:	2b00      	cmp	r3, #0
  406a2e:	f040 8337 	bne.w	4070a0 <_dtoa_r+0xbd8>
  406a32:	9606      	str	r6, [sp, #24]
  406a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406a36:	9a04      	ldr	r2, [sp, #16]
  406a38:	f8dd b018 	ldr.w	fp, [sp, #24]
  406a3c:	3b01      	subs	r3, #1
  406a3e:	18d3      	adds	r3, r2, r3
  406a40:	930b      	str	r3, [sp, #44]	; 0x2c
  406a42:	f00a 0301 	and.w	r3, sl, #1
  406a46:	930c      	str	r3, [sp, #48]	; 0x30
  406a48:	4617      	mov	r7, r2
  406a4a:	46c2      	mov	sl, r8
  406a4c:	4651      	mov	r1, sl
  406a4e:	4648      	mov	r0, r9
  406a50:	f7ff fca6 	bl	4063a0 <quorem>
  406a54:	4631      	mov	r1, r6
  406a56:	4605      	mov	r5, r0
  406a58:	4648      	mov	r0, r9
  406a5a:	f001 fbc3 	bl	4081e4 <__mcmp>
  406a5e:	465a      	mov	r2, fp
  406a60:	900a      	str	r0, [sp, #40]	; 0x28
  406a62:	4651      	mov	r1, sl
  406a64:	4620      	mov	r0, r4
  406a66:	f001 fbd9 	bl	40821c <__mdiff>
  406a6a:	68c2      	ldr	r2, [r0, #12]
  406a6c:	4680      	mov	r8, r0
  406a6e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  406a72:	2a00      	cmp	r2, #0
  406a74:	f040 822b 	bne.w	406ece <_dtoa_r+0xa06>
  406a78:	4601      	mov	r1, r0
  406a7a:	4648      	mov	r0, r9
  406a7c:	9308      	str	r3, [sp, #32]
  406a7e:	f001 fbb1 	bl	4081e4 <__mcmp>
  406a82:	4641      	mov	r1, r8
  406a84:	9006      	str	r0, [sp, #24]
  406a86:	4620      	mov	r0, r4
  406a88:	f001 f9d4 	bl	407e34 <_Bfree>
  406a8c:	9a06      	ldr	r2, [sp, #24]
  406a8e:	9b08      	ldr	r3, [sp, #32]
  406a90:	b932      	cbnz	r2, 406aa0 <_dtoa_r+0x5d8>
  406a92:	9924      	ldr	r1, [sp, #144]	; 0x90
  406a94:	b921      	cbnz	r1, 406aa0 <_dtoa_r+0x5d8>
  406a96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406a98:	2a00      	cmp	r2, #0
  406a9a:	f000 83ef 	beq.w	40727c <_dtoa_r+0xdb4>
  406a9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406aa0:	990a      	ldr	r1, [sp, #40]	; 0x28
  406aa2:	2900      	cmp	r1, #0
  406aa4:	f2c0 829f 	blt.w	406fe6 <_dtoa_r+0xb1e>
  406aa8:	d105      	bne.n	406ab6 <_dtoa_r+0x5ee>
  406aaa:	9924      	ldr	r1, [sp, #144]	; 0x90
  406aac:	b919      	cbnz	r1, 406ab6 <_dtoa_r+0x5ee>
  406aae:	990c      	ldr	r1, [sp, #48]	; 0x30
  406ab0:	2900      	cmp	r1, #0
  406ab2:	f000 8298 	beq.w	406fe6 <_dtoa_r+0xb1e>
  406ab6:	2a00      	cmp	r2, #0
  406ab8:	f300 8306 	bgt.w	4070c8 <_dtoa_r+0xc00>
  406abc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406abe:	703b      	strb	r3, [r7, #0]
  406ac0:	f107 0801 	add.w	r8, r7, #1
  406ac4:	4297      	cmp	r7, r2
  406ac6:	4645      	mov	r5, r8
  406ac8:	f000 830c 	beq.w	4070e4 <_dtoa_r+0xc1c>
  406acc:	4649      	mov	r1, r9
  406ace:	2300      	movs	r3, #0
  406ad0:	220a      	movs	r2, #10
  406ad2:	4620      	mov	r0, r4
  406ad4:	f001 f9b8 	bl	407e48 <__multadd>
  406ad8:	455e      	cmp	r6, fp
  406ada:	4681      	mov	r9, r0
  406adc:	4631      	mov	r1, r6
  406ade:	f04f 0300 	mov.w	r3, #0
  406ae2:	f04f 020a 	mov.w	r2, #10
  406ae6:	4620      	mov	r0, r4
  406ae8:	f000 81eb 	beq.w	406ec2 <_dtoa_r+0x9fa>
  406aec:	f001 f9ac 	bl	407e48 <__multadd>
  406af0:	4659      	mov	r1, fp
  406af2:	4606      	mov	r6, r0
  406af4:	2300      	movs	r3, #0
  406af6:	220a      	movs	r2, #10
  406af8:	4620      	mov	r0, r4
  406afa:	f001 f9a5 	bl	407e48 <__multadd>
  406afe:	4647      	mov	r7, r8
  406b00:	4683      	mov	fp, r0
  406b02:	e7a3      	b.n	406a4c <_dtoa_r+0x584>
  406b04:	201c      	movs	r0, #28
  406b06:	9b08      	ldr	r3, [sp, #32]
  406b08:	4403      	add	r3, r0
  406b0a:	9308      	str	r3, [sp, #32]
  406b0c:	9b06      	ldr	r3, [sp, #24]
  406b0e:	4403      	add	r3, r0
  406b10:	4405      	add	r5, r0
  406b12:	9306      	str	r3, [sp, #24]
  406b14:	e763      	b.n	4069de <_dtoa_r+0x516>
  406b16:	4641      	mov	r1, r8
  406b18:	4648      	mov	r0, r9
  406b1a:	f001 fb63 	bl	4081e4 <__mcmp>
  406b1e:	2800      	cmp	r0, #0
  406b20:	f6bf af73 	bge.w	406a0a <_dtoa_r+0x542>
  406b24:	9f02      	ldr	r7, [sp, #8]
  406b26:	4649      	mov	r1, r9
  406b28:	2300      	movs	r3, #0
  406b2a:	220a      	movs	r2, #10
  406b2c:	4620      	mov	r0, r4
  406b2e:	3f01      	subs	r7, #1
  406b30:	9702      	str	r7, [sp, #8]
  406b32:	f001 f989 	bl	407e48 <__multadd>
  406b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406b38:	4681      	mov	r9, r0
  406b3a:	2b00      	cmp	r3, #0
  406b3c:	f040 83b6 	bne.w	4072ac <_dtoa_r+0xde4>
  406b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406b42:	2b00      	cmp	r3, #0
  406b44:	f340 83bf 	ble.w	4072c6 <_dtoa_r+0xdfe>
  406b48:	930a      	str	r3, [sp, #40]	; 0x28
  406b4a:	f8dd b010 	ldr.w	fp, [sp, #16]
  406b4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406b50:	465d      	mov	r5, fp
  406b52:	e002      	b.n	406b5a <_dtoa_r+0x692>
  406b54:	f001 f978 	bl	407e48 <__multadd>
  406b58:	4681      	mov	r9, r0
  406b5a:	4641      	mov	r1, r8
  406b5c:	4648      	mov	r0, r9
  406b5e:	f7ff fc1f 	bl	4063a0 <quorem>
  406b62:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  406b66:	f805 ab01 	strb.w	sl, [r5], #1
  406b6a:	eba5 030b 	sub.w	r3, r5, fp
  406b6e:	42bb      	cmp	r3, r7
  406b70:	f04f 020a 	mov.w	r2, #10
  406b74:	f04f 0300 	mov.w	r3, #0
  406b78:	4649      	mov	r1, r9
  406b7a:	4620      	mov	r0, r4
  406b7c:	dbea      	blt.n	406b54 <_dtoa_r+0x68c>
  406b7e:	9b04      	ldr	r3, [sp, #16]
  406b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406b82:	2a01      	cmp	r2, #1
  406b84:	bfac      	ite	ge
  406b86:	189b      	addge	r3, r3, r2
  406b88:	3301      	addlt	r3, #1
  406b8a:	461d      	mov	r5, r3
  406b8c:	f04f 0b00 	mov.w	fp, #0
  406b90:	4649      	mov	r1, r9
  406b92:	2201      	movs	r2, #1
  406b94:	4620      	mov	r0, r4
  406b96:	f001 fad3 	bl	408140 <__lshift>
  406b9a:	4641      	mov	r1, r8
  406b9c:	4681      	mov	r9, r0
  406b9e:	f001 fb21 	bl	4081e4 <__mcmp>
  406ba2:	2800      	cmp	r0, #0
  406ba4:	f340 823d 	ble.w	407022 <_dtoa_r+0xb5a>
  406ba8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406bac:	9904      	ldr	r1, [sp, #16]
  406bae:	1e6b      	subs	r3, r5, #1
  406bb0:	e004      	b.n	406bbc <_dtoa_r+0x6f4>
  406bb2:	428b      	cmp	r3, r1
  406bb4:	f000 81ae 	beq.w	406f14 <_dtoa_r+0xa4c>
  406bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406bbc:	2a39      	cmp	r2, #57	; 0x39
  406bbe:	f103 0501 	add.w	r5, r3, #1
  406bc2:	d0f6      	beq.n	406bb2 <_dtoa_r+0x6ea>
  406bc4:	3201      	adds	r2, #1
  406bc6:	701a      	strb	r2, [r3, #0]
  406bc8:	4641      	mov	r1, r8
  406bca:	4620      	mov	r0, r4
  406bcc:	f001 f932 	bl	407e34 <_Bfree>
  406bd0:	2e00      	cmp	r6, #0
  406bd2:	f43f ae3d 	beq.w	406850 <_dtoa_r+0x388>
  406bd6:	f1bb 0f00 	cmp.w	fp, #0
  406bda:	d005      	beq.n	406be8 <_dtoa_r+0x720>
  406bdc:	45b3      	cmp	fp, r6
  406bde:	d003      	beq.n	406be8 <_dtoa_r+0x720>
  406be0:	4659      	mov	r1, fp
  406be2:	4620      	mov	r0, r4
  406be4:	f001 f926 	bl	407e34 <_Bfree>
  406be8:	4631      	mov	r1, r6
  406bea:	4620      	mov	r0, r4
  406bec:	f001 f922 	bl	407e34 <_Bfree>
  406bf0:	e62e      	b.n	406850 <_dtoa_r+0x388>
  406bf2:	2300      	movs	r3, #0
  406bf4:	930b      	str	r3, [sp, #44]	; 0x2c
  406bf6:	9b02      	ldr	r3, [sp, #8]
  406bf8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406bfa:	4413      	add	r3, r2
  406bfc:	930f      	str	r3, [sp, #60]	; 0x3c
  406bfe:	3301      	adds	r3, #1
  406c00:	2b01      	cmp	r3, #1
  406c02:	461f      	mov	r7, r3
  406c04:	461e      	mov	r6, r3
  406c06:	930a      	str	r3, [sp, #40]	; 0x28
  406c08:	bfb8      	it	lt
  406c0a:	2701      	movlt	r7, #1
  406c0c:	2100      	movs	r1, #0
  406c0e:	2f17      	cmp	r7, #23
  406c10:	6461      	str	r1, [r4, #68]	; 0x44
  406c12:	d90a      	bls.n	406c2a <_dtoa_r+0x762>
  406c14:	2201      	movs	r2, #1
  406c16:	2304      	movs	r3, #4
  406c18:	005b      	lsls	r3, r3, #1
  406c1a:	f103 0014 	add.w	r0, r3, #20
  406c1e:	4287      	cmp	r7, r0
  406c20:	4611      	mov	r1, r2
  406c22:	f102 0201 	add.w	r2, r2, #1
  406c26:	d2f7      	bcs.n	406c18 <_dtoa_r+0x750>
  406c28:	6461      	str	r1, [r4, #68]	; 0x44
  406c2a:	4620      	mov	r0, r4
  406c2c:	f001 f8dc 	bl	407de8 <_Balloc>
  406c30:	2e0e      	cmp	r6, #14
  406c32:	9004      	str	r0, [sp, #16]
  406c34:	6420      	str	r0, [r4, #64]	; 0x40
  406c36:	f63f ad41 	bhi.w	4066bc <_dtoa_r+0x1f4>
  406c3a:	2d00      	cmp	r5, #0
  406c3c:	f43f ad3e 	beq.w	4066bc <_dtoa_r+0x1f4>
  406c40:	9902      	ldr	r1, [sp, #8]
  406c42:	2900      	cmp	r1, #0
  406c44:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406c48:	f340 8202 	ble.w	407050 <_dtoa_r+0xb88>
  406c4c:	4bb8      	ldr	r3, [pc, #736]	; (406f30 <_dtoa_r+0xa68>)
  406c4e:	f001 020f 	and.w	r2, r1, #15
  406c52:	110d      	asrs	r5, r1, #4
  406c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406c58:	06e9      	lsls	r1, r5, #27
  406c5a:	e9d3 6700 	ldrd	r6, r7, [r3]
  406c5e:	f140 81ae 	bpl.w	406fbe <_dtoa_r+0xaf6>
  406c62:	4bb4      	ldr	r3, [pc, #720]	; (406f34 <_dtoa_r+0xa6c>)
  406c64:	4650      	mov	r0, sl
  406c66:	4659      	mov	r1, fp
  406c68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406c6c:	f7fc fdd6 	bl	40381c <__aeabi_ddiv>
  406c70:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  406c74:	f005 050f 	and.w	r5, r5, #15
  406c78:	f04f 0a03 	mov.w	sl, #3
  406c7c:	b18d      	cbz	r5, 406ca2 <_dtoa_r+0x7da>
  406c7e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 406f34 <_dtoa_r+0xa6c>
  406c82:	07ea      	lsls	r2, r5, #31
  406c84:	d509      	bpl.n	406c9a <_dtoa_r+0x7d2>
  406c86:	4630      	mov	r0, r6
  406c88:	4639      	mov	r1, r7
  406c8a:	e9d8 2300 	ldrd	r2, r3, [r8]
  406c8e:	f7fc fc9b 	bl	4035c8 <__aeabi_dmul>
  406c92:	f10a 0a01 	add.w	sl, sl, #1
  406c96:	4606      	mov	r6, r0
  406c98:	460f      	mov	r7, r1
  406c9a:	106d      	asrs	r5, r5, #1
  406c9c:	f108 0808 	add.w	r8, r8, #8
  406ca0:	d1ef      	bne.n	406c82 <_dtoa_r+0x7ba>
  406ca2:	463b      	mov	r3, r7
  406ca4:	4632      	mov	r2, r6
  406ca6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406caa:	f7fc fdb7 	bl	40381c <__aeabi_ddiv>
  406cae:	4607      	mov	r7, r0
  406cb0:	4688      	mov	r8, r1
  406cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406cb4:	b143      	cbz	r3, 406cc8 <_dtoa_r+0x800>
  406cb6:	2200      	movs	r2, #0
  406cb8:	4b9f      	ldr	r3, [pc, #636]	; (406f38 <_dtoa_r+0xa70>)
  406cba:	4638      	mov	r0, r7
  406cbc:	4641      	mov	r1, r8
  406cbe:	f7fc fef5 	bl	403aac <__aeabi_dcmplt>
  406cc2:	2800      	cmp	r0, #0
  406cc4:	f040 8286 	bne.w	4071d4 <_dtoa_r+0xd0c>
  406cc8:	4650      	mov	r0, sl
  406cca:	f7fc fc17 	bl	4034fc <__aeabi_i2d>
  406cce:	463a      	mov	r2, r7
  406cd0:	4643      	mov	r3, r8
  406cd2:	f7fc fc79 	bl	4035c8 <__aeabi_dmul>
  406cd6:	4b99      	ldr	r3, [pc, #612]	; (406f3c <_dtoa_r+0xa74>)
  406cd8:	2200      	movs	r2, #0
  406cda:	f7fc fac3 	bl	403264 <__adddf3>
  406cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ce0:	4605      	mov	r5, r0
  406ce2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406ce6:	2b00      	cmp	r3, #0
  406ce8:	f000 813e 	beq.w	406f68 <_dtoa_r+0xaa0>
  406cec:	9b02      	ldr	r3, [sp, #8]
  406cee:	9315      	str	r3, [sp, #84]	; 0x54
  406cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406cf2:	9312      	str	r3, [sp, #72]	; 0x48
  406cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406cf6:	2b00      	cmp	r3, #0
  406cf8:	f000 81fa 	beq.w	4070f0 <_dtoa_r+0xc28>
  406cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406cfe:	4b8c      	ldr	r3, [pc, #560]	; (406f30 <_dtoa_r+0xa68>)
  406d00:	498f      	ldr	r1, [pc, #572]	; (406f40 <_dtoa_r+0xa78>)
  406d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406d06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  406d0a:	2000      	movs	r0, #0
  406d0c:	f7fc fd86 	bl	40381c <__aeabi_ddiv>
  406d10:	462a      	mov	r2, r5
  406d12:	4633      	mov	r3, r6
  406d14:	f7fc faa4 	bl	403260 <__aeabi_dsub>
  406d18:	4682      	mov	sl, r0
  406d1a:	468b      	mov	fp, r1
  406d1c:	4638      	mov	r0, r7
  406d1e:	4641      	mov	r1, r8
  406d20:	f002 f84c 	bl	408dbc <__aeabi_d2iz>
  406d24:	4605      	mov	r5, r0
  406d26:	f7fc fbe9 	bl	4034fc <__aeabi_i2d>
  406d2a:	4602      	mov	r2, r0
  406d2c:	460b      	mov	r3, r1
  406d2e:	4638      	mov	r0, r7
  406d30:	4641      	mov	r1, r8
  406d32:	f7fc fa95 	bl	403260 <__aeabi_dsub>
  406d36:	3530      	adds	r5, #48	; 0x30
  406d38:	fa5f f885 	uxtb.w	r8, r5
  406d3c:	9d04      	ldr	r5, [sp, #16]
  406d3e:	4606      	mov	r6, r0
  406d40:	460f      	mov	r7, r1
  406d42:	f885 8000 	strb.w	r8, [r5]
  406d46:	4602      	mov	r2, r0
  406d48:	460b      	mov	r3, r1
  406d4a:	4650      	mov	r0, sl
  406d4c:	4659      	mov	r1, fp
  406d4e:	3501      	adds	r5, #1
  406d50:	f7fc feca 	bl	403ae8 <__aeabi_dcmpgt>
  406d54:	2800      	cmp	r0, #0
  406d56:	d154      	bne.n	406e02 <_dtoa_r+0x93a>
  406d58:	4632      	mov	r2, r6
  406d5a:	463b      	mov	r3, r7
  406d5c:	2000      	movs	r0, #0
  406d5e:	4976      	ldr	r1, [pc, #472]	; (406f38 <_dtoa_r+0xa70>)
  406d60:	f7fc fa7e 	bl	403260 <__aeabi_dsub>
  406d64:	4602      	mov	r2, r0
  406d66:	460b      	mov	r3, r1
  406d68:	4650      	mov	r0, sl
  406d6a:	4659      	mov	r1, fp
  406d6c:	f7fc febc 	bl	403ae8 <__aeabi_dcmpgt>
  406d70:	2800      	cmp	r0, #0
  406d72:	f040 8270 	bne.w	407256 <_dtoa_r+0xd8e>
  406d76:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406d78:	2a01      	cmp	r2, #1
  406d7a:	f000 8111 	beq.w	406fa0 <_dtoa_r+0xad8>
  406d7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406d80:	9a04      	ldr	r2, [sp, #16]
  406d82:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406d86:	4413      	add	r3, r2
  406d88:	4699      	mov	r9, r3
  406d8a:	e00d      	b.n	406da8 <_dtoa_r+0x8e0>
  406d8c:	2000      	movs	r0, #0
  406d8e:	496a      	ldr	r1, [pc, #424]	; (406f38 <_dtoa_r+0xa70>)
  406d90:	f7fc fa66 	bl	403260 <__aeabi_dsub>
  406d94:	4652      	mov	r2, sl
  406d96:	465b      	mov	r3, fp
  406d98:	f7fc fe88 	bl	403aac <__aeabi_dcmplt>
  406d9c:	2800      	cmp	r0, #0
  406d9e:	f040 8258 	bne.w	407252 <_dtoa_r+0xd8a>
  406da2:	454d      	cmp	r5, r9
  406da4:	f000 80fa 	beq.w	406f9c <_dtoa_r+0xad4>
  406da8:	4650      	mov	r0, sl
  406daa:	4659      	mov	r1, fp
  406dac:	2200      	movs	r2, #0
  406dae:	4b65      	ldr	r3, [pc, #404]	; (406f44 <_dtoa_r+0xa7c>)
  406db0:	f7fc fc0a 	bl	4035c8 <__aeabi_dmul>
  406db4:	2200      	movs	r2, #0
  406db6:	4b63      	ldr	r3, [pc, #396]	; (406f44 <_dtoa_r+0xa7c>)
  406db8:	4682      	mov	sl, r0
  406dba:	468b      	mov	fp, r1
  406dbc:	4630      	mov	r0, r6
  406dbe:	4639      	mov	r1, r7
  406dc0:	f7fc fc02 	bl	4035c8 <__aeabi_dmul>
  406dc4:	460f      	mov	r7, r1
  406dc6:	4606      	mov	r6, r0
  406dc8:	f001 fff8 	bl	408dbc <__aeabi_d2iz>
  406dcc:	4680      	mov	r8, r0
  406dce:	f7fc fb95 	bl	4034fc <__aeabi_i2d>
  406dd2:	4602      	mov	r2, r0
  406dd4:	460b      	mov	r3, r1
  406dd6:	4630      	mov	r0, r6
  406dd8:	4639      	mov	r1, r7
  406dda:	f7fc fa41 	bl	403260 <__aeabi_dsub>
  406dde:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406de2:	fa5f f888 	uxtb.w	r8, r8
  406de6:	4652      	mov	r2, sl
  406de8:	465b      	mov	r3, fp
  406dea:	f805 8b01 	strb.w	r8, [r5], #1
  406dee:	4606      	mov	r6, r0
  406df0:	460f      	mov	r7, r1
  406df2:	f7fc fe5b 	bl	403aac <__aeabi_dcmplt>
  406df6:	4632      	mov	r2, r6
  406df8:	463b      	mov	r3, r7
  406dfa:	2800      	cmp	r0, #0
  406dfc:	d0c6      	beq.n	406d8c <_dtoa_r+0x8c4>
  406dfe:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406e02:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406e04:	9302      	str	r3, [sp, #8]
  406e06:	e523      	b.n	406850 <_dtoa_r+0x388>
  406e08:	2300      	movs	r3, #0
  406e0a:	930b      	str	r3, [sp, #44]	; 0x2c
  406e0c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406e0e:	2b00      	cmp	r3, #0
  406e10:	f340 80dc 	ble.w	406fcc <_dtoa_r+0xb04>
  406e14:	461f      	mov	r7, r3
  406e16:	461e      	mov	r6, r3
  406e18:	930f      	str	r3, [sp, #60]	; 0x3c
  406e1a:	930a      	str	r3, [sp, #40]	; 0x28
  406e1c:	e6f6      	b.n	406c0c <_dtoa_r+0x744>
  406e1e:	2301      	movs	r3, #1
  406e20:	930b      	str	r3, [sp, #44]	; 0x2c
  406e22:	e7f3      	b.n	406e0c <_dtoa_r+0x944>
  406e24:	f1ba 0f00 	cmp.w	sl, #0
  406e28:	f47f ada8 	bne.w	40697c <_dtoa_r+0x4b4>
  406e2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406e30:	2b00      	cmp	r3, #0
  406e32:	f47f adba 	bne.w	4069aa <_dtoa_r+0x4e2>
  406e36:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406e3a:	0d3f      	lsrs	r7, r7, #20
  406e3c:	053f      	lsls	r7, r7, #20
  406e3e:	2f00      	cmp	r7, #0
  406e40:	f000 820d 	beq.w	40725e <_dtoa_r+0xd96>
  406e44:	9b08      	ldr	r3, [sp, #32]
  406e46:	3301      	adds	r3, #1
  406e48:	9308      	str	r3, [sp, #32]
  406e4a:	9b06      	ldr	r3, [sp, #24]
  406e4c:	3301      	adds	r3, #1
  406e4e:	9306      	str	r3, [sp, #24]
  406e50:	2301      	movs	r3, #1
  406e52:	930c      	str	r3, [sp, #48]	; 0x30
  406e54:	e5ab      	b.n	4069ae <_dtoa_r+0x4e6>
  406e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406e58:	2b00      	cmp	r3, #0
  406e5a:	f73f ac42 	bgt.w	4066e2 <_dtoa_r+0x21a>
  406e5e:	f040 8221 	bne.w	4072a4 <_dtoa_r+0xddc>
  406e62:	2200      	movs	r2, #0
  406e64:	4b38      	ldr	r3, [pc, #224]	; (406f48 <_dtoa_r+0xa80>)
  406e66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406e6a:	f7fc fbad 	bl	4035c8 <__aeabi_dmul>
  406e6e:	4652      	mov	r2, sl
  406e70:	465b      	mov	r3, fp
  406e72:	f7fc fe2f 	bl	403ad4 <__aeabi_dcmpge>
  406e76:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  406e7a:	4646      	mov	r6, r8
  406e7c:	2800      	cmp	r0, #0
  406e7e:	d041      	beq.n	406f04 <_dtoa_r+0xa3c>
  406e80:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406e82:	9d04      	ldr	r5, [sp, #16]
  406e84:	43db      	mvns	r3, r3
  406e86:	9302      	str	r3, [sp, #8]
  406e88:	4641      	mov	r1, r8
  406e8a:	4620      	mov	r0, r4
  406e8c:	f000 ffd2 	bl	407e34 <_Bfree>
  406e90:	2e00      	cmp	r6, #0
  406e92:	f43f acdd 	beq.w	406850 <_dtoa_r+0x388>
  406e96:	e6a7      	b.n	406be8 <_dtoa_r+0x720>
  406e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406e9a:	4649      	mov	r1, r9
  406e9c:	4620      	mov	r0, r4
  406e9e:	f001 f8ff 	bl	4080a0 <__pow5mult>
  406ea2:	4681      	mov	r9, r0
  406ea4:	e558      	b.n	406958 <_dtoa_r+0x490>
  406ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406ea8:	2a00      	cmp	r2, #0
  406eaa:	f000 8187 	beq.w	4071bc <_dtoa_r+0xcf4>
  406eae:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406eb2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406eb4:	9d08      	ldr	r5, [sp, #32]
  406eb6:	e4f2      	b.n	40689e <_dtoa_r+0x3d6>
  406eb8:	f1ba 0f00 	cmp.w	sl, #0
  406ebc:	f47f ad75 	bne.w	4069aa <_dtoa_r+0x4e2>
  406ec0:	e7b4      	b.n	406e2c <_dtoa_r+0x964>
  406ec2:	f000 ffc1 	bl	407e48 <__multadd>
  406ec6:	4647      	mov	r7, r8
  406ec8:	4606      	mov	r6, r0
  406eca:	4683      	mov	fp, r0
  406ecc:	e5be      	b.n	406a4c <_dtoa_r+0x584>
  406ece:	4601      	mov	r1, r0
  406ed0:	4620      	mov	r0, r4
  406ed2:	9306      	str	r3, [sp, #24]
  406ed4:	f000 ffae 	bl	407e34 <_Bfree>
  406ed8:	2201      	movs	r2, #1
  406eda:	9b06      	ldr	r3, [sp, #24]
  406edc:	e5e0      	b.n	406aa0 <_dtoa_r+0x5d8>
  406ede:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406ee0:	2b02      	cmp	r3, #2
  406ee2:	f77f ad96 	ble.w	406a12 <_dtoa_r+0x54a>
  406ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ee8:	2b00      	cmp	r3, #0
  406eea:	d1c9      	bne.n	406e80 <_dtoa_r+0x9b8>
  406eec:	4641      	mov	r1, r8
  406eee:	2205      	movs	r2, #5
  406ef0:	4620      	mov	r0, r4
  406ef2:	f000 ffa9 	bl	407e48 <__multadd>
  406ef6:	4601      	mov	r1, r0
  406ef8:	4680      	mov	r8, r0
  406efa:	4648      	mov	r0, r9
  406efc:	f001 f972 	bl	4081e4 <__mcmp>
  406f00:	2800      	cmp	r0, #0
  406f02:	ddbd      	ble.n	406e80 <_dtoa_r+0x9b8>
  406f04:	9a02      	ldr	r2, [sp, #8]
  406f06:	9904      	ldr	r1, [sp, #16]
  406f08:	2331      	movs	r3, #49	; 0x31
  406f0a:	3201      	adds	r2, #1
  406f0c:	9202      	str	r2, [sp, #8]
  406f0e:	700b      	strb	r3, [r1, #0]
  406f10:	1c4d      	adds	r5, r1, #1
  406f12:	e7b9      	b.n	406e88 <_dtoa_r+0x9c0>
  406f14:	9a02      	ldr	r2, [sp, #8]
  406f16:	3201      	adds	r2, #1
  406f18:	9202      	str	r2, [sp, #8]
  406f1a:	9a04      	ldr	r2, [sp, #16]
  406f1c:	2331      	movs	r3, #49	; 0x31
  406f1e:	7013      	strb	r3, [r2, #0]
  406f20:	e652      	b.n	406bc8 <_dtoa_r+0x700>
  406f22:	2301      	movs	r3, #1
  406f24:	930b      	str	r3, [sp, #44]	; 0x2c
  406f26:	e666      	b.n	406bf6 <_dtoa_r+0x72e>
  406f28:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406f2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406f2e:	e48f      	b.n	406850 <_dtoa_r+0x388>
  406f30:	004092f8 	.word	0x004092f8
  406f34:	004092d0 	.word	0x004092d0
  406f38:	3ff00000 	.word	0x3ff00000
  406f3c:	401c0000 	.word	0x401c0000
  406f40:	3fe00000 	.word	0x3fe00000
  406f44:	40240000 	.word	0x40240000
  406f48:	40140000 	.word	0x40140000
  406f4c:	4650      	mov	r0, sl
  406f4e:	f7fc fad5 	bl	4034fc <__aeabi_i2d>
  406f52:	463a      	mov	r2, r7
  406f54:	4643      	mov	r3, r8
  406f56:	f7fc fb37 	bl	4035c8 <__aeabi_dmul>
  406f5a:	2200      	movs	r2, #0
  406f5c:	4bc1      	ldr	r3, [pc, #772]	; (407264 <_dtoa_r+0xd9c>)
  406f5e:	f7fc f981 	bl	403264 <__adddf3>
  406f62:	4605      	mov	r5, r0
  406f64:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406f68:	4641      	mov	r1, r8
  406f6a:	2200      	movs	r2, #0
  406f6c:	4bbe      	ldr	r3, [pc, #760]	; (407268 <_dtoa_r+0xda0>)
  406f6e:	4638      	mov	r0, r7
  406f70:	f7fc f976 	bl	403260 <__aeabi_dsub>
  406f74:	462a      	mov	r2, r5
  406f76:	4633      	mov	r3, r6
  406f78:	4682      	mov	sl, r0
  406f7a:	468b      	mov	fp, r1
  406f7c:	f7fc fdb4 	bl	403ae8 <__aeabi_dcmpgt>
  406f80:	4680      	mov	r8, r0
  406f82:	2800      	cmp	r0, #0
  406f84:	f040 8110 	bne.w	4071a8 <_dtoa_r+0xce0>
  406f88:	462a      	mov	r2, r5
  406f8a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  406f8e:	4650      	mov	r0, sl
  406f90:	4659      	mov	r1, fp
  406f92:	f7fc fd8b 	bl	403aac <__aeabi_dcmplt>
  406f96:	b118      	cbz	r0, 406fa0 <_dtoa_r+0xad8>
  406f98:	4646      	mov	r6, r8
  406f9a:	e771      	b.n	406e80 <_dtoa_r+0x9b8>
  406f9c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406fa0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  406fa4:	f7ff bb8a 	b.w	4066bc <_dtoa_r+0x1f4>
  406fa8:	9804      	ldr	r0, [sp, #16]
  406faa:	f7ff babb 	b.w	406524 <_dtoa_r+0x5c>
  406fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406fb2:	970c      	str	r7, [sp, #48]	; 0x30
  406fb4:	1afb      	subs	r3, r7, r3
  406fb6:	441a      	add	r2, r3
  406fb8:	920d      	str	r2, [sp, #52]	; 0x34
  406fba:	2700      	movs	r7, #0
  406fbc:	e469      	b.n	406892 <_dtoa_r+0x3ca>
  406fbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  406fc2:	f04f 0a02 	mov.w	sl, #2
  406fc6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  406fca:	e657      	b.n	406c7c <_dtoa_r+0x7b4>
  406fcc:	2100      	movs	r1, #0
  406fce:	2301      	movs	r3, #1
  406fd0:	6461      	str	r1, [r4, #68]	; 0x44
  406fd2:	4620      	mov	r0, r4
  406fd4:	9325      	str	r3, [sp, #148]	; 0x94
  406fd6:	f000 ff07 	bl	407de8 <_Balloc>
  406fda:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406fdc:	9004      	str	r0, [sp, #16]
  406fde:	6420      	str	r0, [r4, #64]	; 0x40
  406fe0:	930a      	str	r3, [sp, #40]	; 0x28
  406fe2:	930f      	str	r3, [sp, #60]	; 0x3c
  406fe4:	e629      	b.n	406c3a <_dtoa_r+0x772>
  406fe6:	2a00      	cmp	r2, #0
  406fe8:	46d0      	mov	r8, sl
  406fea:	f8cd b018 	str.w	fp, [sp, #24]
  406fee:	469a      	mov	sl, r3
  406ff0:	dd11      	ble.n	407016 <_dtoa_r+0xb4e>
  406ff2:	4649      	mov	r1, r9
  406ff4:	2201      	movs	r2, #1
  406ff6:	4620      	mov	r0, r4
  406ff8:	f001 f8a2 	bl	408140 <__lshift>
  406ffc:	4641      	mov	r1, r8
  406ffe:	4681      	mov	r9, r0
  407000:	f001 f8f0 	bl	4081e4 <__mcmp>
  407004:	2800      	cmp	r0, #0
  407006:	f340 8146 	ble.w	407296 <_dtoa_r+0xdce>
  40700a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40700e:	f000 8106 	beq.w	40721e <_dtoa_r+0xd56>
  407012:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  407016:	46b3      	mov	fp, r6
  407018:	f887 a000 	strb.w	sl, [r7]
  40701c:	1c7d      	adds	r5, r7, #1
  40701e:	9e06      	ldr	r6, [sp, #24]
  407020:	e5d2      	b.n	406bc8 <_dtoa_r+0x700>
  407022:	d104      	bne.n	40702e <_dtoa_r+0xb66>
  407024:	f01a 0f01 	tst.w	sl, #1
  407028:	d001      	beq.n	40702e <_dtoa_r+0xb66>
  40702a:	e5bd      	b.n	406ba8 <_dtoa_r+0x6e0>
  40702c:	4615      	mov	r5, r2
  40702e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407032:	2b30      	cmp	r3, #48	; 0x30
  407034:	f105 32ff 	add.w	r2, r5, #4294967295
  407038:	d0f8      	beq.n	40702c <_dtoa_r+0xb64>
  40703a:	e5c5      	b.n	406bc8 <_dtoa_r+0x700>
  40703c:	9904      	ldr	r1, [sp, #16]
  40703e:	2230      	movs	r2, #48	; 0x30
  407040:	700a      	strb	r2, [r1, #0]
  407042:	9a02      	ldr	r2, [sp, #8]
  407044:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407048:	3201      	adds	r2, #1
  40704a:	9202      	str	r2, [sp, #8]
  40704c:	f7ff bbfc 	b.w	406848 <_dtoa_r+0x380>
  407050:	f000 80bb 	beq.w	4071ca <_dtoa_r+0xd02>
  407054:	9b02      	ldr	r3, [sp, #8]
  407056:	425d      	negs	r5, r3
  407058:	4b84      	ldr	r3, [pc, #528]	; (40726c <_dtoa_r+0xda4>)
  40705a:	f005 020f 	and.w	r2, r5, #15
  40705e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407062:	e9d3 2300 	ldrd	r2, r3, [r3]
  407066:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40706a:	f7fc faad 	bl	4035c8 <__aeabi_dmul>
  40706e:	112d      	asrs	r5, r5, #4
  407070:	4607      	mov	r7, r0
  407072:	4688      	mov	r8, r1
  407074:	f000 812c 	beq.w	4072d0 <_dtoa_r+0xe08>
  407078:	4e7d      	ldr	r6, [pc, #500]	; (407270 <_dtoa_r+0xda8>)
  40707a:	f04f 0a02 	mov.w	sl, #2
  40707e:	07eb      	lsls	r3, r5, #31
  407080:	d509      	bpl.n	407096 <_dtoa_r+0xbce>
  407082:	4638      	mov	r0, r7
  407084:	4641      	mov	r1, r8
  407086:	e9d6 2300 	ldrd	r2, r3, [r6]
  40708a:	f7fc fa9d 	bl	4035c8 <__aeabi_dmul>
  40708e:	f10a 0a01 	add.w	sl, sl, #1
  407092:	4607      	mov	r7, r0
  407094:	4688      	mov	r8, r1
  407096:	106d      	asrs	r5, r5, #1
  407098:	f106 0608 	add.w	r6, r6, #8
  40709c:	d1ef      	bne.n	40707e <_dtoa_r+0xbb6>
  40709e:	e608      	b.n	406cb2 <_dtoa_r+0x7ea>
  4070a0:	6871      	ldr	r1, [r6, #4]
  4070a2:	4620      	mov	r0, r4
  4070a4:	f000 fea0 	bl	407de8 <_Balloc>
  4070a8:	6933      	ldr	r3, [r6, #16]
  4070aa:	3302      	adds	r3, #2
  4070ac:	009a      	lsls	r2, r3, #2
  4070ae:	4605      	mov	r5, r0
  4070b0:	f106 010c 	add.w	r1, r6, #12
  4070b4:	300c      	adds	r0, #12
  4070b6:	f7fd fb49 	bl	40474c <memcpy>
  4070ba:	4629      	mov	r1, r5
  4070bc:	2201      	movs	r2, #1
  4070be:	4620      	mov	r0, r4
  4070c0:	f001 f83e 	bl	408140 <__lshift>
  4070c4:	9006      	str	r0, [sp, #24]
  4070c6:	e4b5      	b.n	406a34 <_dtoa_r+0x56c>
  4070c8:	2b39      	cmp	r3, #57	; 0x39
  4070ca:	f8cd b018 	str.w	fp, [sp, #24]
  4070ce:	46d0      	mov	r8, sl
  4070d0:	f000 80a5 	beq.w	40721e <_dtoa_r+0xd56>
  4070d4:	f103 0a01 	add.w	sl, r3, #1
  4070d8:	46b3      	mov	fp, r6
  4070da:	f887 a000 	strb.w	sl, [r7]
  4070de:	1c7d      	adds	r5, r7, #1
  4070e0:	9e06      	ldr	r6, [sp, #24]
  4070e2:	e571      	b.n	406bc8 <_dtoa_r+0x700>
  4070e4:	465a      	mov	r2, fp
  4070e6:	46d0      	mov	r8, sl
  4070e8:	46b3      	mov	fp, r6
  4070ea:	469a      	mov	sl, r3
  4070ec:	4616      	mov	r6, r2
  4070ee:	e54f      	b.n	406b90 <_dtoa_r+0x6c8>
  4070f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4070f2:	495e      	ldr	r1, [pc, #376]	; (40726c <_dtoa_r+0xda4>)
  4070f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4070f8:	462a      	mov	r2, r5
  4070fa:	4633      	mov	r3, r6
  4070fc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  407100:	f7fc fa62 	bl	4035c8 <__aeabi_dmul>
  407104:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  407108:	4638      	mov	r0, r7
  40710a:	4641      	mov	r1, r8
  40710c:	f001 fe56 	bl	408dbc <__aeabi_d2iz>
  407110:	4605      	mov	r5, r0
  407112:	f7fc f9f3 	bl	4034fc <__aeabi_i2d>
  407116:	460b      	mov	r3, r1
  407118:	4602      	mov	r2, r0
  40711a:	4641      	mov	r1, r8
  40711c:	4638      	mov	r0, r7
  40711e:	f7fc f89f 	bl	403260 <__aeabi_dsub>
  407122:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407124:	460f      	mov	r7, r1
  407126:	9904      	ldr	r1, [sp, #16]
  407128:	3530      	adds	r5, #48	; 0x30
  40712a:	2b01      	cmp	r3, #1
  40712c:	700d      	strb	r5, [r1, #0]
  40712e:	4606      	mov	r6, r0
  407130:	f101 0501 	add.w	r5, r1, #1
  407134:	d026      	beq.n	407184 <_dtoa_r+0xcbc>
  407136:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407138:	9a04      	ldr	r2, [sp, #16]
  40713a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 407278 <_dtoa_r+0xdb0>
  40713e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  407142:	4413      	add	r3, r2
  407144:	f04f 0a00 	mov.w	sl, #0
  407148:	4699      	mov	r9, r3
  40714a:	4652      	mov	r2, sl
  40714c:	465b      	mov	r3, fp
  40714e:	4630      	mov	r0, r6
  407150:	4639      	mov	r1, r7
  407152:	f7fc fa39 	bl	4035c8 <__aeabi_dmul>
  407156:	460f      	mov	r7, r1
  407158:	4606      	mov	r6, r0
  40715a:	f001 fe2f 	bl	408dbc <__aeabi_d2iz>
  40715e:	4680      	mov	r8, r0
  407160:	f7fc f9cc 	bl	4034fc <__aeabi_i2d>
  407164:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407168:	4602      	mov	r2, r0
  40716a:	460b      	mov	r3, r1
  40716c:	4630      	mov	r0, r6
  40716e:	4639      	mov	r1, r7
  407170:	f7fc f876 	bl	403260 <__aeabi_dsub>
  407174:	f805 8b01 	strb.w	r8, [r5], #1
  407178:	454d      	cmp	r5, r9
  40717a:	4606      	mov	r6, r0
  40717c:	460f      	mov	r7, r1
  40717e:	d1e4      	bne.n	40714a <_dtoa_r+0xc82>
  407180:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407184:	4b3b      	ldr	r3, [pc, #236]	; (407274 <_dtoa_r+0xdac>)
  407186:	2200      	movs	r2, #0
  407188:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40718c:	f7fc f86a 	bl	403264 <__adddf3>
  407190:	4632      	mov	r2, r6
  407192:	463b      	mov	r3, r7
  407194:	f7fc fc8a 	bl	403aac <__aeabi_dcmplt>
  407198:	2800      	cmp	r0, #0
  40719a:	d046      	beq.n	40722a <_dtoa_r+0xd62>
  40719c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40719e:	9302      	str	r3, [sp, #8]
  4071a0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4071a4:	f7ff bb43 	b.w	40682e <_dtoa_r+0x366>
  4071a8:	f04f 0800 	mov.w	r8, #0
  4071ac:	4646      	mov	r6, r8
  4071ae:	e6a9      	b.n	406f04 <_dtoa_r+0xa3c>
  4071b0:	9b08      	ldr	r3, [sp, #32]
  4071b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4071b4:	1a9d      	subs	r5, r3, r2
  4071b6:	2300      	movs	r3, #0
  4071b8:	f7ff bb71 	b.w	40689e <_dtoa_r+0x3d6>
  4071bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4071be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4071c0:	9d08      	ldr	r5, [sp, #32]
  4071c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4071c6:	f7ff bb6a 	b.w	40689e <_dtoa_r+0x3d6>
  4071ca:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4071ce:	f04f 0a02 	mov.w	sl, #2
  4071d2:	e56e      	b.n	406cb2 <_dtoa_r+0x7ea>
  4071d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4071d6:	2b00      	cmp	r3, #0
  4071d8:	f43f aeb8 	beq.w	406f4c <_dtoa_r+0xa84>
  4071dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4071de:	2b00      	cmp	r3, #0
  4071e0:	f77f aede 	ble.w	406fa0 <_dtoa_r+0xad8>
  4071e4:	2200      	movs	r2, #0
  4071e6:	4b24      	ldr	r3, [pc, #144]	; (407278 <_dtoa_r+0xdb0>)
  4071e8:	4638      	mov	r0, r7
  4071ea:	4641      	mov	r1, r8
  4071ec:	f7fc f9ec 	bl	4035c8 <__aeabi_dmul>
  4071f0:	4607      	mov	r7, r0
  4071f2:	4688      	mov	r8, r1
  4071f4:	f10a 0001 	add.w	r0, sl, #1
  4071f8:	f7fc f980 	bl	4034fc <__aeabi_i2d>
  4071fc:	463a      	mov	r2, r7
  4071fe:	4643      	mov	r3, r8
  407200:	f7fc f9e2 	bl	4035c8 <__aeabi_dmul>
  407204:	2200      	movs	r2, #0
  407206:	4b17      	ldr	r3, [pc, #92]	; (407264 <_dtoa_r+0xd9c>)
  407208:	f7fc f82c 	bl	403264 <__adddf3>
  40720c:	9a02      	ldr	r2, [sp, #8]
  40720e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407210:	9312      	str	r3, [sp, #72]	; 0x48
  407212:	3a01      	subs	r2, #1
  407214:	4605      	mov	r5, r0
  407216:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40721a:	9215      	str	r2, [sp, #84]	; 0x54
  40721c:	e56a      	b.n	406cf4 <_dtoa_r+0x82c>
  40721e:	2239      	movs	r2, #57	; 0x39
  407220:	46b3      	mov	fp, r6
  407222:	703a      	strb	r2, [r7, #0]
  407224:	9e06      	ldr	r6, [sp, #24]
  407226:	1c7d      	adds	r5, r7, #1
  407228:	e4c0      	b.n	406bac <_dtoa_r+0x6e4>
  40722a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40722e:	2000      	movs	r0, #0
  407230:	4910      	ldr	r1, [pc, #64]	; (407274 <_dtoa_r+0xdac>)
  407232:	f7fc f815 	bl	403260 <__aeabi_dsub>
  407236:	4632      	mov	r2, r6
  407238:	463b      	mov	r3, r7
  40723a:	f7fc fc55 	bl	403ae8 <__aeabi_dcmpgt>
  40723e:	b908      	cbnz	r0, 407244 <_dtoa_r+0xd7c>
  407240:	e6ae      	b.n	406fa0 <_dtoa_r+0xad8>
  407242:	4615      	mov	r5, r2
  407244:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407248:	2b30      	cmp	r3, #48	; 0x30
  40724a:	f105 32ff 	add.w	r2, r5, #4294967295
  40724e:	d0f8      	beq.n	407242 <_dtoa_r+0xd7a>
  407250:	e5d7      	b.n	406e02 <_dtoa_r+0x93a>
  407252:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407256:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407258:	9302      	str	r3, [sp, #8]
  40725a:	f7ff bae8 	b.w	40682e <_dtoa_r+0x366>
  40725e:	970c      	str	r7, [sp, #48]	; 0x30
  407260:	f7ff bba5 	b.w	4069ae <_dtoa_r+0x4e6>
  407264:	401c0000 	.word	0x401c0000
  407268:	40140000 	.word	0x40140000
  40726c:	004092f8 	.word	0x004092f8
  407270:	004092d0 	.word	0x004092d0
  407274:	3fe00000 	.word	0x3fe00000
  407278:	40240000 	.word	0x40240000
  40727c:	2b39      	cmp	r3, #57	; 0x39
  40727e:	f8cd b018 	str.w	fp, [sp, #24]
  407282:	46d0      	mov	r8, sl
  407284:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407288:	469a      	mov	sl, r3
  40728a:	d0c8      	beq.n	40721e <_dtoa_r+0xd56>
  40728c:	f1bb 0f00 	cmp.w	fp, #0
  407290:	f73f aebf 	bgt.w	407012 <_dtoa_r+0xb4a>
  407294:	e6bf      	b.n	407016 <_dtoa_r+0xb4e>
  407296:	f47f aebe 	bne.w	407016 <_dtoa_r+0xb4e>
  40729a:	f01a 0f01 	tst.w	sl, #1
  40729e:	f43f aeba 	beq.w	407016 <_dtoa_r+0xb4e>
  4072a2:	e6b2      	b.n	40700a <_dtoa_r+0xb42>
  4072a4:	f04f 0800 	mov.w	r8, #0
  4072a8:	4646      	mov	r6, r8
  4072aa:	e5e9      	b.n	406e80 <_dtoa_r+0x9b8>
  4072ac:	4631      	mov	r1, r6
  4072ae:	2300      	movs	r3, #0
  4072b0:	220a      	movs	r2, #10
  4072b2:	4620      	mov	r0, r4
  4072b4:	f000 fdc8 	bl	407e48 <__multadd>
  4072b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4072ba:	2b00      	cmp	r3, #0
  4072bc:	4606      	mov	r6, r0
  4072be:	dd0a      	ble.n	4072d6 <_dtoa_r+0xe0e>
  4072c0:	930a      	str	r3, [sp, #40]	; 0x28
  4072c2:	f7ff bbaa 	b.w	406a1a <_dtoa_r+0x552>
  4072c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4072c8:	2b02      	cmp	r3, #2
  4072ca:	dc23      	bgt.n	407314 <_dtoa_r+0xe4c>
  4072cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4072ce:	e43b      	b.n	406b48 <_dtoa_r+0x680>
  4072d0:	f04f 0a02 	mov.w	sl, #2
  4072d4:	e4ed      	b.n	406cb2 <_dtoa_r+0x7ea>
  4072d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4072d8:	2b02      	cmp	r3, #2
  4072da:	dc1b      	bgt.n	407314 <_dtoa_r+0xe4c>
  4072dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4072de:	e7ef      	b.n	4072c0 <_dtoa_r+0xdf8>
  4072e0:	2500      	movs	r5, #0
  4072e2:	6465      	str	r5, [r4, #68]	; 0x44
  4072e4:	4629      	mov	r1, r5
  4072e6:	4620      	mov	r0, r4
  4072e8:	f000 fd7e 	bl	407de8 <_Balloc>
  4072ec:	f04f 33ff 	mov.w	r3, #4294967295
  4072f0:	930a      	str	r3, [sp, #40]	; 0x28
  4072f2:	930f      	str	r3, [sp, #60]	; 0x3c
  4072f4:	2301      	movs	r3, #1
  4072f6:	9004      	str	r0, [sp, #16]
  4072f8:	9525      	str	r5, [sp, #148]	; 0x94
  4072fa:	6420      	str	r0, [r4, #64]	; 0x40
  4072fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4072fe:	f7ff b9dd 	b.w	4066bc <_dtoa_r+0x1f4>
  407302:	2501      	movs	r5, #1
  407304:	f7ff b9a5 	b.w	406652 <_dtoa_r+0x18a>
  407308:	f43f ab69 	beq.w	4069de <_dtoa_r+0x516>
  40730c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407310:	f7ff bbf9 	b.w	406b06 <_dtoa_r+0x63e>
  407314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407316:	930a      	str	r3, [sp, #40]	; 0x28
  407318:	e5e5      	b.n	406ee6 <_dtoa_r+0xa1e>
  40731a:	bf00      	nop

0040731c <__sflush_r>:
  40731c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407320:	b29a      	uxth	r2, r3
  407322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407326:	460d      	mov	r5, r1
  407328:	0711      	lsls	r1, r2, #28
  40732a:	4680      	mov	r8, r0
  40732c:	d43a      	bmi.n	4073a4 <__sflush_r+0x88>
  40732e:	686a      	ldr	r2, [r5, #4]
  407330:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407334:	2a00      	cmp	r2, #0
  407336:	81ab      	strh	r3, [r5, #12]
  407338:	dd6f      	ble.n	40741a <__sflush_r+0xfe>
  40733a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40733c:	2c00      	cmp	r4, #0
  40733e:	d049      	beq.n	4073d4 <__sflush_r+0xb8>
  407340:	2200      	movs	r2, #0
  407342:	b29b      	uxth	r3, r3
  407344:	f8d8 6000 	ldr.w	r6, [r8]
  407348:	f8c8 2000 	str.w	r2, [r8]
  40734c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407350:	d067      	beq.n	407422 <__sflush_r+0x106>
  407352:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407354:	075f      	lsls	r7, r3, #29
  407356:	d505      	bpl.n	407364 <__sflush_r+0x48>
  407358:	6869      	ldr	r1, [r5, #4]
  40735a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40735c:	1a52      	subs	r2, r2, r1
  40735e:	b10b      	cbz	r3, 407364 <__sflush_r+0x48>
  407360:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407362:	1ad2      	subs	r2, r2, r3
  407364:	2300      	movs	r3, #0
  407366:	69e9      	ldr	r1, [r5, #28]
  407368:	4640      	mov	r0, r8
  40736a:	47a0      	blx	r4
  40736c:	1c44      	adds	r4, r0, #1
  40736e:	d03c      	beq.n	4073ea <__sflush_r+0xce>
  407370:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407374:	692a      	ldr	r2, [r5, #16]
  407376:	602a      	str	r2, [r5, #0]
  407378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40737c:	2200      	movs	r2, #0
  40737e:	81ab      	strh	r3, [r5, #12]
  407380:	04db      	lsls	r3, r3, #19
  407382:	606a      	str	r2, [r5, #4]
  407384:	d447      	bmi.n	407416 <__sflush_r+0xfa>
  407386:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407388:	f8c8 6000 	str.w	r6, [r8]
  40738c:	b311      	cbz	r1, 4073d4 <__sflush_r+0xb8>
  40738e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407392:	4299      	cmp	r1, r3
  407394:	d002      	beq.n	40739c <__sflush_r+0x80>
  407396:	4640      	mov	r0, r8
  407398:	f000 f95a 	bl	407650 <_free_r>
  40739c:	2000      	movs	r0, #0
  40739e:	6328      	str	r0, [r5, #48]	; 0x30
  4073a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073a4:	692e      	ldr	r6, [r5, #16]
  4073a6:	b1ae      	cbz	r6, 4073d4 <__sflush_r+0xb8>
  4073a8:	682c      	ldr	r4, [r5, #0]
  4073aa:	602e      	str	r6, [r5, #0]
  4073ac:	0791      	lsls	r1, r2, #30
  4073ae:	bf0c      	ite	eq
  4073b0:	696b      	ldreq	r3, [r5, #20]
  4073b2:	2300      	movne	r3, #0
  4073b4:	1ba4      	subs	r4, r4, r6
  4073b6:	60ab      	str	r3, [r5, #8]
  4073b8:	e00a      	b.n	4073d0 <__sflush_r+0xb4>
  4073ba:	4623      	mov	r3, r4
  4073bc:	4632      	mov	r2, r6
  4073be:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4073c0:	69e9      	ldr	r1, [r5, #28]
  4073c2:	4640      	mov	r0, r8
  4073c4:	47b8      	blx	r7
  4073c6:	2800      	cmp	r0, #0
  4073c8:	eba4 0400 	sub.w	r4, r4, r0
  4073cc:	4406      	add	r6, r0
  4073ce:	dd04      	ble.n	4073da <__sflush_r+0xbe>
  4073d0:	2c00      	cmp	r4, #0
  4073d2:	dcf2      	bgt.n	4073ba <__sflush_r+0x9e>
  4073d4:	2000      	movs	r0, #0
  4073d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073da:	89ab      	ldrh	r3, [r5, #12]
  4073dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4073e0:	81ab      	strh	r3, [r5, #12]
  4073e2:	f04f 30ff 	mov.w	r0, #4294967295
  4073e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073ea:	f8d8 4000 	ldr.w	r4, [r8]
  4073ee:	2c1d      	cmp	r4, #29
  4073f0:	d8f3      	bhi.n	4073da <__sflush_r+0xbe>
  4073f2:	4b19      	ldr	r3, [pc, #100]	; (407458 <__sflush_r+0x13c>)
  4073f4:	40e3      	lsrs	r3, r4
  4073f6:	43db      	mvns	r3, r3
  4073f8:	f013 0301 	ands.w	r3, r3, #1
  4073fc:	d1ed      	bne.n	4073da <__sflush_r+0xbe>
  4073fe:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  407402:	606b      	str	r3, [r5, #4]
  407404:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407408:	6929      	ldr	r1, [r5, #16]
  40740a:	81ab      	strh	r3, [r5, #12]
  40740c:	04da      	lsls	r2, r3, #19
  40740e:	6029      	str	r1, [r5, #0]
  407410:	d5b9      	bpl.n	407386 <__sflush_r+0x6a>
  407412:	2c00      	cmp	r4, #0
  407414:	d1b7      	bne.n	407386 <__sflush_r+0x6a>
  407416:	6528      	str	r0, [r5, #80]	; 0x50
  407418:	e7b5      	b.n	407386 <__sflush_r+0x6a>
  40741a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40741c:	2a00      	cmp	r2, #0
  40741e:	dc8c      	bgt.n	40733a <__sflush_r+0x1e>
  407420:	e7d8      	b.n	4073d4 <__sflush_r+0xb8>
  407422:	2301      	movs	r3, #1
  407424:	69e9      	ldr	r1, [r5, #28]
  407426:	4640      	mov	r0, r8
  407428:	47a0      	blx	r4
  40742a:	1c43      	adds	r3, r0, #1
  40742c:	4602      	mov	r2, r0
  40742e:	d002      	beq.n	407436 <__sflush_r+0x11a>
  407430:	89ab      	ldrh	r3, [r5, #12]
  407432:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407434:	e78e      	b.n	407354 <__sflush_r+0x38>
  407436:	f8d8 3000 	ldr.w	r3, [r8]
  40743a:	2b00      	cmp	r3, #0
  40743c:	d0f8      	beq.n	407430 <__sflush_r+0x114>
  40743e:	2b1d      	cmp	r3, #29
  407440:	d001      	beq.n	407446 <__sflush_r+0x12a>
  407442:	2b16      	cmp	r3, #22
  407444:	d102      	bne.n	40744c <__sflush_r+0x130>
  407446:	f8c8 6000 	str.w	r6, [r8]
  40744a:	e7c3      	b.n	4073d4 <__sflush_r+0xb8>
  40744c:	89ab      	ldrh	r3, [r5, #12]
  40744e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407452:	81ab      	strh	r3, [r5, #12]
  407454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407458:	20400001 	.word	0x20400001

0040745c <_fflush_r>:
  40745c:	b538      	push	{r3, r4, r5, lr}
  40745e:	460d      	mov	r5, r1
  407460:	4604      	mov	r4, r0
  407462:	b108      	cbz	r0, 407468 <_fflush_r+0xc>
  407464:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407466:	b1bb      	cbz	r3, 407498 <_fflush_r+0x3c>
  407468:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40746c:	b188      	cbz	r0, 407492 <_fflush_r+0x36>
  40746e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407470:	07db      	lsls	r3, r3, #31
  407472:	d401      	bmi.n	407478 <_fflush_r+0x1c>
  407474:	0581      	lsls	r1, r0, #22
  407476:	d517      	bpl.n	4074a8 <_fflush_r+0x4c>
  407478:	4620      	mov	r0, r4
  40747a:	4629      	mov	r1, r5
  40747c:	f7ff ff4e 	bl	40731c <__sflush_r>
  407480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407482:	07da      	lsls	r2, r3, #31
  407484:	4604      	mov	r4, r0
  407486:	d402      	bmi.n	40748e <_fflush_r+0x32>
  407488:	89ab      	ldrh	r3, [r5, #12]
  40748a:	059b      	lsls	r3, r3, #22
  40748c:	d507      	bpl.n	40749e <_fflush_r+0x42>
  40748e:	4620      	mov	r0, r4
  407490:	bd38      	pop	{r3, r4, r5, pc}
  407492:	4604      	mov	r4, r0
  407494:	4620      	mov	r0, r4
  407496:	bd38      	pop	{r3, r4, r5, pc}
  407498:	f000 f838 	bl	40750c <__sinit>
  40749c:	e7e4      	b.n	407468 <_fflush_r+0xc>
  40749e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4074a0:	f000 fb72 	bl	407b88 <__retarget_lock_release_recursive>
  4074a4:	4620      	mov	r0, r4
  4074a6:	bd38      	pop	{r3, r4, r5, pc}
  4074a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4074aa:	f000 fb6b 	bl	407b84 <__retarget_lock_acquire_recursive>
  4074ae:	e7e3      	b.n	407478 <_fflush_r+0x1c>

004074b0 <_cleanup_r>:
  4074b0:	4901      	ldr	r1, [pc, #4]	; (4074b8 <_cleanup_r+0x8>)
  4074b2:	f000 bb2b 	b.w	407b0c <_fwalk_reent>
  4074b6:	bf00      	nop
  4074b8:	004089b9 	.word	0x004089b9

004074bc <std.isra.0>:
  4074bc:	b510      	push	{r4, lr}
  4074be:	2300      	movs	r3, #0
  4074c0:	4604      	mov	r4, r0
  4074c2:	8181      	strh	r1, [r0, #12]
  4074c4:	81c2      	strh	r2, [r0, #14]
  4074c6:	6003      	str	r3, [r0, #0]
  4074c8:	6043      	str	r3, [r0, #4]
  4074ca:	6083      	str	r3, [r0, #8]
  4074cc:	6643      	str	r3, [r0, #100]	; 0x64
  4074ce:	6103      	str	r3, [r0, #16]
  4074d0:	6143      	str	r3, [r0, #20]
  4074d2:	6183      	str	r3, [r0, #24]
  4074d4:	4619      	mov	r1, r3
  4074d6:	2208      	movs	r2, #8
  4074d8:	305c      	adds	r0, #92	; 0x5c
  4074da:	f7fd f9d1 	bl	404880 <memset>
  4074de:	4807      	ldr	r0, [pc, #28]	; (4074fc <std.isra.0+0x40>)
  4074e0:	4907      	ldr	r1, [pc, #28]	; (407500 <std.isra.0+0x44>)
  4074e2:	4a08      	ldr	r2, [pc, #32]	; (407504 <std.isra.0+0x48>)
  4074e4:	4b08      	ldr	r3, [pc, #32]	; (407508 <std.isra.0+0x4c>)
  4074e6:	6220      	str	r0, [r4, #32]
  4074e8:	61e4      	str	r4, [r4, #28]
  4074ea:	6261      	str	r1, [r4, #36]	; 0x24
  4074ec:	62a2      	str	r2, [r4, #40]	; 0x28
  4074ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  4074f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4074f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4074f8:	f000 bb40 	b.w	407b7c <__retarget_lock_init_recursive>
  4074fc:	00408729 	.word	0x00408729
  407500:	0040874d 	.word	0x0040874d
  407504:	00408789 	.word	0x00408789
  407508:	004087a9 	.word	0x004087a9

0040750c <__sinit>:
  40750c:	b510      	push	{r4, lr}
  40750e:	4604      	mov	r4, r0
  407510:	4812      	ldr	r0, [pc, #72]	; (40755c <__sinit+0x50>)
  407512:	f000 fb37 	bl	407b84 <__retarget_lock_acquire_recursive>
  407516:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407518:	b9d2      	cbnz	r2, 407550 <__sinit+0x44>
  40751a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40751e:	4810      	ldr	r0, [pc, #64]	; (407560 <__sinit+0x54>)
  407520:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407524:	2103      	movs	r1, #3
  407526:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40752a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40752c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407530:	6860      	ldr	r0, [r4, #4]
  407532:	2104      	movs	r1, #4
  407534:	f7ff ffc2 	bl	4074bc <std.isra.0>
  407538:	2201      	movs	r2, #1
  40753a:	2109      	movs	r1, #9
  40753c:	68a0      	ldr	r0, [r4, #8]
  40753e:	f7ff ffbd 	bl	4074bc <std.isra.0>
  407542:	2202      	movs	r2, #2
  407544:	2112      	movs	r1, #18
  407546:	68e0      	ldr	r0, [r4, #12]
  407548:	f7ff ffb8 	bl	4074bc <std.isra.0>
  40754c:	2301      	movs	r3, #1
  40754e:	63a3      	str	r3, [r4, #56]	; 0x38
  407550:	4802      	ldr	r0, [pc, #8]	; (40755c <__sinit+0x50>)
  407552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407556:	f000 bb17 	b.w	407b88 <__retarget_lock_release_recursive>
  40755a:	bf00      	nop
  40755c:	20400c24 	.word	0x20400c24
  407560:	004074b1 	.word	0x004074b1

00407564 <__sfp_lock_acquire>:
  407564:	4801      	ldr	r0, [pc, #4]	; (40756c <__sfp_lock_acquire+0x8>)
  407566:	f000 bb0d 	b.w	407b84 <__retarget_lock_acquire_recursive>
  40756a:	bf00      	nop
  40756c:	20400c38 	.word	0x20400c38

00407570 <__sfp_lock_release>:
  407570:	4801      	ldr	r0, [pc, #4]	; (407578 <__sfp_lock_release+0x8>)
  407572:	f000 bb09 	b.w	407b88 <__retarget_lock_release_recursive>
  407576:	bf00      	nop
  407578:	20400c38 	.word	0x20400c38

0040757c <__libc_fini_array>:
  40757c:	b538      	push	{r3, r4, r5, lr}
  40757e:	4c0a      	ldr	r4, [pc, #40]	; (4075a8 <__libc_fini_array+0x2c>)
  407580:	4d0a      	ldr	r5, [pc, #40]	; (4075ac <__libc_fini_array+0x30>)
  407582:	1b64      	subs	r4, r4, r5
  407584:	10a4      	asrs	r4, r4, #2
  407586:	d00a      	beq.n	40759e <__libc_fini_array+0x22>
  407588:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40758c:	3b01      	subs	r3, #1
  40758e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  407592:	3c01      	subs	r4, #1
  407594:	f855 3904 	ldr.w	r3, [r5], #-4
  407598:	4798      	blx	r3
  40759a:	2c00      	cmp	r4, #0
  40759c:	d1f9      	bne.n	407592 <__libc_fini_array+0x16>
  40759e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4075a2:	f001 bfa7 	b.w	4094f4 <_fini>
  4075a6:	bf00      	nop
  4075a8:	00409504 	.word	0x00409504
  4075ac:	00409500 	.word	0x00409500

004075b0 <_malloc_trim_r>:
  4075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4075b2:	4f24      	ldr	r7, [pc, #144]	; (407644 <_malloc_trim_r+0x94>)
  4075b4:	460c      	mov	r4, r1
  4075b6:	4606      	mov	r6, r0
  4075b8:	f7fd f9b0 	bl	40491c <__malloc_lock>
  4075bc:	68bb      	ldr	r3, [r7, #8]
  4075be:	685d      	ldr	r5, [r3, #4]
  4075c0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4075c4:	310f      	adds	r1, #15
  4075c6:	f025 0503 	bic.w	r5, r5, #3
  4075ca:	4429      	add	r1, r5
  4075cc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4075d0:	f021 010f 	bic.w	r1, r1, #15
  4075d4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4075d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4075dc:	db07      	blt.n	4075ee <_malloc_trim_r+0x3e>
  4075de:	2100      	movs	r1, #0
  4075e0:	4630      	mov	r0, r6
  4075e2:	f7fd fa11 	bl	404a08 <_sbrk_r>
  4075e6:	68bb      	ldr	r3, [r7, #8]
  4075e8:	442b      	add	r3, r5
  4075ea:	4298      	cmp	r0, r3
  4075ec:	d004      	beq.n	4075f8 <_malloc_trim_r+0x48>
  4075ee:	4630      	mov	r0, r6
  4075f0:	f7fd f99a 	bl	404928 <__malloc_unlock>
  4075f4:	2000      	movs	r0, #0
  4075f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4075f8:	4261      	negs	r1, r4
  4075fa:	4630      	mov	r0, r6
  4075fc:	f7fd fa04 	bl	404a08 <_sbrk_r>
  407600:	3001      	adds	r0, #1
  407602:	d00d      	beq.n	407620 <_malloc_trim_r+0x70>
  407604:	4b10      	ldr	r3, [pc, #64]	; (407648 <_malloc_trim_r+0x98>)
  407606:	68ba      	ldr	r2, [r7, #8]
  407608:	6819      	ldr	r1, [r3, #0]
  40760a:	1b2d      	subs	r5, r5, r4
  40760c:	f045 0501 	orr.w	r5, r5, #1
  407610:	4630      	mov	r0, r6
  407612:	1b09      	subs	r1, r1, r4
  407614:	6055      	str	r5, [r2, #4]
  407616:	6019      	str	r1, [r3, #0]
  407618:	f7fd f986 	bl	404928 <__malloc_unlock>
  40761c:	2001      	movs	r0, #1
  40761e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407620:	2100      	movs	r1, #0
  407622:	4630      	mov	r0, r6
  407624:	f7fd f9f0 	bl	404a08 <_sbrk_r>
  407628:	68ba      	ldr	r2, [r7, #8]
  40762a:	1a83      	subs	r3, r0, r2
  40762c:	2b0f      	cmp	r3, #15
  40762e:	ddde      	ble.n	4075ee <_malloc_trim_r+0x3e>
  407630:	4c06      	ldr	r4, [pc, #24]	; (40764c <_malloc_trim_r+0x9c>)
  407632:	4905      	ldr	r1, [pc, #20]	; (407648 <_malloc_trim_r+0x98>)
  407634:	6824      	ldr	r4, [r4, #0]
  407636:	f043 0301 	orr.w	r3, r3, #1
  40763a:	1b00      	subs	r0, r0, r4
  40763c:	6053      	str	r3, [r2, #4]
  40763e:	6008      	str	r0, [r1, #0]
  407640:	e7d5      	b.n	4075ee <_malloc_trim_r+0x3e>
  407642:	bf00      	nop
  407644:	20400440 	.word	0x20400440
  407648:	20400b94 	.word	0x20400b94
  40764c:	20400848 	.word	0x20400848

00407650 <_free_r>:
  407650:	2900      	cmp	r1, #0
  407652:	d044      	beq.n	4076de <_free_r+0x8e>
  407654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407658:	460d      	mov	r5, r1
  40765a:	4680      	mov	r8, r0
  40765c:	f7fd f95e 	bl	40491c <__malloc_lock>
  407660:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407664:	4969      	ldr	r1, [pc, #420]	; (40780c <_free_r+0x1bc>)
  407666:	f027 0301 	bic.w	r3, r7, #1
  40766a:	f1a5 0408 	sub.w	r4, r5, #8
  40766e:	18e2      	adds	r2, r4, r3
  407670:	688e      	ldr	r6, [r1, #8]
  407672:	6850      	ldr	r0, [r2, #4]
  407674:	42b2      	cmp	r2, r6
  407676:	f020 0003 	bic.w	r0, r0, #3
  40767a:	d05e      	beq.n	40773a <_free_r+0xea>
  40767c:	07fe      	lsls	r6, r7, #31
  40767e:	6050      	str	r0, [r2, #4]
  407680:	d40b      	bmi.n	40769a <_free_r+0x4a>
  407682:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407686:	1be4      	subs	r4, r4, r7
  407688:	f101 0e08 	add.w	lr, r1, #8
  40768c:	68a5      	ldr	r5, [r4, #8]
  40768e:	4575      	cmp	r5, lr
  407690:	443b      	add	r3, r7
  407692:	d06d      	beq.n	407770 <_free_r+0x120>
  407694:	68e7      	ldr	r7, [r4, #12]
  407696:	60ef      	str	r7, [r5, #12]
  407698:	60bd      	str	r5, [r7, #8]
  40769a:	1815      	adds	r5, r2, r0
  40769c:	686d      	ldr	r5, [r5, #4]
  40769e:	07ed      	lsls	r5, r5, #31
  4076a0:	d53e      	bpl.n	407720 <_free_r+0xd0>
  4076a2:	f043 0201 	orr.w	r2, r3, #1
  4076a6:	6062      	str	r2, [r4, #4]
  4076a8:	50e3      	str	r3, [r4, r3]
  4076aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4076ae:	d217      	bcs.n	4076e0 <_free_r+0x90>
  4076b0:	08db      	lsrs	r3, r3, #3
  4076b2:	1c58      	adds	r0, r3, #1
  4076b4:	109a      	asrs	r2, r3, #2
  4076b6:	684d      	ldr	r5, [r1, #4]
  4076b8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4076bc:	60a7      	str	r7, [r4, #8]
  4076be:	2301      	movs	r3, #1
  4076c0:	4093      	lsls	r3, r2
  4076c2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4076c6:	432b      	orrs	r3, r5
  4076c8:	3a08      	subs	r2, #8
  4076ca:	60e2      	str	r2, [r4, #12]
  4076cc:	604b      	str	r3, [r1, #4]
  4076ce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4076d2:	60fc      	str	r4, [r7, #12]
  4076d4:	4640      	mov	r0, r8
  4076d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4076da:	f7fd b925 	b.w	404928 <__malloc_unlock>
  4076de:	4770      	bx	lr
  4076e0:	0a5a      	lsrs	r2, r3, #9
  4076e2:	2a04      	cmp	r2, #4
  4076e4:	d852      	bhi.n	40778c <_free_r+0x13c>
  4076e6:	099a      	lsrs	r2, r3, #6
  4076e8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4076ec:	00ff      	lsls	r7, r7, #3
  4076ee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4076f2:	19c8      	adds	r0, r1, r7
  4076f4:	59ca      	ldr	r2, [r1, r7]
  4076f6:	3808      	subs	r0, #8
  4076f8:	4290      	cmp	r0, r2
  4076fa:	d04f      	beq.n	40779c <_free_r+0x14c>
  4076fc:	6851      	ldr	r1, [r2, #4]
  4076fe:	f021 0103 	bic.w	r1, r1, #3
  407702:	428b      	cmp	r3, r1
  407704:	d232      	bcs.n	40776c <_free_r+0x11c>
  407706:	6892      	ldr	r2, [r2, #8]
  407708:	4290      	cmp	r0, r2
  40770a:	d1f7      	bne.n	4076fc <_free_r+0xac>
  40770c:	68c3      	ldr	r3, [r0, #12]
  40770e:	60a0      	str	r0, [r4, #8]
  407710:	60e3      	str	r3, [r4, #12]
  407712:	609c      	str	r4, [r3, #8]
  407714:	60c4      	str	r4, [r0, #12]
  407716:	4640      	mov	r0, r8
  407718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40771c:	f7fd b904 	b.w	404928 <__malloc_unlock>
  407720:	6895      	ldr	r5, [r2, #8]
  407722:	4f3b      	ldr	r7, [pc, #236]	; (407810 <_free_r+0x1c0>)
  407724:	42bd      	cmp	r5, r7
  407726:	4403      	add	r3, r0
  407728:	d040      	beq.n	4077ac <_free_r+0x15c>
  40772a:	68d0      	ldr	r0, [r2, #12]
  40772c:	60e8      	str	r0, [r5, #12]
  40772e:	f043 0201 	orr.w	r2, r3, #1
  407732:	6085      	str	r5, [r0, #8]
  407734:	6062      	str	r2, [r4, #4]
  407736:	50e3      	str	r3, [r4, r3]
  407738:	e7b7      	b.n	4076aa <_free_r+0x5a>
  40773a:	07ff      	lsls	r7, r7, #31
  40773c:	4403      	add	r3, r0
  40773e:	d407      	bmi.n	407750 <_free_r+0x100>
  407740:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407744:	1aa4      	subs	r4, r4, r2
  407746:	4413      	add	r3, r2
  407748:	68a0      	ldr	r0, [r4, #8]
  40774a:	68e2      	ldr	r2, [r4, #12]
  40774c:	60c2      	str	r2, [r0, #12]
  40774e:	6090      	str	r0, [r2, #8]
  407750:	4a30      	ldr	r2, [pc, #192]	; (407814 <_free_r+0x1c4>)
  407752:	6812      	ldr	r2, [r2, #0]
  407754:	f043 0001 	orr.w	r0, r3, #1
  407758:	4293      	cmp	r3, r2
  40775a:	6060      	str	r0, [r4, #4]
  40775c:	608c      	str	r4, [r1, #8]
  40775e:	d3b9      	bcc.n	4076d4 <_free_r+0x84>
  407760:	4b2d      	ldr	r3, [pc, #180]	; (407818 <_free_r+0x1c8>)
  407762:	4640      	mov	r0, r8
  407764:	6819      	ldr	r1, [r3, #0]
  407766:	f7ff ff23 	bl	4075b0 <_malloc_trim_r>
  40776a:	e7b3      	b.n	4076d4 <_free_r+0x84>
  40776c:	4610      	mov	r0, r2
  40776e:	e7cd      	b.n	40770c <_free_r+0xbc>
  407770:	1811      	adds	r1, r2, r0
  407772:	6849      	ldr	r1, [r1, #4]
  407774:	07c9      	lsls	r1, r1, #31
  407776:	d444      	bmi.n	407802 <_free_r+0x1b2>
  407778:	6891      	ldr	r1, [r2, #8]
  40777a:	68d2      	ldr	r2, [r2, #12]
  40777c:	60ca      	str	r2, [r1, #12]
  40777e:	4403      	add	r3, r0
  407780:	f043 0001 	orr.w	r0, r3, #1
  407784:	6091      	str	r1, [r2, #8]
  407786:	6060      	str	r0, [r4, #4]
  407788:	50e3      	str	r3, [r4, r3]
  40778a:	e7a3      	b.n	4076d4 <_free_r+0x84>
  40778c:	2a14      	cmp	r2, #20
  40778e:	d816      	bhi.n	4077be <_free_r+0x16e>
  407790:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407794:	00ff      	lsls	r7, r7, #3
  407796:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40779a:	e7aa      	b.n	4076f2 <_free_r+0xa2>
  40779c:	10aa      	asrs	r2, r5, #2
  40779e:	2301      	movs	r3, #1
  4077a0:	684d      	ldr	r5, [r1, #4]
  4077a2:	4093      	lsls	r3, r2
  4077a4:	432b      	orrs	r3, r5
  4077a6:	604b      	str	r3, [r1, #4]
  4077a8:	4603      	mov	r3, r0
  4077aa:	e7b0      	b.n	40770e <_free_r+0xbe>
  4077ac:	f043 0201 	orr.w	r2, r3, #1
  4077b0:	614c      	str	r4, [r1, #20]
  4077b2:	610c      	str	r4, [r1, #16]
  4077b4:	60e5      	str	r5, [r4, #12]
  4077b6:	60a5      	str	r5, [r4, #8]
  4077b8:	6062      	str	r2, [r4, #4]
  4077ba:	50e3      	str	r3, [r4, r3]
  4077bc:	e78a      	b.n	4076d4 <_free_r+0x84>
  4077be:	2a54      	cmp	r2, #84	; 0x54
  4077c0:	d806      	bhi.n	4077d0 <_free_r+0x180>
  4077c2:	0b1a      	lsrs	r2, r3, #12
  4077c4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4077c8:	00ff      	lsls	r7, r7, #3
  4077ca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4077ce:	e790      	b.n	4076f2 <_free_r+0xa2>
  4077d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4077d4:	d806      	bhi.n	4077e4 <_free_r+0x194>
  4077d6:	0bda      	lsrs	r2, r3, #15
  4077d8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4077dc:	00ff      	lsls	r7, r7, #3
  4077de:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4077e2:	e786      	b.n	4076f2 <_free_r+0xa2>
  4077e4:	f240 5054 	movw	r0, #1364	; 0x554
  4077e8:	4282      	cmp	r2, r0
  4077ea:	d806      	bhi.n	4077fa <_free_r+0x1aa>
  4077ec:	0c9a      	lsrs	r2, r3, #18
  4077ee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4077f2:	00ff      	lsls	r7, r7, #3
  4077f4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4077f8:	e77b      	b.n	4076f2 <_free_r+0xa2>
  4077fa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4077fe:	257e      	movs	r5, #126	; 0x7e
  407800:	e777      	b.n	4076f2 <_free_r+0xa2>
  407802:	f043 0101 	orr.w	r1, r3, #1
  407806:	6061      	str	r1, [r4, #4]
  407808:	6013      	str	r3, [r2, #0]
  40780a:	e763      	b.n	4076d4 <_free_r+0x84>
  40780c:	20400440 	.word	0x20400440
  407810:	20400448 	.word	0x20400448
  407814:	2040084c 	.word	0x2040084c
  407818:	20400bc4 	.word	0x20400bc4

0040781c <__sfvwrite_r>:
  40781c:	6893      	ldr	r3, [r2, #8]
  40781e:	2b00      	cmp	r3, #0
  407820:	d073      	beq.n	40790a <__sfvwrite_r+0xee>
  407822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407826:	898b      	ldrh	r3, [r1, #12]
  407828:	b083      	sub	sp, #12
  40782a:	460c      	mov	r4, r1
  40782c:	0719      	lsls	r1, r3, #28
  40782e:	9000      	str	r0, [sp, #0]
  407830:	4616      	mov	r6, r2
  407832:	d526      	bpl.n	407882 <__sfvwrite_r+0x66>
  407834:	6922      	ldr	r2, [r4, #16]
  407836:	b322      	cbz	r2, 407882 <__sfvwrite_r+0x66>
  407838:	f013 0002 	ands.w	r0, r3, #2
  40783c:	6835      	ldr	r5, [r6, #0]
  40783e:	d02c      	beq.n	40789a <__sfvwrite_r+0x7e>
  407840:	f04f 0900 	mov.w	r9, #0
  407844:	4fb0      	ldr	r7, [pc, #704]	; (407b08 <__sfvwrite_r+0x2ec>)
  407846:	46c8      	mov	r8, r9
  407848:	46b2      	mov	sl, r6
  40784a:	45b8      	cmp	r8, r7
  40784c:	4643      	mov	r3, r8
  40784e:	464a      	mov	r2, r9
  407850:	bf28      	it	cs
  407852:	463b      	movcs	r3, r7
  407854:	9800      	ldr	r0, [sp, #0]
  407856:	f1b8 0f00 	cmp.w	r8, #0
  40785a:	d050      	beq.n	4078fe <__sfvwrite_r+0xe2>
  40785c:	69e1      	ldr	r1, [r4, #28]
  40785e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407860:	47b0      	blx	r6
  407862:	2800      	cmp	r0, #0
  407864:	dd58      	ble.n	407918 <__sfvwrite_r+0xfc>
  407866:	f8da 3008 	ldr.w	r3, [sl, #8]
  40786a:	1a1b      	subs	r3, r3, r0
  40786c:	4481      	add	r9, r0
  40786e:	eba8 0800 	sub.w	r8, r8, r0
  407872:	f8ca 3008 	str.w	r3, [sl, #8]
  407876:	2b00      	cmp	r3, #0
  407878:	d1e7      	bne.n	40784a <__sfvwrite_r+0x2e>
  40787a:	2000      	movs	r0, #0
  40787c:	b003      	add	sp, #12
  40787e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407882:	4621      	mov	r1, r4
  407884:	9800      	ldr	r0, [sp, #0]
  407886:	f7fe fd17 	bl	4062b8 <__swsetup_r>
  40788a:	2800      	cmp	r0, #0
  40788c:	f040 8133 	bne.w	407af6 <__sfvwrite_r+0x2da>
  407890:	89a3      	ldrh	r3, [r4, #12]
  407892:	6835      	ldr	r5, [r6, #0]
  407894:	f013 0002 	ands.w	r0, r3, #2
  407898:	d1d2      	bne.n	407840 <__sfvwrite_r+0x24>
  40789a:	f013 0901 	ands.w	r9, r3, #1
  40789e:	d145      	bne.n	40792c <__sfvwrite_r+0x110>
  4078a0:	464f      	mov	r7, r9
  4078a2:	9601      	str	r6, [sp, #4]
  4078a4:	b337      	cbz	r7, 4078f4 <__sfvwrite_r+0xd8>
  4078a6:	059a      	lsls	r2, r3, #22
  4078a8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4078ac:	f140 8083 	bpl.w	4079b6 <__sfvwrite_r+0x19a>
  4078b0:	4547      	cmp	r7, r8
  4078b2:	46c3      	mov	fp, r8
  4078b4:	f0c0 80ab 	bcc.w	407a0e <__sfvwrite_r+0x1f2>
  4078b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4078bc:	f040 80ac 	bne.w	407a18 <__sfvwrite_r+0x1fc>
  4078c0:	6820      	ldr	r0, [r4, #0]
  4078c2:	46ba      	mov	sl, r7
  4078c4:	465a      	mov	r2, fp
  4078c6:	4649      	mov	r1, r9
  4078c8:	f000 fa2a 	bl	407d20 <memmove>
  4078cc:	68a2      	ldr	r2, [r4, #8]
  4078ce:	6823      	ldr	r3, [r4, #0]
  4078d0:	eba2 0208 	sub.w	r2, r2, r8
  4078d4:	445b      	add	r3, fp
  4078d6:	60a2      	str	r2, [r4, #8]
  4078d8:	6023      	str	r3, [r4, #0]
  4078da:	9a01      	ldr	r2, [sp, #4]
  4078dc:	6893      	ldr	r3, [r2, #8]
  4078de:	eba3 030a 	sub.w	r3, r3, sl
  4078e2:	44d1      	add	r9, sl
  4078e4:	eba7 070a 	sub.w	r7, r7, sl
  4078e8:	6093      	str	r3, [r2, #8]
  4078ea:	2b00      	cmp	r3, #0
  4078ec:	d0c5      	beq.n	40787a <__sfvwrite_r+0x5e>
  4078ee:	89a3      	ldrh	r3, [r4, #12]
  4078f0:	2f00      	cmp	r7, #0
  4078f2:	d1d8      	bne.n	4078a6 <__sfvwrite_r+0x8a>
  4078f4:	f8d5 9000 	ldr.w	r9, [r5]
  4078f8:	686f      	ldr	r7, [r5, #4]
  4078fa:	3508      	adds	r5, #8
  4078fc:	e7d2      	b.n	4078a4 <__sfvwrite_r+0x88>
  4078fe:	f8d5 9000 	ldr.w	r9, [r5]
  407902:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407906:	3508      	adds	r5, #8
  407908:	e79f      	b.n	40784a <__sfvwrite_r+0x2e>
  40790a:	2000      	movs	r0, #0
  40790c:	4770      	bx	lr
  40790e:	4621      	mov	r1, r4
  407910:	9800      	ldr	r0, [sp, #0]
  407912:	f7ff fda3 	bl	40745c <_fflush_r>
  407916:	b370      	cbz	r0, 407976 <__sfvwrite_r+0x15a>
  407918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40791c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407920:	f04f 30ff 	mov.w	r0, #4294967295
  407924:	81a3      	strh	r3, [r4, #12]
  407926:	b003      	add	sp, #12
  407928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40792c:	4681      	mov	r9, r0
  40792e:	4633      	mov	r3, r6
  407930:	464e      	mov	r6, r9
  407932:	46a8      	mov	r8, r5
  407934:	469a      	mov	sl, r3
  407936:	464d      	mov	r5, r9
  407938:	b34e      	cbz	r6, 40798e <__sfvwrite_r+0x172>
  40793a:	b380      	cbz	r0, 40799e <__sfvwrite_r+0x182>
  40793c:	6820      	ldr	r0, [r4, #0]
  40793e:	6923      	ldr	r3, [r4, #16]
  407940:	6962      	ldr	r2, [r4, #20]
  407942:	45b1      	cmp	r9, r6
  407944:	46cb      	mov	fp, r9
  407946:	bf28      	it	cs
  407948:	46b3      	movcs	fp, r6
  40794a:	4298      	cmp	r0, r3
  40794c:	465f      	mov	r7, fp
  40794e:	d904      	bls.n	40795a <__sfvwrite_r+0x13e>
  407950:	68a3      	ldr	r3, [r4, #8]
  407952:	4413      	add	r3, r2
  407954:	459b      	cmp	fp, r3
  407956:	f300 80a6 	bgt.w	407aa6 <__sfvwrite_r+0x28a>
  40795a:	4593      	cmp	fp, r2
  40795c:	db4b      	blt.n	4079f6 <__sfvwrite_r+0x1da>
  40795e:	4613      	mov	r3, r2
  407960:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407962:	69e1      	ldr	r1, [r4, #28]
  407964:	9800      	ldr	r0, [sp, #0]
  407966:	462a      	mov	r2, r5
  407968:	47b8      	blx	r7
  40796a:	1e07      	subs	r7, r0, #0
  40796c:	ddd4      	ble.n	407918 <__sfvwrite_r+0xfc>
  40796e:	ebb9 0907 	subs.w	r9, r9, r7
  407972:	d0cc      	beq.n	40790e <__sfvwrite_r+0xf2>
  407974:	2001      	movs	r0, #1
  407976:	f8da 3008 	ldr.w	r3, [sl, #8]
  40797a:	1bdb      	subs	r3, r3, r7
  40797c:	443d      	add	r5, r7
  40797e:	1bf6      	subs	r6, r6, r7
  407980:	f8ca 3008 	str.w	r3, [sl, #8]
  407984:	2b00      	cmp	r3, #0
  407986:	f43f af78 	beq.w	40787a <__sfvwrite_r+0x5e>
  40798a:	2e00      	cmp	r6, #0
  40798c:	d1d5      	bne.n	40793a <__sfvwrite_r+0x11e>
  40798e:	f108 0308 	add.w	r3, r8, #8
  407992:	e913 0060 	ldmdb	r3, {r5, r6}
  407996:	4698      	mov	r8, r3
  407998:	3308      	adds	r3, #8
  40799a:	2e00      	cmp	r6, #0
  40799c:	d0f9      	beq.n	407992 <__sfvwrite_r+0x176>
  40799e:	4632      	mov	r2, r6
  4079a0:	210a      	movs	r1, #10
  4079a2:	4628      	mov	r0, r5
  4079a4:	f000 f96c 	bl	407c80 <memchr>
  4079a8:	2800      	cmp	r0, #0
  4079aa:	f000 80a1 	beq.w	407af0 <__sfvwrite_r+0x2d4>
  4079ae:	3001      	adds	r0, #1
  4079b0:	eba0 0905 	sub.w	r9, r0, r5
  4079b4:	e7c2      	b.n	40793c <__sfvwrite_r+0x120>
  4079b6:	6820      	ldr	r0, [r4, #0]
  4079b8:	6923      	ldr	r3, [r4, #16]
  4079ba:	4298      	cmp	r0, r3
  4079bc:	d802      	bhi.n	4079c4 <__sfvwrite_r+0x1a8>
  4079be:	6963      	ldr	r3, [r4, #20]
  4079c0:	429f      	cmp	r7, r3
  4079c2:	d25d      	bcs.n	407a80 <__sfvwrite_r+0x264>
  4079c4:	45b8      	cmp	r8, r7
  4079c6:	bf28      	it	cs
  4079c8:	46b8      	movcs	r8, r7
  4079ca:	4642      	mov	r2, r8
  4079cc:	4649      	mov	r1, r9
  4079ce:	f000 f9a7 	bl	407d20 <memmove>
  4079d2:	68a3      	ldr	r3, [r4, #8]
  4079d4:	6822      	ldr	r2, [r4, #0]
  4079d6:	eba3 0308 	sub.w	r3, r3, r8
  4079da:	4442      	add	r2, r8
  4079dc:	60a3      	str	r3, [r4, #8]
  4079de:	6022      	str	r2, [r4, #0]
  4079e0:	b10b      	cbz	r3, 4079e6 <__sfvwrite_r+0x1ca>
  4079e2:	46c2      	mov	sl, r8
  4079e4:	e779      	b.n	4078da <__sfvwrite_r+0xbe>
  4079e6:	4621      	mov	r1, r4
  4079e8:	9800      	ldr	r0, [sp, #0]
  4079ea:	f7ff fd37 	bl	40745c <_fflush_r>
  4079ee:	2800      	cmp	r0, #0
  4079f0:	d192      	bne.n	407918 <__sfvwrite_r+0xfc>
  4079f2:	46c2      	mov	sl, r8
  4079f4:	e771      	b.n	4078da <__sfvwrite_r+0xbe>
  4079f6:	465a      	mov	r2, fp
  4079f8:	4629      	mov	r1, r5
  4079fa:	f000 f991 	bl	407d20 <memmove>
  4079fe:	68a2      	ldr	r2, [r4, #8]
  407a00:	6823      	ldr	r3, [r4, #0]
  407a02:	eba2 020b 	sub.w	r2, r2, fp
  407a06:	445b      	add	r3, fp
  407a08:	60a2      	str	r2, [r4, #8]
  407a0a:	6023      	str	r3, [r4, #0]
  407a0c:	e7af      	b.n	40796e <__sfvwrite_r+0x152>
  407a0e:	6820      	ldr	r0, [r4, #0]
  407a10:	46b8      	mov	r8, r7
  407a12:	46ba      	mov	sl, r7
  407a14:	46bb      	mov	fp, r7
  407a16:	e755      	b.n	4078c4 <__sfvwrite_r+0xa8>
  407a18:	6962      	ldr	r2, [r4, #20]
  407a1a:	6820      	ldr	r0, [r4, #0]
  407a1c:	6921      	ldr	r1, [r4, #16]
  407a1e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407a22:	eba0 0a01 	sub.w	sl, r0, r1
  407a26:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  407a2a:	f10a 0001 	add.w	r0, sl, #1
  407a2e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407a32:	4438      	add	r0, r7
  407a34:	4540      	cmp	r0, r8
  407a36:	4642      	mov	r2, r8
  407a38:	bf84      	itt	hi
  407a3a:	4680      	movhi	r8, r0
  407a3c:	4642      	movhi	r2, r8
  407a3e:	055b      	lsls	r3, r3, #21
  407a40:	d544      	bpl.n	407acc <__sfvwrite_r+0x2b0>
  407a42:	4611      	mov	r1, r2
  407a44:	9800      	ldr	r0, [sp, #0]
  407a46:	f7fc fbd1 	bl	4041ec <_malloc_r>
  407a4a:	4683      	mov	fp, r0
  407a4c:	2800      	cmp	r0, #0
  407a4e:	d055      	beq.n	407afc <__sfvwrite_r+0x2e0>
  407a50:	4652      	mov	r2, sl
  407a52:	6921      	ldr	r1, [r4, #16]
  407a54:	f7fc fe7a 	bl	40474c <memcpy>
  407a58:	89a3      	ldrh	r3, [r4, #12]
  407a5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407a62:	81a3      	strh	r3, [r4, #12]
  407a64:	eb0b 000a 	add.w	r0, fp, sl
  407a68:	eba8 030a 	sub.w	r3, r8, sl
  407a6c:	f8c4 b010 	str.w	fp, [r4, #16]
  407a70:	f8c4 8014 	str.w	r8, [r4, #20]
  407a74:	6020      	str	r0, [r4, #0]
  407a76:	60a3      	str	r3, [r4, #8]
  407a78:	46b8      	mov	r8, r7
  407a7a:	46ba      	mov	sl, r7
  407a7c:	46bb      	mov	fp, r7
  407a7e:	e721      	b.n	4078c4 <__sfvwrite_r+0xa8>
  407a80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407a84:	42b9      	cmp	r1, r7
  407a86:	bf28      	it	cs
  407a88:	4639      	movcs	r1, r7
  407a8a:	464a      	mov	r2, r9
  407a8c:	fb91 f1f3 	sdiv	r1, r1, r3
  407a90:	9800      	ldr	r0, [sp, #0]
  407a92:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407a94:	fb03 f301 	mul.w	r3, r3, r1
  407a98:	69e1      	ldr	r1, [r4, #28]
  407a9a:	47b0      	blx	r6
  407a9c:	f1b0 0a00 	subs.w	sl, r0, #0
  407aa0:	f73f af1b 	bgt.w	4078da <__sfvwrite_r+0xbe>
  407aa4:	e738      	b.n	407918 <__sfvwrite_r+0xfc>
  407aa6:	461a      	mov	r2, r3
  407aa8:	4629      	mov	r1, r5
  407aaa:	9301      	str	r3, [sp, #4]
  407aac:	f000 f938 	bl	407d20 <memmove>
  407ab0:	6822      	ldr	r2, [r4, #0]
  407ab2:	9b01      	ldr	r3, [sp, #4]
  407ab4:	9800      	ldr	r0, [sp, #0]
  407ab6:	441a      	add	r2, r3
  407ab8:	6022      	str	r2, [r4, #0]
  407aba:	4621      	mov	r1, r4
  407abc:	f7ff fcce 	bl	40745c <_fflush_r>
  407ac0:	9b01      	ldr	r3, [sp, #4]
  407ac2:	2800      	cmp	r0, #0
  407ac4:	f47f af28 	bne.w	407918 <__sfvwrite_r+0xfc>
  407ac8:	461f      	mov	r7, r3
  407aca:	e750      	b.n	40796e <__sfvwrite_r+0x152>
  407acc:	9800      	ldr	r0, [sp, #0]
  407ace:	f000 fc85 	bl	4083dc <_realloc_r>
  407ad2:	4683      	mov	fp, r0
  407ad4:	2800      	cmp	r0, #0
  407ad6:	d1c5      	bne.n	407a64 <__sfvwrite_r+0x248>
  407ad8:	9d00      	ldr	r5, [sp, #0]
  407ada:	6921      	ldr	r1, [r4, #16]
  407adc:	4628      	mov	r0, r5
  407ade:	f7ff fdb7 	bl	407650 <_free_r>
  407ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407ae6:	220c      	movs	r2, #12
  407ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407aec:	602a      	str	r2, [r5, #0]
  407aee:	e715      	b.n	40791c <__sfvwrite_r+0x100>
  407af0:	f106 0901 	add.w	r9, r6, #1
  407af4:	e722      	b.n	40793c <__sfvwrite_r+0x120>
  407af6:	f04f 30ff 	mov.w	r0, #4294967295
  407afa:	e6bf      	b.n	40787c <__sfvwrite_r+0x60>
  407afc:	9a00      	ldr	r2, [sp, #0]
  407afe:	230c      	movs	r3, #12
  407b00:	6013      	str	r3, [r2, #0]
  407b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b06:	e709      	b.n	40791c <__sfvwrite_r+0x100>
  407b08:	7ffffc00 	.word	0x7ffffc00

00407b0c <_fwalk_reent>:
  407b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407b10:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407b14:	d01f      	beq.n	407b56 <_fwalk_reent+0x4a>
  407b16:	4688      	mov	r8, r1
  407b18:	4606      	mov	r6, r0
  407b1a:	f04f 0900 	mov.w	r9, #0
  407b1e:	687d      	ldr	r5, [r7, #4]
  407b20:	68bc      	ldr	r4, [r7, #8]
  407b22:	3d01      	subs	r5, #1
  407b24:	d411      	bmi.n	407b4a <_fwalk_reent+0x3e>
  407b26:	89a3      	ldrh	r3, [r4, #12]
  407b28:	2b01      	cmp	r3, #1
  407b2a:	f105 35ff 	add.w	r5, r5, #4294967295
  407b2e:	d908      	bls.n	407b42 <_fwalk_reent+0x36>
  407b30:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407b34:	3301      	adds	r3, #1
  407b36:	4621      	mov	r1, r4
  407b38:	4630      	mov	r0, r6
  407b3a:	d002      	beq.n	407b42 <_fwalk_reent+0x36>
  407b3c:	47c0      	blx	r8
  407b3e:	ea49 0900 	orr.w	r9, r9, r0
  407b42:	1c6b      	adds	r3, r5, #1
  407b44:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407b48:	d1ed      	bne.n	407b26 <_fwalk_reent+0x1a>
  407b4a:	683f      	ldr	r7, [r7, #0]
  407b4c:	2f00      	cmp	r7, #0
  407b4e:	d1e6      	bne.n	407b1e <_fwalk_reent+0x12>
  407b50:	4648      	mov	r0, r9
  407b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407b56:	46b9      	mov	r9, r7
  407b58:	4648      	mov	r0, r9
  407b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407b5e:	bf00      	nop

00407b60 <_localeconv_r>:
  407b60:	4a04      	ldr	r2, [pc, #16]	; (407b74 <_localeconv_r+0x14>)
  407b62:	4b05      	ldr	r3, [pc, #20]	; (407b78 <_localeconv_r+0x18>)
  407b64:	6812      	ldr	r2, [r2, #0]
  407b66:	6b50      	ldr	r0, [r2, #52]	; 0x34
  407b68:	2800      	cmp	r0, #0
  407b6a:	bf08      	it	eq
  407b6c:	4618      	moveq	r0, r3
  407b6e:	30f0      	adds	r0, #240	; 0xf0
  407b70:	4770      	bx	lr
  407b72:	bf00      	nop
  407b74:	20400010 	.word	0x20400010
  407b78:	20400854 	.word	0x20400854

00407b7c <__retarget_lock_init_recursive>:
  407b7c:	4770      	bx	lr
  407b7e:	bf00      	nop

00407b80 <__retarget_lock_close_recursive>:
  407b80:	4770      	bx	lr
  407b82:	bf00      	nop

00407b84 <__retarget_lock_acquire_recursive>:
  407b84:	4770      	bx	lr
  407b86:	bf00      	nop

00407b88 <__retarget_lock_release_recursive>:
  407b88:	4770      	bx	lr
  407b8a:	bf00      	nop

00407b8c <__swhatbuf_r>:
  407b8c:	b570      	push	{r4, r5, r6, lr}
  407b8e:	460c      	mov	r4, r1
  407b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407b94:	2900      	cmp	r1, #0
  407b96:	b090      	sub	sp, #64	; 0x40
  407b98:	4615      	mov	r5, r2
  407b9a:	461e      	mov	r6, r3
  407b9c:	db14      	blt.n	407bc8 <__swhatbuf_r+0x3c>
  407b9e:	aa01      	add	r2, sp, #4
  407ba0:	f000 fff0 	bl	408b84 <_fstat_r>
  407ba4:	2800      	cmp	r0, #0
  407ba6:	db0f      	blt.n	407bc8 <__swhatbuf_r+0x3c>
  407ba8:	9a02      	ldr	r2, [sp, #8]
  407baa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407bae:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  407bb2:	fab2 f282 	clz	r2, r2
  407bb6:	0952      	lsrs	r2, r2, #5
  407bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407bbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407bc0:	6032      	str	r2, [r6, #0]
  407bc2:	602b      	str	r3, [r5, #0]
  407bc4:	b010      	add	sp, #64	; 0x40
  407bc6:	bd70      	pop	{r4, r5, r6, pc}
  407bc8:	89a2      	ldrh	r2, [r4, #12]
  407bca:	2300      	movs	r3, #0
  407bcc:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407bd0:	6033      	str	r3, [r6, #0]
  407bd2:	d004      	beq.n	407bde <__swhatbuf_r+0x52>
  407bd4:	2240      	movs	r2, #64	; 0x40
  407bd6:	4618      	mov	r0, r3
  407bd8:	602a      	str	r2, [r5, #0]
  407bda:	b010      	add	sp, #64	; 0x40
  407bdc:	bd70      	pop	{r4, r5, r6, pc}
  407bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407be2:	602b      	str	r3, [r5, #0]
  407be4:	b010      	add	sp, #64	; 0x40
  407be6:	bd70      	pop	{r4, r5, r6, pc}

00407be8 <__smakebuf_r>:
  407be8:	898a      	ldrh	r2, [r1, #12]
  407bea:	0792      	lsls	r2, r2, #30
  407bec:	460b      	mov	r3, r1
  407bee:	d506      	bpl.n	407bfe <__smakebuf_r+0x16>
  407bf0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407bf4:	2101      	movs	r1, #1
  407bf6:	601a      	str	r2, [r3, #0]
  407bf8:	611a      	str	r2, [r3, #16]
  407bfa:	6159      	str	r1, [r3, #20]
  407bfc:	4770      	bx	lr
  407bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
  407c00:	b083      	sub	sp, #12
  407c02:	ab01      	add	r3, sp, #4
  407c04:	466a      	mov	r2, sp
  407c06:	460c      	mov	r4, r1
  407c08:	4606      	mov	r6, r0
  407c0a:	f7ff ffbf 	bl	407b8c <__swhatbuf_r>
  407c0e:	9900      	ldr	r1, [sp, #0]
  407c10:	4605      	mov	r5, r0
  407c12:	4630      	mov	r0, r6
  407c14:	f7fc faea 	bl	4041ec <_malloc_r>
  407c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c1c:	b1d8      	cbz	r0, 407c56 <__smakebuf_r+0x6e>
  407c1e:	9a01      	ldr	r2, [sp, #4]
  407c20:	4f15      	ldr	r7, [pc, #84]	; (407c78 <__smakebuf_r+0x90>)
  407c22:	9900      	ldr	r1, [sp, #0]
  407c24:	63f7      	str	r7, [r6, #60]	; 0x3c
  407c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407c2a:	81a3      	strh	r3, [r4, #12]
  407c2c:	6020      	str	r0, [r4, #0]
  407c2e:	6120      	str	r0, [r4, #16]
  407c30:	6161      	str	r1, [r4, #20]
  407c32:	b91a      	cbnz	r2, 407c3c <__smakebuf_r+0x54>
  407c34:	432b      	orrs	r3, r5
  407c36:	81a3      	strh	r3, [r4, #12]
  407c38:	b003      	add	sp, #12
  407c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407c3c:	4630      	mov	r0, r6
  407c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407c42:	f000 ffb3 	bl	408bac <_isatty_r>
  407c46:	b1a0      	cbz	r0, 407c72 <__smakebuf_r+0x8a>
  407c48:	89a3      	ldrh	r3, [r4, #12]
  407c4a:	f023 0303 	bic.w	r3, r3, #3
  407c4e:	f043 0301 	orr.w	r3, r3, #1
  407c52:	b21b      	sxth	r3, r3
  407c54:	e7ee      	b.n	407c34 <__smakebuf_r+0x4c>
  407c56:	059a      	lsls	r2, r3, #22
  407c58:	d4ee      	bmi.n	407c38 <__smakebuf_r+0x50>
  407c5a:	f023 0303 	bic.w	r3, r3, #3
  407c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407c62:	f043 0302 	orr.w	r3, r3, #2
  407c66:	2101      	movs	r1, #1
  407c68:	81a3      	strh	r3, [r4, #12]
  407c6a:	6022      	str	r2, [r4, #0]
  407c6c:	6122      	str	r2, [r4, #16]
  407c6e:	6161      	str	r1, [r4, #20]
  407c70:	e7e2      	b.n	407c38 <__smakebuf_r+0x50>
  407c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c76:	e7dd      	b.n	407c34 <__smakebuf_r+0x4c>
  407c78:	004074b1 	.word	0x004074b1
  407c7c:	00000000 	.word	0x00000000

00407c80 <memchr>:
  407c80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407c84:	2a10      	cmp	r2, #16
  407c86:	db2b      	blt.n	407ce0 <memchr+0x60>
  407c88:	f010 0f07 	tst.w	r0, #7
  407c8c:	d008      	beq.n	407ca0 <memchr+0x20>
  407c8e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407c92:	3a01      	subs	r2, #1
  407c94:	428b      	cmp	r3, r1
  407c96:	d02d      	beq.n	407cf4 <memchr+0x74>
  407c98:	f010 0f07 	tst.w	r0, #7
  407c9c:	b342      	cbz	r2, 407cf0 <memchr+0x70>
  407c9e:	d1f6      	bne.n	407c8e <memchr+0xe>
  407ca0:	b4f0      	push	{r4, r5, r6, r7}
  407ca2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407ca6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  407caa:	f022 0407 	bic.w	r4, r2, #7
  407cae:	f07f 0700 	mvns.w	r7, #0
  407cb2:	2300      	movs	r3, #0
  407cb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407cb8:	3c08      	subs	r4, #8
  407cba:	ea85 0501 	eor.w	r5, r5, r1
  407cbe:	ea86 0601 	eor.w	r6, r6, r1
  407cc2:	fa85 f547 	uadd8	r5, r5, r7
  407cc6:	faa3 f587 	sel	r5, r3, r7
  407cca:	fa86 f647 	uadd8	r6, r6, r7
  407cce:	faa5 f687 	sel	r6, r5, r7
  407cd2:	b98e      	cbnz	r6, 407cf8 <memchr+0x78>
  407cd4:	d1ee      	bne.n	407cb4 <memchr+0x34>
  407cd6:	bcf0      	pop	{r4, r5, r6, r7}
  407cd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407cdc:	f002 0207 	and.w	r2, r2, #7
  407ce0:	b132      	cbz	r2, 407cf0 <memchr+0x70>
  407ce2:	f810 3b01 	ldrb.w	r3, [r0], #1
  407ce6:	3a01      	subs	r2, #1
  407ce8:	ea83 0301 	eor.w	r3, r3, r1
  407cec:	b113      	cbz	r3, 407cf4 <memchr+0x74>
  407cee:	d1f8      	bne.n	407ce2 <memchr+0x62>
  407cf0:	2000      	movs	r0, #0
  407cf2:	4770      	bx	lr
  407cf4:	3801      	subs	r0, #1
  407cf6:	4770      	bx	lr
  407cf8:	2d00      	cmp	r5, #0
  407cfa:	bf06      	itte	eq
  407cfc:	4635      	moveq	r5, r6
  407cfe:	3803      	subeq	r0, #3
  407d00:	3807      	subne	r0, #7
  407d02:	f015 0f01 	tst.w	r5, #1
  407d06:	d107      	bne.n	407d18 <memchr+0x98>
  407d08:	3001      	adds	r0, #1
  407d0a:	f415 7f80 	tst.w	r5, #256	; 0x100
  407d0e:	bf02      	ittt	eq
  407d10:	3001      	addeq	r0, #1
  407d12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407d16:	3001      	addeq	r0, #1
  407d18:	bcf0      	pop	{r4, r5, r6, r7}
  407d1a:	3801      	subs	r0, #1
  407d1c:	4770      	bx	lr
  407d1e:	bf00      	nop

00407d20 <memmove>:
  407d20:	4288      	cmp	r0, r1
  407d22:	b5f0      	push	{r4, r5, r6, r7, lr}
  407d24:	d90d      	bls.n	407d42 <memmove+0x22>
  407d26:	188b      	adds	r3, r1, r2
  407d28:	4298      	cmp	r0, r3
  407d2a:	d20a      	bcs.n	407d42 <memmove+0x22>
  407d2c:	1884      	adds	r4, r0, r2
  407d2e:	2a00      	cmp	r2, #0
  407d30:	d051      	beq.n	407dd6 <memmove+0xb6>
  407d32:	4622      	mov	r2, r4
  407d34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407d38:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407d3c:	4299      	cmp	r1, r3
  407d3e:	d1f9      	bne.n	407d34 <memmove+0x14>
  407d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407d42:	2a0f      	cmp	r2, #15
  407d44:	d948      	bls.n	407dd8 <memmove+0xb8>
  407d46:	ea41 0300 	orr.w	r3, r1, r0
  407d4a:	079b      	lsls	r3, r3, #30
  407d4c:	d146      	bne.n	407ddc <memmove+0xbc>
  407d4e:	f100 0410 	add.w	r4, r0, #16
  407d52:	f101 0310 	add.w	r3, r1, #16
  407d56:	4615      	mov	r5, r2
  407d58:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407d5c:	f844 6c10 	str.w	r6, [r4, #-16]
  407d60:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407d64:	f844 6c0c 	str.w	r6, [r4, #-12]
  407d68:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407d6c:	f844 6c08 	str.w	r6, [r4, #-8]
  407d70:	3d10      	subs	r5, #16
  407d72:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407d76:	f844 6c04 	str.w	r6, [r4, #-4]
  407d7a:	2d0f      	cmp	r5, #15
  407d7c:	f103 0310 	add.w	r3, r3, #16
  407d80:	f104 0410 	add.w	r4, r4, #16
  407d84:	d8e8      	bhi.n	407d58 <memmove+0x38>
  407d86:	f1a2 0310 	sub.w	r3, r2, #16
  407d8a:	f023 030f 	bic.w	r3, r3, #15
  407d8e:	f002 0e0f 	and.w	lr, r2, #15
  407d92:	3310      	adds	r3, #16
  407d94:	f1be 0f03 	cmp.w	lr, #3
  407d98:	4419      	add	r1, r3
  407d9a:	4403      	add	r3, r0
  407d9c:	d921      	bls.n	407de2 <memmove+0xc2>
  407d9e:	1f1e      	subs	r6, r3, #4
  407da0:	460d      	mov	r5, r1
  407da2:	4674      	mov	r4, lr
  407da4:	3c04      	subs	r4, #4
  407da6:	f855 7b04 	ldr.w	r7, [r5], #4
  407daa:	f846 7f04 	str.w	r7, [r6, #4]!
  407dae:	2c03      	cmp	r4, #3
  407db0:	d8f8      	bhi.n	407da4 <memmove+0x84>
  407db2:	f1ae 0404 	sub.w	r4, lr, #4
  407db6:	f024 0403 	bic.w	r4, r4, #3
  407dba:	3404      	adds	r4, #4
  407dbc:	4421      	add	r1, r4
  407dbe:	4423      	add	r3, r4
  407dc0:	f002 0203 	and.w	r2, r2, #3
  407dc4:	b162      	cbz	r2, 407de0 <memmove+0xc0>
  407dc6:	3b01      	subs	r3, #1
  407dc8:	440a      	add	r2, r1
  407dca:	f811 4b01 	ldrb.w	r4, [r1], #1
  407dce:	f803 4f01 	strb.w	r4, [r3, #1]!
  407dd2:	428a      	cmp	r2, r1
  407dd4:	d1f9      	bne.n	407dca <memmove+0xaa>
  407dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407dd8:	4603      	mov	r3, r0
  407dda:	e7f3      	b.n	407dc4 <memmove+0xa4>
  407ddc:	4603      	mov	r3, r0
  407dde:	e7f2      	b.n	407dc6 <memmove+0xa6>
  407de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407de2:	4672      	mov	r2, lr
  407de4:	e7ee      	b.n	407dc4 <memmove+0xa4>
  407de6:	bf00      	nop

00407de8 <_Balloc>:
  407de8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407dea:	b570      	push	{r4, r5, r6, lr}
  407dec:	4605      	mov	r5, r0
  407dee:	460c      	mov	r4, r1
  407df0:	b14b      	cbz	r3, 407e06 <_Balloc+0x1e>
  407df2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  407df6:	b180      	cbz	r0, 407e1a <_Balloc+0x32>
  407df8:	6802      	ldr	r2, [r0, #0]
  407dfa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  407dfe:	2300      	movs	r3, #0
  407e00:	6103      	str	r3, [r0, #16]
  407e02:	60c3      	str	r3, [r0, #12]
  407e04:	bd70      	pop	{r4, r5, r6, pc}
  407e06:	2221      	movs	r2, #33	; 0x21
  407e08:	2104      	movs	r1, #4
  407e0a:	f000 fd93 	bl	408934 <_calloc_r>
  407e0e:	64e8      	str	r0, [r5, #76]	; 0x4c
  407e10:	4603      	mov	r3, r0
  407e12:	2800      	cmp	r0, #0
  407e14:	d1ed      	bne.n	407df2 <_Balloc+0xa>
  407e16:	2000      	movs	r0, #0
  407e18:	bd70      	pop	{r4, r5, r6, pc}
  407e1a:	2101      	movs	r1, #1
  407e1c:	fa01 f604 	lsl.w	r6, r1, r4
  407e20:	1d72      	adds	r2, r6, #5
  407e22:	4628      	mov	r0, r5
  407e24:	0092      	lsls	r2, r2, #2
  407e26:	f000 fd85 	bl	408934 <_calloc_r>
  407e2a:	2800      	cmp	r0, #0
  407e2c:	d0f3      	beq.n	407e16 <_Balloc+0x2e>
  407e2e:	6044      	str	r4, [r0, #4]
  407e30:	6086      	str	r6, [r0, #8]
  407e32:	e7e4      	b.n	407dfe <_Balloc+0x16>

00407e34 <_Bfree>:
  407e34:	b131      	cbz	r1, 407e44 <_Bfree+0x10>
  407e36:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407e38:	684a      	ldr	r2, [r1, #4]
  407e3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  407e3e:	6008      	str	r0, [r1, #0]
  407e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407e44:	4770      	bx	lr
  407e46:	bf00      	nop

00407e48 <__multadd>:
  407e48:	b5f0      	push	{r4, r5, r6, r7, lr}
  407e4a:	690c      	ldr	r4, [r1, #16]
  407e4c:	b083      	sub	sp, #12
  407e4e:	460d      	mov	r5, r1
  407e50:	4606      	mov	r6, r0
  407e52:	f101 0e14 	add.w	lr, r1, #20
  407e56:	2700      	movs	r7, #0
  407e58:	f8de 0000 	ldr.w	r0, [lr]
  407e5c:	b281      	uxth	r1, r0
  407e5e:	fb02 3301 	mla	r3, r2, r1, r3
  407e62:	0c01      	lsrs	r1, r0, #16
  407e64:	0c18      	lsrs	r0, r3, #16
  407e66:	fb02 0101 	mla	r1, r2, r1, r0
  407e6a:	b29b      	uxth	r3, r3
  407e6c:	3701      	adds	r7, #1
  407e6e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  407e72:	42bc      	cmp	r4, r7
  407e74:	f84e 3b04 	str.w	r3, [lr], #4
  407e78:	ea4f 4311 	mov.w	r3, r1, lsr #16
  407e7c:	dcec      	bgt.n	407e58 <__multadd+0x10>
  407e7e:	b13b      	cbz	r3, 407e90 <__multadd+0x48>
  407e80:	68aa      	ldr	r2, [r5, #8]
  407e82:	4294      	cmp	r4, r2
  407e84:	da07      	bge.n	407e96 <__multadd+0x4e>
  407e86:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  407e8a:	3401      	adds	r4, #1
  407e8c:	6153      	str	r3, [r2, #20]
  407e8e:	612c      	str	r4, [r5, #16]
  407e90:	4628      	mov	r0, r5
  407e92:	b003      	add	sp, #12
  407e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407e96:	6869      	ldr	r1, [r5, #4]
  407e98:	9301      	str	r3, [sp, #4]
  407e9a:	3101      	adds	r1, #1
  407e9c:	4630      	mov	r0, r6
  407e9e:	f7ff ffa3 	bl	407de8 <_Balloc>
  407ea2:	692a      	ldr	r2, [r5, #16]
  407ea4:	3202      	adds	r2, #2
  407ea6:	f105 010c 	add.w	r1, r5, #12
  407eaa:	4607      	mov	r7, r0
  407eac:	0092      	lsls	r2, r2, #2
  407eae:	300c      	adds	r0, #12
  407eb0:	f7fc fc4c 	bl	40474c <memcpy>
  407eb4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407eb6:	6869      	ldr	r1, [r5, #4]
  407eb8:	9b01      	ldr	r3, [sp, #4]
  407eba:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407ebe:	6028      	str	r0, [r5, #0]
  407ec0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407ec4:	463d      	mov	r5, r7
  407ec6:	e7de      	b.n	407e86 <__multadd+0x3e>

00407ec8 <__hi0bits>:
  407ec8:	0c02      	lsrs	r2, r0, #16
  407eca:	0412      	lsls	r2, r2, #16
  407ecc:	4603      	mov	r3, r0
  407ece:	b9b2      	cbnz	r2, 407efe <__hi0bits+0x36>
  407ed0:	0403      	lsls	r3, r0, #16
  407ed2:	2010      	movs	r0, #16
  407ed4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407ed8:	bf04      	itt	eq
  407eda:	021b      	lsleq	r3, r3, #8
  407edc:	3008      	addeq	r0, #8
  407ede:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407ee2:	bf04      	itt	eq
  407ee4:	011b      	lsleq	r3, r3, #4
  407ee6:	3004      	addeq	r0, #4
  407ee8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  407eec:	bf04      	itt	eq
  407eee:	009b      	lsleq	r3, r3, #2
  407ef0:	3002      	addeq	r0, #2
  407ef2:	2b00      	cmp	r3, #0
  407ef4:	db02      	blt.n	407efc <__hi0bits+0x34>
  407ef6:	005b      	lsls	r3, r3, #1
  407ef8:	d403      	bmi.n	407f02 <__hi0bits+0x3a>
  407efa:	2020      	movs	r0, #32
  407efc:	4770      	bx	lr
  407efe:	2000      	movs	r0, #0
  407f00:	e7e8      	b.n	407ed4 <__hi0bits+0xc>
  407f02:	3001      	adds	r0, #1
  407f04:	4770      	bx	lr
  407f06:	bf00      	nop

00407f08 <__lo0bits>:
  407f08:	6803      	ldr	r3, [r0, #0]
  407f0a:	f013 0207 	ands.w	r2, r3, #7
  407f0e:	4601      	mov	r1, r0
  407f10:	d007      	beq.n	407f22 <__lo0bits+0x1a>
  407f12:	07da      	lsls	r2, r3, #31
  407f14:	d421      	bmi.n	407f5a <__lo0bits+0x52>
  407f16:	0798      	lsls	r0, r3, #30
  407f18:	d421      	bmi.n	407f5e <__lo0bits+0x56>
  407f1a:	089b      	lsrs	r3, r3, #2
  407f1c:	600b      	str	r3, [r1, #0]
  407f1e:	2002      	movs	r0, #2
  407f20:	4770      	bx	lr
  407f22:	b298      	uxth	r0, r3
  407f24:	b198      	cbz	r0, 407f4e <__lo0bits+0x46>
  407f26:	4610      	mov	r0, r2
  407f28:	f013 0fff 	tst.w	r3, #255	; 0xff
  407f2c:	bf04      	itt	eq
  407f2e:	0a1b      	lsreq	r3, r3, #8
  407f30:	3008      	addeq	r0, #8
  407f32:	071a      	lsls	r2, r3, #28
  407f34:	bf04      	itt	eq
  407f36:	091b      	lsreq	r3, r3, #4
  407f38:	3004      	addeq	r0, #4
  407f3a:	079a      	lsls	r2, r3, #30
  407f3c:	bf04      	itt	eq
  407f3e:	089b      	lsreq	r3, r3, #2
  407f40:	3002      	addeq	r0, #2
  407f42:	07da      	lsls	r2, r3, #31
  407f44:	d407      	bmi.n	407f56 <__lo0bits+0x4e>
  407f46:	085b      	lsrs	r3, r3, #1
  407f48:	d104      	bne.n	407f54 <__lo0bits+0x4c>
  407f4a:	2020      	movs	r0, #32
  407f4c:	4770      	bx	lr
  407f4e:	0c1b      	lsrs	r3, r3, #16
  407f50:	2010      	movs	r0, #16
  407f52:	e7e9      	b.n	407f28 <__lo0bits+0x20>
  407f54:	3001      	adds	r0, #1
  407f56:	600b      	str	r3, [r1, #0]
  407f58:	4770      	bx	lr
  407f5a:	2000      	movs	r0, #0
  407f5c:	4770      	bx	lr
  407f5e:	085b      	lsrs	r3, r3, #1
  407f60:	600b      	str	r3, [r1, #0]
  407f62:	2001      	movs	r0, #1
  407f64:	4770      	bx	lr
  407f66:	bf00      	nop

00407f68 <__i2b>:
  407f68:	b510      	push	{r4, lr}
  407f6a:	460c      	mov	r4, r1
  407f6c:	2101      	movs	r1, #1
  407f6e:	f7ff ff3b 	bl	407de8 <_Balloc>
  407f72:	2201      	movs	r2, #1
  407f74:	6144      	str	r4, [r0, #20]
  407f76:	6102      	str	r2, [r0, #16]
  407f78:	bd10      	pop	{r4, pc}
  407f7a:	bf00      	nop

00407f7c <__multiply>:
  407f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f80:	690c      	ldr	r4, [r1, #16]
  407f82:	6915      	ldr	r5, [r2, #16]
  407f84:	42ac      	cmp	r4, r5
  407f86:	b083      	sub	sp, #12
  407f88:	468b      	mov	fp, r1
  407f8a:	4616      	mov	r6, r2
  407f8c:	da04      	bge.n	407f98 <__multiply+0x1c>
  407f8e:	4622      	mov	r2, r4
  407f90:	46b3      	mov	fp, r6
  407f92:	462c      	mov	r4, r5
  407f94:	460e      	mov	r6, r1
  407f96:	4615      	mov	r5, r2
  407f98:	f8db 3008 	ldr.w	r3, [fp, #8]
  407f9c:	f8db 1004 	ldr.w	r1, [fp, #4]
  407fa0:	eb04 0805 	add.w	r8, r4, r5
  407fa4:	4598      	cmp	r8, r3
  407fa6:	bfc8      	it	gt
  407fa8:	3101      	addgt	r1, #1
  407faa:	f7ff ff1d 	bl	407de8 <_Balloc>
  407fae:	f100 0914 	add.w	r9, r0, #20
  407fb2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  407fb6:	45d1      	cmp	r9, sl
  407fb8:	9000      	str	r0, [sp, #0]
  407fba:	d205      	bcs.n	407fc8 <__multiply+0x4c>
  407fbc:	464b      	mov	r3, r9
  407fbe:	2100      	movs	r1, #0
  407fc0:	f843 1b04 	str.w	r1, [r3], #4
  407fc4:	459a      	cmp	sl, r3
  407fc6:	d8fb      	bhi.n	407fc0 <__multiply+0x44>
  407fc8:	f106 0c14 	add.w	ip, r6, #20
  407fcc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407fd0:	f10b 0b14 	add.w	fp, fp, #20
  407fd4:	459c      	cmp	ip, r3
  407fd6:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  407fda:	d24c      	bcs.n	408076 <__multiply+0xfa>
  407fdc:	f8cd a004 	str.w	sl, [sp, #4]
  407fe0:	469a      	mov	sl, r3
  407fe2:	f8dc 5000 	ldr.w	r5, [ip]
  407fe6:	b2af      	uxth	r7, r5
  407fe8:	b1ef      	cbz	r7, 408026 <__multiply+0xaa>
  407fea:	2100      	movs	r1, #0
  407fec:	464d      	mov	r5, r9
  407fee:	465e      	mov	r6, fp
  407ff0:	460c      	mov	r4, r1
  407ff2:	f856 2b04 	ldr.w	r2, [r6], #4
  407ff6:	6828      	ldr	r0, [r5, #0]
  407ff8:	b293      	uxth	r3, r2
  407ffa:	b281      	uxth	r1, r0
  407ffc:	fb07 1303 	mla	r3, r7, r3, r1
  408000:	0c12      	lsrs	r2, r2, #16
  408002:	0c01      	lsrs	r1, r0, #16
  408004:	4423      	add	r3, r4
  408006:	fb07 1102 	mla	r1, r7, r2, r1
  40800a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40800e:	b29b      	uxth	r3, r3
  408010:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  408014:	45b6      	cmp	lr, r6
  408016:	f845 3b04 	str.w	r3, [r5], #4
  40801a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40801e:	d8e8      	bhi.n	407ff2 <__multiply+0x76>
  408020:	602c      	str	r4, [r5, #0]
  408022:	f8dc 5000 	ldr.w	r5, [ip]
  408026:	0c2d      	lsrs	r5, r5, #16
  408028:	d01d      	beq.n	408066 <__multiply+0xea>
  40802a:	f8d9 3000 	ldr.w	r3, [r9]
  40802e:	4648      	mov	r0, r9
  408030:	461c      	mov	r4, r3
  408032:	4659      	mov	r1, fp
  408034:	2200      	movs	r2, #0
  408036:	880e      	ldrh	r6, [r1, #0]
  408038:	0c24      	lsrs	r4, r4, #16
  40803a:	fb05 4406 	mla	r4, r5, r6, r4
  40803e:	4422      	add	r2, r4
  408040:	b29b      	uxth	r3, r3
  408042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408046:	f840 3b04 	str.w	r3, [r0], #4
  40804a:	f851 3b04 	ldr.w	r3, [r1], #4
  40804e:	6804      	ldr	r4, [r0, #0]
  408050:	0c1b      	lsrs	r3, r3, #16
  408052:	b2a6      	uxth	r6, r4
  408054:	fb05 6303 	mla	r3, r5, r3, r6
  408058:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40805c:	458e      	cmp	lr, r1
  40805e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  408062:	d8e8      	bhi.n	408036 <__multiply+0xba>
  408064:	6003      	str	r3, [r0, #0]
  408066:	f10c 0c04 	add.w	ip, ip, #4
  40806a:	45e2      	cmp	sl, ip
  40806c:	f109 0904 	add.w	r9, r9, #4
  408070:	d8b7      	bhi.n	407fe2 <__multiply+0x66>
  408072:	f8dd a004 	ldr.w	sl, [sp, #4]
  408076:	f1b8 0f00 	cmp.w	r8, #0
  40807a:	dd0b      	ble.n	408094 <__multiply+0x118>
  40807c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  408080:	f1aa 0a04 	sub.w	sl, sl, #4
  408084:	b11b      	cbz	r3, 40808e <__multiply+0x112>
  408086:	e005      	b.n	408094 <__multiply+0x118>
  408088:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40808c:	b913      	cbnz	r3, 408094 <__multiply+0x118>
  40808e:	f1b8 0801 	subs.w	r8, r8, #1
  408092:	d1f9      	bne.n	408088 <__multiply+0x10c>
  408094:	9800      	ldr	r0, [sp, #0]
  408096:	f8c0 8010 	str.w	r8, [r0, #16]
  40809a:	b003      	add	sp, #12
  40809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004080a0 <__pow5mult>:
  4080a0:	f012 0303 	ands.w	r3, r2, #3
  4080a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4080a8:	4614      	mov	r4, r2
  4080aa:	4607      	mov	r7, r0
  4080ac:	d12e      	bne.n	40810c <__pow5mult+0x6c>
  4080ae:	460d      	mov	r5, r1
  4080b0:	10a4      	asrs	r4, r4, #2
  4080b2:	d01c      	beq.n	4080ee <__pow5mult+0x4e>
  4080b4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4080b6:	b396      	cbz	r6, 40811e <__pow5mult+0x7e>
  4080b8:	07e3      	lsls	r3, r4, #31
  4080ba:	f04f 0800 	mov.w	r8, #0
  4080be:	d406      	bmi.n	4080ce <__pow5mult+0x2e>
  4080c0:	1064      	asrs	r4, r4, #1
  4080c2:	d014      	beq.n	4080ee <__pow5mult+0x4e>
  4080c4:	6830      	ldr	r0, [r6, #0]
  4080c6:	b1a8      	cbz	r0, 4080f4 <__pow5mult+0x54>
  4080c8:	4606      	mov	r6, r0
  4080ca:	07e3      	lsls	r3, r4, #31
  4080cc:	d5f8      	bpl.n	4080c0 <__pow5mult+0x20>
  4080ce:	4632      	mov	r2, r6
  4080d0:	4629      	mov	r1, r5
  4080d2:	4638      	mov	r0, r7
  4080d4:	f7ff ff52 	bl	407f7c <__multiply>
  4080d8:	b1b5      	cbz	r5, 408108 <__pow5mult+0x68>
  4080da:	686a      	ldr	r2, [r5, #4]
  4080dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4080de:	1064      	asrs	r4, r4, #1
  4080e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4080e4:	6029      	str	r1, [r5, #0]
  4080e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4080ea:	4605      	mov	r5, r0
  4080ec:	d1ea      	bne.n	4080c4 <__pow5mult+0x24>
  4080ee:	4628      	mov	r0, r5
  4080f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4080f4:	4632      	mov	r2, r6
  4080f6:	4631      	mov	r1, r6
  4080f8:	4638      	mov	r0, r7
  4080fa:	f7ff ff3f 	bl	407f7c <__multiply>
  4080fe:	6030      	str	r0, [r6, #0]
  408100:	f8c0 8000 	str.w	r8, [r0]
  408104:	4606      	mov	r6, r0
  408106:	e7e0      	b.n	4080ca <__pow5mult+0x2a>
  408108:	4605      	mov	r5, r0
  40810a:	e7d9      	b.n	4080c0 <__pow5mult+0x20>
  40810c:	1e5a      	subs	r2, r3, #1
  40810e:	4d0b      	ldr	r5, [pc, #44]	; (40813c <__pow5mult+0x9c>)
  408110:	2300      	movs	r3, #0
  408112:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  408116:	f7ff fe97 	bl	407e48 <__multadd>
  40811a:	4605      	mov	r5, r0
  40811c:	e7c8      	b.n	4080b0 <__pow5mult+0x10>
  40811e:	2101      	movs	r1, #1
  408120:	4638      	mov	r0, r7
  408122:	f7ff fe61 	bl	407de8 <_Balloc>
  408126:	f240 2171 	movw	r1, #625	; 0x271
  40812a:	2201      	movs	r2, #1
  40812c:	2300      	movs	r3, #0
  40812e:	6141      	str	r1, [r0, #20]
  408130:	6102      	str	r2, [r0, #16]
  408132:	4606      	mov	r6, r0
  408134:	64b8      	str	r0, [r7, #72]	; 0x48
  408136:	6003      	str	r3, [r0, #0]
  408138:	e7be      	b.n	4080b8 <__pow5mult+0x18>
  40813a:	bf00      	nop
  40813c:	004093c0 	.word	0x004093c0

00408140 <__lshift>:
  408140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408144:	4691      	mov	r9, r2
  408146:	690a      	ldr	r2, [r1, #16]
  408148:	688b      	ldr	r3, [r1, #8]
  40814a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40814e:	eb04 0802 	add.w	r8, r4, r2
  408152:	f108 0501 	add.w	r5, r8, #1
  408156:	429d      	cmp	r5, r3
  408158:	460e      	mov	r6, r1
  40815a:	4607      	mov	r7, r0
  40815c:	6849      	ldr	r1, [r1, #4]
  40815e:	dd04      	ble.n	40816a <__lshift+0x2a>
  408160:	005b      	lsls	r3, r3, #1
  408162:	429d      	cmp	r5, r3
  408164:	f101 0101 	add.w	r1, r1, #1
  408168:	dcfa      	bgt.n	408160 <__lshift+0x20>
  40816a:	4638      	mov	r0, r7
  40816c:	f7ff fe3c 	bl	407de8 <_Balloc>
  408170:	2c00      	cmp	r4, #0
  408172:	f100 0314 	add.w	r3, r0, #20
  408176:	dd06      	ble.n	408186 <__lshift+0x46>
  408178:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40817c:	2100      	movs	r1, #0
  40817e:	f843 1b04 	str.w	r1, [r3], #4
  408182:	429a      	cmp	r2, r3
  408184:	d1fb      	bne.n	40817e <__lshift+0x3e>
  408186:	6934      	ldr	r4, [r6, #16]
  408188:	f106 0114 	add.w	r1, r6, #20
  40818c:	f019 091f 	ands.w	r9, r9, #31
  408190:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  408194:	d01d      	beq.n	4081d2 <__lshift+0x92>
  408196:	f1c9 0c20 	rsb	ip, r9, #32
  40819a:	2200      	movs	r2, #0
  40819c:	680c      	ldr	r4, [r1, #0]
  40819e:	fa04 f409 	lsl.w	r4, r4, r9
  4081a2:	4314      	orrs	r4, r2
  4081a4:	f843 4b04 	str.w	r4, [r3], #4
  4081a8:	f851 2b04 	ldr.w	r2, [r1], #4
  4081ac:	458e      	cmp	lr, r1
  4081ae:	fa22 f20c 	lsr.w	r2, r2, ip
  4081b2:	d8f3      	bhi.n	40819c <__lshift+0x5c>
  4081b4:	601a      	str	r2, [r3, #0]
  4081b6:	b10a      	cbz	r2, 4081bc <__lshift+0x7c>
  4081b8:	f108 0502 	add.w	r5, r8, #2
  4081bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4081be:	6872      	ldr	r2, [r6, #4]
  4081c0:	3d01      	subs	r5, #1
  4081c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4081c6:	6105      	str	r5, [r0, #16]
  4081c8:	6031      	str	r1, [r6, #0]
  4081ca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4081ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4081d2:	3b04      	subs	r3, #4
  4081d4:	f851 2b04 	ldr.w	r2, [r1], #4
  4081d8:	f843 2f04 	str.w	r2, [r3, #4]!
  4081dc:	458e      	cmp	lr, r1
  4081de:	d8f9      	bhi.n	4081d4 <__lshift+0x94>
  4081e0:	e7ec      	b.n	4081bc <__lshift+0x7c>
  4081e2:	bf00      	nop

004081e4 <__mcmp>:
  4081e4:	b430      	push	{r4, r5}
  4081e6:	690b      	ldr	r3, [r1, #16]
  4081e8:	4605      	mov	r5, r0
  4081ea:	6900      	ldr	r0, [r0, #16]
  4081ec:	1ac0      	subs	r0, r0, r3
  4081ee:	d10f      	bne.n	408210 <__mcmp+0x2c>
  4081f0:	009b      	lsls	r3, r3, #2
  4081f2:	3514      	adds	r5, #20
  4081f4:	3114      	adds	r1, #20
  4081f6:	4419      	add	r1, r3
  4081f8:	442b      	add	r3, r5
  4081fa:	e001      	b.n	408200 <__mcmp+0x1c>
  4081fc:	429d      	cmp	r5, r3
  4081fe:	d207      	bcs.n	408210 <__mcmp+0x2c>
  408200:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408204:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  408208:	4294      	cmp	r4, r2
  40820a:	d0f7      	beq.n	4081fc <__mcmp+0x18>
  40820c:	d302      	bcc.n	408214 <__mcmp+0x30>
  40820e:	2001      	movs	r0, #1
  408210:	bc30      	pop	{r4, r5}
  408212:	4770      	bx	lr
  408214:	f04f 30ff 	mov.w	r0, #4294967295
  408218:	e7fa      	b.n	408210 <__mcmp+0x2c>
  40821a:	bf00      	nop

0040821c <__mdiff>:
  40821c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408220:	690f      	ldr	r7, [r1, #16]
  408222:	460e      	mov	r6, r1
  408224:	6911      	ldr	r1, [r2, #16]
  408226:	1a7f      	subs	r7, r7, r1
  408228:	2f00      	cmp	r7, #0
  40822a:	4690      	mov	r8, r2
  40822c:	d117      	bne.n	40825e <__mdiff+0x42>
  40822e:	0089      	lsls	r1, r1, #2
  408230:	f106 0514 	add.w	r5, r6, #20
  408234:	f102 0e14 	add.w	lr, r2, #20
  408238:	186b      	adds	r3, r5, r1
  40823a:	4471      	add	r1, lr
  40823c:	e001      	b.n	408242 <__mdiff+0x26>
  40823e:	429d      	cmp	r5, r3
  408240:	d25c      	bcs.n	4082fc <__mdiff+0xe0>
  408242:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  408246:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40824a:	42a2      	cmp	r2, r4
  40824c:	d0f7      	beq.n	40823e <__mdiff+0x22>
  40824e:	d25e      	bcs.n	40830e <__mdiff+0xf2>
  408250:	4633      	mov	r3, r6
  408252:	462c      	mov	r4, r5
  408254:	4646      	mov	r6, r8
  408256:	4675      	mov	r5, lr
  408258:	4698      	mov	r8, r3
  40825a:	2701      	movs	r7, #1
  40825c:	e005      	b.n	40826a <__mdiff+0x4e>
  40825e:	db58      	blt.n	408312 <__mdiff+0xf6>
  408260:	f106 0514 	add.w	r5, r6, #20
  408264:	f108 0414 	add.w	r4, r8, #20
  408268:	2700      	movs	r7, #0
  40826a:	6871      	ldr	r1, [r6, #4]
  40826c:	f7ff fdbc 	bl	407de8 <_Balloc>
  408270:	f8d8 3010 	ldr.w	r3, [r8, #16]
  408274:	6936      	ldr	r6, [r6, #16]
  408276:	60c7      	str	r7, [r0, #12]
  408278:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40827c:	46a6      	mov	lr, r4
  40827e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  408282:	f100 0414 	add.w	r4, r0, #20
  408286:	2300      	movs	r3, #0
  408288:	f85e 1b04 	ldr.w	r1, [lr], #4
  40828c:	f855 8b04 	ldr.w	r8, [r5], #4
  408290:	b28a      	uxth	r2, r1
  408292:	fa13 f388 	uxtah	r3, r3, r8
  408296:	0c09      	lsrs	r1, r1, #16
  408298:	1a9a      	subs	r2, r3, r2
  40829a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40829e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4082a2:	b292      	uxth	r2, r2
  4082a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4082a8:	45f4      	cmp	ip, lr
  4082aa:	f844 2b04 	str.w	r2, [r4], #4
  4082ae:	ea4f 4323 	mov.w	r3, r3, asr #16
  4082b2:	d8e9      	bhi.n	408288 <__mdiff+0x6c>
  4082b4:	42af      	cmp	r7, r5
  4082b6:	d917      	bls.n	4082e8 <__mdiff+0xcc>
  4082b8:	46a4      	mov	ip, r4
  4082ba:	46ae      	mov	lr, r5
  4082bc:	f85e 2b04 	ldr.w	r2, [lr], #4
  4082c0:	fa13 f382 	uxtah	r3, r3, r2
  4082c4:	1419      	asrs	r1, r3, #16
  4082c6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4082ca:	b29b      	uxth	r3, r3
  4082cc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4082d0:	4577      	cmp	r7, lr
  4082d2:	f84c 2b04 	str.w	r2, [ip], #4
  4082d6:	ea4f 4321 	mov.w	r3, r1, asr #16
  4082da:	d8ef      	bhi.n	4082bc <__mdiff+0xa0>
  4082dc:	43ed      	mvns	r5, r5
  4082de:	442f      	add	r7, r5
  4082e0:	f027 0703 	bic.w	r7, r7, #3
  4082e4:	3704      	adds	r7, #4
  4082e6:	443c      	add	r4, r7
  4082e8:	3c04      	subs	r4, #4
  4082ea:	b922      	cbnz	r2, 4082f6 <__mdiff+0xda>
  4082ec:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4082f0:	3e01      	subs	r6, #1
  4082f2:	2b00      	cmp	r3, #0
  4082f4:	d0fa      	beq.n	4082ec <__mdiff+0xd0>
  4082f6:	6106      	str	r6, [r0, #16]
  4082f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4082fc:	2100      	movs	r1, #0
  4082fe:	f7ff fd73 	bl	407de8 <_Balloc>
  408302:	2201      	movs	r2, #1
  408304:	2300      	movs	r3, #0
  408306:	6102      	str	r2, [r0, #16]
  408308:	6143      	str	r3, [r0, #20]
  40830a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40830e:	4674      	mov	r4, lr
  408310:	e7ab      	b.n	40826a <__mdiff+0x4e>
  408312:	4633      	mov	r3, r6
  408314:	f106 0414 	add.w	r4, r6, #20
  408318:	f102 0514 	add.w	r5, r2, #20
  40831c:	4616      	mov	r6, r2
  40831e:	2701      	movs	r7, #1
  408320:	4698      	mov	r8, r3
  408322:	e7a2      	b.n	40826a <__mdiff+0x4e>

00408324 <__d2b>:
  408324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408328:	b082      	sub	sp, #8
  40832a:	2101      	movs	r1, #1
  40832c:	461c      	mov	r4, r3
  40832e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  408332:	4615      	mov	r5, r2
  408334:	9e08      	ldr	r6, [sp, #32]
  408336:	f7ff fd57 	bl	407de8 <_Balloc>
  40833a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40833e:	4680      	mov	r8, r0
  408340:	b10f      	cbz	r7, 408346 <__d2b+0x22>
  408342:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  408346:	9401      	str	r4, [sp, #4]
  408348:	b31d      	cbz	r5, 408392 <__d2b+0x6e>
  40834a:	a802      	add	r0, sp, #8
  40834c:	f840 5d08 	str.w	r5, [r0, #-8]!
  408350:	f7ff fdda 	bl	407f08 <__lo0bits>
  408354:	2800      	cmp	r0, #0
  408356:	d134      	bne.n	4083c2 <__d2b+0x9e>
  408358:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40835c:	f8c8 2014 	str.w	r2, [r8, #20]
  408360:	2b00      	cmp	r3, #0
  408362:	bf0c      	ite	eq
  408364:	2101      	moveq	r1, #1
  408366:	2102      	movne	r1, #2
  408368:	f8c8 3018 	str.w	r3, [r8, #24]
  40836c:	f8c8 1010 	str.w	r1, [r8, #16]
  408370:	b9df      	cbnz	r7, 4083aa <__d2b+0x86>
  408372:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  408376:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40837a:	6030      	str	r0, [r6, #0]
  40837c:	6918      	ldr	r0, [r3, #16]
  40837e:	f7ff fda3 	bl	407ec8 <__hi0bits>
  408382:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408384:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  408388:	6018      	str	r0, [r3, #0]
  40838a:	4640      	mov	r0, r8
  40838c:	b002      	add	sp, #8
  40838e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408392:	a801      	add	r0, sp, #4
  408394:	f7ff fdb8 	bl	407f08 <__lo0bits>
  408398:	9b01      	ldr	r3, [sp, #4]
  40839a:	f8c8 3014 	str.w	r3, [r8, #20]
  40839e:	2101      	movs	r1, #1
  4083a0:	3020      	adds	r0, #32
  4083a2:	f8c8 1010 	str.w	r1, [r8, #16]
  4083a6:	2f00      	cmp	r7, #0
  4083a8:	d0e3      	beq.n	408372 <__d2b+0x4e>
  4083aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4083ac:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4083b0:	4407      	add	r7, r0
  4083b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4083b6:	6037      	str	r7, [r6, #0]
  4083b8:	6018      	str	r0, [r3, #0]
  4083ba:	4640      	mov	r0, r8
  4083bc:	b002      	add	sp, #8
  4083be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4083c2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4083c6:	f1c0 0220 	rsb	r2, r0, #32
  4083ca:	fa03 f202 	lsl.w	r2, r3, r2
  4083ce:	430a      	orrs	r2, r1
  4083d0:	40c3      	lsrs	r3, r0
  4083d2:	9301      	str	r3, [sp, #4]
  4083d4:	f8c8 2014 	str.w	r2, [r8, #20]
  4083d8:	e7c2      	b.n	408360 <__d2b+0x3c>
  4083da:	bf00      	nop

004083dc <_realloc_r>:
  4083dc:	2900      	cmp	r1, #0
  4083de:	f000 8095 	beq.w	40850c <_realloc_r+0x130>
  4083e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083e6:	460d      	mov	r5, r1
  4083e8:	4616      	mov	r6, r2
  4083ea:	b083      	sub	sp, #12
  4083ec:	4680      	mov	r8, r0
  4083ee:	f106 070b 	add.w	r7, r6, #11
  4083f2:	f7fc fa93 	bl	40491c <__malloc_lock>
  4083f6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4083fa:	2f16      	cmp	r7, #22
  4083fc:	f02e 0403 	bic.w	r4, lr, #3
  408400:	f1a5 0908 	sub.w	r9, r5, #8
  408404:	d83c      	bhi.n	408480 <_realloc_r+0xa4>
  408406:	2210      	movs	r2, #16
  408408:	4617      	mov	r7, r2
  40840a:	42be      	cmp	r6, r7
  40840c:	d83d      	bhi.n	40848a <_realloc_r+0xae>
  40840e:	4294      	cmp	r4, r2
  408410:	da43      	bge.n	40849a <_realloc_r+0xbe>
  408412:	4bc4      	ldr	r3, [pc, #784]	; (408724 <_realloc_r+0x348>)
  408414:	6899      	ldr	r1, [r3, #8]
  408416:	eb09 0004 	add.w	r0, r9, r4
  40841a:	4288      	cmp	r0, r1
  40841c:	f000 80b4 	beq.w	408588 <_realloc_r+0x1ac>
  408420:	6843      	ldr	r3, [r0, #4]
  408422:	f023 0101 	bic.w	r1, r3, #1
  408426:	4401      	add	r1, r0
  408428:	6849      	ldr	r1, [r1, #4]
  40842a:	07c9      	lsls	r1, r1, #31
  40842c:	d54c      	bpl.n	4084c8 <_realloc_r+0xec>
  40842e:	f01e 0f01 	tst.w	lr, #1
  408432:	f000 809b 	beq.w	40856c <_realloc_r+0x190>
  408436:	4631      	mov	r1, r6
  408438:	4640      	mov	r0, r8
  40843a:	f7fb fed7 	bl	4041ec <_malloc_r>
  40843e:	4606      	mov	r6, r0
  408440:	2800      	cmp	r0, #0
  408442:	d03a      	beq.n	4084ba <_realloc_r+0xde>
  408444:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408448:	f023 0301 	bic.w	r3, r3, #1
  40844c:	444b      	add	r3, r9
  40844e:	f1a0 0208 	sub.w	r2, r0, #8
  408452:	429a      	cmp	r2, r3
  408454:	f000 8121 	beq.w	40869a <_realloc_r+0x2be>
  408458:	1f22      	subs	r2, r4, #4
  40845a:	2a24      	cmp	r2, #36	; 0x24
  40845c:	f200 8107 	bhi.w	40866e <_realloc_r+0x292>
  408460:	2a13      	cmp	r2, #19
  408462:	f200 80db 	bhi.w	40861c <_realloc_r+0x240>
  408466:	4603      	mov	r3, r0
  408468:	462a      	mov	r2, r5
  40846a:	6811      	ldr	r1, [r2, #0]
  40846c:	6019      	str	r1, [r3, #0]
  40846e:	6851      	ldr	r1, [r2, #4]
  408470:	6059      	str	r1, [r3, #4]
  408472:	6892      	ldr	r2, [r2, #8]
  408474:	609a      	str	r2, [r3, #8]
  408476:	4629      	mov	r1, r5
  408478:	4640      	mov	r0, r8
  40847a:	f7ff f8e9 	bl	407650 <_free_r>
  40847e:	e01c      	b.n	4084ba <_realloc_r+0xde>
  408480:	f027 0707 	bic.w	r7, r7, #7
  408484:	2f00      	cmp	r7, #0
  408486:	463a      	mov	r2, r7
  408488:	dabf      	bge.n	40840a <_realloc_r+0x2e>
  40848a:	2600      	movs	r6, #0
  40848c:	230c      	movs	r3, #12
  40848e:	4630      	mov	r0, r6
  408490:	f8c8 3000 	str.w	r3, [r8]
  408494:	b003      	add	sp, #12
  408496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40849a:	462e      	mov	r6, r5
  40849c:	1be3      	subs	r3, r4, r7
  40849e:	2b0f      	cmp	r3, #15
  4084a0:	d81e      	bhi.n	4084e0 <_realloc_r+0x104>
  4084a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4084a6:	f003 0301 	and.w	r3, r3, #1
  4084aa:	4323      	orrs	r3, r4
  4084ac:	444c      	add	r4, r9
  4084ae:	f8c9 3004 	str.w	r3, [r9, #4]
  4084b2:	6863      	ldr	r3, [r4, #4]
  4084b4:	f043 0301 	orr.w	r3, r3, #1
  4084b8:	6063      	str	r3, [r4, #4]
  4084ba:	4640      	mov	r0, r8
  4084bc:	f7fc fa34 	bl	404928 <__malloc_unlock>
  4084c0:	4630      	mov	r0, r6
  4084c2:	b003      	add	sp, #12
  4084c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4084c8:	f023 0303 	bic.w	r3, r3, #3
  4084cc:	18e1      	adds	r1, r4, r3
  4084ce:	4291      	cmp	r1, r2
  4084d0:	db1f      	blt.n	408512 <_realloc_r+0x136>
  4084d2:	68c3      	ldr	r3, [r0, #12]
  4084d4:	6882      	ldr	r2, [r0, #8]
  4084d6:	462e      	mov	r6, r5
  4084d8:	60d3      	str	r3, [r2, #12]
  4084da:	460c      	mov	r4, r1
  4084dc:	609a      	str	r2, [r3, #8]
  4084de:	e7dd      	b.n	40849c <_realloc_r+0xc0>
  4084e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4084e4:	eb09 0107 	add.w	r1, r9, r7
  4084e8:	f002 0201 	and.w	r2, r2, #1
  4084ec:	444c      	add	r4, r9
  4084ee:	f043 0301 	orr.w	r3, r3, #1
  4084f2:	4317      	orrs	r7, r2
  4084f4:	f8c9 7004 	str.w	r7, [r9, #4]
  4084f8:	604b      	str	r3, [r1, #4]
  4084fa:	6863      	ldr	r3, [r4, #4]
  4084fc:	f043 0301 	orr.w	r3, r3, #1
  408500:	3108      	adds	r1, #8
  408502:	6063      	str	r3, [r4, #4]
  408504:	4640      	mov	r0, r8
  408506:	f7ff f8a3 	bl	407650 <_free_r>
  40850a:	e7d6      	b.n	4084ba <_realloc_r+0xde>
  40850c:	4611      	mov	r1, r2
  40850e:	f7fb be6d 	b.w	4041ec <_malloc_r>
  408512:	f01e 0f01 	tst.w	lr, #1
  408516:	d18e      	bne.n	408436 <_realloc_r+0x5a>
  408518:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40851c:	eba9 0a01 	sub.w	sl, r9, r1
  408520:	f8da 1004 	ldr.w	r1, [sl, #4]
  408524:	f021 0103 	bic.w	r1, r1, #3
  408528:	440b      	add	r3, r1
  40852a:	4423      	add	r3, r4
  40852c:	4293      	cmp	r3, r2
  40852e:	db25      	blt.n	40857c <_realloc_r+0x1a0>
  408530:	68c2      	ldr	r2, [r0, #12]
  408532:	6881      	ldr	r1, [r0, #8]
  408534:	4656      	mov	r6, sl
  408536:	60ca      	str	r2, [r1, #12]
  408538:	6091      	str	r1, [r2, #8]
  40853a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40853e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408542:	1f22      	subs	r2, r4, #4
  408544:	2a24      	cmp	r2, #36	; 0x24
  408546:	60c1      	str	r1, [r0, #12]
  408548:	6088      	str	r0, [r1, #8]
  40854a:	f200 8094 	bhi.w	408676 <_realloc_r+0x29a>
  40854e:	2a13      	cmp	r2, #19
  408550:	d96f      	bls.n	408632 <_realloc_r+0x256>
  408552:	6829      	ldr	r1, [r5, #0]
  408554:	f8ca 1008 	str.w	r1, [sl, #8]
  408558:	6869      	ldr	r1, [r5, #4]
  40855a:	f8ca 100c 	str.w	r1, [sl, #12]
  40855e:	2a1b      	cmp	r2, #27
  408560:	f200 80a2 	bhi.w	4086a8 <_realloc_r+0x2cc>
  408564:	3508      	adds	r5, #8
  408566:	f10a 0210 	add.w	r2, sl, #16
  40856a:	e063      	b.n	408634 <_realloc_r+0x258>
  40856c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408570:	eba9 0a03 	sub.w	sl, r9, r3
  408574:	f8da 1004 	ldr.w	r1, [sl, #4]
  408578:	f021 0103 	bic.w	r1, r1, #3
  40857c:	1863      	adds	r3, r4, r1
  40857e:	4293      	cmp	r3, r2
  408580:	f6ff af59 	blt.w	408436 <_realloc_r+0x5a>
  408584:	4656      	mov	r6, sl
  408586:	e7d8      	b.n	40853a <_realloc_r+0x15e>
  408588:	6841      	ldr	r1, [r0, #4]
  40858a:	f021 0b03 	bic.w	fp, r1, #3
  40858e:	44a3      	add	fp, r4
  408590:	f107 0010 	add.w	r0, r7, #16
  408594:	4583      	cmp	fp, r0
  408596:	da56      	bge.n	408646 <_realloc_r+0x26a>
  408598:	f01e 0f01 	tst.w	lr, #1
  40859c:	f47f af4b 	bne.w	408436 <_realloc_r+0x5a>
  4085a0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4085a4:	eba9 0a01 	sub.w	sl, r9, r1
  4085a8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4085ac:	f021 0103 	bic.w	r1, r1, #3
  4085b0:	448b      	add	fp, r1
  4085b2:	4558      	cmp	r0, fp
  4085b4:	dce2      	bgt.n	40857c <_realloc_r+0x1a0>
  4085b6:	4656      	mov	r6, sl
  4085b8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4085bc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4085c0:	1f22      	subs	r2, r4, #4
  4085c2:	2a24      	cmp	r2, #36	; 0x24
  4085c4:	60c1      	str	r1, [r0, #12]
  4085c6:	6088      	str	r0, [r1, #8]
  4085c8:	f200 808f 	bhi.w	4086ea <_realloc_r+0x30e>
  4085cc:	2a13      	cmp	r2, #19
  4085ce:	f240 808a 	bls.w	4086e6 <_realloc_r+0x30a>
  4085d2:	6829      	ldr	r1, [r5, #0]
  4085d4:	f8ca 1008 	str.w	r1, [sl, #8]
  4085d8:	6869      	ldr	r1, [r5, #4]
  4085da:	f8ca 100c 	str.w	r1, [sl, #12]
  4085de:	2a1b      	cmp	r2, #27
  4085e0:	f200 808a 	bhi.w	4086f8 <_realloc_r+0x31c>
  4085e4:	3508      	adds	r5, #8
  4085e6:	f10a 0210 	add.w	r2, sl, #16
  4085ea:	6829      	ldr	r1, [r5, #0]
  4085ec:	6011      	str	r1, [r2, #0]
  4085ee:	6869      	ldr	r1, [r5, #4]
  4085f0:	6051      	str	r1, [r2, #4]
  4085f2:	68a9      	ldr	r1, [r5, #8]
  4085f4:	6091      	str	r1, [r2, #8]
  4085f6:	eb0a 0107 	add.w	r1, sl, r7
  4085fa:	ebab 0207 	sub.w	r2, fp, r7
  4085fe:	f042 0201 	orr.w	r2, r2, #1
  408602:	6099      	str	r1, [r3, #8]
  408604:	604a      	str	r2, [r1, #4]
  408606:	f8da 3004 	ldr.w	r3, [sl, #4]
  40860a:	f003 0301 	and.w	r3, r3, #1
  40860e:	431f      	orrs	r7, r3
  408610:	4640      	mov	r0, r8
  408612:	f8ca 7004 	str.w	r7, [sl, #4]
  408616:	f7fc f987 	bl	404928 <__malloc_unlock>
  40861a:	e751      	b.n	4084c0 <_realloc_r+0xe4>
  40861c:	682b      	ldr	r3, [r5, #0]
  40861e:	6003      	str	r3, [r0, #0]
  408620:	686b      	ldr	r3, [r5, #4]
  408622:	6043      	str	r3, [r0, #4]
  408624:	2a1b      	cmp	r2, #27
  408626:	d82d      	bhi.n	408684 <_realloc_r+0x2a8>
  408628:	f100 0308 	add.w	r3, r0, #8
  40862c:	f105 0208 	add.w	r2, r5, #8
  408630:	e71b      	b.n	40846a <_realloc_r+0x8e>
  408632:	4632      	mov	r2, r6
  408634:	6829      	ldr	r1, [r5, #0]
  408636:	6011      	str	r1, [r2, #0]
  408638:	6869      	ldr	r1, [r5, #4]
  40863a:	6051      	str	r1, [r2, #4]
  40863c:	68a9      	ldr	r1, [r5, #8]
  40863e:	6091      	str	r1, [r2, #8]
  408640:	461c      	mov	r4, r3
  408642:	46d1      	mov	r9, sl
  408644:	e72a      	b.n	40849c <_realloc_r+0xc0>
  408646:	eb09 0107 	add.w	r1, r9, r7
  40864a:	ebab 0b07 	sub.w	fp, fp, r7
  40864e:	f04b 0201 	orr.w	r2, fp, #1
  408652:	6099      	str	r1, [r3, #8]
  408654:	604a      	str	r2, [r1, #4]
  408656:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40865a:	f003 0301 	and.w	r3, r3, #1
  40865e:	431f      	orrs	r7, r3
  408660:	4640      	mov	r0, r8
  408662:	f845 7c04 	str.w	r7, [r5, #-4]
  408666:	f7fc f95f 	bl	404928 <__malloc_unlock>
  40866a:	462e      	mov	r6, r5
  40866c:	e728      	b.n	4084c0 <_realloc_r+0xe4>
  40866e:	4629      	mov	r1, r5
  408670:	f7ff fb56 	bl	407d20 <memmove>
  408674:	e6ff      	b.n	408476 <_realloc_r+0x9a>
  408676:	4629      	mov	r1, r5
  408678:	4630      	mov	r0, r6
  40867a:	461c      	mov	r4, r3
  40867c:	46d1      	mov	r9, sl
  40867e:	f7ff fb4f 	bl	407d20 <memmove>
  408682:	e70b      	b.n	40849c <_realloc_r+0xc0>
  408684:	68ab      	ldr	r3, [r5, #8]
  408686:	6083      	str	r3, [r0, #8]
  408688:	68eb      	ldr	r3, [r5, #12]
  40868a:	60c3      	str	r3, [r0, #12]
  40868c:	2a24      	cmp	r2, #36	; 0x24
  40868e:	d017      	beq.n	4086c0 <_realloc_r+0x2e4>
  408690:	f100 0310 	add.w	r3, r0, #16
  408694:	f105 0210 	add.w	r2, r5, #16
  408698:	e6e7      	b.n	40846a <_realloc_r+0x8e>
  40869a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40869e:	f023 0303 	bic.w	r3, r3, #3
  4086a2:	441c      	add	r4, r3
  4086a4:	462e      	mov	r6, r5
  4086a6:	e6f9      	b.n	40849c <_realloc_r+0xc0>
  4086a8:	68a9      	ldr	r1, [r5, #8]
  4086aa:	f8ca 1010 	str.w	r1, [sl, #16]
  4086ae:	68e9      	ldr	r1, [r5, #12]
  4086b0:	f8ca 1014 	str.w	r1, [sl, #20]
  4086b4:	2a24      	cmp	r2, #36	; 0x24
  4086b6:	d00c      	beq.n	4086d2 <_realloc_r+0x2f6>
  4086b8:	3510      	adds	r5, #16
  4086ba:	f10a 0218 	add.w	r2, sl, #24
  4086be:	e7b9      	b.n	408634 <_realloc_r+0x258>
  4086c0:	692b      	ldr	r3, [r5, #16]
  4086c2:	6103      	str	r3, [r0, #16]
  4086c4:	696b      	ldr	r3, [r5, #20]
  4086c6:	6143      	str	r3, [r0, #20]
  4086c8:	f105 0218 	add.w	r2, r5, #24
  4086cc:	f100 0318 	add.w	r3, r0, #24
  4086d0:	e6cb      	b.n	40846a <_realloc_r+0x8e>
  4086d2:	692a      	ldr	r2, [r5, #16]
  4086d4:	f8ca 2018 	str.w	r2, [sl, #24]
  4086d8:	696a      	ldr	r2, [r5, #20]
  4086da:	f8ca 201c 	str.w	r2, [sl, #28]
  4086de:	3518      	adds	r5, #24
  4086e0:	f10a 0220 	add.w	r2, sl, #32
  4086e4:	e7a6      	b.n	408634 <_realloc_r+0x258>
  4086e6:	4632      	mov	r2, r6
  4086e8:	e77f      	b.n	4085ea <_realloc_r+0x20e>
  4086ea:	4629      	mov	r1, r5
  4086ec:	4630      	mov	r0, r6
  4086ee:	9301      	str	r3, [sp, #4]
  4086f0:	f7ff fb16 	bl	407d20 <memmove>
  4086f4:	9b01      	ldr	r3, [sp, #4]
  4086f6:	e77e      	b.n	4085f6 <_realloc_r+0x21a>
  4086f8:	68a9      	ldr	r1, [r5, #8]
  4086fa:	f8ca 1010 	str.w	r1, [sl, #16]
  4086fe:	68e9      	ldr	r1, [r5, #12]
  408700:	f8ca 1014 	str.w	r1, [sl, #20]
  408704:	2a24      	cmp	r2, #36	; 0x24
  408706:	d003      	beq.n	408710 <_realloc_r+0x334>
  408708:	3510      	adds	r5, #16
  40870a:	f10a 0218 	add.w	r2, sl, #24
  40870e:	e76c      	b.n	4085ea <_realloc_r+0x20e>
  408710:	692a      	ldr	r2, [r5, #16]
  408712:	f8ca 2018 	str.w	r2, [sl, #24]
  408716:	696a      	ldr	r2, [r5, #20]
  408718:	f8ca 201c 	str.w	r2, [sl, #28]
  40871c:	3518      	adds	r5, #24
  40871e:	f10a 0220 	add.w	r2, sl, #32
  408722:	e762      	b.n	4085ea <_realloc_r+0x20e>
  408724:	20400440 	.word	0x20400440

00408728 <__sread>:
  408728:	b510      	push	{r4, lr}
  40872a:	460c      	mov	r4, r1
  40872c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408730:	f000 fa88 	bl	408c44 <_read_r>
  408734:	2800      	cmp	r0, #0
  408736:	db03      	blt.n	408740 <__sread+0x18>
  408738:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40873a:	4403      	add	r3, r0
  40873c:	6523      	str	r3, [r4, #80]	; 0x50
  40873e:	bd10      	pop	{r4, pc}
  408740:	89a3      	ldrh	r3, [r4, #12]
  408742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408746:	81a3      	strh	r3, [r4, #12]
  408748:	bd10      	pop	{r4, pc}
  40874a:	bf00      	nop

0040874c <__swrite>:
  40874c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408750:	4616      	mov	r6, r2
  408752:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408756:	461f      	mov	r7, r3
  408758:	05d3      	lsls	r3, r2, #23
  40875a:	460c      	mov	r4, r1
  40875c:	4605      	mov	r5, r0
  40875e:	d507      	bpl.n	408770 <__swrite+0x24>
  408760:	2200      	movs	r2, #0
  408762:	2302      	movs	r3, #2
  408764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408768:	f000 fa40 	bl	408bec <_lseek_r>
  40876c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408774:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408778:	81a2      	strh	r2, [r4, #12]
  40877a:	463b      	mov	r3, r7
  40877c:	4632      	mov	r2, r6
  40877e:	4628      	mov	r0, r5
  408780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408784:	f000 b85e 	b.w	408844 <_write_r>

00408788 <__sseek>:
  408788:	b510      	push	{r4, lr}
  40878a:	460c      	mov	r4, r1
  40878c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408790:	f000 fa2c 	bl	408bec <_lseek_r>
  408794:	89a3      	ldrh	r3, [r4, #12]
  408796:	1c42      	adds	r2, r0, #1
  408798:	bf0e      	itee	eq
  40879a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40879e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4087a2:	6520      	strne	r0, [r4, #80]	; 0x50
  4087a4:	81a3      	strh	r3, [r4, #12]
  4087a6:	bd10      	pop	{r4, pc}

004087a8 <__sclose>:
  4087a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4087ac:	f000 b8f2 	b.w	408994 <_close_r>

004087b0 <__sprint_r.part.0>:
  4087b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4087b4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4087b6:	049c      	lsls	r4, r3, #18
  4087b8:	4693      	mov	fp, r2
  4087ba:	d52f      	bpl.n	40881c <__sprint_r.part.0+0x6c>
  4087bc:	6893      	ldr	r3, [r2, #8]
  4087be:	6812      	ldr	r2, [r2, #0]
  4087c0:	b353      	cbz	r3, 408818 <__sprint_r.part.0+0x68>
  4087c2:	460e      	mov	r6, r1
  4087c4:	4607      	mov	r7, r0
  4087c6:	f102 0908 	add.w	r9, r2, #8
  4087ca:	e919 0420 	ldmdb	r9, {r5, sl}
  4087ce:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4087d2:	d017      	beq.n	408804 <__sprint_r.part.0+0x54>
  4087d4:	3d04      	subs	r5, #4
  4087d6:	2400      	movs	r4, #0
  4087d8:	e001      	b.n	4087de <__sprint_r.part.0+0x2e>
  4087da:	45a0      	cmp	r8, r4
  4087dc:	d010      	beq.n	408800 <__sprint_r.part.0+0x50>
  4087de:	4632      	mov	r2, r6
  4087e0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4087e4:	4638      	mov	r0, r7
  4087e6:	f000 f999 	bl	408b1c <_fputwc_r>
  4087ea:	1c43      	adds	r3, r0, #1
  4087ec:	f104 0401 	add.w	r4, r4, #1
  4087f0:	d1f3      	bne.n	4087da <__sprint_r.part.0+0x2a>
  4087f2:	2300      	movs	r3, #0
  4087f4:	f8cb 3008 	str.w	r3, [fp, #8]
  4087f8:	f8cb 3004 	str.w	r3, [fp, #4]
  4087fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408800:	f8db 3008 	ldr.w	r3, [fp, #8]
  408804:	f02a 0a03 	bic.w	sl, sl, #3
  408808:	eba3 030a 	sub.w	r3, r3, sl
  40880c:	f8cb 3008 	str.w	r3, [fp, #8]
  408810:	f109 0908 	add.w	r9, r9, #8
  408814:	2b00      	cmp	r3, #0
  408816:	d1d8      	bne.n	4087ca <__sprint_r.part.0+0x1a>
  408818:	2000      	movs	r0, #0
  40881a:	e7ea      	b.n	4087f2 <__sprint_r.part.0+0x42>
  40881c:	f7fe fffe 	bl	40781c <__sfvwrite_r>
  408820:	2300      	movs	r3, #0
  408822:	f8cb 3008 	str.w	r3, [fp, #8]
  408826:	f8cb 3004 	str.w	r3, [fp, #4]
  40882a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40882e:	bf00      	nop

00408830 <__sprint_r>:
  408830:	6893      	ldr	r3, [r2, #8]
  408832:	b10b      	cbz	r3, 408838 <__sprint_r+0x8>
  408834:	f7ff bfbc 	b.w	4087b0 <__sprint_r.part.0>
  408838:	b410      	push	{r4}
  40883a:	4618      	mov	r0, r3
  40883c:	6053      	str	r3, [r2, #4]
  40883e:	bc10      	pop	{r4}
  408840:	4770      	bx	lr
  408842:	bf00      	nop

00408844 <_write_r>:
  408844:	b570      	push	{r4, r5, r6, lr}
  408846:	460d      	mov	r5, r1
  408848:	4c08      	ldr	r4, [pc, #32]	; (40886c <_write_r+0x28>)
  40884a:	4611      	mov	r1, r2
  40884c:	4606      	mov	r6, r0
  40884e:	461a      	mov	r2, r3
  408850:	4628      	mov	r0, r5
  408852:	2300      	movs	r3, #0
  408854:	6023      	str	r3, [r4, #0]
  408856:	f7f7 fe17 	bl	400488 <_write>
  40885a:	1c43      	adds	r3, r0, #1
  40885c:	d000      	beq.n	408860 <_write_r+0x1c>
  40885e:	bd70      	pop	{r4, r5, r6, pc}
  408860:	6823      	ldr	r3, [r4, #0]
  408862:	2b00      	cmp	r3, #0
  408864:	d0fb      	beq.n	40885e <_write_r+0x1a>
  408866:	6033      	str	r3, [r6, #0]
  408868:	bd70      	pop	{r4, r5, r6, pc}
  40886a:	bf00      	nop
  40886c:	20400c3c 	.word	0x20400c3c

00408870 <__register_exitproc>:
  408870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408874:	4d2c      	ldr	r5, [pc, #176]	; (408928 <__register_exitproc+0xb8>)
  408876:	4606      	mov	r6, r0
  408878:	6828      	ldr	r0, [r5, #0]
  40887a:	4698      	mov	r8, r3
  40887c:	460f      	mov	r7, r1
  40887e:	4691      	mov	r9, r2
  408880:	f7ff f980 	bl	407b84 <__retarget_lock_acquire_recursive>
  408884:	4b29      	ldr	r3, [pc, #164]	; (40892c <__register_exitproc+0xbc>)
  408886:	681c      	ldr	r4, [r3, #0]
  408888:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40888c:	2b00      	cmp	r3, #0
  40888e:	d03e      	beq.n	40890e <__register_exitproc+0x9e>
  408890:	685a      	ldr	r2, [r3, #4]
  408892:	2a1f      	cmp	r2, #31
  408894:	dc1c      	bgt.n	4088d0 <__register_exitproc+0x60>
  408896:	f102 0e01 	add.w	lr, r2, #1
  40889a:	b176      	cbz	r6, 4088ba <__register_exitproc+0x4a>
  40889c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4088a0:	2401      	movs	r4, #1
  4088a2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4088a6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4088aa:	4094      	lsls	r4, r2
  4088ac:	4320      	orrs	r0, r4
  4088ae:	2e02      	cmp	r6, #2
  4088b0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4088b4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4088b8:	d023      	beq.n	408902 <__register_exitproc+0x92>
  4088ba:	3202      	adds	r2, #2
  4088bc:	f8c3 e004 	str.w	lr, [r3, #4]
  4088c0:	6828      	ldr	r0, [r5, #0]
  4088c2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4088c6:	f7ff f95f 	bl	407b88 <__retarget_lock_release_recursive>
  4088ca:	2000      	movs	r0, #0
  4088cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4088d0:	4b17      	ldr	r3, [pc, #92]	; (408930 <__register_exitproc+0xc0>)
  4088d2:	b30b      	cbz	r3, 408918 <__register_exitproc+0xa8>
  4088d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4088d8:	f7fb fc78 	bl	4041cc <malloc>
  4088dc:	4603      	mov	r3, r0
  4088de:	b1d8      	cbz	r0, 408918 <__register_exitproc+0xa8>
  4088e0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4088e4:	6002      	str	r2, [r0, #0]
  4088e6:	2100      	movs	r1, #0
  4088e8:	6041      	str	r1, [r0, #4]
  4088ea:	460a      	mov	r2, r1
  4088ec:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4088f0:	f04f 0e01 	mov.w	lr, #1
  4088f4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4088f8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4088fc:	2e00      	cmp	r6, #0
  4088fe:	d0dc      	beq.n	4088ba <__register_exitproc+0x4a>
  408900:	e7cc      	b.n	40889c <__register_exitproc+0x2c>
  408902:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  408906:	430c      	orrs	r4, r1
  408908:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40890c:	e7d5      	b.n	4088ba <__register_exitproc+0x4a>
  40890e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408912:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  408916:	e7bb      	b.n	408890 <__register_exitproc+0x20>
  408918:	6828      	ldr	r0, [r5, #0]
  40891a:	f7ff f935 	bl	407b88 <__retarget_lock_release_recursive>
  40891e:	f04f 30ff 	mov.w	r0, #4294967295
  408922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408926:	bf00      	nop
  408928:	20400850 	.word	0x20400850
  40892c:	00409250 	.word	0x00409250
  408930:	004041cd 	.word	0x004041cd

00408934 <_calloc_r>:
  408934:	b510      	push	{r4, lr}
  408936:	fb02 f101 	mul.w	r1, r2, r1
  40893a:	f7fb fc57 	bl	4041ec <_malloc_r>
  40893e:	4604      	mov	r4, r0
  408940:	b1d8      	cbz	r0, 40897a <_calloc_r+0x46>
  408942:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408946:	f022 0203 	bic.w	r2, r2, #3
  40894a:	3a04      	subs	r2, #4
  40894c:	2a24      	cmp	r2, #36	; 0x24
  40894e:	d818      	bhi.n	408982 <_calloc_r+0x4e>
  408950:	2a13      	cmp	r2, #19
  408952:	d914      	bls.n	40897e <_calloc_r+0x4a>
  408954:	2300      	movs	r3, #0
  408956:	2a1b      	cmp	r2, #27
  408958:	6003      	str	r3, [r0, #0]
  40895a:	6043      	str	r3, [r0, #4]
  40895c:	d916      	bls.n	40898c <_calloc_r+0x58>
  40895e:	2a24      	cmp	r2, #36	; 0x24
  408960:	6083      	str	r3, [r0, #8]
  408962:	60c3      	str	r3, [r0, #12]
  408964:	bf11      	iteee	ne
  408966:	f100 0210 	addne.w	r2, r0, #16
  40896a:	6103      	streq	r3, [r0, #16]
  40896c:	6143      	streq	r3, [r0, #20]
  40896e:	f100 0218 	addeq.w	r2, r0, #24
  408972:	2300      	movs	r3, #0
  408974:	6013      	str	r3, [r2, #0]
  408976:	6053      	str	r3, [r2, #4]
  408978:	6093      	str	r3, [r2, #8]
  40897a:	4620      	mov	r0, r4
  40897c:	bd10      	pop	{r4, pc}
  40897e:	4602      	mov	r2, r0
  408980:	e7f7      	b.n	408972 <_calloc_r+0x3e>
  408982:	2100      	movs	r1, #0
  408984:	f7fb ff7c 	bl	404880 <memset>
  408988:	4620      	mov	r0, r4
  40898a:	bd10      	pop	{r4, pc}
  40898c:	f100 0208 	add.w	r2, r0, #8
  408990:	e7ef      	b.n	408972 <_calloc_r+0x3e>
  408992:	bf00      	nop

00408994 <_close_r>:
  408994:	b538      	push	{r3, r4, r5, lr}
  408996:	4c07      	ldr	r4, [pc, #28]	; (4089b4 <_close_r+0x20>)
  408998:	2300      	movs	r3, #0
  40899a:	4605      	mov	r5, r0
  40899c:	4608      	mov	r0, r1
  40899e:	6023      	str	r3, [r4, #0]
  4089a0:	f7f8 fa2a 	bl	400df8 <_close>
  4089a4:	1c43      	adds	r3, r0, #1
  4089a6:	d000      	beq.n	4089aa <_close_r+0x16>
  4089a8:	bd38      	pop	{r3, r4, r5, pc}
  4089aa:	6823      	ldr	r3, [r4, #0]
  4089ac:	2b00      	cmp	r3, #0
  4089ae:	d0fb      	beq.n	4089a8 <_close_r+0x14>
  4089b0:	602b      	str	r3, [r5, #0]
  4089b2:	bd38      	pop	{r3, r4, r5, pc}
  4089b4:	20400c3c 	.word	0x20400c3c

004089b8 <_fclose_r>:
  4089b8:	b570      	push	{r4, r5, r6, lr}
  4089ba:	b159      	cbz	r1, 4089d4 <_fclose_r+0x1c>
  4089bc:	4605      	mov	r5, r0
  4089be:	460c      	mov	r4, r1
  4089c0:	b110      	cbz	r0, 4089c8 <_fclose_r+0x10>
  4089c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4089c4:	2b00      	cmp	r3, #0
  4089c6:	d03c      	beq.n	408a42 <_fclose_r+0x8a>
  4089c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4089ca:	07d8      	lsls	r0, r3, #31
  4089cc:	d505      	bpl.n	4089da <_fclose_r+0x22>
  4089ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4089d2:	b92b      	cbnz	r3, 4089e0 <_fclose_r+0x28>
  4089d4:	2600      	movs	r6, #0
  4089d6:	4630      	mov	r0, r6
  4089d8:	bd70      	pop	{r4, r5, r6, pc}
  4089da:	89a3      	ldrh	r3, [r4, #12]
  4089dc:	0599      	lsls	r1, r3, #22
  4089de:	d53c      	bpl.n	408a5a <_fclose_r+0xa2>
  4089e0:	4621      	mov	r1, r4
  4089e2:	4628      	mov	r0, r5
  4089e4:	f7fe fc9a 	bl	40731c <__sflush_r>
  4089e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4089ea:	4606      	mov	r6, r0
  4089ec:	b133      	cbz	r3, 4089fc <_fclose_r+0x44>
  4089ee:	69e1      	ldr	r1, [r4, #28]
  4089f0:	4628      	mov	r0, r5
  4089f2:	4798      	blx	r3
  4089f4:	2800      	cmp	r0, #0
  4089f6:	bfb8      	it	lt
  4089f8:	f04f 36ff 	movlt.w	r6, #4294967295
  4089fc:	89a3      	ldrh	r3, [r4, #12]
  4089fe:	061a      	lsls	r2, r3, #24
  408a00:	d422      	bmi.n	408a48 <_fclose_r+0x90>
  408a02:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408a04:	b141      	cbz	r1, 408a18 <_fclose_r+0x60>
  408a06:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408a0a:	4299      	cmp	r1, r3
  408a0c:	d002      	beq.n	408a14 <_fclose_r+0x5c>
  408a0e:	4628      	mov	r0, r5
  408a10:	f7fe fe1e 	bl	407650 <_free_r>
  408a14:	2300      	movs	r3, #0
  408a16:	6323      	str	r3, [r4, #48]	; 0x30
  408a18:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408a1a:	b121      	cbz	r1, 408a26 <_fclose_r+0x6e>
  408a1c:	4628      	mov	r0, r5
  408a1e:	f7fe fe17 	bl	407650 <_free_r>
  408a22:	2300      	movs	r3, #0
  408a24:	6463      	str	r3, [r4, #68]	; 0x44
  408a26:	f7fe fd9d 	bl	407564 <__sfp_lock_acquire>
  408a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408a2c:	2200      	movs	r2, #0
  408a2e:	07db      	lsls	r3, r3, #31
  408a30:	81a2      	strh	r2, [r4, #12]
  408a32:	d50e      	bpl.n	408a52 <_fclose_r+0x9a>
  408a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408a36:	f7ff f8a3 	bl	407b80 <__retarget_lock_close_recursive>
  408a3a:	f7fe fd99 	bl	407570 <__sfp_lock_release>
  408a3e:	4630      	mov	r0, r6
  408a40:	bd70      	pop	{r4, r5, r6, pc}
  408a42:	f7fe fd63 	bl	40750c <__sinit>
  408a46:	e7bf      	b.n	4089c8 <_fclose_r+0x10>
  408a48:	6921      	ldr	r1, [r4, #16]
  408a4a:	4628      	mov	r0, r5
  408a4c:	f7fe fe00 	bl	407650 <_free_r>
  408a50:	e7d7      	b.n	408a02 <_fclose_r+0x4a>
  408a52:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408a54:	f7ff f898 	bl	407b88 <__retarget_lock_release_recursive>
  408a58:	e7ec      	b.n	408a34 <_fclose_r+0x7c>
  408a5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408a5c:	f7ff f892 	bl	407b84 <__retarget_lock_acquire_recursive>
  408a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408a64:	2b00      	cmp	r3, #0
  408a66:	d1bb      	bne.n	4089e0 <_fclose_r+0x28>
  408a68:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408a6a:	f016 0601 	ands.w	r6, r6, #1
  408a6e:	d1b1      	bne.n	4089d4 <_fclose_r+0x1c>
  408a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408a72:	f7ff f889 	bl	407b88 <__retarget_lock_release_recursive>
  408a76:	4630      	mov	r0, r6
  408a78:	bd70      	pop	{r4, r5, r6, pc}
  408a7a:	bf00      	nop

00408a7c <__fputwc>:
  408a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408a80:	b082      	sub	sp, #8
  408a82:	4680      	mov	r8, r0
  408a84:	4689      	mov	r9, r1
  408a86:	4614      	mov	r4, r2
  408a88:	f000 f8a2 	bl	408bd0 <__locale_mb_cur_max>
  408a8c:	2801      	cmp	r0, #1
  408a8e:	d036      	beq.n	408afe <__fputwc+0x82>
  408a90:	464a      	mov	r2, r9
  408a92:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408a96:	a901      	add	r1, sp, #4
  408a98:	4640      	mov	r0, r8
  408a9a:	f000 f941 	bl	408d20 <_wcrtomb_r>
  408a9e:	1c42      	adds	r2, r0, #1
  408aa0:	4606      	mov	r6, r0
  408aa2:	d025      	beq.n	408af0 <__fputwc+0x74>
  408aa4:	b3a8      	cbz	r0, 408b12 <__fputwc+0x96>
  408aa6:	f89d e004 	ldrb.w	lr, [sp, #4]
  408aaa:	2500      	movs	r5, #0
  408aac:	f10d 0a04 	add.w	sl, sp, #4
  408ab0:	e009      	b.n	408ac6 <__fputwc+0x4a>
  408ab2:	6823      	ldr	r3, [r4, #0]
  408ab4:	1c5a      	adds	r2, r3, #1
  408ab6:	6022      	str	r2, [r4, #0]
  408ab8:	f883 e000 	strb.w	lr, [r3]
  408abc:	3501      	adds	r5, #1
  408abe:	42b5      	cmp	r5, r6
  408ac0:	d227      	bcs.n	408b12 <__fputwc+0x96>
  408ac2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  408ac6:	68a3      	ldr	r3, [r4, #8]
  408ac8:	3b01      	subs	r3, #1
  408aca:	2b00      	cmp	r3, #0
  408acc:	60a3      	str	r3, [r4, #8]
  408ace:	daf0      	bge.n	408ab2 <__fputwc+0x36>
  408ad0:	69a7      	ldr	r7, [r4, #24]
  408ad2:	42bb      	cmp	r3, r7
  408ad4:	4671      	mov	r1, lr
  408ad6:	4622      	mov	r2, r4
  408ad8:	4640      	mov	r0, r8
  408ada:	db02      	blt.n	408ae2 <__fputwc+0x66>
  408adc:	f1be 0f0a 	cmp.w	lr, #10
  408ae0:	d1e7      	bne.n	408ab2 <__fputwc+0x36>
  408ae2:	f000 f8c5 	bl	408c70 <__swbuf_r>
  408ae6:	1c43      	adds	r3, r0, #1
  408ae8:	d1e8      	bne.n	408abc <__fputwc+0x40>
  408aea:	b002      	add	sp, #8
  408aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408af0:	89a3      	ldrh	r3, [r4, #12]
  408af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408af6:	81a3      	strh	r3, [r4, #12]
  408af8:	b002      	add	sp, #8
  408afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408afe:	f109 33ff 	add.w	r3, r9, #4294967295
  408b02:	2bfe      	cmp	r3, #254	; 0xfe
  408b04:	d8c4      	bhi.n	408a90 <__fputwc+0x14>
  408b06:	fa5f fe89 	uxtb.w	lr, r9
  408b0a:	4606      	mov	r6, r0
  408b0c:	f88d e004 	strb.w	lr, [sp, #4]
  408b10:	e7cb      	b.n	408aaa <__fputwc+0x2e>
  408b12:	4648      	mov	r0, r9
  408b14:	b002      	add	sp, #8
  408b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b1a:	bf00      	nop

00408b1c <_fputwc_r>:
  408b1c:	b530      	push	{r4, r5, lr}
  408b1e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  408b20:	f013 0f01 	tst.w	r3, #1
  408b24:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408b28:	4614      	mov	r4, r2
  408b2a:	b083      	sub	sp, #12
  408b2c:	4605      	mov	r5, r0
  408b2e:	b29a      	uxth	r2, r3
  408b30:	d101      	bne.n	408b36 <_fputwc_r+0x1a>
  408b32:	0590      	lsls	r0, r2, #22
  408b34:	d51c      	bpl.n	408b70 <_fputwc_r+0x54>
  408b36:	0490      	lsls	r0, r2, #18
  408b38:	d406      	bmi.n	408b48 <_fputwc_r+0x2c>
  408b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  408b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408b44:	81a3      	strh	r3, [r4, #12]
  408b46:	6662      	str	r2, [r4, #100]	; 0x64
  408b48:	4628      	mov	r0, r5
  408b4a:	4622      	mov	r2, r4
  408b4c:	f7ff ff96 	bl	408a7c <__fputwc>
  408b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408b52:	07da      	lsls	r2, r3, #31
  408b54:	4605      	mov	r5, r0
  408b56:	d402      	bmi.n	408b5e <_fputwc_r+0x42>
  408b58:	89a3      	ldrh	r3, [r4, #12]
  408b5a:	059b      	lsls	r3, r3, #22
  408b5c:	d502      	bpl.n	408b64 <_fputwc_r+0x48>
  408b5e:	4628      	mov	r0, r5
  408b60:	b003      	add	sp, #12
  408b62:	bd30      	pop	{r4, r5, pc}
  408b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408b66:	f7ff f80f 	bl	407b88 <__retarget_lock_release_recursive>
  408b6a:	4628      	mov	r0, r5
  408b6c:	b003      	add	sp, #12
  408b6e:	bd30      	pop	{r4, r5, pc}
  408b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408b72:	9101      	str	r1, [sp, #4]
  408b74:	f7ff f806 	bl	407b84 <__retarget_lock_acquire_recursive>
  408b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408b7c:	9901      	ldr	r1, [sp, #4]
  408b7e:	b29a      	uxth	r2, r3
  408b80:	e7d9      	b.n	408b36 <_fputwc_r+0x1a>
  408b82:	bf00      	nop

00408b84 <_fstat_r>:
  408b84:	b538      	push	{r3, r4, r5, lr}
  408b86:	460b      	mov	r3, r1
  408b88:	4c07      	ldr	r4, [pc, #28]	; (408ba8 <_fstat_r+0x24>)
  408b8a:	4605      	mov	r5, r0
  408b8c:	4611      	mov	r1, r2
  408b8e:	4618      	mov	r0, r3
  408b90:	2300      	movs	r3, #0
  408b92:	6023      	str	r3, [r4, #0]
  408b94:	f7f8 f933 	bl	400dfe <_fstat>
  408b98:	1c43      	adds	r3, r0, #1
  408b9a:	d000      	beq.n	408b9e <_fstat_r+0x1a>
  408b9c:	bd38      	pop	{r3, r4, r5, pc}
  408b9e:	6823      	ldr	r3, [r4, #0]
  408ba0:	2b00      	cmp	r3, #0
  408ba2:	d0fb      	beq.n	408b9c <_fstat_r+0x18>
  408ba4:	602b      	str	r3, [r5, #0]
  408ba6:	bd38      	pop	{r3, r4, r5, pc}
  408ba8:	20400c3c 	.word	0x20400c3c

00408bac <_isatty_r>:
  408bac:	b538      	push	{r3, r4, r5, lr}
  408bae:	4c07      	ldr	r4, [pc, #28]	; (408bcc <_isatty_r+0x20>)
  408bb0:	2300      	movs	r3, #0
  408bb2:	4605      	mov	r5, r0
  408bb4:	4608      	mov	r0, r1
  408bb6:	6023      	str	r3, [r4, #0]
  408bb8:	f7f8 f926 	bl	400e08 <_isatty>
  408bbc:	1c43      	adds	r3, r0, #1
  408bbe:	d000      	beq.n	408bc2 <_isatty_r+0x16>
  408bc0:	bd38      	pop	{r3, r4, r5, pc}
  408bc2:	6823      	ldr	r3, [r4, #0]
  408bc4:	2b00      	cmp	r3, #0
  408bc6:	d0fb      	beq.n	408bc0 <_isatty_r+0x14>
  408bc8:	602b      	str	r3, [r5, #0]
  408bca:	bd38      	pop	{r3, r4, r5, pc}
  408bcc:	20400c3c 	.word	0x20400c3c

00408bd0 <__locale_mb_cur_max>:
  408bd0:	4b04      	ldr	r3, [pc, #16]	; (408be4 <__locale_mb_cur_max+0x14>)
  408bd2:	4a05      	ldr	r2, [pc, #20]	; (408be8 <__locale_mb_cur_max+0x18>)
  408bd4:	681b      	ldr	r3, [r3, #0]
  408bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408bd8:	2b00      	cmp	r3, #0
  408bda:	bf08      	it	eq
  408bdc:	4613      	moveq	r3, r2
  408bde:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408be2:	4770      	bx	lr
  408be4:	20400010 	.word	0x20400010
  408be8:	20400854 	.word	0x20400854

00408bec <_lseek_r>:
  408bec:	b570      	push	{r4, r5, r6, lr}
  408bee:	460d      	mov	r5, r1
  408bf0:	4c08      	ldr	r4, [pc, #32]	; (408c14 <_lseek_r+0x28>)
  408bf2:	4611      	mov	r1, r2
  408bf4:	4606      	mov	r6, r0
  408bf6:	461a      	mov	r2, r3
  408bf8:	4628      	mov	r0, r5
  408bfa:	2300      	movs	r3, #0
  408bfc:	6023      	str	r3, [r4, #0]
  408bfe:	f7f8 f905 	bl	400e0c <_lseek>
  408c02:	1c43      	adds	r3, r0, #1
  408c04:	d000      	beq.n	408c08 <_lseek_r+0x1c>
  408c06:	bd70      	pop	{r4, r5, r6, pc}
  408c08:	6823      	ldr	r3, [r4, #0]
  408c0a:	2b00      	cmp	r3, #0
  408c0c:	d0fb      	beq.n	408c06 <_lseek_r+0x1a>
  408c0e:	6033      	str	r3, [r6, #0]
  408c10:	bd70      	pop	{r4, r5, r6, pc}
  408c12:	bf00      	nop
  408c14:	20400c3c 	.word	0x20400c3c

00408c18 <__ascii_mbtowc>:
  408c18:	b082      	sub	sp, #8
  408c1a:	b149      	cbz	r1, 408c30 <__ascii_mbtowc+0x18>
  408c1c:	b15a      	cbz	r2, 408c36 <__ascii_mbtowc+0x1e>
  408c1e:	b16b      	cbz	r3, 408c3c <__ascii_mbtowc+0x24>
  408c20:	7813      	ldrb	r3, [r2, #0]
  408c22:	600b      	str	r3, [r1, #0]
  408c24:	7812      	ldrb	r2, [r2, #0]
  408c26:	1c10      	adds	r0, r2, #0
  408c28:	bf18      	it	ne
  408c2a:	2001      	movne	r0, #1
  408c2c:	b002      	add	sp, #8
  408c2e:	4770      	bx	lr
  408c30:	a901      	add	r1, sp, #4
  408c32:	2a00      	cmp	r2, #0
  408c34:	d1f3      	bne.n	408c1e <__ascii_mbtowc+0x6>
  408c36:	4610      	mov	r0, r2
  408c38:	b002      	add	sp, #8
  408c3a:	4770      	bx	lr
  408c3c:	f06f 0001 	mvn.w	r0, #1
  408c40:	e7f4      	b.n	408c2c <__ascii_mbtowc+0x14>
  408c42:	bf00      	nop

00408c44 <_read_r>:
  408c44:	b570      	push	{r4, r5, r6, lr}
  408c46:	460d      	mov	r5, r1
  408c48:	4c08      	ldr	r4, [pc, #32]	; (408c6c <_read_r+0x28>)
  408c4a:	4611      	mov	r1, r2
  408c4c:	4606      	mov	r6, r0
  408c4e:	461a      	mov	r2, r3
  408c50:	4628      	mov	r0, r5
  408c52:	2300      	movs	r3, #0
  408c54:	6023      	str	r3, [r4, #0]
  408c56:	f7f7 fbf9 	bl	40044c <_read>
  408c5a:	1c43      	adds	r3, r0, #1
  408c5c:	d000      	beq.n	408c60 <_read_r+0x1c>
  408c5e:	bd70      	pop	{r4, r5, r6, pc}
  408c60:	6823      	ldr	r3, [r4, #0]
  408c62:	2b00      	cmp	r3, #0
  408c64:	d0fb      	beq.n	408c5e <_read_r+0x1a>
  408c66:	6033      	str	r3, [r6, #0]
  408c68:	bd70      	pop	{r4, r5, r6, pc}
  408c6a:	bf00      	nop
  408c6c:	20400c3c 	.word	0x20400c3c

00408c70 <__swbuf_r>:
  408c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408c72:	460d      	mov	r5, r1
  408c74:	4614      	mov	r4, r2
  408c76:	4606      	mov	r6, r0
  408c78:	b110      	cbz	r0, 408c80 <__swbuf_r+0x10>
  408c7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408c7c:	2b00      	cmp	r3, #0
  408c7e:	d04b      	beq.n	408d18 <__swbuf_r+0xa8>
  408c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408c84:	69a3      	ldr	r3, [r4, #24]
  408c86:	60a3      	str	r3, [r4, #8]
  408c88:	b291      	uxth	r1, r2
  408c8a:	0708      	lsls	r0, r1, #28
  408c8c:	d539      	bpl.n	408d02 <__swbuf_r+0x92>
  408c8e:	6923      	ldr	r3, [r4, #16]
  408c90:	2b00      	cmp	r3, #0
  408c92:	d036      	beq.n	408d02 <__swbuf_r+0x92>
  408c94:	b2ed      	uxtb	r5, r5
  408c96:	0489      	lsls	r1, r1, #18
  408c98:	462f      	mov	r7, r5
  408c9a:	d515      	bpl.n	408cc8 <__swbuf_r+0x58>
  408c9c:	6822      	ldr	r2, [r4, #0]
  408c9e:	6961      	ldr	r1, [r4, #20]
  408ca0:	1ad3      	subs	r3, r2, r3
  408ca2:	428b      	cmp	r3, r1
  408ca4:	da1c      	bge.n	408ce0 <__swbuf_r+0x70>
  408ca6:	3301      	adds	r3, #1
  408ca8:	68a1      	ldr	r1, [r4, #8]
  408caa:	1c50      	adds	r0, r2, #1
  408cac:	3901      	subs	r1, #1
  408cae:	60a1      	str	r1, [r4, #8]
  408cb0:	6020      	str	r0, [r4, #0]
  408cb2:	7015      	strb	r5, [r2, #0]
  408cb4:	6962      	ldr	r2, [r4, #20]
  408cb6:	429a      	cmp	r2, r3
  408cb8:	d01a      	beq.n	408cf0 <__swbuf_r+0x80>
  408cba:	89a3      	ldrh	r3, [r4, #12]
  408cbc:	07db      	lsls	r3, r3, #31
  408cbe:	d501      	bpl.n	408cc4 <__swbuf_r+0x54>
  408cc0:	2d0a      	cmp	r5, #10
  408cc2:	d015      	beq.n	408cf0 <__swbuf_r+0x80>
  408cc4:	4638      	mov	r0, r7
  408cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408cc8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408cce:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408cd2:	81a2      	strh	r2, [r4, #12]
  408cd4:	6822      	ldr	r2, [r4, #0]
  408cd6:	6661      	str	r1, [r4, #100]	; 0x64
  408cd8:	6961      	ldr	r1, [r4, #20]
  408cda:	1ad3      	subs	r3, r2, r3
  408cdc:	428b      	cmp	r3, r1
  408cde:	dbe2      	blt.n	408ca6 <__swbuf_r+0x36>
  408ce0:	4621      	mov	r1, r4
  408ce2:	4630      	mov	r0, r6
  408ce4:	f7fe fbba 	bl	40745c <_fflush_r>
  408ce8:	b940      	cbnz	r0, 408cfc <__swbuf_r+0x8c>
  408cea:	6822      	ldr	r2, [r4, #0]
  408cec:	2301      	movs	r3, #1
  408cee:	e7db      	b.n	408ca8 <__swbuf_r+0x38>
  408cf0:	4621      	mov	r1, r4
  408cf2:	4630      	mov	r0, r6
  408cf4:	f7fe fbb2 	bl	40745c <_fflush_r>
  408cf8:	2800      	cmp	r0, #0
  408cfa:	d0e3      	beq.n	408cc4 <__swbuf_r+0x54>
  408cfc:	f04f 37ff 	mov.w	r7, #4294967295
  408d00:	e7e0      	b.n	408cc4 <__swbuf_r+0x54>
  408d02:	4621      	mov	r1, r4
  408d04:	4630      	mov	r0, r6
  408d06:	f7fd fad7 	bl	4062b8 <__swsetup_r>
  408d0a:	2800      	cmp	r0, #0
  408d0c:	d1f6      	bne.n	408cfc <__swbuf_r+0x8c>
  408d0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408d12:	6923      	ldr	r3, [r4, #16]
  408d14:	b291      	uxth	r1, r2
  408d16:	e7bd      	b.n	408c94 <__swbuf_r+0x24>
  408d18:	f7fe fbf8 	bl	40750c <__sinit>
  408d1c:	e7b0      	b.n	408c80 <__swbuf_r+0x10>
  408d1e:	bf00      	nop

00408d20 <_wcrtomb_r>:
  408d20:	b5f0      	push	{r4, r5, r6, r7, lr}
  408d22:	4606      	mov	r6, r0
  408d24:	b085      	sub	sp, #20
  408d26:	461f      	mov	r7, r3
  408d28:	b189      	cbz	r1, 408d4e <_wcrtomb_r+0x2e>
  408d2a:	4c10      	ldr	r4, [pc, #64]	; (408d6c <_wcrtomb_r+0x4c>)
  408d2c:	4d10      	ldr	r5, [pc, #64]	; (408d70 <_wcrtomb_r+0x50>)
  408d2e:	6824      	ldr	r4, [r4, #0]
  408d30:	6b64      	ldr	r4, [r4, #52]	; 0x34
  408d32:	2c00      	cmp	r4, #0
  408d34:	bf08      	it	eq
  408d36:	462c      	moveq	r4, r5
  408d38:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408d3c:	47a0      	blx	r4
  408d3e:	1c43      	adds	r3, r0, #1
  408d40:	d103      	bne.n	408d4a <_wcrtomb_r+0x2a>
  408d42:	2200      	movs	r2, #0
  408d44:	238a      	movs	r3, #138	; 0x8a
  408d46:	603a      	str	r2, [r7, #0]
  408d48:	6033      	str	r3, [r6, #0]
  408d4a:	b005      	add	sp, #20
  408d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408d4e:	460c      	mov	r4, r1
  408d50:	4906      	ldr	r1, [pc, #24]	; (408d6c <_wcrtomb_r+0x4c>)
  408d52:	4a07      	ldr	r2, [pc, #28]	; (408d70 <_wcrtomb_r+0x50>)
  408d54:	6809      	ldr	r1, [r1, #0]
  408d56:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408d58:	2900      	cmp	r1, #0
  408d5a:	bf08      	it	eq
  408d5c:	4611      	moveq	r1, r2
  408d5e:	4622      	mov	r2, r4
  408d60:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  408d64:	a901      	add	r1, sp, #4
  408d66:	47a0      	blx	r4
  408d68:	e7e9      	b.n	408d3e <_wcrtomb_r+0x1e>
  408d6a:	bf00      	nop
  408d6c:	20400010 	.word	0x20400010
  408d70:	20400854 	.word	0x20400854

00408d74 <__ascii_wctomb>:
  408d74:	b121      	cbz	r1, 408d80 <__ascii_wctomb+0xc>
  408d76:	2aff      	cmp	r2, #255	; 0xff
  408d78:	d804      	bhi.n	408d84 <__ascii_wctomb+0x10>
  408d7a:	700a      	strb	r2, [r1, #0]
  408d7c:	2001      	movs	r0, #1
  408d7e:	4770      	bx	lr
  408d80:	4608      	mov	r0, r1
  408d82:	4770      	bx	lr
  408d84:	238a      	movs	r3, #138	; 0x8a
  408d86:	6003      	str	r3, [r0, #0]
  408d88:	f04f 30ff 	mov.w	r0, #4294967295
  408d8c:	4770      	bx	lr
  408d8e:	bf00      	nop

00408d90 <__aeabi_dcmpun>:
  408d90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408d94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408d98:	d102      	bne.n	408da0 <__aeabi_dcmpun+0x10>
  408d9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408d9e:	d10a      	bne.n	408db6 <__aeabi_dcmpun+0x26>
  408da0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408da8:	d102      	bne.n	408db0 <__aeabi_dcmpun+0x20>
  408daa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408dae:	d102      	bne.n	408db6 <__aeabi_dcmpun+0x26>
  408db0:	f04f 0000 	mov.w	r0, #0
  408db4:	4770      	bx	lr
  408db6:	f04f 0001 	mov.w	r0, #1
  408dba:	4770      	bx	lr

00408dbc <__aeabi_d2iz>:
  408dbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408dc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408dc4:	d215      	bcs.n	408df2 <__aeabi_d2iz+0x36>
  408dc6:	d511      	bpl.n	408dec <__aeabi_d2iz+0x30>
  408dc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408dcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408dd0:	d912      	bls.n	408df8 <__aeabi_d2iz+0x3c>
  408dd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408dd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408dda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408dde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408de2:	fa23 f002 	lsr.w	r0, r3, r2
  408de6:	bf18      	it	ne
  408de8:	4240      	negne	r0, r0
  408dea:	4770      	bx	lr
  408dec:	f04f 0000 	mov.w	r0, #0
  408df0:	4770      	bx	lr
  408df2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408df6:	d105      	bne.n	408e04 <__aeabi_d2iz+0x48>
  408df8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408dfc:	bf08      	it	eq
  408dfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408e02:	4770      	bx	lr
  408e04:	f04f 0000 	mov.w	r0, #0
  408e08:	4770      	bx	lr
  408e0a:	bf00      	nop

00408e0c <__aeabi_uldivmod>:
  408e0c:	b953      	cbnz	r3, 408e24 <__aeabi_uldivmod+0x18>
  408e0e:	b94a      	cbnz	r2, 408e24 <__aeabi_uldivmod+0x18>
  408e10:	2900      	cmp	r1, #0
  408e12:	bf08      	it	eq
  408e14:	2800      	cmpeq	r0, #0
  408e16:	bf1c      	itt	ne
  408e18:	f04f 31ff 	movne.w	r1, #4294967295
  408e1c:	f04f 30ff 	movne.w	r0, #4294967295
  408e20:	f000 b97a 	b.w	409118 <__aeabi_idiv0>
  408e24:	f1ad 0c08 	sub.w	ip, sp, #8
  408e28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408e2c:	f000 f806 	bl	408e3c <__udivmoddi4>
  408e30:	f8dd e004 	ldr.w	lr, [sp, #4]
  408e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408e38:	b004      	add	sp, #16
  408e3a:	4770      	bx	lr

00408e3c <__udivmoddi4>:
  408e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408e40:	468c      	mov	ip, r1
  408e42:	460d      	mov	r5, r1
  408e44:	4604      	mov	r4, r0
  408e46:	9e08      	ldr	r6, [sp, #32]
  408e48:	2b00      	cmp	r3, #0
  408e4a:	d151      	bne.n	408ef0 <__udivmoddi4+0xb4>
  408e4c:	428a      	cmp	r2, r1
  408e4e:	4617      	mov	r7, r2
  408e50:	d96d      	bls.n	408f2e <__udivmoddi4+0xf2>
  408e52:	fab2 fe82 	clz	lr, r2
  408e56:	f1be 0f00 	cmp.w	lr, #0
  408e5a:	d00b      	beq.n	408e74 <__udivmoddi4+0x38>
  408e5c:	f1ce 0c20 	rsb	ip, lr, #32
  408e60:	fa01 f50e 	lsl.w	r5, r1, lr
  408e64:	fa20 fc0c 	lsr.w	ip, r0, ip
  408e68:	fa02 f70e 	lsl.w	r7, r2, lr
  408e6c:	ea4c 0c05 	orr.w	ip, ip, r5
  408e70:	fa00 f40e 	lsl.w	r4, r0, lr
  408e74:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408e78:	0c25      	lsrs	r5, r4, #16
  408e7a:	fbbc f8fa 	udiv	r8, ip, sl
  408e7e:	fa1f f987 	uxth.w	r9, r7
  408e82:	fb0a cc18 	mls	ip, sl, r8, ip
  408e86:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408e8a:	fb08 f309 	mul.w	r3, r8, r9
  408e8e:	42ab      	cmp	r3, r5
  408e90:	d90a      	bls.n	408ea8 <__udivmoddi4+0x6c>
  408e92:	19ed      	adds	r5, r5, r7
  408e94:	f108 32ff 	add.w	r2, r8, #4294967295
  408e98:	f080 8123 	bcs.w	4090e2 <__udivmoddi4+0x2a6>
  408e9c:	42ab      	cmp	r3, r5
  408e9e:	f240 8120 	bls.w	4090e2 <__udivmoddi4+0x2a6>
  408ea2:	f1a8 0802 	sub.w	r8, r8, #2
  408ea6:	443d      	add	r5, r7
  408ea8:	1aed      	subs	r5, r5, r3
  408eaa:	b2a4      	uxth	r4, r4
  408eac:	fbb5 f0fa 	udiv	r0, r5, sl
  408eb0:	fb0a 5510 	mls	r5, sl, r0, r5
  408eb4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408eb8:	fb00 f909 	mul.w	r9, r0, r9
  408ebc:	45a1      	cmp	r9, r4
  408ebe:	d909      	bls.n	408ed4 <__udivmoddi4+0x98>
  408ec0:	19e4      	adds	r4, r4, r7
  408ec2:	f100 33ff 	add.w	r3, r0, #4294967295
  408ec6:	f080 810a 	bcs.w	4090de <__udivmoddi4+0x2a2>
  408eca:	45a1      	cmp	r9, r4
  408ecc:	f240 8107 	bls.w	4090de <__udivmoddi4+0x2a2>
  408ed0:	3802      	subs	r0, #2
  408ed2:	443c      	add	r4, r7
  408ed4:	eba4 0409 	sub.w	r4, r4, r9
  408ed8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408edc:	2100      	movs	r1, #0
  408ede:	2e00      	cmp	r6, #0
  408ee0:	d061      	beq.n	408fa6 <__udivmoddi4+0x16a>
  408ee2:	fa24 f40e 	lsr.w	r4, r4, lr
  408ee6:	2300      	movs	r3, #0
  408ee8:	6034      	str	r4, [r6, #0]
  408eea:	6073      	str	r3, [r6, #4]
  408eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ef0:	428b      	cmp	r3, r1
  408ef2:	d907      	bls.n	408f04 <__udivmoddi4+0xc8>
  408ef4:	2e00      	cmp	r6, #0
  408ef6:	d054      	beq.n	408fa2 <__udivmoddi4+0x166>
  408ef8:	2100      	movs	r1, #0
  408efa:	e886 0021 	stmia.w	r6, {r0, r5}
  408efe:	4608      	mov	r0, r1
  408f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408f04:	fab3 f183 	clz	r1, r3
  408f08:	2900      	cmp	r1, #0
  408f0a:	f040 808e 	bne.w	40902a <__udivmoddi4+0x1ee>
  408f0e:	42ab      	cmp	r3, r5
  408f10:	d302      	bcc.n	408f18 <__udivmoddi4+0xdc>
  408f12:	4282      	cmp	r2, r0
  408f14:	f200 80fa 	bhi.w	40910c <__udivmoddi4+0x2d0>
  408f18:	1a84      	subs	r4, r0, r2
  408f1a:	eb65 0503 	sbc.w	r5, r5, r3
  408f1e:	2001      	movs	r0, #1
  408f20:	46ac      	mov	ip, r5
  408f22:	2e00      	cmp	r6, #0
  408f24:	d03f      	beq.n	408fa6 <__udivmoddi4+0x16a>
  408f26:	e886 1010 	stmia.w	r6, {r4, ip}
  408f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408f2e:	b912      	cbnz	r2, 408f36 <__udivmoddi4+0xfa>
  408f30:	2701      	movs	r7, #1
  408f32:	fbb7 f7f2 	udiv	r7, r7, r2
  408f36:	fab7 fe87 	clz	lr, r7
  408f3a:	f1be 0f00 	cmp.w	lr, #0
  408f3e:	d134      	bne.n	408faa <__udivmoddi4+0x16e>
  408f40:	1beb      	subs	r3, r5, r7
  408f42:	0c3a      	lsrs	r2, r7, #16
  408f44:	fa1f fc87 	uxth.w	ip, r7
  408f48:	2101      	movs	r1, #1
  408f4a:	fbb3 f8f2 	udiv	r8, r3, r2
  408f4e:	0c25      	lsrs	r5, r4, #16
  408f50:	fb02 3318 	mls	r3, r2, r8, r3
  408f54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408f58:	fb0c f308 	mul.w	r3, ip, r8
  408f5c:	42ab      	cmp	r3, r5
  408f5e:	d907      	bls.n	408f70 <__udivmoddi4+0x134>
  408f60:	19ed      	adds	r5, r5, r7
  408f62:	f108 30ff 	add.w	r0, r8, #4294967295
  408f66:	d202      	bcs.n	408f6e <__udivmoddi4+0x132>
  408f68:	42ab      	cmp	r3, r5
  408f6a:	f200 80d1 	bhi.w	409110 <__udivmoddi4+0x2d4>
  408f6e:	4680      	mov	r8, r0
  408f70:	1aed      	subs	r5, r5, r3
  408f72:	b2a3      	uxth	r3, r4
  408f74:	fbb5 f0f2 	udiv	r0, r5, r2
  408f78:	fb02 5510 	mls	r5, r2, r0, r5
  408f7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408f80:	fb0c fc00 	mul.w	ip, ip, r0
  408f84:	45a4      	cmp	ip, r4
  408f86:	d907      	bls.n	408f98 <__udivmoddi4+0x15c>
  408f88:	19e4      	adds	r4, r4, r7
  408f8a:	f100 33ff 	add.w	r3, r0, #4294967295
  408f8e:	d202      	bcs.n	408f96 <__udivmoddi4+0x15a>
  408f90:	45a4      	cmp	ip, r4
  408f92:	f200 80b8 	bhi.w	409106 <__udivmoddi4+0x2ca>
  408f96:	4618      	mov	r0, r3
  408f98:	eba4 040c 	sub.w	r4, r4, ip
  408f9c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408fa0:	e79d      	b.n	408ede <__udivmoddi4+0xa2>
  408fa2:	4631      	mov	r1, r6
  408fa4:	4630      	mov	r0, r6
  408fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408faa:	f1ce 0420 	rsb	r4, lr, #32
  408fae:	fa05 f30e 	lsl.w	r3, r5, lr
  408fb2:	fa07 f70e 	lsl.w	r7, r7, lr
  408fb6:	fa20 f804 	lsr.w	r8, r0, r4
  408fba:	0c3a      	lsrs	r2, r7, #16
  408fbc:	fa25 f404 	lsr.w	r4, r5, r4
  408fc0:	ea48 0803 	orr.w	r8, r8, r3
  408fc4:	fbb4 f1f2 	udiv	r1, r4, r2
  408fc8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408fcc:	fb02 4411 	mls	r4, r2, r1, r4
  408fd0:	fa1f fc87 	uxth.w	ip, r7
  408fd4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408fd8:	fb01 f30c 	mul.w	r3, r1, ip
  408fdc:	42ab      	cmp	r3, r5
  408fde:	fa00 f40e 	lsl.w	r4, r0, lr
  408fe2:	d909      	bls.n	408ff8 <__udivmoddi4+0x1bc>
  408fe4:	19ed      	adds	r5, r5, r7
  408fe6:	f101 30ff 	add.w	r0, r1, #4294967295
  408fea:	f080 808a 	bcs.w	409102 <__udivmoddi4+0x2c6>
  408fee:	42ab      	cmp	r3, r5
  408ff0:	f240 8087 	bls.w	409102 <__udivmoddi4+0x2c6>
  408ff4:	3902      	subs	r1, #2
  408ff6:	443d      	add	r5, r7
  408ff8:	1aeb      	subs	r3, r5, r3
  408ffa:	fa1f f588 	uxth.w	r5, r8
  408ffe:	fbb3 f0f2 	udiv	r0, r3, r2
  409002:	fb02 3310 	mls	r3, r2, r0, r3
  409006:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40900a:	fb00 f30c 	mul.w	r3, r0, ip
  40900e:	42ab      	cmp	r3, r5
  409010:	d907      	bls.n	409022 <__udivmoddi4+0x1e6>
  409012:	19ed      	adds	r5, r5, r7
  409014:	f100 38ff 	add.w	r8, r0, #4294967295
  409018:	d26f      	bcs.n	4090fa <__udivmoddi4+0x2be>
  40901a:	42ab      	cmp	r3, r5
  40901c:	d96d      	bls.n	4090fa <__udivmoddi4+0x2be>
  40901e:	3802      	subs	r0, #2
  409020:	443d      	add	r5, r7
  409022:	1aeb      	subs	r3, r5, r3
  409024:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409028:	e78f      	b.n	408f4a <__udivmoddi4+0x10e>
  40902a:	f1c1 0720 	rsb	r7, r1, #32
  40902e:	fa22 f807 	lsr.w	r8, r2, r7
  409032:	408b      	lsls	r3, r1
  409034:	fa05 f401 	lsl.w	r4, r5, r1
  409038:	ea48 0303 	orr.w	r3, r8, r3
  40903c:	fa20 fe07 	lsr.w	lr, r0, r7
  409040:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409044:	40fd      	lsrs	r5, r7
  409046:	ea4e 0e04 	orr.w	lr, lr, r4
  40904a:	fbb5 f9fc 	udiv	r9, r5, ip
  40904e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409052:	fb0c 5519 	mls	r5, ip, r9, r5
  409056:	fa1f f883 	uxth.w	r8, r3
  40905a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40905e:	fb09 f408 	mul.w	r4, r9, r8
  409062:	42ac      	cmp	r4, r5
  409064:	fa02 f201 	lsl.w	r2, r2, r1
  409068:	fa00 fa01 	lsl.w	sl, r0, r1
  40906c:	d908      	bls.n	409080 <__udivmoddi4+0x244>
  40906e:	18ed      	adds	r5, r5, r3
  409070:	f109 30ff 	add.w	r0, r9, #4294967295
  409074:	d243      	bcs.n	4090fe <__udivmoddi4+0x2c2>
  409076:	42ac      	cmp	r4, r5
  409078:	d941      	bls.n	4090fe <__udivmoddi4+0x2c2>
  40907a:	f1a9 0902 	sub.w	r9, r9, #2
  40907e:	441d      	add	r5, r3
  409080:	1b2d      	subs	r5, r5, r4
  409082:	fa1f fe8e 	uxth.w	lr, lr
  409086:	fbb5 f0fc 	udiv	r0, r5, ip
  40908a:	fb0c 5510 	mls	r5, ip, r0, r5
  40908e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  409092:	fb00 f808 	mul.w	r8, r0, r8
  409096:	45a0      	cmp	r8, r4
  409098:	d907      	bls.n	4090aa <__udivmoddi4+0x26e>
  40909a:	18e4      	adds	r4, r4, r3
  40909c:	f100 35ff 	add.w	r5, r0, #4294967295
  4090a0:	d229      	bcs.n	4090f6 <__udivmoddi4+0x2ba>
  4090a2:	45a0      	cmp	r8, r4
  4090a4:	d927      	bls.n	4090f6 <__udivmoddi4+0x2ba>
  4090a6:	3802      	subs	r0, #2
  4090a8:	441c      	add	r4, r3
  4090aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4090ae:	eba4 0408 	sub.w	r4, r4, r8
  4090b2:	fba0 8902 	umull	r8, r9, r0, r2
  4090b6:	454c      	cmp	r4, r9
  4090b8:	46c6      	mov	lr, r8
  4090ba:	464d      	mov	r5, r9
  4090bc:	d315      	bcc.n	4090ea <__udivmoddi4+0x2ae>
  4090be:	d012      	beq.n	4090e6 <__udivmoddi4+0x2aa>
  4090c0:	b156      	cbz	r6, 4090d8 <__udivmoddi4+0x29c>
  4090c2:	ebba 030e 	subs.w	r3, sl, lr
  4090c6:	eb64 0405 	sbc.w	r4, r4, r5
  4090ca:	fa04 f707 	lsl.w	r7, r4, r7
  4090ce:	40cb      	lsrs	r3, r1
  4090d0:	431f      	orrs	r7, r3
  4090d2:	40cc      	lsrs	r4, r1
  4090d4:	6037      	str	r7, [r6, #0]
  4090d6:	6074      	str	r4, [r6, #4]
  4090d8:	2100      	movs	r1, #0
  4090da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4090de:	4618      	mov	r0, r3
  4090e0:	e6f8      	b.n	408ed4 <__udivmoddi4+0x98>
  4090e2:	4690      	mov	r8, r2
  4090e4:	e6e0      	b.n	408ea8 <__udivmoddi4+0x6c>
  4090e6:	45c2      	cmp	sl, r8
  4090e8:	d2ea      	bcs.n	4090c0 <__udivmoddi4+0x284>
  4090ea:	ebb8 0e02 	subs.w	lr, r8, r2
  4090ee:	eb69 0503 	sbc.w	r5, r9, r3
  4090f2:	3801      	subs	r0, #1
  4090f4:	e7e4      	b.n	4090c0 <__udivmoddi4+0x284>
  4090f6:	4628      	mov	r0, r5
  4090f8:	e7d7      	b.n	4090aa <__udivmoddi4+0x26e>
  4090fa:	4640      	mov	r0, r8
  4090fc:	e791      	b.n	409022 <__udivmoddi4+0x1e6>
  4090fe:	4681      	mov	r9, r0
  409100:	e7be      	b.n	409080 <__udivmoddi4+0x244>
  409102:	4601      	mov	r1, r0
  409104:	e778      	b.n	408ff8 <__udivmoddi4+0x1bc>
  409106:	3802      	subs	r0, #2
  409108:	443c      	add	r4, r7
  40910a:	e745      	b.n	408f98 <__udivmoddi4+0x15c>
  40910c:	4608      	mov	r0, r1
  40910e:	e708      	b.n	408f22 <__udivmoddi4+0xe6>
  409110:	f1a8 0802 	sub.w	r8, r8, #2
  409114:	443d      	add	r5, r7
  409116:	e72b      	b.n	408f70 <__udivmoddi4+0x134>

00409118 <__aeabi_idiv0>:
  409118:	4770      	bx	lr
  40911a:	bf00      	nop
  40911c:	454c4449 	.word	0x454c4449
  409120:	00000000 	.word	0x00000000
  409124:	51726d54 	.word	0x51726d54
  409128:	00000000 	.word	0x00000000
  40912c:	20726d54 	.word	0x20726d54
  409130:	00637653 	.word	0x00637653
  409134:	686c6166 	.word	0x686c6166
  409138:	6d652061 	.word	0x6d652061
  40913c:	69726320 	.word	0x69726320
  409140:	6f207261 	.word	0x6f207261
  409144:	6d657320 	.word	0x6d657320
  409148:	726f6661 	.word	0x726f6661
  40914c:	0000206f 	.word	0x0000206f
  409150:	73756f68 	.word	0x73756f68
  409154:	6f642065 	.word	0x6f642065
  409158:	00006e77 	.word	0x00006e77
  40915c:	6c696146 	.word	0x6c696146
  409160:	74206465 	.word	0x74206465
  409164:	7263206f 	.word	0x7263206f
  409168:	65746165 	.word	0x65746165
  40916c:	756f6820 	.word	0x756f6820
  409170:	64206573 	.word	0x64206573
  409174:	206e776f 	.word	0x206e776f
  409178:	6b736174 	.word	0x6b736174
  40917c:	0000000d 	.word	0x0000000d
  409180:	00756d69 	.word	0x00756d69
  409184:	6c696146 	.word	0x6c696146
  409188:	74206465 	.word	0x74206465
  40918c:	7263206f 	.word	0x7263206f
  409190:	65746165 	.word	0x65746165
  409194:	756d6920 	.word	0x756d6920
  409198:	73617420 	.word	0x73617420
  40919c:	00000d6b 	.word	0x00000d6b
  4091a0:	20696143 	.word	0x20696143
  4091a4:	00000000 	.word	0x00000000
  4091a8:	5252455b 	.word	0x5252455b
  4091ac:	5b205d4f 	.word	0x5b205d4f
  4091b0:	5d633269 	.word	0x5d633269
  4091b4:	72705b20 	.word	0x72705b20
  4091b8:	5d65626f 	.word	0x5d65626f
  4091bc:	00000020 	.word	0x00000020
  4091c0:	4441445b 	.word	0x4441445b
  4091c4:	5b205d4f 	.word	0x5b205d4f
  4091c8:	5d633269 	.word	0x5d633269
  4091cc:	3a782520 	.word	0x3a782520
  4091d0:	000a7825 	.word	0x000a7825
  4091d4:	5252455b 	.word	0x5252455b
  4091d8:	6e205d4f 	.word	0x6e205d4f
  4091dc:	656c2061 	.word	0x656c2061
  4091e0:	72757469 	.word	0x72757469
  4091e4:	6f642061 	.word	0x6f642061
  4091e8:	6f687720 	.word	0x6f687720
  4091ec:	206d6120 	.word	0x206d6120
  4091f0:	00002069 	.word	0x00002069
  4091f4:	4355535b 	.word	0x4355535b
  4091f8:	4f535345 	.word	0x4f535345
  4091fc:	616e205d 	.word	0x616e205d
  409200:	69656c20 	.word	0x69656c20
  409204:	61727574 	.word	0x61727574
  409208:	206f6420 	.word	0x206f6420
  40920c:	206f6877 	.word	0x206f6877
  409210:	69206d61 	.word	0x69206d61
  409214:	00000020 	.word	0x00000020
  409218:	5252455b 	.word	0x5252455b
  40921c:	5b205d4f 	.word	0x5b205d4f
  409220:	5d633269 	.word	0x5d633269
  409224:	72775b20 	.word	0x72775b20
  409228:	5d657469 	.word	0x5d657469
  40922c:	00000020 	.word	0x00000020
  409230:	63617473 	.word	0x63617473
  409234:	766f206b 	.word	0x766f206b
  409238:	6c667265 	.word	0x6c667265
  40923c:	2520776f 	.word	0x2520776f
  409240:	73252078 	.word	0x73252078
  409244:	00000a0d 	.word	0x00000a0d
  409248:	74727173 	.word	0x74727173
  40924c:	00000066 	.word	0x00000066

00409250 <_global_impure_ptr>:
  409250:	20400018 0000000a 00464e49 00666e69     ..@ ....INF.inf.
  409260:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
  409270:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  409280:	37363534 62613938 66656463 00000000     456789abcdef....
  409290:	6c756e28 0000296c 00000030              (null)..0...

0040929c <blanks.7238>:
  40929c:	20202020 20202020 20202020 20202020                     

004092ac <zeroes.7239>:
  4092ac:	30303030 30303030 30303030 30303030     0000000000000000
  4092bc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  4092cc:	00000000                                ....

004092d0 <__mprec_bigtens>:
  4092d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4092e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4092f0:	7f73bf3c 75154fdd                       <.s..O.u

004092f8 <__mprec_tens>:
  4092f8:	00000000 3ff00000 00000000 40240000     .......?......$@
  409308:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409318:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409328:	00000000 412e8480 00000000 416312d0     .......A......cA
  409338:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409348:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409358:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409368:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409378:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409388:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409398:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4093a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4093b8:	79d99db4 44ea7843                       ...yCx.D

004093c0 <p05.6055>:
  4093c0:	00000005 00000019 0000007d 00000043     ........}...C...
  4093d0:	49534f50 00000058 0000002e              POSIX.......

004093dc <_ctype_>:
  4093dc:	20202000 20202020 28282020 20282828     .         ((((( 
  4093ec:	20202020 20202020 20202020 20202020                     
  4093fc:	10108820 10101010 10101010 10101010      ...............
  40940c:	04040410 04040404 10040404 10101010     ................
  40941c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40942c:	01010101 01010101 01010101 10101010     ................
  40943c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40944c:	02020202 02020202 02020202 10101010     ................
  40945c:	00000020 00000000 00000000 00000000      ...............
	...

004094e0 <_init>:
  4094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4094e2:	bf00      	nop
  4094e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4094e6:	bc08      	pop	{r3}
  4094e8:	469e      	mov	lr, r3
  4094ea:	4770      	bx	lr

004094ec <__init_array_start>:
  4094ec:	00406381 	.word	0x00406381

004094f0 <__frame_dummy_init_array_entry>:
  4094f0:	00400165                                e.@.

004094f4 <_fini>:
  4094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4094f6:	bf00      	nop
  4094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4094fa:	bc08      	pop	{r3}
  4094fc:	469e      	mov	lr, r3
  4094fe:	4770      	bx	lr

00409500 <__fini_array_start>:
  409500:	00400141 	.word	0x00400141
