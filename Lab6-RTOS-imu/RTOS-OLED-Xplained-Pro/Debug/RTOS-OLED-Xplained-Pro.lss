
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ba8c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040ba8c  0040ba8c  0001ba8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  0040ba94  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000284  204009c0  0040c454  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400c44  0040c6d8  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402c48  0040e6dc  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00021606  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000046e1  00000000  00000000  0004204d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e7f6  00000000  00000000  0004672e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f90  00000000  00000000  00054f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001430  00000000  00000000  00055eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a60c  00000000  00000000  000572e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001149e  00000000  00000000  000618f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00099ef4  00000000  00000000  00072d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003e80  00000000  00000000  0010cc84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 2c 40 20 29 14 40 00 27 14 40 00 27 14 40 00     H,@ ).@.'.@.'.@.
  400010:	27 14 40 00 27 14 40 00 27 14 40 00 00 00 00 00     '.@.'.@.'.@.....
	...
  40002c:	01 18 40 00 27 14 40 00 00 00 00 00 a1 18 40 00     ..@.'.@.......@.
  40003c:	09 19 40 00 27 14 40 00 27 14 40 00 27 14 40 00     ..@.'.@.'.@.'.@.
  40004c:	27 14 40 00 27 14 40 00 27 14 40 00 27 14 40 00     '.@.'.@.'.@.'.@.
  40005c:	27 14 40 00 27 14 40 00 00 00 00 00 19 11 40 00     '.@.'.@.......@.
  40006c:	2d 11 40 00 41 11 40 00 27 14 40 00 27 14 40 00     -.@.A.@.'.@.'.@.
  40007c:	27 14 40 00 55 11 40 00 69 11 40 00 27 14 40 00     '.@.U.@.i.@.'.@.
  40008c:	27 14 40 00 27 14 40 00 27 14 40 00 27 14 40 00     '.@.'.@.'.@.'.@.
  40009c:	27 14 40 00 27 14 40 00 27 14 40 00 27 14 40 00     '.@.'.@.'.@.'.@.
  4000ac:	27 14 40 00 27 14 40 00 27 14 40 00 27 14 40 00     '.@.'.@.'.@.'.@.
  4000bc:	27 14 40 00 27 14 40 00 27 14 40 00 27 14 40 00     '.@.'.@.'.@.'.@.
  4000cc:	27 14 40 00 00 00 00 00 27 14 40 00 00 00 00 00     '.@.....'.@.....
  4000dc:	27 14 40 00 27 14 40 00 27 14 40 00 27 14 40 00     '.@.'.@.'.@.'.@.
  4000ec:	27 14 40 00 27 14 40 00 27 14 40 00 27 14 40 00     '.@.'.@.'.@.'.@.
  4000fc:	27 14 40 00 27 14 40 00 27 14 40 00 27 14 40 00     '.@.'.@.'.@.'.@.
  40010c:	27 14 40 00 27 14 40 00 00 00 00 00 00 00 00 00     '.@.'.@.........
  40011c:	00 00 00 00 27 14 40 00 27 14 40 00 27 14 40 00     ....'.@.'.@.'.@.
  40012c:	27 14 40 00 27 14 40 00 00 00 00 00 27 14 40 00     '.@.'.@.....'.@.
  40013c:	27 14 40 00                                         '.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	0040ba94 	.word	0x0040ba94

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040ba94 	.word	0x0040ba94
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	0040ba94 	.word	0x0040ba94
  4001a8:	00000000 	.word	0x00000000

004001ac <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4001ac:	4b28      	ldr	r3, [pc, #160]	; (400250 <twihs_set_speed+0xa4>)
  4001ae:	4299      	cmp	r1, r3
  4001b0:	d84b      	bhi.n	40024a <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4001b2:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4001b6:	4299      	cmp	r1, r3
  4001b8:	d92d      	bls.n	400216 <twihs_set_speed+0x6a>
{
  4001ba:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4001bc:	4c25      	ldr	r4, [pc, #148]	; (400254 <twihs_set_speed+0xa8>)
  4001be:	fba4 3402 	umull	r3, r4, r4, r2
  4001c2:	0ba4      	lsrs	r4, r4, #14
  4001c4:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4001c6:	4b24      	ldr	r3, [pc, #144]	; (400258 <twihs_set_speed+0xac>)
  4001c8:	440b      	add	r3, r1
  4001ca:	009b      	lsls	r3, r3, #2
  4001cc:	fbb2 f2f3 	udiv	r2, r2, r3
  4001d0:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4001d2:	2cff      	cmp	r4, #255	; 0xff
  4001d4:	d91d      	bls.n	400212 <twihs_set_speed+0x66>
  4001d6:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4001d8:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4001da:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4001dc:	2cff      	cmp	r4, #255	; 0xff
  4001de:	d901      	bls.n	4001e4 <twihs_set_speed+0x38>
  4001e0:	2906      	cmp	r1, #6
  4001e2:	d9f9      	bls.n	4001d8 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4001e4:	2aff      	cmp	r2, #255	; 0xff
  4001e6:	d907      	bls.n	4001f8 <twihs_set_speed+0x4c>
  4001e8:	2906      	cmp	r1, #6
  4001ea:	d805      	bhi.n	4001f8 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4001ec:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4001ee:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4001f0:	2aff      	cmp	r2, #255	; 0xff
  4001f2:	d901      	bls.n	4001f8 <twihs_set_speed+0x4c>
  4001f4:	2906      	cmp	r1, #6
  4001f6:	d9f9      	bls.n	4001ec <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4001f8:	0213      	lsls	r3, r2, #8
  4001fa:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  4001fc:	0409      	lsls	r1, r1, #16
  4001fe:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400202:	430b      	orrs	r3, r1
  400204:	b2e4      	uxtb	r4, r4
  400206:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  400208:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40020a:	2000      	movs	r0, #0
}
  40020c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400210:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400212:	2100      	movs	r1, #0
  400214:	e7e6      	b.n	4001e4 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400216:	0049      	lsls	r1, r1, #1
  400218:	fbb2 f2f1 	udiv	r2, r2, r1
  40021c:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40021e:	2aff      	cmp	r2, #255	; 0xff
  400220:	d911      	bls.n	400246 <twihs_set_speed+0x9a>
  400222:	2300      	movs	r3, #0
			ckdiv++;
  400224:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  400226:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400228:	2aff      	cmp	r2, #255	; 0xff
  40022a:	d901      	bls.n	400230 <twihs_set_speed+0x84>
  40022c:	2b06      	cmp	r3, #6
  40022e:	d9f9      	bls.n	400224 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400230:	0211      	lsls	r1, r2, #8
  400232:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  400234:	041b      	lsls	r3, r3, #16
  400236:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40023a:	430b      	orrs	r3, r1
  40023c:	b2d2      	uxtb	r2, r2
  40023e:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  400240:	6102      	str	r2, [r0, #16]
	return PASS;
  400242:	2000      	movs	r0, #0
  400244:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400246:	2300      	movs	r3, #0
  400248:	e7f2      	b.n	400230 <twihs_set_speed+0x84>
		return FAIL;
  40024a:	2001      	movs	r0, #1
  40024c:	4770      	bx	lr
  40024e:	bf00      	nop
  400250:	00061a80 	.word	0x00061a80
  400254:	057619f1 	.word	0x057619f1
  400258:	3ffd1200 	.word	0x3ffd1200

0040025c <twihs_master_init>:
{
  40025c:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  40025e:	f04f 32ff 	mov.w	r2, #4294967295
  400262:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  400264:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  400266:	2280      	movs	r2, #128	; 0x80
  400268:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  40026a:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  40026c:	2208      	movs	r2, #8
  40026e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  400270:	2220      	movs	r2, #32
  400272:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  400274:	2204      	movs	r2, #4
  400276:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  400278:	680a      	ldr	r2, [r1, #0]
  40027a:	6849      	ldr	r1, [r1, #4]
  40027c:	4b03      	ldr	r3, [pc, #12]	; (40028c <twihs_master_init+0x30>)
  40027e:	4798      	blx	r3
}
  400280:	2801      	cmp	r0, #1
  400282:	bf14      	ite	ne
  400284:	2000      	movne	r0, #0
  400286:	2001      	moveq	r0, #1
  400288:	bd08      	pop	{r3, pc}
  40028a:	bf00      	nop
  40028c:	004001ad 	.word	0x004001ad

00400290 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  400290:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  400292:	2a00      	cmp	r2, #0
  400294:	d04c      	beq.n	400330 <twihs_master_read+0xa0>
{
  400296:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400298:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40029a:	2600      	movs	r6, #0
  40029c:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40029e:	684b      	ldr	r3, [r1, #4]
  4002a0:	021b      	lsls	r3, r3, #8
  4002a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4002a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4002aa:	7c0d      	ldrb	r5, [r1, #16]
  4002ac:	042d      	lsls	r5, r5, #16
  4002ae:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4002b2:	432b      	orrs	r3, r5
  4002b4:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4002b6:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4002b8:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4002ba:	b15d      	cbz	r5, 4002d4 <twihs_master_read+0x44>
	val = addr[0];
  4002bc:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  4002be:	2d01      	cmp	r5, #1
  4002c0:	dd02      	ble.n	4002c8 <twihs_master_read+0x38>
		val |= addr[1];
  4002c2:	784e      	ldrb	r6, [r1, #1]
  4002c4:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  4002c8:	2d02      	cmp	r5, #2
  4002ca:	dd04      	ble.n	4002d6 <twihs_master_read+0x46>
		val |= addr[2];
  4002cc:	7889      	ldrb	r1, [r1, #2]
  4002ce:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  4002d2:	e000      	b.n	4002d6 <twihs_master_read+0x46>
		return 0;
  4002d4:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4002d6:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4002d8:	2301      	movs	r3, #1
  4002da:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4002dc:	2502      	movs	r5, #2
  4002de:	e012      	b.n	400306 <twihs_master_read+0x76>
  4002e0:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4002e2:	f013 0f02 	tst.w	r3, #2
  4002e6:	d01b      	beq.n	400320 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  4002e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002ea:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4002ec:	6a03      	ldr	r3, [r0, #32]
  4002ee:	f013 0f01 	tst.w	r3, #1
  4002f2:	d0fb      	beq.n	4002ec <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  4002f4:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4002f6:	2000      	movs	r0, #0
}
  4002f8:	bc70      	pop	{r4, r5, r6}
  4002fa:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  4002fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002fe:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  400302:	3a01      	subs	r2, #1
  400304:	d0f2      	beq.n	4002ec <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400306:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400308:	f413 7f80 	tst.w	r3, #256	; 0x100
  40030c:	d114      	bne.n	400338 <twihs_master_read+0xa8>
  40030e:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  400312:	2a01      	cmp	r2, #1
  400314:	d0e4      	beq.n	4002e0 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  400316:	f013 0f02 	tst.w	r3, #2
  40031a:	d1ef      	bne.n	4002fc <twihs_master_read+0x6c>
	while (cnt > 0) {
  40031c:	2a00      	cmp	r2, #0
  40031e:	d0e5      	beq.n	4002ec <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400320:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400322:	f413 7f80 	tst.w	r3, #256	; 0x100
  400326:	d105      	bne.n	400334 <twihs_master_read+0xa4>
		if (!timeout--) {
  400328:	3901      	subs	r1, #1
  40032a:	d1f2      	bne.n	400312 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  40032c:	2009      	movs	r0, #9
  40032e:	e7e3      	b.n	4002f8 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  400330:	2001      	movs	r0, #1
  400332:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400334:	2005      	movs	r0, #5
  400336:	e7df      	b.n	4002f8 <twihs_master_read+0x68>
  400338:	2005      	movs	r0, #5
  40033a:	e7dd      	b.n	4002f8 <twihs_master_read+0x68>

0040033c <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  40033c:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  40033e:	2b00      	cmp	r3, #0
  400340:	d043      	beq.n	4003ca <twihs_master_write+0x8e>
{
  400342:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400344:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400346:	2600      	movs	r6, #0
  400348:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40034a:	7c0a      	ldrb	r2, [r1, #16]
  40034c:	0412      	lsls	r2, r2, #16
  40034e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400352:	684d      	ldr	r5, [r1, #4]
  400354:	022d      	lsls	r5, r5, #8
  400356:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40035a:	432a      	orrs	r2, r5
  40035c:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40035e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400360:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400362:	b15d      	cbz	r5, 40037c <twihs_master_write+0x40>
	val = addr[0];
  400364:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400366:	2d01      	cmp	r5, #1
  400368:	dd02      	ble.n	400370 <twihs_master_write+0x34>
		val |= addr[1];
  40036a:	784e      	ldrb	r6, [r1, #1]
  40036c:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  400370:	2d02      	cmp	r5, #2
  400372:	dd04      	ble.n	40037e <twihs_master_write+0x42>
		val |= addr[2];
  400374:	7889      	ldrb	r1, [r1, #2]
  400376:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  40037a:	e000      	b.n	40037e <twihs_master_write+0x42>
		return 0;
  40037c:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40037e:	60c2      	str	r2, [r0, #12]
  400380:	e004      	b.n	40038c <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  400382:	f814 2b01 	ldrb.w	r2, [r4], #1
  400386:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  400388:	3b01      	subs	r3, #1
  40038a:	d00f      	beq.n	4003ac <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  40038c:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40038e:	f412 7f80 	tst.w	r2, #256	; 0x100
  400392:	d11e      	bne.n	4003d2 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  400394:	f012 0f04 	tst.w	r2, #4
  400398:	d1f3      	bne.n	400382 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  40039a:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40039c:	f412 7f80 	tst.w	r2, #256	; 0x100
  4003a0:	d115      	bne.n	4003ce <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  4003a2:	f012 0f04 	tst.w	r2, #4
  4003a6:	d1ec      	bne.n	400382 <twihs_master_write+0x46>
	while (cnt > 0) {
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d1f6      	bne.n	40039a <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  4003ac:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4003ae:	f413 7f80 	tst.w	r3, #256	; 0x100
  4003b2:	d111      	bne.n	4003d8 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  4003b4:	f013 0f04 	tst.w	r3, #4
  4003b8:	d0f8      	beq.n	4003ac <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4003ba:	2302      	movs	r3, #2
  4003bc:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4003be:	6a03      	ldr	r3, [r0, #32]
  4003c0:	f013 0f01 	tst.w	r3, #1
  4003c4:	d0fb      	beq.n	4003be <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  4003c6:	2000      	movs	r0, #0
  4003c8:	e004      	b.n	4003d4 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  4003ca:	2001      	movs	r0, #1
  4003cc:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4003ce:	2005      	movs	r0, #5
  4003d0:	e000      	b.n	4003d4 <twihs_master_write+0x98>
  4003d2:	2005      	movs	r0, #5
}
  4003d4:	bc70      	pop	{r4, r5, r6}
  4003d6:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4003d8:	2005      	movs	r0, #5
  4003da:	e7fb      	b.n	4003d4 <twihs_master_write+0x98>

004003dc <FusionAhrsReset>:
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
  4003dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  4003e0:	6103      	str	r3, [r0, #16]
  4003e2:	2300      	movs	r3, #0
  4003e4:	6143      	str	r3, [r0, #20]
  4003e6:	6183      	str	r3, [r0, #24]
  4003e8:	61c3      	str	r3, [r0, #28]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
  4003ea:	6203      	str	r3, [r0, #32]
  4003ec:	6243      	str	r3, [r0, #36]	; 0x24
  4003ee:	6283      	str	r3, [r0, #40]	; 0x28
    ahrs->initialising = true;
  4003f0:	2201      	movs	r2, #1
  4003f2:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    ahrs->rampedGain = INITIAL_GAIN;
  4003f6:	4a0a      	ldr	r2, [pc, #40]	; (400420 <FusionAhrsReset+0x44>)
  4003f8:	6302      	str	r2, [r0, #48]	; 0x30
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  4003fa:	6383      	str	r3, [r0, #56]	; 0x38
  4003fc:	63c3      	str	r3, [r0, #60]	; 0x3c
  4003fe:	6403      	str	r3, [r0, #64]	; 0x40
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  400400:	6443      	str	r3, [r0, #68]	; 0x44
  400402:	6483      	str	r3, [r0, #72]	; 0x48
  400404:	64c3      	str	r3, [r0, #76]	; 0x4c
    ahrs->accelerometerIgnored = false;
  400406:	2300      	movs	r3, #0
  400408:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    ahrs->accelerationRejectionTimer = 0;
  40040c:	6543      	str	r3, [r0, #84]	; 0x54
    ahrs->accelerationRejectionTimeout = false;
  40040e:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    ahrs->magnetometerIgnored = false;
  400412:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    ahrs->magneticRejectionTimer = 0;
  400416:	65c3      	str	r3, [r0, #92]	; 0x5c
    ahrs->magneticRejectionTimeout = false;
  400418:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  40041c:	4770      	bx	lr
  40041e:	bf00      	nop
  400420:	41200000 	.word	0x41200000

00400424 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
  400424:	b538      	push	{r3, r4, r5, lr}
  400426:	ed2d 8b02 	vpush	{d8}
  40042a:	4604      	mov	r4, r0
  40042c:	460d      	mov	r5, r1
    ahrs->settings.gain = settings->gain;
  40042e:	ed91 8a00 	vldr	s16, [r1]
  400432:	ed80 8a00 	vstr	s16, [r0]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  400436:	edd1 7a01 	vldr	s15, [r1, #4]
  40043a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400442:	d001      	beq.n	400448 <FusionAhrsSetSettings+0x24>
  400444:	68cb      	ldr	r3, [r1, #12]
  400446:	bb03      	cbnz	r3, 40048a <FusionAhrsSetSettings+0x66>
        ahrs->settings.accelerationRejection = FLT_MAX;
  400448:	4b23      	ldr	r3, [pc, #140]	; (4004d8 <FusionAhrsSetSettings+0xb4>)
  40044a:	6063      	str	r3, [r4, #4]
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  40044c:	edd5 7a02 	vldr	s15, [r5, #8]
  400450:	eef5 7a40 	vcmp.f32	s15, #0.0
  400454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400458:	d001      	beq.n	40045e <FusionAhrsSetSettings+0x3a>
  40045a:	68eb      	ldr	r3, [r5, #12]
  40045c:	bb43      	cbnz	r3, 4004b0 <FusionAhrsSetSettings+0x8c>
        ahrs->settings.magneticRejection = FLT_MAX;
  40045e:	4b1e      	ldr	r3, [pc, #120]	; (4004d8 <FusionAhrsSetSettings+0xb4>)
  400460:	60a3      	str	r3, [r4, #8]
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
  400462:	68eb      	ldr	r3, [r5, #12]
  400464:	60e3      	str	r3, [r4, #12]
    if (ahrs->initialising == false) {
  400466:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  40046a:	b90b      	cbnz	r3, 400470 <FusionAhrsSetSettings+0x4c>
        ahrs->rampedGain = ahrs->settings.gain;
  40046c:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
  400470:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  400474:	ee77 7ac8 	vsub.f32	s15, s15, s16
  400478:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  40047c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400480:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
}
  400484:	ecbd 8b02 	vpop	{d8}
  400488:	bd38      	pop	{r3, r4, r5, pc}
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
  40048a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 4004dc <FusionAhrsSetSettings+0xb8>
  40048e:	ee67 7a87 	vmul.f32	s15, s15, s14
  400492:	ee17 0a90 	vmov	r0, s15
  400496:	4b12      	ldr	r3, [pc, #72]	; (4004e0 <FusionAhrsSetSettings+0xbc>)
  400498:	4798      	blx	r3
  40049a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  40049e:	ee07 0a10 	vmov	s14, r0
  4004a2:	ee67 7a27 	vmul.f32	s15, s14, s15
  4004a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
  4004aa:	edc4 7a01 	vstr	s15, [r4, #4]
  4004ae:	e7cd      	b.n	40044c <FusionAhrsSetSettings+0x28>
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
  4004b0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 4004dc <FusionAhrsSetSettings+0xb8>
  4004b4:	ee67 7a87 	vmul.f32	s15, s15, s14
  4004b8:	ee17 0a90 	vmov	r0, s15
  4004bc:	4b08      	ldr	r3, [pc, #32]	; (4004e0 <FusionAhrsSetSettings+0xbc>)
  4004be:	4798      	blx	r3
  4004c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  4004c4:	ee07 0a10 	vmov	s14, r0
  4004c8:	ee67 7a27 	vmul.f32	s15, s14, s15
  4004cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
  4004d0:	edc4 7a02 	vstr	s15, [r4, #8]
  4004d4:	e7c5      	b.n	400462 <FusionAhrsSetSettings+0x3e>
  4004d6:	bf00      	nop
  4004d8:	7f7fffff 	.word	0x7f7fffff
  4004dc:	3c8efa35 	.word	0x3c8efa35
  4004e0:	00403d51 	.word	0x00403d51

004004e4 <FusionAhrsInitialise>:
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
  4004e4:	b530      	push	{r4, r5, lr}
  4004e6:	b085      	sub	sp, #20
  4004e8:	4605      	mov	r5, r0
    const FusionAhrsSettings settings = {
  4004ea:	4b06      	ldr	r3, [pc, #24]	; (400504 <FusionAhrsInitialise+0x20>)
  4004ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4004ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    FusionAhrsSetSettings(ahrs, &settings);
  4004f2:	4669      	mov	r1, sp
  4004f4:	4628      	mov	r0, r5
  4004f6:	4b04      	ldr	r3, [pc, #16]	; (400508 <FusionAhrsInitialise+0x24>)
  4004f8:	4798      	blx	r3
    FusionAhrsReset(ahrs);
  4004fa:	4628      	mov	r0, r5
  4004fc:	4b03      	ldr	r3, [pc, #12]	; (40050c <FusionAhrsInitialise+0x28>)
  4004fe:	4798      	blx	r3
}
  400500:	b005      	add	sp, #20
  400502:	bd30      	pop	{r4, r5, pc}
  400504:	0040b26c 	.word	0x0040b26c
  400508:	00400425 	.word	0x00400425
  40050c:	004003dd 	.word	0x004003dd

00400510 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
  400510:	b410      	push	{r4}
  400512:	4604      	mov	r4, r0
    return ahrs->quaternion;
  400514:	3110      	adds	r1, #16
  400516:	c90f      	ldmia	r1, {r0, r1, r2, r3}
  400518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
  40051c:	4620      	mov	r0, r4
  40051e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400522:	4770      	bx	lr

00400524 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
  400524:	b510      	push	{r4, lr}
  400526:	ed2d 8b04 	vpush	{d8-d9}
  40052a:	4604      	mov	r4, r0
  40052c:	ee08 1a10 	vmov	s16, r1
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
  400530:	ed90 7a07 	vldr	s14, [r0, #28]
  400534:	edd0 7a06 	vldr	s15, [r0, #24]
  400538:	ee67 6aa7 	vmul.f32	s13, s15, s15
  40053c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
  400540:	ee79 6a66 	vsub.f32	s13, s18, s13
  400544:	ee27 6a07 	vmul.f32	s12, s14, s14
  400548:	edd0 5a04 	vldr	s11, [r0, #16]
  40054c:	ee27 7a25 	vmul.f32	s14, s14, s11
  400550:	edd0 5a05 	vldr	s11, [r0, #20]
  400554:	ee67 7aa5 	vmul.f32	s15, s15, s11
  400558:	ee76 6ac6 	vsub.f32	s13, s13, s12
  40055c:	ee16 1a90 	vmov	r1, s13
  400560:	ee77 7a27 	vadd.f32	s15, s14, s15
  400564:	ee17 0a90 	vmov	r0, s15
  400568:	4b2f      	ldr	r3, [pc, #188]	; (400628 <FusionAhrsSetHeading+0x104>)
  40056a:	4798      	blx	r3
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
    return degrees * ((float) M_PI / 180.0f);
  40056c:	eddf 8a2f 	vldr	s17, [pc, #188]	; 40062c <FusionAhrsSetHeading+0x108>
  400570:	ee68 8a28 	vmul.f32	s17, s16, s17
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
  400574:	ee07 0a90 	vmov	s15, r0
  400578:	ee77 8ae8 	vsub.f32	s17, s15, s17
  40057c:	ee68 8a89 	vmul.f32	s17, s17, s18
    const FusionQuaternion rotation = {
            .element.w = cosf(halfYawMinusHeading),
  400580:	ee18 0a90 	vmov	r0, s17
  400584:	4b2a      	ldr	r3, [pc, #168]	; (400630 <FusionAhrsSetHeading+0x10c>)
  400586:	4798      	blx	r3
  400588:	ee08 0a10 	vmov	s16, r0
            .element.x = 0.0f,
            .element.y = 0.0f,
            .element.z = -1.0f * sinf(halfYawMinusHeading),
  40058c:	ee18 0a90 	vmov	r0, s17
  400590:	4b28      	ldr	r3, [pc, #160]	; (400634 <FusionAhrsSetHeading+0x110>)
  400592:	4798      	blx	r3
  400594:	ee07 0a90 	vmov	s15, r0
  400598:	eeb1 5a67 	vneg.f32	s10, s15
  40059c:	ed94 6a04 	vldr	s12, [r4, #16]
  4005a0:	edd4 5a05 	vldr	s11, [r4, #20]
  4005a4:	edd4 7a06 	vldr	s15, [r4, #24]
  4005a8:	edd4 4a07 	vldr	s9, [r4, #28]
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
#define A quaternionA.element
#define B quaternionB.element
    FusionQuaternion result;
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
  4005ac:	ed9f 7a22 	vldr	s14, [pc, #136]	; 400638 <FusionAhrsSetHeading+0x114>
  4005b0:	ee25 4a87 	vmul.f32	s8, s11, s14
  4005b4:	ee67 3a87 	vmul.f32	s7, s15, s14
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
  4005b8:	ee26 3a07 	vmul.f32	s6, s12, s14
  4005bc:	ee24 7a87 	vmul.f32	s14, s9, s14
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
  4005c0:	ee68 6a06 	vmul.f32	s13, s16, s12
  4005c4:	ee76 6ac4 	vsub.f32	s13, s13, s8
  4005c8:	ee76 6ae3 	vsub.f32	s13, s13, s7
  4005cc:	ee65 2a24 	vmul.f32	s5, s10, s9
  4005d0:	ee76 6ae2 	vsub.f32	s13, s13, s5
    };
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
  4005d4:	edc4 6a04 	vstr	s13, [r4, #16]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
  4005d8:	ee68 6a25 	vmul.f32	s13, s16, s11
  4005dc:	ee76 6a83 	vadd.f32	s13, s13, s6
  4005e0:	ee76 6a87 	vadd.f32	s13, s13, s14
  4005e4:	ee67 2a85 	vmul.f32	s5, s15, s10
  4005e8:	ee76 6ae2 	vsub.f32	s13, s13, s5
  4005ec:	edc4 6a05 	vstr	s13, [r4, #20]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
  4005f0:	ee68 7a27 	vmul.f32	s15, s16, s15
  4005f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
  4005f8:	ee77 7a83 	vadd.f32	s15, s15, s6
  4005fc:	ee65 5a85 	vmul.f32	s11, s11, s10
  400600:	ee77 7aa5 	vadd.f32	s15, s15, s11
  400604:	edc4 7a06 	vstr	s15, [r4, #24]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
  400608:	ee28 8a24 	vmul.f32	s16, s16, s9
  40060c:	ee38 8a23 	vadd.f32	s16, s16, s7
  400610:	ee38 8a44 	vsub.f32	s16, s16, s8
  400614:	ee26 6a05 	vmul.f32	s12, s12, s10
  400618:	ee38 8a06 	vadd.f32	s16, s16, s12
  40061c:	ed84 8a07 	vstr	s16, [r4, #28]
#undef Q
}
  400620:	ecbd 8b04 	vpop	{d8-d9}
  400624:	bd10      	pop	{r4, pc}
  400626:	bf00      	nop
  400628:	00403e6d 	.word	0x00403e6d
  40062c:	3c8efa35 	.word	0x3c8efa35
  400630:	00403cd9 	.word	0x00403cd9
  400634:	00403d51 	.word	0x00403d51
  400638:	00000000 	.word	0x00000000

0040063c <FusionAhrsUpdate>:
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
  40063c:	b570      	push	{r4, r5, r6, lr}
  40063e:	ed2d 8b0a 	vpush	{d8-d12}
  400642:	b08e      	sub	sp, #56	; 0x38
  400644:	4604      	mov	r4, r0
  400646:	a803      	add	r0, sp, #12
  400648:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  40064c:	ed9d 9a22 	vldr	s18, [sp, #136]	; 0x88
    ahrs->accelerometer = accelerometer;
  400650:	f104 0320 	add.w	r3, r4, #32
  400654:	aa1c      	add	r2, sp, #112	; 0x70
  400656:	ca07      	ldmia	r2, {r0, r1, r2}
  400658:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (ahrs->initialising == true) {
  40065c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  400660:	b1bb      	cbz	r3, 400692 <FusionAhrsUpdate+0x56>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
  400662:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
  400666:	ee29 7a27 	vmul.f32	s14, s18, s15
  40066a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
  40066e:	ee77 7ac7 	vsub.f32	s15, s15, s14
  400672:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        if (ahrs->rampedGain < ahrs->settings.gain) {
  400676:	ed94 7a00 	vldr	s14, [r4]
  40067a:	eef4 7ac7 	vcmpe.f32	s15, s14
  40067e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400682:	d506      	bpl.n	400692 <FusionAhrsUpdate+0x56>
            ahrs->rampedGain = ahrs->settings.gain;
  400684:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
            ahrs->initialising = false;
  400688:	2300      	movs	r3, #0
  40068a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            ahrs->accelerationRejectionTimeout = false;
  40068e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            .axis.x = Q.x * Q.z - Q.w * Q.y,
  400692:	ed94 6a05 	vldr	s12, [r4, #20]
  400696:	edd4 9a07 	vldr	s19, [r4, #28]
  40069a:	ed94 7a04 	vldr	s14, [r4, #16]
  40069e:	edd4 aa06 	vldr	s21, [r4, #24]
  4006a2:	ee66 6a29 	vmul.f32	s13, s12, s19
  4006a6:	ee67 7a2a 	vmul.f32	s15, s14, s21
  4006aa:	ee36 bae7 	vsub.f32	s22, s13, s15
            .axis.y = Q.y * Q.z + Q.w * Q.x,
  4006ae:	ee69 aaaa 	vmul.f32	s21, s19, s21
  4006b2:	ee26 6a07 	vmul.f32	s12, s12, s14
  4006b6:	ee7a aa86 	vadd.f32	s21, s21, s12
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
  4006ba:	ee27 7a07 	vmul.f32	s14, s14, s14
  4006be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  4006c2:	ee37 7a67 	vsub.f32	s14, s14, s15
  4006c6:	ee69 9aa9 	vmul.f32	s19, s19, s19
  4006ca:	ee77 9a29 	vadd.f32	s19, s14, s19
    ahrs->accelerometerIgnored = true;
  4006ce:	2301      	movs	r3, #1
  4006d0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  4006d4:	ed9d 8a1c 	vldr	s16, [sp, #112]	; 0x70
  4006d8:	ed9d aa1d 	vldr	s20, [sp, #116]	; 0x74
  4006dc:	eddd 8a1e 	vldr	s17, [sp, #120]	; 0x78
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
  4006e0:	eeb5 aa40 	vcmp.f32	s20, #0.0
  4006e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006e8:	bf18      	it	ne
  4006ea:	2300      	movne	r3, #0
  4006ec:	eeb5 8a40 	vcmp.f32	s16, #0.0
  4006f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(accelerometer) == false) {
  4006f4:	f003 0301 	and.w	r3, r3, #1
  4006f8:	bf18      	it	ne
  4006fa:	2300      	movne	r3, #0
  4006fc:	b38b      	cbz	r3, 400762 <FusionAhrsUpdate+0x126>
  4006fe:	eef5 8a40 	vcmp.f32	s17, #0.0
  400702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400706:	d12c      	bne.n	400762 <FusionAhrsUpdate+0x126>
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  400708:	ed9f 8ae8 	vldr	s16, [pc, #928]	; 400aac <FusionAhrsUpdate+0x470>
  40070c:	eef0 8a48 	vmov.f32	s17, s16
  400710:	eeb0 aa48 	vmov.f32	s20, s16
    ahrs->magnetometerIgnored = true;
  400714:	2301      	movs	r3, #1
  400716:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  40071a:	eddd ba1f 	vldr	s23, [sp, #124]	; 0x7c
  40071e:	ed9d ca20 	vldr	s24, [sp, #128]	; 0x80
  400722:	eddd ca21 	vldr	s25, [sp, #132]	; 0x84
  400726:	eeb5 ca40 	vcmp.f32	s24, #0.0
  40072a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40072e:	bf18      	it	ne
  400730:	2300      	movne	r3, #0
  400732:	eef5 ba40 	vcmp.f32	s23, #0.0
  400736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(magnetometer) == false) {
  40073a:	f003 0301 	and.w	r3, r3, #1
  40073e:	bf18      	it	ne
  400740:	2300      	movne	r3, #0
  400742:	2b00      	cmp	r3, #0
  400744:	f000 8089 	beq.w	40085a <FusionAhrsUpdate+0x21e>
  400748:	eef5 ca40 	vcmp.f32	s25, #0.0
  40074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400750:	f040 8083 	bne.w	40085a <FusionAhrsUpdate+0x21e>
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  400754:	eddf 9ad5 	vldr	s19, [pc, #852]	; 400aac <FusionAhrsUpdate+0x470>
  400758:	eef0 6a69 	vmov.f32	s13, s19
  40075c:	eeb0 7a69 	vmov.f32	s14, s19
  400760:	e10d      	b.n	40097e <FusionAhrsUpdate+0x342>
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
  400762:	6d62      	ldr	r2, [r4, #84]	; 0x54
  400764:	68e3      	ldr	r3, [r4, #12]
  400766:	429a      	cmp	r2, r3
  400768:	d859      	bhi.n	40081e <FusionAhrsUpdate+0x1e2>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  40076a:	ee68 7a08 	vmul.f32	s15, s16, s16
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  40076e:	ee2a 7a0a 	vmul.f32	s14, s20, s20
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400772:	ee77 7a87 	vadd.f32	s15, s15, s14
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  400776:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  40077a:	ee77 7a87 	vadd.f32	s15, s15, s14
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  40077e:	4bcc      	ldr	r3, [pc, #816]	; (400ab0 <FusionAhrsUpdate+0x474>)
  400780:	ee17 2a90 	vmov	r2, s15
  400784:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400788:	ee06 3a90 	vmov	s13, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  40078c:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 400ab4 <FusionAhrsUpdate+0x478>
  400790:	ee67 7a87 	vmul.f32	s15, s15, s14
  400794:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400798:	ee67 7aa6 	vmul.f32	s15, s15, s13
  40079c:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 400ab8 <FusionAhrsUpdate+0x47c>
  4007a0:	ee77 7a67 	vsub.f32	s15, s14, s15
  4007a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    result.axis.x = vector.axis.x * scalar;
  4007a8:	ee28 8a27 	vmul.f32	s16, s16, s15
    result.axis.y = vector.axis.y * scalar;
  4007ac:	ee2a 6a27 	vmul.f32	s12, s20, s15
    result.axis.z = vector.axis.z * scalar;
  4007b0:	ee68 8aa7 	vmul.f32	s17, s17, s15
    result.axis.x = A.y * B.z - A.z * B.y;
  4007b4:	ee29 7a86 	vmul.f32	s14, s19, s12
  4007b8:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  4007bc:	ee37 aa67 	vsub.f32	s20, s14, s15
    result.axis.y = A.z * B.x - A.x * B.z;
  4007c0:	ee6b 8a28 	vmul.f32	s17, s22, s17
  4007c4:	ee69 6a88 	vmul.f32	s13, s19, s16
  4007c8:	ee78 8ae6 	vsub.f32	s17, s17, s13
    result.axis.z = A.x * B.y - A.y * B.x;
  4007cc:	ee2a 8a88 	vmul.f32	s16, s21, s16
  4007d0:	ee2b 6a06 	vmul.f32	s12, s22, s12
  4007d4:	ee38 8a46 	vsub.f32	s16, s16, s12
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
  4007d8:	ed84 aa0e 	vstr	s20, [r4, #56]	; 0x38
  4007dc:	edc4 8a0f 	vstr	s17, [r4, #60]	; 0x3c
  4007e0:	ed84 8a10 	vstr	s16, [r4, #64]	; 0x40
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
  4007e4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  4007e8:	b973      	cbnz	r3, 400808 <FusionAhrsUpdate+0x1cc>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  4007ea:	ee6a 7a0a 	vmul.f32	s15, s20, s20
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  4007ee:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4007f2:	ee77 7a87 	vadd.f32	s15, s15, s14
  4007f6:	ee48 7a08 	vmla.f32	s15, s16, s16
  4007fa:	ed94 7a01 	vldr	s14, [r4, #4]
  4007fe:	eef4 7ac7 	vcmpe.f32	s15, s14
  400802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400806:	d81e      	bhi.n	400846 <FusionAhrsUpdate+0x20a>
            ahrs->accelerometerIgnored = false;
  400808:	2300      	movs	r3, #0
  40080a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
  40080e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400810:	2b09      	cmp	r3, #9
  400812:	bf8c      	ite	hi
  400814:	220a      	movhi	r2, #10
  400816:	2200      	movls	r2, #0
  400818:	1a9b      	subs	r3, r3, r2
  40081a:	6563      	str	r3, [r4, #84]	; 0x54
  40081c:	e77a      	b.n	400714 <FusionAhrsUpdate+0xd8>
            const FusionQuaternion quaternion = ahrs->quaternion;
  40081e:	ae07      	add	r6, sp, #28
  400820:	f104 0510 	add.w	r5, r4, #16
  400824:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  400828:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
  40082c:	4620      	mov	r0, r4
  40082e:	4ba3      	ldr	r3, [pc, #652]	; (400abc <FusionAhrsUpdate+0x480>)
  400830:	4798      	blx	r3
            ahrs->quaternion = quaternion;
  400832:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400836:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
  40083a:	2300      	movs	r3, #0
  40083c:	6563      	str	r3, [r4, #84]	; 0x54
            ahrs->accelerationRejectionTimeout = true;
  40083e:	2301      	movs	r3, #1
  400840:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  400844:	e791      	b.n	40076a <FusionAhrsUpdate+0x12e>
            ahrs->accelerationRejectionTimer++;
  400846:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400848:	3301      	adds	r3, #1
  40084a:	6563      	str	r3, [r4, #84]	; 0x54
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  40084c:	ed9f 8a97 	vldr	s16, [pc, #604]	; 400aac <FusionAhrsUpdate+0x470>
  400850:	eef0 8a48 	vmov.f32	s17, s16
  400854:	eeb0 aa48 	vmov.f32	s20, s16
  400858:	e75c      	b.n	400714 <FusionAhrsUpdate+0xd8>
        ahrs->magneticRejectionTimeout = false;
  40085a:	2300      	movs	r3, #0
  40085c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
  400860:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  400862:	68e3      	ldr	r3, [r4, #12]
  400864:	429a      	cmp	r2, r3
  400866:	f200 812d 	bhi.w	400ac4 <FusionAhrsUpdate+0x488>
                .axis.x = Q.x * Q.y + Q.w * Q.z,
  40086a:	edd4 6a05 	vldr	s13, [r4, #20]
  40086e:	ed94 7a06 	vldr	s14, [r4, #24]
  400872:	edd4 4a04 	vldr	s9, [r4, #16]
  400876:	edd4 5a07 	vldr	s11, [r4, #28]
  40087a:	ee26 5a87 	vmul.f32	s10, s13, s14
  40087e:	ee64 7aa5 	vmul.f32	s15, s9, s11
  400882:	ee35 5a27 	vadd.f32	s10, s10, s15
                .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
  400886:	ee64 7aa4 	vmul.f32	s15, s9, s9
  40088a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  40088e:	ee77 7ac6 	vsub.f32	s15, s15, s12
  400892:	ee27 6a07 	vmul.f32	s12, s14, s14
  400896:	ee37 6a86 	vadd.f32	s12, s15, s12
                .axis.z = Q.y * Q.z - Q.w * Q.x
  40089a:	ee27 7a25 	vmul.f32	s14, s14, s11
  40089e:	ee66 6aa4 	vmul.f32	s13, s13, s9
  4008a2:	ee77 4a66 	vsub.f32	s9, s14, s13
    result.axis.x = A.y * B.z - A.z * B.y;
  4008a6:	ee6a 5aac 	vmul.f32	s11, s21, s25
  4008aa:	ee69 7a8c 	vmul.f32	s15, s19, s24
  4008ae:	ee75 5ae7 	vsub.f32	s11, s11, s15
    result.axis.y = A.z * B.x - A.x * B.z;
  4008b2:	ee69 9aab 	vmul.f32	s19, s19, s23
  4008b6:	ee6b ca2c 	vmul.f32	s25, s22, s25
  4008ba:	ee79 9aec 	vsub.f32	s19, s19, s25
    result.axis.z = A.x * B.y - A.y * B.x;
  4008be:	ee6b 6a0c 	vmul.f32	s13, s22, s24
  4008c2:	ee6a 7aab 	vmul.f32	s15, s21, s23
  4008c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  4008ca:	ee25 7aa5 	vmul.f32	s14, s11, s11
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  4008ce:	ee69 7aa9 	vmul.f32	s15, s19, s19
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4008d2:	ee37 7a27 	vadd.f32	s14, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  4008d6:	ee66 7aa6 	vmul.f32	s15, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4008da:	ee37 7a27 	vadd.f32	s14, s14, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  4008de:	4b74      	ldr	r3, [pc, #464]	; (400ab0 <FusionAhrsUpdate+0x474>)
  4008e0:	ee17 2a10 	vmov	r2, s14
  4008e4:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  4008e8:	ee04 3a10 	vmov	s8, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  4008ec:	eddf 7a71 	vldr	s15, [pc, #452]	; 400ab4 <FusionAhrsUpdate+0x478>
  4008f0:	ee27 7a27 	vmul.f32	s14, s14, s15
  4008f4:	ee27 7a04 	vmul.f32	s14, s14, s8
  4008f8:	ee27 7a04 	vmul.f32	s14, s14, s8
  4008fc:	eddf 7a6e 	vldr	s15, [pc, #440]	; 400ab8 <FusionAhrsUpdate+0x47c>
  400900:	ee77 7ac7 	vsub.f32	s15, s15, s14
  400904:	ee67 7a84 	vmul.f32	s15, s15, s8
    result.axis.x = vector.axis.x * scalar;
  400908:	ee67 5aa5 	vmul.f32	s11, s15, s11
    result.axis.y = vector.axis.y * scalar;
  40090c:	ee67 9aa9 	vmul.f32	s19, s15, s19
    result.axis.z = vector.axis.z * scalar;
  400910:	ee67 7aa6 	vmul.f32	s15, s15, s13
    result.axis.x = A.y * B.z - A.z * B.y;
  400914:	ee24 7aa9 	vmul.f32	s14, s9, s19
  400918:	ee66 6a27 	vmul.f32	s13, s12, s15
  40091c:	ee37 7a66 	vsub.f32	s14, s14, s13
    result.axis.y = A.z * B.x - A.x * B.z;
  400920:	ee65 7a27 	vmul.f32	s15, s10, s15
  400924:	ee64 6aa5 	vmul.f32	s13, s9, s11
  400928:	ee77 6ae6 	vsub.f32	s13, s15, s13
    result.axis.z = A.x * B.y - A.y * B.x;
  40092c:	ee66 7a25 	vmul.f32	s15, s12, s11
  400930:	ee65 9a29 	vmul.f32	s19, s10, s19
  400934:	ee77 9ae9 	vsub.f32	s19, s15, s19
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfWest);
  400938:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
  40093c:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
  400940:	edc4 9a13 	vstr	s19, [r4, #76]	; 0x4c
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
  400944:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  400948:	b97b      	cbnz	r3, 40096a <FusionAhrsUpdate+0x32e>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  40094a:	ee67 7a07 	vmul.f32	s15, s14, s14
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  40094e:	ee26 6aa6 	vmul.f32	s12, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400952:	ee77 7a86 	vadd.f32	s15, s15, s12
  400956:	ee49 7aa9 	vmla.f32	s15, s19, s19
  40095a:	ed94 6a02 	vldr	s12, [r4, #8]
  40095e:	eef4 7ac6 	vcmpe.f32	s15, s12
  400962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400966:	f200 80c8 	bhi.w	400afa <FusionAhrsUpdate+0x4be>
            ahrs->magnetometerIgnored = false;
  40096a:	2300      	movs	r3, #0
  40096c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
  400970:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  400972:	2b09      	cmp	r3, #9
  400974:	bf8c      	ite	hi
  400976:	220a      	movhi	r2, #10
  400978:	2200      	movls	r2, #0
  40097a:	1a9b      	subs	r3, r3, r2
  40097c:	65e3      	str	r3, [r4, #92]	; 0x5c
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
  40097e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
  400982:	ee37 7a0a 	vadd.f32	s14, s14, s20
    result.axis.x = vector.axis.x * scalar;
  400986:	ee27 7a27 	vmul.f32	s14, s14, s15
  40098a:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 400ac0 <FusionAhrsUpdate+0x484>
  40098e:	eddd 5a03 	vldr	s11, [sp, #12]
  400992:	ee65 5a86 	vmul.f32	s11, s11, s12
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
  400996:	ee37 7a25 	vadd.f32	s14, s14, s11
    result.axis.x = vector.axis.x * scalar;
  40099a:	ee27 7a09 	vmul.f32	s14, s14, s18
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
  40099e:	ee78 6aa6 	vadd.f32	s13, s17, s13
    result.axis.y = vector.axis.y * scalar;
  4009a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
  4009a6:	eddd 8a04 	vldr	s17, [sp, #16]
  4009aa:	ee68 8a86 	vmul.f32	s17, s17, s12
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
  4009ae:	ee76 6aa8 	vadd.f32	s13, s13, s17
    result.axis.y = vector.axis.y * scalar;
  4009b2:	ee66 6a89 	vmul.f32	s13, s13, s18
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
  4009b6:	ee38 8a29 	vadd.f32	s16, s16, s19
    result.axis.z = vector.axis.z * scalar;
  4009ba:	ee28 8a27 	vmul.f32	s16, s16, s15
  4009be:	eddd 7a05 	vldr	s15, [sp, #20]
  4009c2:	ee67 7a86 	vmul.f32	s15, s15, s12
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
  4009c6:	ee38 8a27 	vadd.f32	s16, s16, s15
    result.axis.z = vector.axis.z * scalar;
  4009ca:	ee68 7a09 	vmul.f32	s15, s16, s18
  4009ce:	ed94 3a04 	vldr	s6, [r4, #16]
  4009d2:	edd4 3a05 	vldr	s7, [r4, #20]
  4009d6:	ed94 4a06 	vldr	s8, [r4, #24]
  4009da:	ed94 5a07 	vldr	s10, [r4, #28]
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
#define Q quaternion.element
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
  4009de:	ee63 5ac7 	vnmul.f32	s11, s7, s14
  4009e2:	ee26 6a84 	vmul.f32	s12, s13, s8
  4009e6:	ee75 5ac6 	vsub.f32	s11, s11, s12
  4009ea:	ee27 6a85 	vmul.f32	s12, s15, s10
  4009ee:	ee75 5ac6 	vsub.f32	s11, s11, s12
    result.element.w = quaternionA.element.w + quaternionB.element.w;
  4009f2:	ee75 5a83 	vadd.f32	s11, s11, s6
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
  4009f6:	ee67 4a03 	vmul.f32	s9, s14, s6
  4009fa:	ee27 6a84 	vmul.f32	s12, s15, s8
  4009fe:	ee74 4a86 	vadd.f32	s9, s9, s12
  400a02:	ee26 6a85 	vmul.f32	s12, s13, s10
  400a06:	ee74 4ac6 	vsub.f32	s9, s9, s12
    result.element.x = quaternionA.element.x + quaternionB.element.x;
  400a0a:	ee74 4aa3 	vadd.f32	s9, s9, s7
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
  400a0e:	ee26 6a83 	vmul.f32	s12, s13, s6
  400a12:	ee67 2aa3 	vmul.f32	s5, s15, s7
  400a16:	ee36 6a62 	vsub.f32	s12, s12, s5
  400a1a:	ee67 2a05 	vmul.f32	s5, s14, s10
  400a1e:	ee36 6a22 	vadd.f32	s12, s12, s5
    result.element.y = quaternionA.element.y + quaternionB.element.y;
  400a22:	ee36 6a04 	vadd.f32	s12, s12, s8
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
  400a26:	ee67 7a83 	vmul.f32	s15, s15, s6
  400a2a:	ee66 6aa3 	vmul.f32	s13, s13, s7
  400a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
  400a32:	ee27 7a04 	vmul.f32	s14, s14, s8
  400a36:	ee77 7ac7 	vsub.f32	s15, s15, s14
    result.element.z = quaternionA.element.z + quaternionB.element.z;
  400a3a:	ee77 7a85 	vadd.f32	s15, s15, s10
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
  400a3e:	ee25 7aa5 	vmul.f32	s14, s11, s11
  400a42:	ee64 6aa4 	vmul.f32	s13, s9, s9
  400a46:	ee37 7a26 	vadd.f32	s14, s14, s13
  400a4a:	ee66 6a06 	vmul.f32	s13, s12, s12
  400a4e:	ee37 7a26 	vadd.f32	s14, s14, s13
  400a52:	ee67 6aa7 	vmul.f32	s13, s15, s15
  400a56:	ee37 7a26 	vadd.f32	s14, s14, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400a5a:	4b15      	ldr	r3, [pc, #84]	; (400ab0 <FusionAhrsUpdate+0x474>)
  400a5c:	ee17 2a10 	vmov	r2, s14
  400a60:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400a64:	ee05 3a10 	vmov	s10, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400a68:	eddf 6a12 	vldr	s13, [pc, #72]	; 400ab4 <FusionAhrsUpdate+0x478>
  400a6c:	ee27 7a26 	vmul.f32	s14, s14, s13
  400a70:	ee27 7a05 	vmul.f32	s14, s14, s10
  400a74:	ee27 7a05 	vmul.f32	s14, s14, s10
  400a78:	eddf 6a0f 	vldr	s13, [pc, #60]	; 400ab8 <FusionAhrsUpdate+0x47c>
  400a7c:	ee36 7ac7 	vsub.f32	s14, s13, s14
  400a80:	ee27 7a05 	vmul.f32	s14, s14, s10
#endif
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
  400a84:	ee67 5a25 	vmul.f32	s11, s14, s11
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
  400a88:	edc4 5a04 	vstr	s11, [r4, #16]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
  400a8c:	ee67 6a24 	vmul.f32	s13, s14, s9
  400a90:	edc4 6a05 	vstr	s13, [r4, #20]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
  400a94:	ee27 6a06 	vmul.f32	s12, s14, s12
  400a98:	ed84 6a06 	vstr	s12, [r4, #24]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
  400a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
  400aa0:	ed84 7a07 	vstr	s14, [r4, #28]
}
  400aa4:	b00e      	add	sp, #56	; 0x38
  400aa6:	ecbd 8b0a 	vpop	{d8-d12}
  400aaa:	bd70      	pop	{r4, r5, r6, pc}
  400aac:	00000000 	.word	0x00000000
  400ab0:	5f1f1412 	.word	0x5f1f1412
  400ab4:	3f36d312 	.word	0x3f36d312
  400ab8:	3fd851ff 	.word	0x3fd851ff
  400abc:	004003dd 	.word	0x004003dd
  400ac0:	3c0efa35 	.word	0x3c0efa35
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
  400ac4:	ed8d ba0b 	vstr	s22, [sp, #44]	; 0x2c
  400ac8:	edcd aa0c 	vstr	s21, [sp, #48]	; 0x30
  400acc:	edcd 9a0d 	vstr	s19, [sp, #52]	; 0x34
  400ad0:	ab20      	add	r3, sp, #128	; 0x80
  400ad2:	e893 0003 	ldmia.w	r3, {r0, r1}
  400ad6:	e88d 0003 	stmia.w	sp, {r0, r1}
  400ada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  400adc:	aa0e      	add	r2, sp, #56	; 0x38
  400ade:	e912 0007 	ldmdb	r2, {r0, r1, r2}
  400ae2:	4d0b      	ldr	r5, [pc, #44]	; (400b10 <FusionAhrsUpdate+0x4d4>)
  400ae4:	47a8      	blx	r5
  400ae6:	4601      	mov	r1, r0
  400ae8:	4620      	mov	r0, r4
  400aea:	4b0a      	ldr	r3, [pc, #40]	; (400b14 <FusionAhrsUpdate+0x4d8>)
  400aec:	4798      	blx	r3
            ahrs->magneticRejectionTimer = 0;
  400aee:	2300      	movs	r3, #0
  400af0:	65e3      	str	r3, [r4, #92]	; 0x5c
            ahrs->magneticRejectionTimeout = true;
  400af2:	2301      	movs	r3, #1
  400af4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  400af8:	e6b7      	b.n	40086a <FusionAhrsUpdate+0x22e>
            ahrs->magneticRejectionTimer++;
  400afa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  400afc:	3301      	adds	r3, #1
  400afe:	65e3      	str	r3, [r4, #92]	; 0x5c
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  400b00:	eddf 9a05 	vldr	s19, [pc, #20]	; 400b18 <FusionAhrsUpdate+0x4dc>
  400b04:	eef0 6a69 	vmov.f32	s13, s19
  400b08:	eeb0 7a69 	vmov.f32	s14, s19
  400b0c:	e737      	b.n	40097e <FusionAhrsUpdate+0x342>
  400b0e:	bf00      	nop
  400b10:	00400b79 	.word	0x00400b79
  400b14:	00400525 	.word	0x00400525
  400b18:	00000000 	.word	0x00000000

00400b1c <FusionAhrsUpdateNoMagnetometer>:
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
  400b1c:	b530      	push	{r4, r5, lr}
  400b1e:	b091      	sub	sp, #68	; 0x44
  400b20:	4605      	mov	r5, r0
  400b22:	ac09      	add	r4, sp, #36	; 0x24
  400b24:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
  400b28:	2300      	movs	r3, #0
  400b2a:	930d      	str	r3, [sp, #52]	; 0x34
  400b2c:	930e      	str	r3, [sp, #56]	; 0x38
  400b2e:	930f      	str	r3, [sp, #60]	; 0x3c
  400b30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  400b32:	9306      	str	r3, [sp, #24]
  400b34:	ab03      	add	r3, sp, #12
  400b36:	aa10      	add	r2, sp, #64	; 0x40
  400b38:	e912 0007 	ldmdb	r2, {r0, r1, r2}
  400b3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  400b40:	ab14      	add	r3, sp, #80	; 0x50
  400b42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400b46:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  400b4a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
  400b4e:	4628      	mov	r0, r5
  400b50:	4c07      	ldr	r4, [pc, #28]	; (400b70 <FusionAhrsUpdateNoMagnetometer+0x54>)
  400b52:	47a0      	blx	r4
    if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
  400b54:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
  400b58:	b113      	cbz	r3, 400b60 <FusionAhrsUpdateNoMagnetometer+0x44>
  400b5a:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
  400b5e:	b10b      	cbz	r3, 400b64 <FusionAhrsUpdateNoMagnetometer+0x48>
}
  400b60:	b011      	add	sp, #68	; 0x44
  400b62:	bd30      	pop	{r4, r5, pc}
        FusionAhrsSetHeading(ahrs, 0.0f);
  400b64:	2100      	movs	r1, #0
  400b66:	4628      	mov	r0, r5
  400b68:	4b02      	ldr	r3, [pc, #8]	; (400b74 <FusionAhrsUpdateNoMagnetometer+0x58>)
  400b6a:	4798      	blx	r3
}
  400b6c:	e7f8      	b.n	400b60 <FusionAhrsUpdateNoMagnetometer+0x44>
  400b6e:	bf00      	nop
  400b70:	0040063d 	.word	0x0040063d
  400b74:	00400525 	.word	0x00400525

00400b78 <FusionCompassCalculateHeading>:
 * @brief Calculates the heading relative to magnetic north.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionVector accelerometer, const FusionVector magnetometer) {
  400b78:	b082      	sub	sp, #8
  400b7a:	b500      	push	{lr}
  400b7c:	b085      	sub	sp, #20
  400b7e:	f10d 0e10 	add.w	lr, sp, #16
  400b82:	e90e 0007 	stmdb	lr, {r0, r1, r2}
  400b86:	9307      	str	r3, [sp, #28]
  400b88:	eddd 3a01 	vldr	s7, [sp, #4]
  400b8c:	eddd 6a02 	vldr	s13, [sp, #8]
  400b90:	ed9d 4a03 	vldr	s8, [sp, #12]
  400b94:	eddd 7a07 	vldr	s15, [sp, #28]
  400b98:	ed9d 5a08 	vldr	s10, [sp, #32]
  400b9c:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
    result.axis.x = A.y * B.z - A.z * B.y;
  400ba0:	ee66 5a26 	vmul.f32	s11, s12, s13
  400ba4:	ee24 7a05 	vmul.f32	s14, s8, s10
  400ba8:	ee75 5ac7 	vsub.f32	s11, s11, s14
    result.axis.y = A.z * B.x - A.x * B.z;
  400bac:	ee24 7a27 	vmul.f32	s14, s8, s15
  400bb0:	ee26 6a23 	vmul.f32	s12, s12, s7
  400bb4:	ee37 6a46 	vsub.f32	s12, s14, s12
    result.axis.z = A.x * B.y - A.y * B.x;
  400bb8:	ee25 5a23 	vmul.f32	s10, s10, s7
  400bbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400bc0:	ee35 5a67 	vsub.f32	s10, s10, s15
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  400bc4:	ee25 7aa5 	vmul.f32	s14, s11, s11
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  400bc8:	ee66 7a06 	vmul.f32	s15, s12, s12
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  400bd0:	ee65 7a05 	vmul.f32	s15, s10, s10
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400bd8:	4b2d      	ldr	r3, [pc, #180]	; (400c90 <FusionCompassCalculateHeading+0x118>)
  400bda:	ee17 2a10 	vmov	r2, s14
  400bde:	eba3 0262 	sub.w	r2, r3, r2, asr #1
  400be2:	ee03 2a10 	vmov	s6, r2
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400be6:	eddf 2a2b 	vldr	s5, [pc, #172]	; 400c94 <FusionCompassCalculateHeading+0x11c>
  400bea:	ee27 7a22 	vmul.f32	s14, s14, s5
  400bee:	ee27 7a03 	vmul.f32	s14, s14, s6
  400bf2:	ee27 7a03 	vmul.f32	s14, s14, s6
  400bf6:	eddf 4a28 	vldr	s9, [pc, #160]	; 400c98 <FusionCompassCalculateHeading+0x120>
  400bfa:	ee34 7ac7 	vsub.f32	s14, s9, s14
  400bfe:	ee67 7a03 	vmul.f32	s15, s14, s6
    result.axis.x = vector.axis.x * scalar;
  400c02:	ee67 5aa5 	vmul.f32	s11, s15, s11
    result.axis.y = vector.axis.y * scalar;
  400c06:	ee27 6a86 	vmul.f32	s12, s15, s12
    result.axis.z = vector.axis.z * scalar;
  400c0a:	ee67 7a85 	vmul.f32	s15, s15, s10
    result.axis.x = A.y * B.z - A.z * B.y;
  400c0e:	ee24 5a06 	vmul.f32	s10, s8, s12
  400c12:	ee26 7aa7 	vmul.f32	s14, s13, s15
  400c16:	ee35 5a47 	vsub.f32	s10, s10, s14
    result.axis.y = A.z * B.x - A.x * B.z;
  400c1a:	ee67 7aa3 	vmul.f32	s15, s15, s7
  400c1e:	ee24 4a25 	vmul.f32	s8, s8, s11
  400c22:	ee77 7ac4 	vsub.f32	s15, s15, s8
    result.axis.z = A.x * B.y - A.y * B.x;
  400c26:	ee66 6aa5 	vmul.f32	s13, s13, s11
  400c2a:	ee26 6a23 	vmul.f32	s12, s12, s7
  400c2e:	ee76 6ac6 	vsub.f32	s13, s13, s12
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  400c32:	ee25 7a05 	vmul.f32	s14, s10, s10
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  400c36:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  400c3e:	ee66 6aa6 	vmul.f32	s13, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400c46:	ee17 2a90 	vmov	r2, s15
  400c4a:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400c4e:	ee07 3a10 	vmov	s14, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400c52:	ee67 7aa2 	vmul.f32	s15, s15, s5
  400c56:	ee67 7a87 	vmul.f32	s15, s15, s14
  400c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
  400c5e:	ee74 7ae7 	vsub.f32	s15, s9, s15
  400c62:	ee67 7a87 	vmul.f32	s15, s15, s14

    // Compute direction of magnetic north (Earth's x axis)
    const FusionVector magneticNorth = FusionVectorNormalise(FusionVectorCrossProduct(magneticWest, accelerometer));

    // Calculate angular heading relative to magnetic north
    return FusionRadiansToDegrees(atan2f(magneticWest.axis.x, magneticNorth.axis.x));
  400c66:	ee67 7a85 	vmul.f32	s15, s15, s10
  400c6a:	ee17 1a90 	vmov	r1, s15
  400c6e:	ee15 0a90 	vmov	r0, s11
  400c72:	4b0a      	ldr	r3, [pc, #40]	; (400c9c <FusionCompassCalculateHeading+0x124>)
  400c74:	4798      	blx	r3
}
  400c76:	eddf 7a0a 	vldr	s15, [pc, #40]	; 400ca0 <FusionCompassCalculateHeading+0x128>
  400c7a:	ee07 0a10 	vmov	s14, r0
  400c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
  400c82:	ee17 0a90 	vmov	r0, s15
  400c86:	b005      	add	sp, #20
  400c88:	f85d eb04 	ldr.w	lr, [sp], #4
  400c8c:	b002      	add	sp, #8
  400c8e:	4770      	bx	lr
  400c90:	5f1f1412 	.word	0x5f1f1412
  400c94:	3f36d312 	.word	0x3f36d312
  400c98:	3fd851ff 	.word	0x3fd851ff
  400c9c:	00403e6d 	.word	0x00403e6d
  400ca0:	42652ee0 	.word	0x42652ee0

00400ca4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400ca4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400ca6:	4810      	ldr	r0, [pc, #64]	; (400ce8 <sysclk_init+0x44>)
  400ca8:	4b10      	ldr	r3, [pc, #64]	; (400cec <sysclk_init+0x48>)
  400caa:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400cac:	213e      	movs	r1, #62	; 0x3e
  400cae:	2000      	movs	r0, #0
  400cb0:	4b0f      	ldr	r3, [pc, #60]	; (400cf0 <sysclk_init+0x4c>)
  400cb2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400cb4:	4c0f      	ldr	r4, [pc, #60]	; (400cf4 <sysclk_init+0x50>)
  400cb6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400cb8:	2800      	cmp	r0, #0
  400cba:	d0fc      	beq.n	400cb6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400cbc:	4b0e      	ldr	r3, [pc, #56]	; (400cf8 <sysclk_init+0x54>)
  400cbe:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400cc0:	4a0e      	ldr	r2, [pc, #56]	; (400cfc <sysclk_init+0x58>)
  400cc2:	4b0f      	ldr	r3, [pc, #60]	; (400d00 <sysclk_init+0x5c>)
  400cc4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400cc6:	4c0f      	ldr	r4, [pc, #60]	; (400d04 <sysclk_init+0x60>)
  400cc8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400cca:	2800      	cmp	r0, #0
  400ccc:	d0fc      	beq.n	400cc8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400cce:	2002      	movs	r0, #2
  400cd0:	4b0d      	ldr	r3, [pc, #52]	; (400d08 <sysclk_init+0x64>)
  400cd2:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400cd4:	2000      	movs	r0, #0
  400cd6:	4b0d      	ldr	r3, [pc, #52]	; (400d0c <sysclk_init+0x68>)
  400cd8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400cda:	4b0d      	ldr	r3, [pc, #52]	; (400d10 <sysclk_init+0x6c>)
  400cdc:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400cde:	4802      	ldr	r0, [pc, #8]	; (400ce8 <sysclk_init+0x44>)
  400ce0:	4b02      	ldr	r3, [pc, #8]	; (400cec <sysclk_init+0x48>)
  400ce2:	4798      	blx	r3
  400ce4:	bd10      	pop	{r4, pc}
  400ce6:	bf00      	nop
  400ce8:	11e1a300 	.word	0x11e1a300
  400cec:	004015fd 	.word	0x004015fd
  400cf0:	00401219 	.word	0x00401219
  400cf4:	0040126d 	.word	0x0040126d
  400cf8:	0040127d 	.word	0x0040127d
  400cfc:	20183f01 	.word	0x20183f01
  400d00:	400e0600 	.word	0x400e0600
  400d04:	0040128d 	.word	0x0040128d
  400d08:	0040117d 	.word	0x0040117d
  400d0c:	004011b5 	.word	0x004011b5
  400d10:	004014f1 	.word	0x004014f1

00400d14 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400d18:	b980      	cbnz	r0, 400d3c <_read+0x28>
  400d1a:	460c      	mov	r4, r1
  400d1c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400d1e:	2a00      	cmp	r2, #0
  400d20:	dd0f      	ble.n	400d42 <_read+0x2e>
  400d22:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400d24:	4e08      	ldr	r6, [pc, #32]	; (400d48 <_read+0x34>)
  400d26:	4d09      	ldr	r5, [pc, #36]	; (400d4c <_read+0x38>)
  400d28:	6830      	ldr	r0, [r6, #0]
  400d2a:	4621      	mov	r1, r4
  400d2c:	682b      	ldr	r3, [r5, #0]
  400d2e:	4798      	blx	r3
		ptr++;
  400d30:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400d32:	42bc      	cmp	r4, r7
  400d34:	d1f8      	bne.n	400d28 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400d36:	4640      	mov	r0, r8
  400d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400d3c:	f04f 38ff 	mov.w	r8, #4294967295
  400d40:	e7f9      	b.n	400d36 <_read+0x22>
	for (; len > 0; --len) {
  400d42:	4680      	mov	r8, r0
  400d44:	e7f7      	b.n	400d36 <_read+0x22>
  400d46:	bf00      	nop
  400d48:	20400bd0 	.word	0x20400bd0
  400d4c:	20400bc8 	.word	0x20400bc8

00400d50 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400d50:	3801      	subs	r0, #1
  400d52:	2802      	cmp	r0, #2
  400d54:	d815      	bhi.n	400d82 <_write+0x32>
{
  400d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d5a:	460e      	mov	r6, r1
  400d5c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400d5e:	b19a      	cbz	r2, 400d88 <_write+0x38>
  400d60:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400d62:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400d9c <_write+0x4c>
  400d66:	4f0c      	ldr	r7, [pc, #48]	; (400d98 <_write+0x48>)
  400d68:	f8d8 0000 	ldr.w	r0, [r8]
  400d6c:	f815 1b01 	ldrb.w	r1, [r5], #1
  400d70:	683b      	ldr	r3, [r7, #0]
  400d72:	4798      	blx	r3
  400d74:	2800      	cmp	r0, #0
  400d76:	db0a      	blt.n	400d8e <_write+0x3e>
  400d78:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400d7a:	3c01      	subs	r4, #1
  400d7c:	d1f4      	bne.n	400d68 <_write+0x18>
  400d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400d82:	f04f 30ff 	mov.w	r0, #4294967295
  400d86:	4770      	bx	lr
	for (; len != 0; --len) {
  400d88:	4610      	mov	r0, r2
  400d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400d8e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d96:	bf00      	nop
  400d98:	20400bcc 	.word	0x20400bcc
  400d9c:	20400bd0 	.word	0x20400bd0

00400da0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400da2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400da6:	4b5c      	ldr	r3, [pc, #368]	; (400f18 <board_init+0x178>)
  400da8:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400daa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400dae:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400db2:	4b5a      	ldr	r3, [pc, #360]	; (400f1c <board_init+0x17c>)
  400db4:	2200      	movs	r2, #0
  400db6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400dba:	695a      	ldr	r2, [r3, #20]
  400dbc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400dc0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400dc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400dc6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400dca:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400dce:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400dd2:	f007 0007 	and.w	r0, r7, #7
  400dd6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400dd8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400ddc:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400de0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400de4:	f3bf 8f4f 	dsb	sy
  400de8:	f04f 34ff 	mov.w	r4, #4294967295
  400dec:	fa04 fc00 	lsl.w	ip, r4, r0
  400df0:	fa06 f000 	lsl.w	r0, r6, r0
  400df4:	fa04 f40e 	lsl.w	r4, r4, lr
  400df8:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400dfc:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400dfe:	463a      	mov	r2, r7
  400e00:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400e02:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400e06:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400e0a:	3a01      	subs	r2, #1
  400e0c:	4423      	add	r3, r4
  400e0e:	f1b2 3fff 	cmp.w	r2, #4294967295
  400e12:	d1f6      	bne.n	400e02 <board_init+0x62>
        } while(sets--);
  400e14:	3e01      	subs	r6, #1
  400e16:	4460      	add	r0, ip
  400e18:	f1b6 3fff 	cmp.w	r6, #4294967295
  400e1c:	d1ef      	bne.n	400dfe <board_init+0x5e>
  400e1e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400e22:	4b3e      	ldr	r3, [pc, #248]	; (400f1c <board_init+0x17c>)
  400e24:	695a      	ldr	r2, [r3, #20]
  400e26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400e2a:	615a      	str	r2, [r3, #20]
  400e2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e30:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400e34:	4a3a      	ldr	r2, [pc, #232]	; (400f20 <board_init+0x180>)
  400e36:	493b      	ldr	r1, [pc, #236]	; (400f24 <board_init+0x184>)
  400e38:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400e3a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400e3e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400e40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e44:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400e48:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400e4c:	f022 0201 	bic.w	r2, r2, #1
  400e50:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400e54:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400e58:	f022 0201 	bic.w	r2, r2, #1
  400e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400e60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e64:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400e68:	200a      	movs	r0, #10
  400e6a:	4c2f      	ldr	r4, [pc, #188]	; (400f28 <board_init+0x188>)
  400e6c:	47a0      	blx	r4
  400e6e:	200b      	movs	r0, #11
  400e70:	47a0      	blx	r4
  400e72:	200c      	movs	r0, #12
  400e74:	47a0      	blx	r4
  400e76:	2010      	movs	r0, #16
  400e78:	47a0      	blx	r4
  400e7a:	2011      	movs	r0, #17
  400e7c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e7e:	4b2b      	ldr	r3, [pc, #172]	; (400f2c <board_init+0x18c>)
  400e80:	f44f 7280 	mov.w	r2, #256	; 0x100
  400e84:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400e8a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400e8c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400e94:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400e9a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ea0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400ea2:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400ea8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400eaa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400eae:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400eb0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400eb2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400eb6:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400eb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400ebc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400ec0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400ec4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400ec8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ece:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ed0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400ed6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400ed8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400edc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ede:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400ee0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400ee4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ee6:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400ee8:	4a11      	ldr	r2, [pc, #68]	; (400f30 <board_init+0x190>)
  400eea:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400eee:	f043 0310 	orr.w	r3, r3, #16
  400ef2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400ef6:	4b0f      	ldr	r3, [pc, #60]	; (400f34 <board_init+0x194>)
  400ef8:	2210      	movs	r2, #16
  400efa:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400efc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f00:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f02:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400f08:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400f0a:	4311      	orrs	r1, r2
  400f0c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400f0e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400f10:	4311      	orrs	r1, r2
  400f12:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f14:	605a      	str	r2, [r3, #4]
  400f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f18:	400e1850 	.word	0x400e1850
  400f1c:	e000ed00 	.word	0xe000ed00
  400f20:	400e0c00 	.word	0x400e0c00
  400f24:	5a00080c 	.word	0x5a00080c
  400f28:	0040129d 	.word	0x0040129d
  400f2c:	400e1200 	.word	0x400e1200
  400f30:	40088000 	.word	0x40088000
  400f34:	400e1000 	.word	0x400e1000

00400f38 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400f38:	6301      	str	r1, [r0, #48]	; 0x30
  400f3a:	4770      	bx	lr

00400f3c <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400f3c:	6341      	str	r1, [r0, #52]	; 0x34
  400f3e:	4770      	bx	lr

00400f40 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400f40:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400f42:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400f46:	d03a      	beq.n	400fbe <pio_set_peripheral+0x7e>
  400f48:	d813      	bhi.n	400f72 <pio_set_peripheral+0x32>
  400f4a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400f4e:	d025      	beq.n	400f9c <pio_set_peripheral+0x5c>
  400f50:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400f54:	d10a      	bne.n	400f6c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f56:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f58:	4313      	orrs	r3, r2
  400f5a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f5c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f5e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400f60:	400b      	ands	r3, r1
  400f62:	ea23 0302 	bic.w	r3, r3, r2
  400f66:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400f68:	6042      	str	r2, [r0, #4]
  400f6a:	4770      	bx	lr
	switch (ul_type) {
  400f6c:	2900      	cmp	r1, #0
  400f6e:	d1fb      	bne.n	400f68 <pio_set_peripheral+0x28>
  400f70:	4770      	bx	lr
  400f72:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400f76:	d021      	beq.n	400fbc <pio_set_peripheral+0x7c>
  400f78:	d809      	bhi.n	400f8e <pio_set_peripheral+0x4e>
  400f7a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400f7e:	d1f3      	bne.n	400f68 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f80:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f82:	4313      	orrs	r3, r2
  400f84:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400f86:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f88:	4313      	orrs	r3, r2
  400f8a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f8c:	e7ec      	b.n	400f68 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400f8e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400f92:	d013      	beq.n	400fbc <pio_set_peripheral+0x7c>
  400f94:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f98:	d010      	beq.n	400fbc <pio_set_peripheral+0x7c>
  400f9a:	e7e5      	b.n	400f68 <pio_set_peripheral+0x28>
{
  400f9c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f9e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400fa0:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400fa2:	43d3      	mvns	r3, r2
  400fa4:	4021      	ands	r1, r4
  400fa6:	461c      	mov	r4, r3
  400fa8:	4019      	ands	r1, r3
  400faa:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400fac:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400fae:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400fb0:	400b      	ands	r3, r1
  400fb2:	4023      	ands	r3, r4
  400fb4:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400fb6:	6042      	str	r2, [r0, #4]
}
  400fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fbc:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fbe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400fc0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400fc2:	400b      	ands	r3, r1
  400fc4:	ea23 0302 	bic.w	r3, r3, r2
  400fc8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400fca:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400fcc:	4313      	orrs	r3, r2
  400fce:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400fd0:	e7ca      	b.n	400f68 <pio_set_peripheral+0x28>

00400fd2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400fd2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400fd4:	f012 0f01 	tst.w	r2, #1
  400fd8:	d10d      	bne.n	400ff6 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400fda:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400fdc:	f012 0f0a 	tst.w	r2, #10
  400fe0:	d00b      	beq.n	400ffa <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400fe2:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400fe4:	f012 0f02 	tst.w	r2, #2
  400fe8:	d109      	bne.n	400ffe <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400fea:	f012 0f08 	tst.w	r2, #8
  400fee:	d008      	beq.n	401002 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400ff0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400ff4:	e005      	b.n	401002 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400ff6:	6641      	str	r1, [r0, #100]	; 0x64
  400ff8:	e7f0      	b.n	400fdc <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400ffa:	6241      	str	r1, [r0, #36]	; 0x24
  400ffc:	e7f2      	b.n	400fe4 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400ffe:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401002:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401004:	6001      	str	r1, [r0, #0]
  401006:	4770      	bx	lr

00401008 <pio_set_output>:
{
  401008:	b410      	push	{r4}
  40100a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40100c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40100e:	b94c      	cbnz	r4, 401024 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401010:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401012:	b14b      	cbz	r3, 401028 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401014:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401016:	b94a      	cbnz	r2, 40102c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401018:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40101a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40101c:	6001      	str	r1, [r0, #0]
}
  40101e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401022:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401024:	6641      	str	r1, [r0, #100]	; 0x64
  401026:	e7f4      	b.n	401012 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401028:	6541      	str	r1, [r0, #84]	; 0x54
  40102a:	e7f4      	b.n	401016 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40102c:	6301      	str	r1, [r0, #48]	; 0x30
  40102e:	e7f4      	b.n	40101a <pio_set_output+0x12>

00401030 <pio_configure>:
{
  401030:	b570      	push	{r4, r5, r6, lr}
  401032:	b082      	sub	sp, #8
  401034:	4605      	mov	r5, r0
  401036:	4616      	mov	r6, r2
  401038:	461c      	mov	r4, r3
	switch (ul_type) {
  40103a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40103e:	d014      	beq.n	40106a <pio_configure+0x3a>
  401040:	d90a      	bls.n	401058 <pio_configure+0x28>
  401042:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401046:	d024      	beq.n	401092 <pio_configure+0x62>
  401048:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40104c:	d021      	beq.n	401092 <pio_configure+0x62>
  40104e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401052:	d017      	beq.n	401084 <pio_configure+0x54>
		return 0;
  401054:	2000      	movs	r0, #0
  401056:	e01a      	b.n	40108e <pio_configure+0x5e>
	switch (ul_type) {
  401058:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40105c:	d005      	beq.n	40106a <pio_configure+0x3a>
  40105e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401062:	d002      	beq.n	40106a <pio_configure+0x3a>
  401064:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401068:	d1f4      	bne.n	401054 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40106a:	4632      	mov	r2, r6
  40106c:	4628      	mov	r0, r5
  40106e:	4b11      	ldr	r3, [pc, #68]	; (4010b4 <pio_configure+0x84>)
  401070:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401072:	f014 0f01 	tst.w	r4, #1
  401076:	d102      	bne.n	40107e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401078:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40107a:	2001      	movs	r0, #1
  40107c:	e007      	b.n	40108e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40107e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401080:	2001      	movs	r0, #1
  401082:	e004      	b.n	40108e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401084:	461a      	mov	r2, r3
  401086:	4631      	mov	r1, r6
  401088:	4b0b      	ldr	r3, [pc, #44]	; (4010b8 <pio_configure+0x88>)
  40108a:	4798      	blx	r3
	return 1;
  40108c:	2001      	movs	r0, #1
}
  40108e:	b002      	add	sp, #8
  401090:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401092:	f004 0301 	and.w	r3, r4, #1
  401096:	9300      	str	r3, [sp, #0]
  401098:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40109c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4010a0:	bf14      	ite	ne
  4010a2:	2200      	movne	r2, #0
  4010a4:	2201      	moveq	r2, #1
  4010a6:	4631      	mov	r1, r6
  4010a8:	4628      	mov	r0, r5
  4010aa:	4c04      	ldr	r4, [pc, #16]	; (4010bc <pio_configure+0x8c>)
  4010ac:	47a0      	blx	r4
	return 1;
  4010ae:	2001      	movs	r0, #1
		break;
  4010b0:	e7ed      	b.n	40108e <pio_configure+0x5e>
  4010b2:	bf00      	nop
  4010b4:	00400f41 	.word	0x00400f41
  4010b8:	00400fd3 	.word	0x00400fd3
  4010bc:	00401009 	.word	0x00401009

004010c0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4010c0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4010c2:	4770      	bx	lr

004010c4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4010c4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4010c6:	4770      	bx	lr

004010c8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4010c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010cc:	4604      	mov	r4, r0
  4010ce:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4010d0:	4b0e      	ldr	r3, [pc, #56]	; (40110c <pio_handler_process+0x44>)
  4010d2:	4798      	blx	r3
  4010d4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4010d6:	4620      	mov	r0, r4
  4010d8:	4b0d      	ldr	r3, [pc, #52]	; (401110 <pio_handler_process+0x48>)
  4010da:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4010dc:	4005      	ands	r5, r0
  4010de:	d013      	beq.n	401108 <pio_handler_process+0x40>
  4010e0:	4c0c      	ldr	r4, [pc, #48]	; (401114 <pio_handler_process+0x4c>)
  4010e2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4010e6:	e003      	b.n	4010f0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4010e8:	42b4      	cmp	r4, r6
  4010ea:	d00d      	beq.n	401108 <pio_handler_process+0x40>
  4010ec:	3410      	adds	r4, #16
		while (status != 0) {
  4010ee:	b15d      	cbz	r5, 401108 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4010f0:	6820      	ldr	r0, [r4, #0]
  4010f2:	4540      	cmp	r0, r8
  4010f4:	d1f8      	bne.n	4010e8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4010f6:	6861      	ldr	r1, [r4, #4]
  4010f8:	4229      	tst	r1, r5
  4010fa:	d0f5      	beq.n	4010e8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4010fc:	68e3      	ldr	r3, [r4, #12]
  4010fe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401100:	6863      	ldr	r3, [r4, #4]
  401102:	ea25 0503 	bic.w	r5, r5, r3
  401106:	e7ef      	b.n	4010e8 <pio_handler_process+0x20>
  401108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40110c:	004010c1 	.word	0x004010c1
  401110:	004010c5 	.word	0x004010c5
  401114:	204009dc 	.word	0x204009dc

00401118 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401118:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40111a:	210a      	movs	r1, #10
  40111c:	4801      	ldr	r0, [pc, #4]	; (401124 <PIOA_Handler+0xc>)
  40111e:	4b02      	ldr	r3, [pc, #8]	; (401128 <PIOA_Handler+0x10>)
  401120:	4798      	blx	r3
  401122:	bd08      	pop	{r3, pc}
  401124:	400e0e00 	.word	0x400e0e00
  401128:	004010c9 	.word	0x004010c9

0040112c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40112c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40112e:	210b      	movs	r1, #11
  401130:	4801      	ldr	r0, [pc, #4]	; (401138 <PIOB_Handler+0xc>)
  401132:	4b02      	ldr	r3, [pc, #8]	; (40113c <PIOB_Handler+0x10>)
  401134:	4798      	blx	r3
  401136:	bd08      	pop	{r3, pc}
  401138:	400e1000 	.word	0x400e1000
  40113c:	004010c9 	.word	0x004010c9

00401140 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401140:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401142:	210c      	movs	r1, #12
  401144:	4801      	ldr	r0, [pc, #4]	; (40114c <PIOC_Handler+0xc>)
  401146:	4b02      	ldr	r3, [pc, #8]	; (401150 <PIOC_Handler+0x10>)
  401148:	4798      	blx	r3
  40114a:	bd08      	pop	{r3, pc}
  40114c:	400e1200 	.word	0x400e1200
  401150:	004010c9 	.word	0x004010c9

00401154 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401154:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401156:	2110      	movs	r1, #16
  401158:	4801      	ldr	r0, [pc, #4]	; (401160 <PIOD_Handler+0xc>)
  40115a:	4b02      	ldr	r3, [pc, #8]	; (401164 <PIOD_Handler+0x10>)
  40115c:	4798      	blx	r3
  40115e:	bd08      	pop	{r3, pc}
  401160:	400e1400 	.word	0x400e1400
  401164:	004010c9 	.word	0x004010c9

00401168 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401168:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40116a:	2111      	movs	r1, #17
  40116c:	4801      	ldr	r0, [pc, #4]	; (401174 <PIOE_Handler+0xc>)
  40116e:	4b02      	ldr	r3, [pc, #8]	; (401178 <PIOE_Handler+0x10>)
  401170:	4798      	blx	r3
  401172:	bd08      	pop	{r3, pc}
  401174:	400e1600 	.word	0x400e1600
  401178:	004010c9 	.word	0x004010c9

0040117c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40117c:	2803      	cmp	r0, #3
  40117e:	d011      	beq.n	4011a4 <pmc_mck_set_division+0x28>
  401180:	2804      	cmp	r0, #4
  401182:	d012      	beq.n	4011aa <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401184:	2802      	cmp	r0, #2
  401186:	bf0c      	ite	eq
  401188:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40118c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40118e:	4a08      	ldr	r2, [pc, #32]	; (4011b0 <pmc_mck_set_division+0x34>)
  401190:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401196:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401198:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40119a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40119c:	f013 0f08 	tst.w	r3, #8
  4011a0:	d0fb      	beq.n	40119a <pmc_mck_set_division+0x1e>
}
  4011a2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4011a4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4011a8:	e7f1      	b.n	40118e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4011aa:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4011ae:	e7ee      	b.n	40118e <pmc_mck_set_division+0x12>
  4011b0:	400e0600 	.word	0x400e0600

004011b4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4011b4:	4a17      	ldr	r2, [pc, #92]	; (401214 <pmc_switch_mck_to_pllack+0x60>)
  4011b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4011bc:	4318      	orrs	r0, r3
  4011be:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011c2:	f013 0f08 	tst.w	r3, #8
  4011c6:	d10a      	bne.n	4011de <pmc_switch_mck_to_pllack+0x2a>
  4011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4011cc:	4911      	ldr	r1, [pc, #68]	; (401214 <pmc_switch_mck_to_pllack+0x60>)
  4011ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011d0:	f012 0f08 	tst.w	r2, #8
  4011d4:	d103      	bne.n	4011de <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011d6:	3b01      	subs	r3, #1
  4011d8:	d1f9      	bne.n	4011ce <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4011da:	2001      	movs	r0, #1
  4011dc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4011de:	4a0d      	ldr	r2, [pc, #52]	; (401214 <pmc_switch_mck_to_pllack+0x60>)
  4011e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011e2:	f023 0303 	bic.w	r3, r3, #3
  4011e6:	f043 0302 	orr.w	r3, r3, #2
  4011ea:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011ee:	f013 0f08 	tst.w	r3, #8
  4011f2:	d10a      	bne.n	40120a <pmc_switch_mck_to_pllack+0x56>
  4011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4011f8:	4906      	ldr	r1, [pc, #24]	; (401214 <pmc_switch_mck_to_pllack+0x60>)
  4011fa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011fc:	f012 0f08 	tst.w	r2, #8
  401200:	d105      	bne.n	40120e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401202:	3b01      	subs	r3, #1
  401204:	d1f9      	bne.n	4011fa <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401206:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401208:	4770      	bx	lr
	return 0;
  40120a:	2000      	movs	r0, #0
  40120c:	4770      	bx	lr
  40120e:	2000      	movs	r0, #0
  401210:	4770      	bx	lr
  401212:	bf00      	nop
  401214:	400e0600 	.word	0x400e0600

00401218 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401218:	b9a0      	cbnz	r0, 401244 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40121a:	480e      	ldr	r0, [pc, #56]	; (401254 <pmc_switch_mainck_to_xtal+0x3c>)
  40121c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40121e:	0209      	lsls	r1, r1, #8
  401220:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401222:	4a0d      	ldr	r2, [pc, #52]	; (401258 <pmc_switch_mainck_to_xtal+0x40>)
  401224:	401a      	ands	r2, r3
  401226:	4b0d      	ldr	r3, [pc, #52]	; (40125c <pmc_switch_mainck_to_xtal+0x44>)
  401228:	4313      	orrs	r3, r2
  40122a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40122c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40122e:	4602      	mov	r2, r0
  401230:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401232:	f013 0f01 	tst.w	r3, #1
  401236:	d0fb      	beq.n	401230 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401238:	4a06      	ldr	r2, [pc, #24]	; (401254 <pmc_switch_mainck_to_xtal+0x3c>)
  40123a:	6a11      	ldr	r1, [r2, #32]
  40123c:	4b08      	ldr	r3, [pc, #32]	; (401260 <pmc_switch_mainck_to_xtal+0x48>)
  40123e:	430b      	orrs	r3, r1
  401240:	6213      	str	r3, [r2, #32]
  401242:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401244:	4903      	ldr	r1, [pc, #12]	; (401254 <pmc_switch_mainck_to_xtal+0x3c>)
  401246:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401248:	4a06      	ldr	r2, [pc, #24]	; (401264 <pmc_switch_mainck_to_xtal+0x4c>)
  40124a:	401a      	ands	r2, r3
  40124c:	4b06      	ldr	r3, [pc, #24]	; (401268 <pmc_switch_mainck_to_xtal+0x50>)
  40124e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401250:	620b      	str	r3, [r1, #32]
  401252:	4770      	bx	lr
  401254:	400e0600 	.word	0x400e0600
  401258:	ffc8fffc 	.word	0xffc8fffc
  40125c:	00370001 	.word	0x00370001
  401260:	01370000 	.word	0x01370000
  401264:	fec8fffc 	.word	0xfec8fffc
  401268:	01370002 	.word	0x01370002

0040126c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40126c:	4b02      	ldr	r3, [pc, #8]	; (401278 <pmc_osc_is_ready_mainck+0xc>)
  40126e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401270:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401274:	4770      	bx	lr
  401276:	bf00      	nop
  401278:	400e0600 	.word	0x400e0600

0040127c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40127c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401280:	4b01      	ldr	r3, [pc, #4]	; (401288 <pmc_disable_pllack+0xc>)
  401282:	629a      	str	r2, [r3, #40]	; 0x28
  401284:	4770      	bx	lr
  401286:	bf00      	nop
  401288:	400e0600 	.word	0x400e0600

0040128c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40128c:	4b02      	ldr	r3, [pc, #8]	; (401298 <pmc_is_locked_pllack+0xc>)
  40128e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401290:	f000 0002 	and.w	r0, r0, #2
  401294:	4770      	bx	lr
  401296:	bf00      	nop
  401298:	400e0600 	.word	0x400e0600

0040129c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40129c:	283f      	cmp	r0, #63	; 0x3f
  40129e:	d81e      	bhi.n	4012de <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4012a0:	281f      	cmp	r0, #31
  4012a2:	d80c      	bhi.n	4012be <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4012a4:	4b11      	ldr	r3, [pc, #68]	; (4012ec <pmc_enable_periph_clk+0x50>)
  4012a6:	699a      	ldr	r2, [r3, #24]
  4012a8:	2301      	movs	r3, #1
  4012aa:	4083      	lsls	r3, r0
  4012ac:	4393      	bics	r3, r2
  4012ae:	d018      	beq.n	4012e2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4012b0:	2301      	movs	r3, #1
  4012b2:	fa03 f000 	lsl.w	r0, r3, r0
  4012b6:	4b0d      	ldr	r3, [pc, #52]	; (4012ec <pmc_enable_periph_clk+0x50>)
  4012b8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4012ba:	2000      	movs	r0, #0
  4012bc:	4770      	bx	lr
		ul_id -= 32;
  4012be:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4012c0:	4b0a      	ldr	r3, [pc, #40]	; (4012ec <pmc_enable_periph_clk+0x50>)
  4012c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4012c6:	2301      	movs	r3, #1
  4012c8:	4083      	lsls	r3, r0
  4012ca:	4393      	bics	r3, r2
  4012cc:	d00b      	beq.n	4012e6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4012ce:	2301      	movs	r3, #1
  4012d0:	fa03 f000 	lsl.w	r0, r3, r0
  4012d4:	4b05      	ldr	r3, [pc, #20]	; (4012ec <pmc_enable_periph_clk+0x50>)
  4012d6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4012da:	2000      	movs	r0, #0
  4012dc:	4770      	bx	lr
		return 1;
  4012de:	2001      	movs	r0, #1
  4012e0:	4770      	bx	lr
	return 0;
  4012e2:	2000      	movs	r0, #0
  4012e4:	4770      	bx	lr
  4012e6:	2000      	movs	r0, #0
}
  4012e8:	4770      	bx	lr
  4012ea:	bf00      	nop
  4012ec:	400e0600 	.word	0x400e0600

004012f0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4012f0:	6943      	ldr	r3, [r0, #20]
  4012f2:	f013 0f02 	tst.w	r3, #2
  4012f6:	d002      	beq.n	4012fe <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4012f8:	61c1      	str	r1, [r0, #28]
	return 0;
  4012fa:	2000      	movs	r0, #0
  4012fc:	4770      	bx	lr
		return 1;
  4012fe:	2001      	movs	r0, #1
}
  401300:	4770      	bx	lr

00401302 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401302:	6943      	ldr	r3, [r0, #20]
  401304:	f013 0f01 	tst.w	r3, #1
  401308:	d003      	beq.n	401312 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40130a:	6983      	ldr	r3, [r0, #24]
  40130c:	700b      	strb	r3, [r1, #0]
	return 0;
  40130e:	2000      	movs	r0, #0
  401310:	4770      	bx	lr
		return 1;
  401312:	2001      	movs	r0, #1
}
  401314:	4770      	bx	lr

00401316 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401316:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401318:	010b      	lsls	r3, r1, #4
  40131a:	4293      	cmp	r3, r2
  40131c:	d914      	bls.n	401348 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40131e:	00c9      	lsls	r1, r1, #3
  401320:	084b      	lsrs	r3, r1, #1
  401322:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401326:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40132a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40132c:	1e5c      	subs	r4, r3, #1
  40132e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401332:	428c      	cmp	r4, r1
  401334:	d901      	bls.n	40133a <usart_set_async_baudrate+0x24>
		return 1;
  401336:	2001      	movs	r0, #1
  401338:	e017      	b.n	40136a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40133a:	6841      	ldr	r1, [r0, #4]
  40133c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401340:	6041      	str	r1, [r0, #4]
  401342:	e00c      	b.n	40135e <usart_set_async_baudrate+0x48>
		return 1;
  401344:	2001      	movs	r0, #1
  401346:	e010      	b.n	40136a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401348:	0859      	lsrs	r1, r3, #1
  40134a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40134e:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401352:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401354:	1e5c      	subs	r4, r3, #1
  401356:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40135a:	428c      	cmp	r4, r1
  40135c:	d8f2      	bhi.n	401344 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40135e:	0412      	lsls	r2, r2, #16
  401360:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401364:	431a      	orrs	r2, r3
  401366:	6202      	str	r2, [r0, #32]

	return 0;
  401368:	2000      	movs	r0, #0
}
  40136a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40136e:	4770      	bx	lr

00401370 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401370:	4b08      	ldr	r3, [pc, #32]	; (401394 <usart_reset+0x24>)
  401372:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401376:	2300      	movs	r3, #0
  401378:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40137a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40137c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40137e:	2388      	movs	r3, #136	; 0x88
  401380:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401382:	2324      	movs	r3, #36	; 0x24
  401384:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401386:	f44f 7380 	mov.w	r3, #256	; 0x100
  40138a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40138c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401390:	6003      	str	r3, [r0, #0]
  401392:	4770      	bx	lr
  401394:	55534100 	.word	0x55534100

00401398 <usart_init_rs232>:
{
  401398:	b570      	push	{r4, r5, r6, lr}
  40139a:	4605      	mov	r5, r0
  40139c:	460c      	mov	r4, r1
  40139e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4013a0:	4b0f      	ldr	r3, [pc, #60]	; (4013e0 <usart_init_rs232+0x48>)
  4013a2:	4798      	blx	r3
	ul_reg_val = 0;
  4013a4:	2200      	movs	r2, #0
  4013a6:	4b0f      	ldr	r3, [pc, #60]	; (4013e4 <usart_init_rs232+0x4c>)
  4013a8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4013aa:	b1a4      	cbz	r4, 4013d6 <usart_init_rs232+0x3e>
  4013ac:	4632      	mov	r2, r6
  4013ae:	6821      	ldr	r1, [r4, #0]
  4013b0:	4628      	mov	r0, r5
  4013b2:	4b0d      	ldr	r3, [pc, #52]	; (4013e8 <usart_init_rs232+0x50>)
  4013b4:	4798      	blx	r3
  4013b6:	4602      	mov	r2, r0
  4013b8:	b978      	cbnz	r0, 4013da <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4013ba:	6863      	ldr	r3, [r4, #4]
  4013bc:	68a1      	ldr	r1, [r4, #8]
  4013be:	430b      	orrs	r3, r1
  4013c0:	6921      	ldr	r1, [r4, #16]
  4013c2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4013c4:	68e1      	ldr	r1, [r4, #12]
  4013c6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4013c8:	4906      	ldr	r1, [pc, #24]	; (4013e4 <usart_init_rs232+0x4c>)
  4013ca:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4013cc:	6869      	ldr	r1, [r5, #4]
  4013ce:	430b      	orrs	r3, r1
  4013d0:	606b      	str	r3, [r5, #4]
}
  4013d2:	4610      	mov	r0, r2
  4013d4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4013d6:	2201      	movs	r2, #1
  4013d8:	e7fb      	b.n	4013d2 <usart_init_rs232+0x3a>
  4013da:	2201      	movs	r2, #1
  4013dc:	e7f9      	b.n	4013d2 <usart_init_rs232+0x3a>
  4013de:	bf00      	nop
  4013e0:	00401371 	.word	0x00401371
  4013e4:	20400a4c 	.word	0x20400a4c
  4013e8:	00401317 	.word	0x00401317

004013ec <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4013ec:	2340      	movs	r3, #64	; 0x40
  4013ee:	6003      	str	r3, [r0, #0]
  4013f0:	4770      	bx	lr

004013f2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4013f2:	2310      	movs	r3, #16
  4013f4:	6003      	str	r3, [r0, #0]
  4013f6:	4770      	bx	lr

004013f8 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4013f8:	6943      	ldr	r3, [r0, #20]
  4013fa:	f013 0f02 	tst.w	r3, #2
  4013fe:	d004      	beq.n	40140a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401400:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401404:	61c1      	str	r1, [r0, #28]
	return 0;
  401406:	2000      	movs	r0, #0
  401408:	4770      	bx	lr
		return 1;
  40140a:	2001      	movs	r0, #1
}
  40140c:	4770      	bx	lr

0040140e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40140e:	6943      	ldr	r3, [r0, #20]
  401410:	f013 0f01 	tst.w	r3, #1
  401414:	d005      	beq.n	401422 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401416:	6983      	ldr	r3, [r0, #24]
  401418:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40141c:	600b      	str	r3, [r1, #0]
	return 0;
  40141e:	2000      	movs	r0, #0
  401420:	4770      	bx	lr
		return 1;
  401422:	2001      	movs	r0, #1
}
  401424:	4770      	bx	lr

00401426 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401426:	e7fe      	b.n	401426 <Dummy_Handler>

00401428 <Reset_Handler>:
{
  401428:	b500      	push	{lr}
  40142a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40142c:	4b25      	ldr	r3, [pc, #148]	; (4014c4 <Reset_Handler+0x9c>)
  40142e:	4a26      	ldr	r2, [pc, #152]	; (4014c8 <Reset_Handler+0xa0>)
  401430:	429a      	cmp	r2, r3
  401432:	d010      	beq.n	401456 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401434:	4b25      	ldr	r3, [pc, #148]	; (4014cc <Reset_Handler+0xa4>)
  401436:	4a23      	ldr	r2, [pc, #140]	; (4014c4 <Reset_Handler+0x9c>)
  401438:	429a      	cmp	r2, r3
  40143a:	d20c      	bcs.n	401456 <Reset_Handler+0x2e>
  40143c:	3b01      	subs	r3, #1
  40143e:	1a9b      	subs	r3, r3, r2
  401440:	f023 0303 	bic.w	r3, r3, #3
  401444:	3304      	adds	r3, #4
  401446:	4413      	add	r3, r2
  401448:	491f      	ldr	r1, [pc, #124]	; (4014c8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40144a:	f851 0b04 	ldr.w	r0, [r1], #4
  40144e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401452:	429a      	cmp	r2, r3
  401454:	d1f9      	bne.n	40144a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401456:	4b1e      	ldr	r3, [pc, #120]	; (4014d0 <Reset_Handler+0xa8>)
  401458:	4a1e      	ldr	r2, [pc, #120]	; (4014d4 <Reset_Handler+0xac>)
  40145a:	429a      	cmp	r2, r3
  40145c:	d20a      	bcs.n	401474 <Reset_Handler+0x4c>
  40145e:	3b01      	subs	r3, #1
  401460:	1a9b      	subs	r3, r3, r2
  401462:	f023 0303 	bic.w	r3, r3, #3
  401466:	3304      	adds	r3, #4
  401468:	4413      	add	r3, r2
                *pDest++ = 0;
  40146a:	2100      	movs	r1, #0
  40146c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401470:	4293      	cmp	r3, r2
  401472:	d1fb      	bne.n	40146c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401474:	4a18      	ldr	r2, [pc, #96]	; (4014d8 <Reset_Handler+0xb0>)
  401476:	4b19      	ldr	r3, [pc, #100]	; (4014dc <Reset_Handler+0xb4>)
  401478:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40147c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40147e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401482:	fab3 f383 	clz	r3, r3
  401486:	095b      	lsrs	r3, r3, #5
  401488:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40148a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40148c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401490:	2200      	movs	r2, #0
  401492:	4b13      	ldr	r3, [pc, #76]	; (4014e0 <Reset_Handler+0xb8>)
  401494:	701a      	strb	r2, [r3, #0]
	return flags;
  401496:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401498:	4a12      	ldr	r2, [pc, #72]	; (4014e4 <Reset_Handler+0xbc>)
  40149a:	6813      	ldr	r3, [r2, #0]
  40149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4014a0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4014a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4014a6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4014aa:	b129      	cbz	r1, 4014b8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4014ac:	2201      	movs	r2, #1
  4014ae:	4b0c      	ldr	r3, [pc, #48]	; (4014e0 <Reset_Handler+0xb8>)
  4014b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4014b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4014b6:	b662      	cpsie	i
        __libc_init_array();
  4014b8:	4b0b      	ldr	r3, [pc, #44]	; (4014e8 <Reset_Handler+0xc0>)
  4014ba:	4798      	blx	r3
        main();
  4014bc:	4b0b      	ldr	r3, [pc, #44]	; (4014ec <Reset_Handler+0xc4>)
  4014be:	4798      	blx	r3
  4014c0:	e7fe      	b.n	4014c0 <Reset_Handler+0x98>
  4014c2:	bf00      	nop
  4014c4:	20400000 	.word	0x20400000
  4014c8:	0040ba94 	.word	0x0040ba94
  4014cc:	204009c0 	.word	0x204009c0
  4014d0:	20400c44 	.word	0x20400c44
  4014d4:	204009c0 	.word	0x204009c0
  4014d8:	e000ed00 	.word	0xe000ed00
  4014dc:	00400000 	.word	0x00400000
  4014e0:	20400000 	.word	0x20400000
  4014e4:	e000ed88 	.word	0xe000ed88
  4014e8:	004061b9 	.word	0x004061b9
  4014ec:	00403b55 	.word	0x00403b55

004014f0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4014f0:	4b3b      	ldr	r3, [pc, #236]	; (4015e0 <SystemCoreClockUpdate+0xf0>)
  4014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014f4:	f003 0303 	and.w	r3, r3, #3
  4014f8:	2b01      	cmp	r3, #1
  4014fa:	d01d      	beq.n	401538 <SystemCoreClockUpdate+0x48>
  4014fc:	b183      	cbz	r3, 401520 <SystemCoreClockUpdate+0x30>
  4014fe:	2b02      	cmp	r3, #2
  401500:	d036      	beq.n	401570 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401502:	4b37      	ldr	r3, [pc, #220]	; (4015e0 <SystemCoreClockUpdate+0xf0>)
  401504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401506:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40150a:	2b70      	cmp	r3, #112	; 0x70
  40150c:	d05f      	beq.n	4015ce <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40150e:	4b34      	ldr	r3, [pc, #208]	; (4015e0 <SystemCoreClockUpdate+0xf0>)
  401510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401512:	4934      	ldr	r1, [pc, #208]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
  401514:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401518:	680b      	ldr	r3, [r1, #0]
  40151a:	40d3      	lsrs	r3, r2
  40151c:	600b      	str	r3, [r1, #0]
  40151e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401520:	4b31      	ldr	r3, [pc, #196]	; (4015e8 <SystemCoreClockUpdate+0xf8>)
  401522:	695b      	ldr	r3, [r3, #20]
  401524:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401528:	bf14      	ite	ne
  40152a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40152e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401532:	4b2c      	ldr	r3, [pc, #176]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
  401534:	601a      	str	r2, [r3, #0]
  401536:	e7e4      	b.n	401502 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401538:	4b29      	ldr	r3, [pc, #164]	; (4015e0 <SystemCoreClockUpdate+0xf0>)
  40153a:	6a1b      	ldr	r3, [r3, #32]
  40153c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401540:	d003      	beq.n	40154a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401542:	4a2a      	ldr	r2, [pc, #168]	; (4015ec <SystemCoreClockUpdate+0xfc>)
  401544:	4b27      	ldr	r3, [pc, #156]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
  401546:	601a      	str	r2, [r3, #0]
  401548:	e7db      	b.n	401502 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40154a:	4a29      	ldr	r2, [pc, #164]	; (4015f0 <SystemCoreClockUpdate+0x100>)
  40154c:	4b25      	ldr	r3, [pc, #148]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
  40154e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401550:	4b23      	ldr	r3, [pc, #140]	; (4015e0 <SystemCoreClockUpdate+0xf0>)
  401552:	6a1b      	ldr	r3, [r3, #32]
  401554:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401558:	2b10      	cmp	r3, #16
  40155a:	d005      	beq.n	401568 <SystemCoreClockUpdate+0x78>
  40155c:	2b20      	cmp	r3, #32
  40155e:	d1d0      	bne.n	401502 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401560:	4a22      	ldr	r2, [pc, #136]	; (4015ec <SystemCoreClockUpdate+0xfc>)
  401562:	4b20      	ldr	r3, [pc, #128]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
  401564:	601a      	str	r2, [r3, #0]
          break;
  401566:	e7cc      	b.n	401502 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401568:	4a22      	ldr	r2, [pc, #136]	; (4015f4 <SystemCoreClockUpdate+0x104>)
  40156a:	4b1e      	ldr	r3, [pc, #120]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
  40156c:	601a      	str	r2, [r3, #0]
          break;
  40156e:	e7c8      	b.n	401502 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401570:	4b1b      	ldr	r3, [pc, #108]	; (4015e0 <SystemCoreClockUpdate+0xf0>)
  401572:	6a1b      	ldr	r3, [r3, #32]
  401574:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401578:	d016      	beq.n	4015a8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40157a:	4a1c      	ldr	r2, [pc, #112]	; (4015ec <SystemCoreClockUpdate+0xfc>)
  40157c:	4b19      	ldr	r3, [pc, #100]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
  40157e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401580:	4b17      	ldr	r3, [pc, #92]	; (4015e0 <SystemCoreClockUpdate+0xf0>)
  401582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401584:	f003 0303 	and.w	r3, r3, #3
  401588:	2b02      	cmp	r3, #2
  40158a:	d1ba      	bne.n	401502 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40158c:	4a14      	ldr	r2, [pc, #80]	; (4015e0 <SystemCoreClockUpdate+0xf0>)
  40158e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401590:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401592:	4814      	ldr	r0, [pc, #80]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401594:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401598:	6803      	ldr	r3, [r0, #0]
  40159a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40159e:	b2d2      	uxtb	r2, r2
  4015a0:	fbb3 f3f2 	udiv	r3, r3, r2
  4015a4:	6003      	str	r3, [r0, #0]
  4015a6:	e7ac      	b.n	401502 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015a8:	4a11      	ldr	r2, [pc, #68]	; (4015f0 <SystemCoreClockUpdate+0x100>)
  4015aa:	4b0e      	ldr	r3, [pc, #56]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
  4015ac:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4015ae:	4b0c      	ldr	r3, [pc, #48]	; (4015e0 <SystemCoreClockUpdate+0xf0>)
  4015b0:	6a1b      	ldr	r3, [r3, #32]
  4015b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015b6:	2b10      	cmp	r3, #16
  4015b8:	d005      	beq.n	4015c6 <SystemCoreClockUpdate+0xd6>
  4015ba:	2b20      	cmp	r3, #32
  4015bc:	d1e0      	bne.n	401580 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4015be:	4a0b      	ldr	r2, [pc, #44]	; (4015ec <SystemCoreClockUpdate+0xfc>)
  4015c0:	4b08      	ldr	r3, [pc, #32]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
  4015c2:	601a      	str	r2, [r3, #0]
          break;
  4015c4:	e7dc      	b.n	401580 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4015c6:	4a0b      	ldr	r2, [pc, #44]	; (4015f4 <SystemCoreClockUpdate+0x104>)
  4015c8:	4b06      	ldr	r3, [pc, #24]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
  4015ca:	601a      	str	r2, [r3, #0]
          break;
  4015cc:	e7d8      	b.n	401580 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4015ce:	4a05      	ldr	r2, [pc, #20]	; (4015e4 <SystemCoreClockUpdate+0xf4>)
  4015d0:	6813      	ldr	r3, [r2, #0]
  4015d2:	4909      	ldr	r1, [pc, #36]	; (4015f8 <SystemCoreClockUpdate+0x108>)
  4015d4:	fba1 1303 	umull	r1, r3, r1, r3
  4015d8:	085b      	lsrs	r3, r3, #1
  4015da:	6013      	str	r3, [r2, #0]
  4015dc:	4770      	bx	lr
  4015de:	bf00      	nop
  4015e0:	400e0600 	.word	0x400e0600
  4015e4:	20400004 	.word	0x20400004
  4015e8:	400e1810 	.word	0x400e1810
  4015ec:	00b71b00 	.word	0x00b71b00
  4015f0:	003d0900 	.word	0x003d0900
  4015f4:	007a1200 	.word	0x007a1200
  4015f8:	aaaaaaab 	.word	0xaaaaaaab

004015fc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4015fc:	4b16      	ldr	r3, [pc, #88]	; (401658 <system_init_flash+0x5c>)
  4015fe:	4298      	cmp	r0, r3
  401600:	d913      	bls.n	40162a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401602:	4b16      	ldr	r3, [pc, #88]	; (40165c <system_init_flash+0x60>)
  401604:	4298      	cmp	r0, r3
  401606:	d915      	bls.n	401634 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401608:	4b15      	ldr	r3, [pc, #84]	; (401660 <system_init_flash+0x64>)
  40160a:	4298      	cmp	r0, r3
  40160c:	d916      	bls.n	40163c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40160e:	4b15      	ldr	r3, [pc, #84]	; (401664 <system_init_flash+0x68>)
  401610:	4298      	cmp	r0, r3
  401612:	d917      	bls.n	401644 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401614:	4b14      	ldr	r3, [pc, #80]	; (401668 <system_init_flash+0x6c>)
  401616:	4298      	cmp	r0, r3
  401618:	d918      	bls.n	40164c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40161a:	4b14      	ldr	r3, [pc, #80]	; (40166c <system_init_flash+0x70>)
  40161c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40161e:	bf94      	ite	ls
  401620:	4a13      	ldrls	r2, [pc, #76]	; (401670 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401622:	4a14      	ldrhi	r2, [pc, #80]	; (401674 <system_init_flash+0x78>)
  401624:	4b14      	ldr	r3, [pc, #80]	; (401678 <system_init_flash+0x7c>)
  401626:	601a      	str	r2, [r3, #0]
  401628:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40162a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40162e:	4b12      	ldr	r3, [pc, #72]	; (401678 <system_init_flash+0x7c>)
  401630:	601a      	str	r2, [r3, #0]
  401632:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401634:	4a11      	ldr	r2, [pc, #68]	; (40167c <system_init_flash+0x80>)
  401636:	4b10      	ldr	r3, [pc, #64]	; (401678 <system_init_flash+0x7c>)
  401638:	601a      	str	r2, [r3, #0]
  40163a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40163c:	4a10      	ldr	r2, [pc, #64]	; (401680 <system_init_flash+0x84>)
  40163e:	4b0e      	ldr	r3, [pc, #56]	; (401678 <system_init_flash+0x7c>)
  401640:	601a      	str	r2, [r3, #0]
  401642:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401644:	4a0f      	ldr	r2, [pc, #60]	; (401684 <system_init_flash+0x88>)
  401646:	4b0c      	ldr	r3, [pc, #48]	; (401678 <system_init_flash+0x7c>)
  401648:	601a      	str	r2, [r3, #0]
  40164a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40164c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401650:	4b09      	ldr	r3, [pc, #36]	; (401678 <system_init_flash+0x7c>)
  401652:	601a      	str	r2, [r3, #0]
  401654:	4770      	bx	lr
  401656:	bf00      	nop
  401658:	015ef3bf 	.word	0x015ef3bf
  40165c:	02bde77f 	.word	0x02bde77f
  401660:	041cdb3f 	.word	0x041cdb3f
  401664:	057bceff 	.word	0x057bceff
  401668:	06dac2bf 	.word	0x06dac2bf
  40166c:	0839b67f 	.word	0x0839b67f
  401670:	04000500 	.word	0x04000500
  401674:	04000600 	.word	0x04000600
  401678:	400e0c00 	.word	0x400e0c00
  40167c:	04000100 	.word	0x04000100
  401680:	04000200 	.word	0x04000200
  401684:	04000300 	.word	0x04000300

00401688 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401688:	4b0a      	ldr	r3, [pc, #40]	; (4016b4 <_sbrk+0x2c>)
  40168a:	681b      	ldr	r3, [r3, #0]
  40168c:	b153      	cbz	r3, 4016a4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40168e:	4b09      	ldr	r3, [pc, #36]	; (4016b4 <_sbrk+0x2c>)
  401690:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401692:	181a      	adds	r2, r3, r0
  401694:	4908      	ldr	r1, [pc, #32]	; (4016b8 <_sbrk+0x30>)
  401696:	4291      	cmp	r1, r2
  401698:	db08      	blt.n	4016ac <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40169a:	4610      	mov	r0, r2
  40169c:	4a05      	ldr	r2, [pc, #20]	; (4016b4 <_sbrk+0x2c>)
  40169e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4016a0:	4618      	mov	r0, r3
  4016a2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4016a4:	4a05      	ldr	r2, [pc, #20]	; (4016bc <_sbrk+0x34>)
  4016a6:	4b03      	ldr	r3, [pc, #12]	; (4016b4 <_sbrk+0x2c>)
  4016a8:	601a      	str	r2, [r3, #0]
  4016aa:	e7f0      	b.n	40168e <_sbrk+0x6>
		return (caddr_t) -1;	
  4016ac:	f04f 30ff 	mov.w	r0, #4294967295
}
  4016b0:	4770      	bx	lr
  4016b2:	bf00      	nop
  4016b4:	20400a50 	.word	0x20400a50
  4016b8:	2045fffc 	.word	0x2045fffc
  4016bc:	20402e48 	.word	0x20402e48

004016c0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4016c0:	f04f 30ff 	mov.w	r0, #4294967295
  4016c4:	4770      	bx	lr

004016c6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4016c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4016ca:	604b      	str	r3, [r1, #4]

	return 0;
}
  4016cc:	2000      	movs	r0, #0
  4016ce:	4770      	bx	lr

004016d0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4016d0:	2001      	movs	r0, #1
  4016d2:	4770      	bx	lr

004016d4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4016d4:	2000      	movs	r0, #0
  4016d6:	4770      	bx	lr

004016d8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4016d8:	f100 0308 	add.w	r3, r0, #8
  4016dc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4016de:	f04f 32ff 	mov.w	r2, #4294967295
  4016e2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4016e4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4016e6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4016e8:	2300      	movs	r3, #0
  4016ea:	6003      	str	r3, [r0, #0]
  4016ec:	4770      	bx	lr

004016ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4016ee:	2300      	movs	r3, #0
  4016f0:	6103      	str	r3, [r0, #16]
  4016f2:	4770      	bx	lr

004016f4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4016f4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4016f6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4016f8:	689a      	ldr	r2, [r3, #8]
  4016fa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4016fc:	689a      	ldr	r2, [r3, #8]
  4016fe:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401700:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401702:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401704:	6803      	ldr	r3, [r0, #0]
  401706:	3301      	adds	r3, #1
  401708:	6003      	str	r3, [r0, #0]
  40170a:	4770      	bx	lr

0040170c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40170c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40170e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401710:	f1b5 3fff 	cmp.w	r5, #4294967295
  401714:	d002      	beq.n	40171c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401716:	f100 0208 	add.w	r2, r0, #8
  40171a:	e002      	b.n	401722 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  40171c:	6902      	ldr	r2, [r0, #16]
  40171e:	e004      	b.n	40172a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401720:	461a      	mov	r2, r3
  401722:	6853      	ldr	r3, [r2, #4]
  401724:	681c      	ldr	r4, [r3, #0]
  401726:	42a5      	cmp	r5, r4
  401728:	d2fa      	bcs.n	401720 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40172a:	6853      	ldr	r3, [r2, #4]
  40172c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40172e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401730:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401732:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401734:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401736:	6803      	ldr	r3, [r0, #0]
  401738:	3301      	adds	r3, #1
  40173a:	6003      	str	r3, [r0, #0]
}
  40173c:	bc30      	pop	{r4, r5}
  40173e:	4770      	bx	lr

00401740 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401740:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401742:	6842      	ldr	r2, [r0, #4]
  401744:	6881      	ldr	r1, [r0, #8]
  401746:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401748:	6882      	ldr	r2, [r0, #8]
  40174a:	6841      	ldr	r1, [r0, #4]
  40174c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40174e:	685a      	ldr	r2, [r3, #4]
  401750:	4290      	cmp	r0, r2
  401752:	d005      	beq.n	401760 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401754:	2200      	movs	r2, #0
  401756:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401758:	6818      	ldr	r0, [r3, #0]
  40175a:	3801      	subs	r0, #1
  40175c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40175e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401760:	6882      	ldr	r2, [r0, #8]
  401762:	605a      	str	r2, [r3, #4]
  401764:	e7f6      	b.n	401754 <uxListRemove+0x14>
	...

00401768 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401768:	4b0d      	ldr	r3, [pc, #52]	; (4017a0 <prvTaskExitError+0x38>)
  40176a:	681b      	ldr	r3, [r3, #0]
  40176c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401770:	d00a      	beq.n	401788 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401772:	f04f 0380 	mov.w	r3, #128	; 0x80
  401776:	b672      	cpsid	i
  401778:	f383 8811 	msr	BASEPRI, r3
  40177c:	f3bf 8f6f 	isb	sy
  401780:	f3bf 8f4f 	dsb	sy
  401784:	b662      	cpsie	i
  401786:	e7fe      	b.n	401786 <prvTaskExitError+0x1e>
  401788:	f04f 0380 	mov.w	r3, #128	; 0x80
  40178c:	b672      	cpsid	i
  40178e:	f383 8811 	msr	BASEPRI, r3
  401792:	f3bf 8f6f 	isb	sy
  401796:	f3bf 8f4f 	dsb	sy
  40179a:	b662      	cpsie	i
  40179c:	e7fe      	b.n	40179c <prvTaskExitError+0x34>
  40179e:	bf00      	nop
  4017a0:	20400008 	.word	0x20400008

004017a4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4017a4:	4806      	ldr	r0, [pc, #24]	; (4017c0 <prvPortStartFirstTask+0x1c>)
  4017a6:	6800      	ldr	r0, [r0, #0]
  4017a8:	6800      	ldr	r0, [r0, #0]
  4017aa:	f380 8808 	msr	MSP, r0
  4017ae:	b662      	cpsie	i
  4017b0:	b661      	cpsie	f
  4017b2:	f3bf 8f4f 	dsb	sy
  4017b6:	f3bf 8f6f 	isb	sy
  4017ba:	df00      	svc	0
  4017bc:	bf00      	nop
  4017be:	0000      	.short	0x0000
  4017c0:	e000ed08 	.word	0xe000ed08

004017c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4017c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4017d4 <vPortEnableVFP+0x10>
  4017c8:	6801      	ldr	r1, [r0, #0]
  4017ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4017ce:	6001      	str	r1, [r0, #0]
  4017d0:	4770      	bx	lr
  4017d2:	0000      	.short	0x0000
  4017d4:	e000ed88 	.word	0xe000ed88

004017d8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4017d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4017dc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4017e0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4017e4:	4b05      	ldr	r3, [pc, #20]	; (4017fc <pxPortInitialiseStack+0x24>)
  4017e6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4017ea:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4017ee:	f06f 0302 	mvn.w	r3, #2
  4017f2:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4017f6:	3844      	subs	r0, #68	; 0x44
  4017f8:	4770      	bx	lr
  4017fa:	bf00      	nop
  4017fc:	00401769 	.word	0x00401769

00401800 <SVC_Handler>:
	__asm volatile (
  401800:	4b06      	ldr	r3, [pc, #24]	; (40181c <pxCurrentTCBConst2>)
  401802:	6819      	ldr	r1, [r3, #0]
  401804:	6808      	ldr	r0, [r1, #0]
  401806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40180a:	f380 8809 	msr	PSP, r0
  40180e:	f3bf 8f6f 	isb	sy
  401812:	f04f 0000 	mov.w	r0, #0
  401816:	f380 8811 	msr	BASEPRI, r0
  40181a:	4770      	bx	lr

0040181c <pxCurrentTCBConst2>:
  40181c:	20400a5c 	.word	0x20400a5c
  401820:	4770      	bx	lr
  401822:	bf00      	nop

00401824 <vPortEnterCritical>:
  401824:	f04f 0380 	mov.w	r3, #128	; 0x80
  401828:	b672      	cpsid	i
  40182a:	f383 8811 	msr	BASEPRI, r3
  40182e:	f3bf 8f6f 	isb	sy
  401832:	f3bf 8f4f 	dsb	sy
  401836:	b662      	cpsie	i
	uxCriticalNesting++;
  401838:	4a0b      	ldr	r2, [pc, #44]	; (401868 <vPortEnterCritical+0x44>)
  40183a:	6813      	ldr	r3, [r2, #0]
  40183c:	3301      	adds	r3, #1
  40183e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401840:	2b01      	cmp	r3, #1
  401842:	d10f      	bne.n	401864 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401844:	4b09      	ldr	r3, [pc, #36]	; (40186c <vPortEnterCritical+0x48>)
  401846:	681b      	ldr	r3, [r3, #0]
  401848:	f013 0fff 	tst.w	r3, #255	; 0xff
  40184c:	d00a      	beq.n	401864 <vPortEnterCritical+0x40>
  40184e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401852:	b672      	cpsid	i
  401854:	f383 8811 	msr	BASEPRI, r3
  401858:	f3bf 8f6f 	isb	sy
  40185c:	f3bf 8f4f 	dsb	sy
  401860:	b662      	cpsie	i
  401862:	e7fe      	b.n	401862 <vPortEnterCritical+0x3e>
  401864:	4770      	bx	lr
  401866:	bf00      	nop
  401868:	20400008 	.word	0x20400008
  40186c:	e000ed04 	.word	0xe000ed04

00401870 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401870:	4b0a      	ldr	r3, [pc, #40]	; (40189c <vPortExitCritical+0x2c>)
  401872:	681b      	ldr	r3, [r3, #0]
  401874:	b953      	cbnz	r3, 40188c <vPortExitCritical+0x1c>
  401876:	f04f 0380 	mov.w	r3, #128	; 0x80
  40187a:	b672      	cpsid	i
  40187c:	f383 8811 	msr	BASEPRI, r3
  401880:	f3bf 8f6f 	isb	sy
  401884:	f3bf 8f4f 	dsb	sy
  401888:	b662      	cpsie	i
  40188a:	e7fe      	b.n	40188a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40188c:	3b01      	subs	r3, #1
  40188e:	4a03      	ldr	r2, [pc, #12]	; (40189c <vPortExitCritical+0x2c>)
  401890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401892:	b90b      	cbnz	r3, 401898 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401894:	f383 8811 	msr	BASEPRI, r3
  401898:	4770      	bx	lr
  40189a:	bf00      	nop
  40189c:	20400008 	.word	0x20400008

004018a0 <PendSV_Handler>:
	__asm volatile
  4018a0:	f3ef 8009 	mrs	r0, PSP
  4018a4:	f3bf 8f6f 	isb	sy
  4018a8:	4b15      	ldr	r3, [pc, #84]	; (401900 <pxCurrentTCBConst>)
  4018aa:	681a      	ldr	r2, [r3, #0]
  4018ac:	f01e 0f10 	tst.w	lr, #16
  4018b0:	bf08      	it	eq
  4018b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4018b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018ba:	6010      	str	r0, [r2, #0]
  4018bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4018c0:	f04f 0080 	mov.w	r0, #128	; 0x80
  4018c4:	b672      	cpsid	i
  4018c6:	f380 8811 	msr	BASEPRI, r0
  4018ca:	f3bf 8f4f 	dsb	sy
  4018ce:	f3bf 8f6f 	isb	sy
  4018d2:	b662      	cpsie	i
  4018d4:	f001 f890 	bl	4029f8 <vTaskSwitchContext>
  4018d8:	f04f 0000 	mov.w	r0, #0
  4018dc:	f380 8811 	msr	BASEPRI, r0
  4018e0:	bc08      	pop	{r3}
  4018e2:	6819      	ldr	r1, [r3, #0]
  4018e4:	6808      	ldr	r0, [r1, #0]
  4018e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018ea:	f01e 0f10 	tst.w	lr, #16
  4018ee:	bf08      	it	eq
  4018f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4018f4:	f380 8809 	msr	PSP, r0
  4018f8:	f3bf 8f6f 	isb	sy
  4018fc:	4770      	bx	lr
  4018fe:	bf00      	nop

00401900 <pxCurrentTCBConst>:
  401900:	20400a5c 	.word	0x20400a5c
  401904:	4770      	bx	lr
  401906:	bf00      	nop

00401908 <SysTick_Handler>:
{
  401908:	b508      	push	{r3, lr}
	__asm volatile
  40190a:	f3ef 8311 	mrs	r3, BASEPRI
  40190e:	f04f 0280 	mov.w	r2, #128	; 0x80
  401912:	b672      	cpsid	i
  401914:	f382 8811 	msr	BASEPRI, r2
  401918:	f3bf 8f6f 	isb	sy
  40191c:	f3bf 8f4f 	dsb	sy
  401920:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401922:	4b05      	ldr	r3, [pc, #20]	; (401938 <SysTick_Handler+0x30>)
  401924:	4798      	blx	r3
  401926:	b118      	cbz	r0, 401930 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40192c:	4b03      	ldr	r3, [pc, #12]	; (40193c <SysTick_Handler+0x34>)
  40192e:	601a      	str	r2, [r3, #0]
	__asm volatile
  401930:	2300      	movs	r3, #0
  401932:	f383 8811 	msr	BASEPRI, r3
  401936:	bd08      	pop	{r3, pc}
  401938:	00402665 	.word	0x00402665
  40193c:	e000ed04 	.word	0xe000ed04

00401940 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401940:	4a03      	ldr	r2, [pc, #12]	; (401950 <vPortSetupTimerInterrupt+0x10>)
  401942:	4b04      	ldr	r3, [pc, #16]	; (401954 <vPortSetupTimerInterrupt+0x14>)
  401944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401946:	2207      	movs	r2, #7
  401948:	3b04      	subs	r3, #4
  40194a:	601a      	str	r2, [r3, #0]
  40194c:	4770      	bx	lr
  40194e:	bf00      	nop
  401950:	000927bf 	.word	0x000927bf
  401954:	e000e014 	.word	0xe000e014

00401958 <xPortStartScheduler>:
{
  401958:	b500      	push	{lr}
  40195a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  40195c:	4b25      	ldr	r3, [pc, #148]	; (4019f4 <xPortStartScheduler+0x9c>)
  40195e:	781a      	ldrb	r2, [r3, #0]
  401960:	b2d2      	uxtb	r2, r2
  401962:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401964:	22ff      	movs	r2, #255	; 0xff
  401966:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401968:	781b      	ldrb	r3, [r3, #0]
  40196a:	b2db      	uxtb	r3, r3
  40196c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401970:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401974:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401978:	4a1f      	ldr	r2, [pc, #124]	; (4019f8 <xPortStartScheduler+0xa0>)
  40197a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  40197c:	2207      	movs	r2, #7
  40197e:	4b1f      	ldr	r3, [pc, #124]	; (4019fc <xPortStartScheduler+0xa4>)
  401980:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401982:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401986:	f013 0f80 	tst.w	r3, #128	; 0x80
  40198a:	d010      	beq.n	4019ae <xPortStartScheduler+0x56>
  40198c:	2206      	movs	r2, #6
  40198e:	e000      	b.n	401992 <xPortStartScheduler+0x3a>
  401990:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401992:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401996:	005b      	lsls	r3, r3, #1
  401998:	b2db      	uxtb	r3, r3
  40199a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40199e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4019a2:	1e51      	subs	r1, r2, #1
  4019a4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4019a8:	d1f2      	bne.n	401990 <xPortStartScheduler+0x38>
  4019aa:	4b14      	ldr	r3, [pc, #80]	; (4019fc <xPortStartScheduler+0xa4>)
  4019ac:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4019ae:	4a13      	ldr	r2, [pc, #76]	; (4019fc <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4019b0:	6813      	ldr	r3, [r2, #0]
  4019b2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4019b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4019b8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4019ba:	9b01      	ldr	r3, [sp, #4]
  4019bc:	b2db      	uxtb	r3, r3
  4019be:	4a0d      	ldr	r2, [pc, #52]	; (4019f4 <xPortStartScheduler+0x9c>)
  4019c0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4019c2:	4b0f      	ldr	r3, [pc, #60]	; (401a00 <xPortStartScheduler+0xa8>)
  4019c4:	681a      	ldr	r2, [r3, #0]
  4019c6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4019ca:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4019cc:	681a      	ldr	r2, [r3, #0]
  4019ce:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4019d2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4019d4:	4b0b      	ldr	r3, [pc, #44]	; (401a04 <xPortStartScheduler+0xac>)
  4019d6:	4798      	blx	r3
	uxCriticalNesting = 0;
  4019d8:	2200      	movs	r2, #0
  4019da:	4b0b      	ldr	r3, [pc, #44]	; (401a08 <xPortStartScheduler+0xb0>)
  4019dc:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4019de:	4b0b      	ldr	r3, [pc, #44]	; (401a0c <xPortStartScheduler+0xb4>)
  4019e0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4019e2:	4a0b      	ldr	r2, [pc, #44]	; (401a10 <xPortStartScheduler+0xb8>)
  4019e4:	6813      	ldr	r3, [r2, #0]
  4019e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4019ea:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4019ec:	4b09      	ldr	r3, [pc, #36]	; (401a14 <xPortStartScheduler+0xbc>)
  4019ee:	4798      	blx	r3
	prvTaskExitError();
  4019f0:	4b09      	ldr	r3, [pc, #36]	; (401a18 <xPortStartScheduler+0xc0>)
  4019f2:	4798      	blx	r3
  4019f4:	e000e400 	.word	0xe000e400
  4019f8:	20400a54 	.word	0x20400a54
  4019fc:	20400a58 	.word	0x20400a58
  401a00:	e000ed20 	.word	0xe000ed20
  401a04:	00401941 	.word	0x00401941
  401a08:	20400008 	.word	0x20400008
  401a0c:	004017c5 	.word	0x004017c5
  401a10:	e000ef34 	.word	0xe000ef34
  401a14:	004017a5 	.word	0x004017a5
  401a18:	00401769 	.word	0x00401769

00401a1c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401a1c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401a20:	2b0f      	cmp	r3, #15
  401a22:	d911      	bls.n	401a48 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401a24:	4a12      	ldr	r2, [pc, #72]	; (401a70 <vPortValidateInterruptPriority+0x54>)
  401a26:	5c9b      	ldrb	r3, [r3, r2]
  401a28:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401a2a:	4a12      	ldr	r2, [pc, #72]	; (401a74 <vPortValidateInterruptPriority+0x58>)
  401a2c:	7812      	ldrb	r2, [r2, #0]
  401a2e:	429a      	cmp	r2, r3
  401a30:	d90a      	bls.n	401a48 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401a32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a36:	b672      	cpsid	i
  401a38:	f383 8811 	msr	BASEPRI, r3
  401a3c:	f3bf 8f6f 	isb	sy
  401a40:	f3bf 8f4f 	dsb	sy
  401a44:	b662      	cpsie	i
  401a46:	e7fe      	b.n	401a46 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401a48:	4b0b      	ldr	r3, [pc, #44]	; (401a78 <vPortValidateInterruptPriority+0x5c>)
  401a4a:	681b      	ldr	r3, [r3, #0]
  401a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401a50:	4a0a      	ldr	r2, [pc, #40]	; (401a7c <vPortValidateInterruptPriority+0x60>)
  401a52:	6812      	ldr	r2, [r2, #0]
  401a54:	4293      	cmp	r3, r2
  401a56:	d90a      	bls.n	401a6e <vPortValidateInterruptPriority+0x52>
  401a58:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a5c:	b672      	cpsid	i
  401a5e:	f383 8811 	msr	BASEPRI, r3
  401a62:	f3bf 8f6f 	isb	sy
  401a66:	f3bf 8f4f 	dsb	sy
  401a6a:	b662      	cpsie	i
  401a6c:	e7fe      	b.n	401a6c <vPortValidateInterruptPriority+0x50>
  401a6e:	4770      	bx	lr
  401a70:	e000e3f0 	.word	0xe000e3f0
  401a74:	20400a54 	.word	0x20400a54
  401a78:	e000ed0c 	.word	0xe000ed0c
  401a7c:	20400a58 	.word	0x20400a58

00401a80 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401a80:	b510      	push	{r4, lr}
  401a82:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401a84:	4b06      	ldr	r3, [pc, #24]	; (401aa0 <pvPortMalloc+0x20>)
  401a86:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401a88:	4620      	mov	r0, r4
  401a8a:	4b06      	ldr	r3, [pc, #24]	; (401aa4 <pvPortMalloc+0x24>)
  401a8c:	4798      	blx	r3
  401a8e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401a90:	4b05      	ldr	r3, [pc, #20]	; (401aa8 <pvPortMalloc+0x28>)
  401a92:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401a94:	b10c      	cbz	r4, 401a9a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401a96:	4620      	mov	r0, r4
  401a98:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401a9a:	4b04      	ldr	r3, [pc, #16]	; (401aac <pvPortMalloc+0x2c>)
  401a9c:	4798      	blx	r3
	return pvReturn;
  401a9e:	e7fa      	b.n	401a96 <pvPortMalloc+0x16>
  401aa0:	00402649 	.word	0x00402649
  401aa4:	00406209 	.word	0x00406209
  401aa8:	004027b1 	.word	0x004027b1
  401aac:	004035df 	.word	0x004035df

00401ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401ab0:	b148      	cbz	r0, 401ac6 <vPortFree+0x16>
{
  401ab2:	b510      	push	{r4, lr}
  401ab4:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401ab6:	4b04      	ldr	r3, [pc, #16]	; (401ac8 <vPortFree+0x18>)
  401ab8:	4798      	blx	r3
		{
			free( pv );
  401aba:	4620      	mov	r0, r4
  401abc:	4b03      	ldr	r3, [pc, #12]	; (401acc <vPortFree+0x1c>)
  401abe:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401ac0:	4b03      	ldr	r3, [pc, #12]	; (401ad0 <vPortFree+0x20>)
  401ac2:	4798      	blx	r3
  401ac4:	bd10      	pop	{r4, pc}
  401ac6:	4770      	bx	lr
  401ac8:	00402649 	.word	0x00402649
  401acc:	00406219 	.word	0x00406219
  401ad0:	004027b1 	.word	0x004027b1

00401ad4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401ad4:	b538      	push	{r3, r4, r5, lr}
  401ad6:	4604      	mov	r4, r0
  401ad8:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401ada:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401adc:	b95a      	cbnz	r2, 401af6 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401ade:	6803      	ldr	r3, [r0, #0]
  401ae0:	2b00      	cmp	r3, #0
  401ae2:	d12e      	bne.n	401b42 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401ae4:	6840      	ldr	r0, [r0, #4]
  401ae6:	4b1b      	ldr	r3, [pc, #108]	; (401b54 <prvCopyDataToQueue+0x80>)
  401ae8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401aea:	2300      	movs	r3, #0
  401aec:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401aee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401af0:	3301      	adds	r3, #1
  401af2:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401af4:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401af6:	b96d      	cbnz	r5, 401b14 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401af8:	6880      	ldr	r0, [r0, #8]
  401afa:	4b17      	ldr	r3, [pc, #92]	; (401b58 <prvCopyDataToQueue+0x84>)
  401afc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401afe:	68a3      	ldr	r3, [r4, #8]
  401b00:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401b02:	4413      	add	r3, r2
  401b04:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401b06:	6862      	ldr	r2, [r4, #4]
  401b08:	4293      	cmp	r3, r2
  401b0a:	d31c      	bcc.n	401b46 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401b0c:	6823      	ldr	r3, [r4, #0]
  401b0e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401b10:	2000      	movs	r0, #0
  401b12:	e7ec      	b.n	401aee <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b14:	68c0      	ldr	r0, [r0, #12]
  401b16:	4b10      	ldr	r3, [pc, #64]	; (401b58 <prvCopyDataToQueue+0x84>)
  401b18:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401b1c:	425b      	negs	r3, r3
  401b1e:	68e2      	ldr	r2, [r4, #12]
  401b20:	441a      	add	r2, r3
  401b22:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401b24:	6821      	ldr	r1, [r4, #0]
  401b26:	428a      	cmp	r2, r1
  401b28:	d202      	bcs.n	401b30 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401b2a:	6862      	ldr	r2, [r4, #4]
  401b2c:	4413      	add	r3, r2
  401b2e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401b30:	2d02      	cmp	r5, #2
  401b32:	d10a      	bne.n	401b4a <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401b34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b36:	b153      	cbz	r3, 401b4e <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401b38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b3a:	3b01      	subs	r3, #1
  401b3c:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401b3e:	2000      	movs	r0, #0
  401b40:	e7d5      	b.n	401aee <prvCopyDataToQueue+0x1a>
  401b42:	2000      	movs	r0, #0
  401b44:	e7d3      	b.n	401aee <prvCopyDataToQueue+0x1a>
  401b46:	2000      	movs	r0, #0
  401b48:	e7d1      	b.n	401aee <prvCopyDataToQueue+0x1a>
  401b4a:	2000      	movs	r0, #0
  401b4c:	e7cf      	b.n	401aee <prvCopyDataToQueue+0x1a>
  401b4e:	2000      	movs	r0, #0
  401b50:	e7cd      	b.n	401aee <prvCopyDataToQueue+0x1a>
  401b52:	bf00      	nop
  401b54:	00402df9 	.word	0x00402df9
  401b58:	00406789 	.word	0x00406789

00401b5c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401b5c:	b530      	push	{r4, r5, lr}
  401b5e:	b083      	sub	sp, #12
  401b60:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401b62:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401b64:	b174      	cbz	r4, 401b84 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401b66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401b68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401b6a:	429a      	cmp	r2, r3
  401b6c:	d315      	bcc.n	401b9a <prvNotifyQueueSetContainer+0x3e>
  401b6e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b72:	b672      	cpsid	i
  401b74:	f383 8811 	msr	BASEPRI, r3
  401b78:	f3bf 8f6f 	isb	sy
  401b7c:	f3bf 8f4f 	dsb	sy
  401b80:	b662      	cpsie	i
  401b82:	e7fe      	b.n	401b82 <prvNotifyQueueSetContainer+0x26>
  401b84:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b88:	b672      	cpsid	i
  401b8a:	f383 8811 	msr	BASEPRI, r3
  401b8e:	f3bf 8f6f 	isb	sy
  401b92:	f3bf 8f4f 	dsb	sy
  401b96:	b662      	cpsie	i
  401b98:	e7fe      	b.n	401b98 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401b9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401b9c:	4293      	cmp	r3, r2
  401b9e:	d803      	bhi.n	401ba8 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401ba0:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401ba2:	4628      	mov	r0, r5
  401ba4:	b003      	add	sp, #12
  401ba6:	bd30      	pop	{r4, r5, pc}
  401ba8:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401baa:	a901      	add	r1, sp, #4
  401bac:	4620      	mov	r0, r4
  401bae:	4b0b      	ldr	r3, [pc, #44]	; (401bdc <prvNotifyQueueSetContainer+0x80>)
  401bb0:	4798      	blx	r3
  401bb2:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401bb4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401bba:	d10a      	bne.n	401bd2 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401bbe:	2b00      	cmp	r3, #0
  401bc0:	d0ef      	beq.n	401ba2 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401bc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401bc6:	4b06      	ldr	r3, [pc, #24]	; (401be0 <prvNotifyQueueSetContainer+0x84>)
  401bc8:	4798      	blx	r3
  401bca:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401bcc:	bf18      	it	ne
  401bce:	2501      	movne	r5, #1
  401bd0:	e7e7      	b.n	401ba2 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401bd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bd4:	3301      	adds	r3, #1
  401bd6:	64a3      	str	r3, [r4, #72]	; 0x48
  401bd8:	e7e3      	b.n	401ba2 <prvNotifyQueueSetContainer+0x46>
  401bda:	bf00      	nop
  401bdc:	00401ad5 	.word	0x00401ad5
  401be0:	00402bcd 	.word	0x00402bcd

00401be4 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401be4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401be6:	b172      	cbz	r2, 401c06 <prvCopyDataFromQueue+0x22>
{
  401be8:	b510      	push	{r4, lr}
  401bea:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401bec:	68c4      	ldr	r4, [r0, #12]
  401bee:	4414      	add	r4, r2
  401bf0:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401bf2:	6840      	ldr	r0, [r0, #4]
  401bf4:	4284      	cmp	r4, r0
  401bf6:	d301      	bcc.n	401bfc <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401bf8:	6818      	ldr	r0, [r3, #0]
  401bfa:	60d8      	str	r0, [r3, #12]
  401bfc:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401bfe:	68d9      	ldr	r1, [r3, #12]
  401c00:	4b01      	ldr	r3, [pc, #4]	; (401c08 <prvCopyDataFromQueue+0x24>)
  401c02:	4798      	blx	r3
  401c04:	bd10      	pop	{r4, pc}
  401c06:	4770      	bx	lr
  401c08:	00406789 	.word	0x00406789

00401c0c <prvUnlockQueue>:
{
  401c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c0e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401c10:	4b22      	ldr	r3, [pc, #136]	; (401c9c <prvUnlockQueue+0x90>)
  401c12:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401c14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c16:	2b00      	cmp	r3, #0
  401c18:	dd1b      	ble.n	401c52 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401c1a:	4d21      	ldr	r5, [pc, #132]	; (401ca0 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401c1c:	4f21      	ldr	r7, [pc, #132]	; (401ca4 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401c1e:	4e22      	ldr	r6, [pc, #136]	; (401ca8 <prvUnlockQueue+0x9c>)
  401c20:	e00b      	b.n	401c3a <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c24:	b1ab      	cbz	r3, 401c52 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401c26:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c2a:	47b0      	blx	r6
  401c2c:	b978      	cbnz	r0, 401c4e <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401c2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c30:	3b01      	subs	r3, #1
  401c32:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401c34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c36:	2b00      	cmp	r3, #0
  401c38:	dd0b      	ble.n	401c52 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401c3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401c3c:	2b00      	cmp	r3, #0
  401c3e:	d0f0      	beq.n	401c22 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401c40:	2100      	movs	r1, #0
  401c42:	4620      	mov	r0, r4
  401c44:	47a8      	blx	r5
  401c46:	2801      	cmp	r0, #1
  401c48:	d1f1      	bne.n	401c2e <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401c4a:	47b8      	blx	r7
  401c4c:	e7ef      	b.n	401c2e <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401c4e:	47b8      	blx	r7
  401c50:	e7ed      	b.n	401c2e <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401c52:	f04f 33ff 	mov.w	r3, #4294967295
  401c56:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401c58:	4b14      	ldr	r3, [pc, #80]	; (401cac <prvUnlockQueue+0xa0>)
  401c5a:	4798      	blx	r3
	taskENTER_CRITICAL();
  401c5c:	4b0f      	ldr	r3, [pc, #60]	; (401c9c <prvUnlockQueue+0x90>)
  401c5e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401c60:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c62:	2b00      	cmp	r3, #0
  401c64:	dd14      	ble.n	401c90 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c66:	6923      	ldr	r3, [r4, #16]
  401c68:	b193      	cbz	r3, 401c90 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c6a:	f104 0610 	add.w	r6, r4, #16
  401c6e:	4d0e      	ldr	r5, [pc, #56]	; (401ca8 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401c70:	4f0c      	ldr	r7, [pc, #48]	; (401ca4 <prvUnlockQueue+0x98>)
  401c72:	e007      	b.n	401c84 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401c74:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c76:	3b01      	subs	r3, #1
  401c78:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401c7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c7c:	2b00      	cmp	r3, #0
  401c7e:	dd07      	ble.n	401c90 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c80:	6923      	ldr	r3, [r4, #16]
  401c82:	b12b      	cbz	r3, 401c90 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c84:	4630      	mov	r0, r6
  401c86:	47a8      	blx	r5
  401c88:	2800      	cmp	r0, #0
  401c8a:	d0f3      	beq.n	401c74 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401c8c:	47b8      	blx	r7
  401c8e:	e7f1      	b.n	401c74 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401c90:	f04f 33ff 	mov.w	r3, #4294967295
  401c94:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401c96:	4b05      	ldr	r3, [pc, #20]	; (401cac <prvUnlockQueue+0xa0>)
  401c98:	4798      	blx	r3
  401c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c9c:	00401825 	.word	0x00401825
  401ca0:	00401b5d 	.word	0x00401b5d
  401ca4:	00402d29 	.word	0x00402d29
  401ca8:	00402bcd 	.word	0x00402bcd
  401cac:	00401871 	.word	0x00401871

00401cb0 <xQueueGenericReset>:
{
  401cb0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401cb2:	b308      	cbz	r0, 401cf8 <xQueueGenericReset+0x48>
  401cb4:	4604      	mov	r4, r0
  401cb6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401cb8:	4b1d      	ldr	r3, [pc, #116]	; (401d30 <xQueueGenericReset+0x80>)
  401cba:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401cbc:	6822      	ldr	r2, [r4, #0]
  401cbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401cc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401cc2:	fb03 f301 	mul.w	r3, r3, r1
  401cc6:	18d0      	adds	r0, r2, r3
  401cc8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401cca:	2000      	movs	r0, #0
  401ccc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401cce:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401cd0:	1a5b      	subs	r3, r3, r1
  401cd2:	4413      	add	r3, r2
  401cd4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401cd6:	f04f 33ff 	mov.w	r3, #4294967295
  401cda:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401cdc:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401cde:	b9fd      	cbnz	r5, 401d20 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401ce0:	6923      	ldr	r3, [r4, #16]
  401ce2:	b12b      	cbz	r3, 401cf0 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401ce4:	f104 0010 	add.w	r0, r4, #16
  401ce8:	4b12      	ldr	r3, [pc, #72]	; (401d34 <xQueueGenericReset+0x84>)
  401cea:	4798      	blx	r3
  401cec:	2801      	cmp	r0, #1
  401cee:	d00e      	beq.n	401d0e <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401cf0:	4b11      	ldr	r3, [pc, #68]	; (401d38 <xQueueGenericReset+0x88>)
  401cf2:	4798      	blx	r3
}
  401cf4:	2001      	movs	r0, #1
  401cf6:	bd38      	pop	{r3, r4, r5, pc}
  401cf8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cfc:	b672      	cpsid	i
  401cfe:	f383 8811 	msr	BASEPRI, r3
  401d02:	f3bf 8f6f 	isb	sy
  401d06:	f3bf 8f4f 	dsb	sy
  401d0a:	b662      	cpsie	i
  401d0c:	e7fe      	b.n	401d0c <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d12:	4b0a      	ldr	r3, [pc, #40]	; (401d3c <xQueueGenericReset+0x8c>)
  401d14:	601a      	str	r2, [r3, #0]
  401d16:	f3bf 8f4f 	dsb	sy
  401d1a:	f3bf 8f6f 	isb	sy
  401d1e:	e7e7      	b.n	401cf0 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401d20:	f104 0010 	add.w	r0, r4, #16
  401d24:	4d06      	ldr	r5, [pc, #24]	; (401d40 <xQueueGenericReset+0x90>)
  401d26:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401d28:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d2c:	47a8      	blx	r5
  401d2e:	e7df      	b.n	401cf0 <xQueueGenericReset+0x40>
  401d30:	00401825 	.word	0x00401825
  401d34:	00402bcd 	.word	0x00402bcd
  401d38:	00401871 	.word	0x00401871
  401d3c:	e000ed04 	.word	0xe000ed04
  401d40:	004016d9 	.word	0x004016d9

00401d44 <xQueueGenericCreate>:
{
  401d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401d46:	b950      	cbnz	r0, 401d5e <xQueueGenericCreate+0x1a>
  401d48:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d4c:	b672      	cpsid	i
  401d4e:	f383 8811 	msr	BASEPRI, r3
  401d52:	f3bf 8f6f 	isb	sy
  401d56:	f3bf 8f4f 	dsb	sy
  401d5a:	b662      	cpsie	i
  401d5c:	e7fe      	b.n	401d5c <xQueueGenericCreate+0x18>
  401d5e:	4606      	mov	r6, r0
  401d60:	4617      	mov	r7, r2
  401d62:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401d64:	b189      	cbz	r1, 401d8a <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d66:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401d6a:	3059      	adds	r0, #89	; 0x59
  401d6c:	4b12      	ldr	r3, [pc, #72]	; (401db8 <xQueueGenericCreate+0x74>)
  401d6e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401d70:	4604      	mov	r4, r0
  401d72:	b9e8      	cbnz	r0, 401db0 <xQueueGenericCreate+0x6c>
  401d74:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d78:	b672      	cpsid	i
  401d7a:	f383 8811 	msr	BASEPRI, r3
  401d7e:	f3bf 8f6f 	isb	sy
  401d82:	f3bf 8f4f 	dsb	sy
  401d86:	b662      	cpsie	i
  401d88:	e7fe      	b.n	401d88 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401d8a:	2058      	movs	r0, #88	; 0x58
  401d8c:	4b0a      	ldr	r3, [pc, #40]	; (401db8 <xQueueGenericCreate+0x74>)
  401d8e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401d90:	4604      	mov	r4, r0
  401d92:	2800      	cmp	r0, #0
  401d94:	d0ee      	beq.n	401d74 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401d96:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401d98:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401d9a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401d9c:	2101      	movs	r1, #1
  401d9e:	4620      	mov	r0, r4
  401da0:	4b06      	ldr	r3, [pc, #24]	; (401dbc <xQueueGenericCreate+0x78>)
  401da2:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401da4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401da8:	2300      	movs	r3, #0
  401daa:	6563      	str	r3, [r4, #84]	; 0x54
}
  401dac:	4620      	mov	r0, r4
  401dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401db0:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401db4:	6003      	str	r3, [r0, #0]
  401db6:	e7ef      	b.n	401d98 <xQueueGenericCreate+0x54>
  401db8:	00401a81 	.word	0x00401a81
  401dbc:	00401cb1 	.word	0x00401cb1

00401dc0 <xQueueGenericSend>:
{
  401dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401dc4:	b085      	sub	sp, #20
  401dc6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401dc8:	b1b8      	cbz	r0, 401dfa <xQueueGenericSend+0x3a>
  401dca:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401dcc:	b301      	cbz	r1, 401e10 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401dce:	2b02      	cmp	r3, #2
  401dd0:	d02c      	beq.n	401e2c <xQueueGenericSend+0x6c>
  401dd2:	461d      	mov	r5, r3
  401dd4:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401dd6:	4b66      	ldr	r3, [pc, #408]	; (401f70 <xQueueGenericSend+0x1b0>)
  401dd8:	4798      	blx	r3
  401dda:	2800      	cmp	r0, #0
  401ddc:	d134      	bne.n	401e48 <xQueueGenericSend+0x88>
  401dde:	9b01      	ldr	r3, [sp, #4]
  401de0:	2b00      	cmp	r3, #0
  401de2:	d038      	beq.n	401e56 <xQueueGenericSend+0x96>
  401de4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401de8:	b672      	cpsid	i
  401dea:	f383 8811 	msr	BASEPRI, r3
  401dee:	f3bf 8f6f 	isb	sy
  401df2:	f3bf 8f4f 	dsb	sy
  401df6:	b662      	cpsie	i
  401df8:	e7fe      	b.n	401df8 <xQueueGenericSend+0x38>
  401dfa:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dfe:	b672      	cpsid	i
  401e00:	f383 8811 	msr	BASEPRI, r3
  401e04:	f3bf 8f6f 	isb	sy
  401e08:	f3bf 8f4f 	dsb	sy
  401e0c:	b662      	cpsie	i
  401e0e:	e7fe      	b.n	401e0e <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401e10:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401e12:	2a00      	cmp	r2, #0
  401e14:	d0db      	beq.n	401dce <xQueueGenericSend+0xe>
  401e16:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e1a:	b672      	cpsid	i
  401e1c:	f383 8811 	msr	BASEPRI, r3
  401e20:	f3bf 8f6f 	isb	sy
  401e24:	f3bf 8f4f 	dsb	sy
  401e28:	b662      	cpsie	i
  401e2a:	e7fe      	b.n	401e2a <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401e2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401e2e:	2a01      	cmp	r2, #1
  401e30:	d0cf      	beq.n	401dd2 <xQueueGenericSend+0x12>
  401e32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e36:	b672      	cpsid	i
  401e38:	f383 8811 	msr	BASEPRI, r3
  401e3c:	f3bf 8f6f 	isb	sy
  401e40:	f3bf 8f4f 	dsb	sy
  401e44:	b662      	cpsie	i
  401e46:	e7fe      	b.n	401e46 <xQueueGenericSend+0x86>
  401e48:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401e4a:	4e4a      	ldr	r6, [pc, #296]	; (401f74 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401e4c:	f8df a150 	ldr.w	sl, [pc, #336]	; 401fa0 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401e50:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401f80 <xQueueGenericSend+0x1c0>
  401e54:	e042      	b.n	401edc <xQueueGenericSend+0x11c>
  401e56:	2700      	movs	r7, #0
  401e58:	e7f7      	b.n	401e4a <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401e5a:	462a      	mov	r2, r5
  401e5c:	4641      	mov	r1, r8
  401e5e:	4620      	mov	r0, r4
  401e60:	4b45      	ldr	r3, [pc, #276]	; (401f78 <xQueueGenericSend+0x1b8>)
  401e62:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401e64:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401e66:	b19b      	cbz	r3, 401e90 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401e68:	4629      	mov	r1, r5
  401e6a:	4620      	mov	r0, r4
  401e6c:	4b43      	ldr	r3, [pc, #268]	; (401f7c <xQueueGenericSend+0x1bc>)
  401e6e:	4798      	blx	r3
  401e70:	2801      	cmp	r0, #1
  401e72:	d107      	bne.n	401e84 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e78:	4b41      	ldr	r3, [pc, #260]	; (401f80 <xQueueGenericSend+0x1c0>)
  401e7a:	601a      	str	r2, [r3, #0]
  401e7c:	f3bf 8f4f 	dsb	sy
  401e80:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401e84:	4b3f      	ldr	r3, [pc, #252]	; (401f84 <xQueueGenericSend+0x1c4>)
  401e86:	4798      	blx	r3
				return pdPASS;
  401e88:	2001      	movs	r0, #1
}
  401e8a:	b005      	add	sp, #20
  401e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e92:	b173      	cbz	r3, 401eb2 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401e94:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e98:	4b3b      	ldr	r3, [pc, #236]	; (401f88 <xQueueGenericSend+0x1c8>)
  401e9a:	4798      	blx	r3
  401e9c:	2801      	cmp	r0, #1
  401e9e:	d1f1      	bne.n	401e84 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ea4:	4b36      	ldr	r3, [pc, #216]	; (401f80 <xQueueGenericSend+0x1c0>)
  401ea6:	601a      	str	r2, [r3, #0]
  401ea8:	f3bf 8f4f 	dsb	sy
  401eac:	f3bf 8f6f 	isb	sy
  401eb0:	e7e8      	b.n	401e84 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401eb2:	2800      	cmp	r0, #0
  401eb4:	d0e6      	beq.n	401e84 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401eba:	4b31      	ldr	r3, [pc, #196]	; (401f80 <xQueueGenericSend+0x1c0>)
  401ebc:	601a      	str	r2, [r3, #0]
  401ebe:	f3bf 8f4f 	dsb	sy
  401ec2:	f3bf 8f6f 	isb	sy
  401ec6:	e7dd      	b.n	401e84 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401ec8:	4b2e      	ldr	r3, [pc, #184]	; (401f84 <xQueueGenericSend+0x1c4>)
  401eca:	4798      	blx	r3
					return errQUEUE_FULL;
  401ecc:	2000      	movs	r0, #0
  401ece:	e7dc      	b.n	401e8a <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401ed0:	4620      	mov	r0, r4
  401ed2:	4b2e      	ldr	r3, [pc, #184]	; (401f8c <xQueueGenericSend+0x1cc>)
  401ed4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401ed6:	4b2e      	ldr	r3, [pc, #184]	; (401f90 <xQueueGenericSend+0x1d0>)
  401ed8:	4798      	blx	r3
  401eda:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401edc:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401ede:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401ee0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401ee2:	429a      	cmp	r2, r3
  401ee4:	d3b9      	bcc.n	401e5a <xQueueGenericSend+0x9a>
  401ee6:	2d02      	cmp	r5, #2
  401ee8:	d0b7      	beq.n	401e5a <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401eea:	9b01      	ldr	r3, [sp, #4]
  401eec:	2b00      	cmp	r3, #0
  401eee:	d0eb      	beq.n	401ec8 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401ef0:	b90f      	cbnz	r7, 401ef6 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401ef2:	a802      	add	r0, sp, #8
  401ef4:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401ef6:	4b23      	ldr	r3, [pc, #140]	; (401f84 <xQueueGenericSend+0x1c4>)
  401ef8:	4798      	blx	r3
		vTaskSuspendAll();
  401efa:	4b26      	ldr	r3, [pc, #152]	; (401f94 <xQueueGenericSend+0x1d4>)
  401efc:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401efe:	47b0      	blx	r6
  401f00:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f02:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f06:	d101      	bne.n	401f0c <xQueueGenericSend+0x14c>
  401f08:	2300      	movs	r3, #0
  401f0a:	6463      	str	r3, [r4, #68]	; 0x44
  401f0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f12:	d101      	bne.n	401f18 <xQueueGenericSend+0x158>
  401f14:	2300      	movs	r3, #0
  401f16:	64a3      	str	r3, [r4, #72]	; 0x48
  401f18:	4b1a      	ldr	r3, [pc, #104]	; (401f84 <xQueueGenericSend+0x1c4>)
  401f1a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401f1c:	a901      	add	r1, sp, #4
  401f1e:	a802      	add	r0, sp, #8
  401f20:	4b1d      	ldr	r3, [pc, #116]	; (401f98 <xQueueGenericSend+0x1d8>)
  401f22:	4798      	blx	r3
  401f24:	b9e0      	cbnz	r0, 401f60 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401f26:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401f28:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401f2c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401f2e:	4b15      	ldr	r3, [pc, #84]	; (401f84 <xQueueGenericSend+0x1c4>)
  401f30:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401f32:	45bb      	cmp	fp, r7
  401f34:	d1cc      	bne.n	401ed0 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401f36:	9901      	ldr	r1, [sp, #4]
  401f38:	f104 0010 	add.w	r0, r4, #16
  401f3c:	4b17      	ldr	r3, [pc, #92]	; (401f9c <xQueueGenericSend+0x1dc>)
  401f3e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401f40:	4620      	mov	r0, r4
  401f42:	4b12      	ldr	r3, [pc, #72]	; (401f8c <xQueueGenericSend+0x1cc>)
  401f44:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401f46:	4b12      	ldr	r3, [pc, #72]	; (401f90 <xQueueGenericSend+0x1d0>)
  401f48:	4798      	blx	r3
  401f4a:	2800      	cmp	r0, #0
  401f4c:	d1c5      	bne.n	401eda <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401f4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401f52:	f8c9 3000 	str.w	r3, [r9]
  401f56:	f3bf 8f4f 	dsb	sy
  401f5a:	f3bf 8f6f 	isb	sy
  401f5e:	e7bc      	b.n	401eda <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401f60:	4620      	mov	r0, r4
  401f62:	4b0a      	ldr	r3, [pc, #40]	; (401f8c <xQueueGenericSend+0x1cc>)
  401f64:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401f66:	4b0a      	ldr	r3, [pc, #40]	; (401f90 <xQueueGenericSend+0x1d0>)
  401f68:	4798      	blx	r3
			return errQUEUE_FULL;
  401f6a:	2000      	movs	r0, #0
  401f6c:	e78d      	b.n	401e8a <xQueueGenericSend+0xca>
  401f6e:	bf00      	nop
  401f70:	00402d35 	.word	0x00402d35
  401f74:	00401825 	.word	0x00401825
  401f78:	00401ad5 	.word	0x00401ad5
  401f7c:	00401b5d 	.word	0x00401b5d
  401f80:	e000ed04 	.word	0xe000ed04
  401f84:	00401871 	.word	0x00401871
  401f88:	00402bcd 	.word	0x00402bcd
  401f8c:	00401c0d 	.word	0x00401c0d
  401f90:	004027b1 	.word	0x004027b1
  401f94:	00402649 	.word	0x00402649
  401f98:	00402c95 	.word	0x00402c95
  401f9c:	00402ac9 	.word	0x00402ac9
  401fa0:	00402c65 	.word	0x00402c65

00401fa4 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401fa4:	2800      	cmp	r0, #0
  401fa6:	d036      	beq.n	402016 <xQueueGenericSendFromISR+0x72>
{
  401fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401fac:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401fae:	2900      	cmp	r1, #0
  401fb0:	d03c      	beq.n	40202c <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401fb2:	2b02      	cmp	r3, #2
  401fb4:	d048      	beq.n	402048 <xQueueGenericSendFromISR+0xa4>
  401fb6:	461e      	mov	r6, r3
  401fb8:	4615      	mov	r5, r2
  401fba:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401fbc:	4b35      	ldr	r3, [pc, #212]	; (402094 <xQueueGenericSendFromISR+0xf0>)
  401fbe:	4798      	blx	r3
	__asm volatile
  401fc0:	f3ef 8711 	mrs	r7, BASEPRI
  401fc4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fc8:	b672      	cpsid	i
  401fca:	f383 8811 	msr	BASEPRI, r3
  401fce:	f3bf 8f6f 	isb	sy
  401fd2:	f3bf 8f4f 	dsb	sy
  401fd6:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401fd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401fda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401fdc:	429a      	cmp	r2, r3
  401fde:	d301      	bcc.n	401fe4 <xQueueGenericSendFromISR+0x40>
  401fe0:	2e02      	cmp	r6, #2
  401fe2:	d14f      	bne.n	402084 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401fe4:	4632      	mov	r2, r6
  401fe6:	4641      	mov	r1, r8
  401fe8:	4620      	mov	r0, r4
  401fea:	4b2b      	ldr	r3, [pc, #172]	; (402098 <xQueueGenericSendFromISR+0xf4>)
  401fec:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401fee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ff4:	d141      	bne.n	40207a <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401ff6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401ff8:	2b00      	cmp	r3, #0
  401ffa:	d033      	beq.n	402064 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401ffc:	4631      	mov	r1, r6
  401ffe:	4620      	mov	r0, r4
  402000:	4b26      	ldr	r3, [pc, #152]	; (40209c <xQueueGenericSendFromISR+0xf8>)
  402002:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  402004:	2d00      	cmp	r5, #0
  402006:	d03f      	beq.n	402088 <xQueueGenericSendFromISR+0xe4>
  402008:	2801      	cmp	r0, #1
  40200a:	d13d      	bne.n	402088 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40200c:	6028      	str	r0, [r5, #0]
	__asm volatile
  40200e:	f387 8811 	msr	BASEPRI, r7
}
  402012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  402016:	f04f 0380 	mov.w	r3, #128	; 0x80
  40201a:	b672      	cpsid	i
  40201c:	f383 8811 	msr	BASEPRI, r3
  402020:	f3bf 8f6f 	isb	sy
  402024:	f3bf 8f4f 	dsb	sy
  402028:	b662      	cpsie	i
  40202a:	e7fe      	b.n	40202a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40202c:	6c00      	ldr	r0, [r0, #64]	; 0x40
  40202e:	2800      	cmp	r0, #0
  402030:	d0bf      	beq.n	401fb2 <xQueueGenericSendFromISR+0xe>
  402032:	f04f 0380 	mov.w	r3, #128	; 0x80
  402036:	b672      	cpsid	i
  402038:	f383 8811 	msr	BASEPRI, r3
  40203c:	f3bf 8f6f 	isb	sy
  402040:	f3bf 8f4f 	dsb	sy
  402044:	b662      	cpsie	i
  402046:	e7fe      	b.n	402046 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402048:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40204a:	2801      	cmp	r0, #1
  40204c:	d0b3      	beq.n	401fb6 <xQueueGenericSendFromISR+0x12>
  40204e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402052:	b672      	cpsid	i
  402054:	f383 8811 	msr	BASEPRI, r3
  402058:	f3bf 8f6f 	isb	sy
  40205c:	f3bf 8f4f 	dsb	sy
  402060:	b662      	cpsie	i
  402062:	e7fe      	b.n	402062 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402064:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402066:	b18b      	cbz	r3, 40208c <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402068:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40206c:	4b0c      	ldr	r3, [pc, #48]	; (4020a0 <xQueueGenericSendFromISR+0xfc>)
  40206e:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402070:	b175      	cbz	r5, 402090 <xQueueGenericSendFromISR+0xec>
  402072:	b168      	cbz	r0, 402090 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402074:	2001      	movs	r0, #1
  402076:	6028      	str	r0, [r5, #0]
  402078:	e7c9      	b.n	40200e <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  40207a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40207c:	3301      	adds	r3, #1
  40207e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402080:	2001      	movs	r0, #1
  402082:	e7c4      	b.n	40200e <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402084:	2000      	movs	r0, #0
  402086:	e7c2      	b.n	40200e <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402088:	2001      	movs	r0, #1
  40208a:	e7c0      	b.n	40200e <xQueueGenericSendFromISR+0x6a>
  40208c:	2001      	movs	r0, #1
  40208e:	e7be      	b.n	40200e <xQueueGenericSendFromISR+0x6a>
  402090:	2001      	movs	r0, #1
  402092:	e7bc      	b.n	40200e <xQueueGenericSendFromISR+0x6a>
  402094:	00401a1d 	.word	0x00401a1d
  402098:	00401ad5 	.word	0x00401ad5
  40209c:	00401b5d 	.word	0x00401b5d
  4020a0:	00402bcd 	.word	0x00402bcd

004020a4 <xQueueGenericReceive>:
{
  4020a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4020a8:	b084      	sub	sp, #16
  4020aa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4020ac:	b198      	cbz	r0, 4020d6 <xQueueGenericReceive+0x32>
  4020ae:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4020b0:	b1e1      	cbz	r1, 4020ec <xQueueGenericReceive+0x48>
  4020b2:	4698      	mov	r8, r3
  4020b4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4020b6:	4b61      	ldr	r3, [pc, #388]	; (40223c <xQueueGenericReceive+0x198>)
  4020b8:	4798      	blx	r3
  4020ba:	bb28      	cbnz	r0, 402108 <xQueueGenericReceive+0x64>
  4020bc:	9b01      	ldr	r3, [sp, #4]
  4020be:	b353      	cbz	r3, 402116 <xQueueGenericReceive+0x72>
  4020c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020c4:	b672      	cpsid	i
  4020c6:	f383 8811 	msr	BASEPRI, r3
  4020ca:	f3bf 8f6f 	isb	sy
  4020ce:	f3bf 8f4f 	dsb	sy
  4020d2:	b662      	cpsie	i
  4020d4:	e7fe      	b.n	4020d4 <xQueueGenericReceive+0x30>
  4020d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020da:	b672      	cpsid	i
  4020dc:	f383 8811 	msr	BASEPRI, r3
  4020e0:	f3bf 8f6f 	isb	sy
  4020e4:	f3bf 8f4f 	dsb	sy
  4020e8:	b662      	cpsie	i
  4020ea:	e7fe      	b.n	4020ea <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4020ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4020ee:	2a00      	cmp	r2, #0
  4020f0:	d0df      	beq.n	4020b2 <xQueueGenericReceive+0xe>
  4020f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020f6:	b672      	cpsid	i
  4020f8:	f383 8811 	msr	BASEPRI, r3
  4020fc:	f3bf 8f6f 	isb	sy
  402100:	f3bf 8f4f 	dsb	sy
  402104:	b662      	cpsie	i
  402106:	e7fe      	b.n	402106 <xQueueGenericReceive+0x62>
  402108:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  40210a:	4d4d      	ldr	r5, [pc, #308]	; (402240 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  40210c:	f8df a160 	ldr.w	sl, [pc, #352]	; 402270 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  402110:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402250 <xQueueGenericReceive+0x1ac>
  402114:	e04b      	b.n	4021ae <xQueueGenericReceive+0x10a>
  402116:	2600      	movs	r6, #0
  402118:	e7f7      	b.n	40210a <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  40211a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40211c:	4639      	mov	r1, r7
  40211e:	4620      	mov	r0, r4
  402120:	4b48      	ldr	r3, [pc, #288]	; (402244 <xQueueGenericReceive+0x1a0>)
  402122:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  402124:	f1b8 0f00 	cmp.w	r8, #0
  402128:	d11d      	bne.n	402166 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  40212a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40212c:	3b01      	subs	r3, #1
  40212e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402130:	6823      	ldr	r3, [r4, #0]
  402132:	b913      	cbnz	r3, 40213a <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  402134:	4b44      	ldr	r3, [pc, #272]	; (402248 <xQueueGenericReceive+0x1a4>)
  402136:	4798      	blx	r3
  402138:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40213a:	6923      	ldr	r3, [r4, #16]
  40213c:	b16b      	cbz	r3, 40215a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40213e:	f104 0010 	add.w	r0, r4, #16
  402142:	4b42      	ldr	r3, [pc, #264]	; (40224c <xQueueGenericReceive+0x1a8>)
  402144:	4798      	blx	r3
  402146:	2801      	cmp	r0, #1
  402148:	d107      	bne.n	40215a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40214a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40214e:	4b40      	ldr	r3, [pc, #256]	; (402250 <xQueueGenericReceive+0x1ac>)
  402150:	601a      	str	r2, [r3, #0]
  402152:	f3bf 8f4f 	dsb	sy
  402156:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40215a:	4b3e      	ldr	r3, [pc, #248]	; (402254 <xQueueGenericReceive+0x1b0>)
  40215c:	4798      	blx	r3
				return pdPASS;
  40215e:	2001      	movs	r0, #1
}
  402160:	b004      	add	sp, #16
  402162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402166:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402168:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40216a:	2b00      	cmp	r3, #0
  40216c:	d0f5      	beq.n	40215a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40216e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402172:	4b36      	ldr	r3, [pc, #216]	; (40224c <xQueueGenericReceive+0x1a8>)
  402174:	4798      	blx	r3
  402176:	2800      	cmp	r0, #0
  402178:	d0ef      	beq.n	40215a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40217a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40217e:	4b34      	ldr	r3, [pc, #208]	; (402250 <xQueueGenericReceive+0x1ac>)
  402180:	601a      	str	r2, [r3, #0]
  402182:	f3bf 8f4f 	dsb	sy
  402186:	f3bf 8f6f 	isb	sy
  40218a:	e7e6      	b.n	40215a <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  40218c:	4b31      	ldr	r3, [pc, #196]	; (402254 <xQueueGenericReceive+0x1b0>)
  40218e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402190:	2000      	movs	r0, #0
  402192:	e7e5      	b.n	402160 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402194:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402196:	6860      	ldr	r0, [r4, #4]
  402198:	4b2f      	ldr	r3, [pc, #188]	; (402258 <xQueueGenericReceive+0x1b4>)
  40219a:	4798      	blx	r3
						taskEXIT_CRITICAL();
  40219c:	4b2d      	ldr	r3, [pc, #180]	; (402254 <xQueueGenericReceive+0x1b0>)
  40219e:	4798      	blx	r3
  4021a0:	e030      	b.n	402204 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4021a2:	4620      	mov	r0, r4
  4021a4:	4b2d      	ldr	r3, [pc, #180]	; (40225c <xQueueGenericReceive+0x1b8>)
  4021a6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4021a8:	4b2d      	ldr	r3, [pc, #180]	; (402260 <xQueueGenericReceive+0x1bc>)
  4021aa:	4798      	blx	r3
  4021ac:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4021ae:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4021b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4021b2:	2b00      	cmp	r3, #0
  4021b4:	d1b1      	bne.n	40211a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4021b6:	9b01      	ldr	r3, [sp, #4]
  4021b8:	2b00      	cmp	r3, #0
  4021ba:	d0e7      	beq.n	40218c <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  4021bc:	b90e      	cbnz	r6, 4021c2 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  4021be:	a802      	add	r0, sp, #8
  4021c0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4021c2:	4b24      	ldr	r3, [pc, #144]	; (402254 <xQueueGenericReceive+0x1b0>)
  4021c4:	4798      	blx	r3
		vTaskSuspendAll();
  4021c6:	4b27      	ldr	r3, [pc, #156]	; (402264 <xQueueGenericReceive+0x1c0>)
  4021c8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4021ca:	47a8      	blx	r5
  4021cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
  4021d2:	d101      	bne.n	4021d8 <xQueueGenericReceive+0x134>
  4021d4:	2300      	movs	r3, #0
  4021d6:	6463      	str	r3, [r4, #68]	; 0x44
  4021d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4021da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4021de:	d101      	bne.n	4021e4 <xQueueGenericReceive+0x140>
  4021e0:	2300      	movs	r3, #0
  4021e2:	64a3      	str	r3, [r4, #72]	; 0x48
  4021e4:	4b1b      	ldr	r3, [pc, #108]	; (402254 <xQueueGenericReceive+0x1b0>)
  4021e6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4021e8:	a901      	add	r1, sp, #4
  4021ea:	a802      	add	r0, sp, #8
  4021ec:	4b1e      	ldr	r3, [pc, #120]	; (402268 <xQueueGenericReceive+0x1c4>)
  4021ee:	4798      	blx	r3
  4021f0:	b9e8      	cbnz	r0, 40222e <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  4021f2:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4021f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4021f6:	4b17      	ldr	r3, [pc, #92]	; (402254 <xQueueGenericReceive+0x1b0>)
  4021f8:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4021fa:	2e00      	cmp	r6, #0
  4021fc:	d1d1      	bne.n	4021a2 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4021fe:	6823      	ldr	r3, [r4, #0]
  402200:	2b00      	cmp	r3, #0
  402202:	d0c7      	beq.n	402194 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402204:	9901      	ldr	r1, [sp, #4]
  402206:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40220a:	4b18      	ldr	r3, [pc, #96]	; (40226c <xQueueGenericReceive+0x1c8>)
  40220c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40220e:	4620      	mov	r0, r4
  402210:	4b12      	ldr	r3, [pc, #72]	; (40225c <xQueueGenericReceive+0x1b8>)
  402212:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402214:	4b12      	ldr	r3, [pc, #72]	; (402260 <xQueueGenericReceive+0x1bc>)
  402216:	4798      	blx	r3
  402218:	2800      	cmp	r0, #0
  40221a:	d1c7      	bne.n	4021ac <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  40221c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402220:	f8c9 3000 	str.w	r3, [r9]
  402224:	f3bf 8f4f 	dsb	sy
  402228:	f3bf 8f6f 	isb	sy
  40222c:	e7be      	b.n	4021ac <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  40222e:	4620      	mov	r0, r4
  402230:	4b0a      	ldr	r3, [pc, #40]	; (40225c <xQueueGenericReceive+0x1b8>)
  402232:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402234:	4b0a      	ldr	r3, [pc, #40]	; (402260 <xQueueGenericReceive+0x1bc>)
  402236:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402238:	2000      	movs	r0, #0
  40223a:	e791      	b.n	402160 <xQueueGenericReceive+0xbc>
  40223c:	00402d35 	.word	0x00402d35
  402240:	00401825 	.word	0x00401825
  402244:	00401be5 	.word	0x00401be5
  402248:	00402eb5 	.word	0x00402eb5
  40224c:	00402bcd 	.word	0x00402bcd
  402250:	e000ed04 	.word	0xe000ed04
  402254:	00401871 	.word	0x00401871
  402258:	00402d55 	.word	0x00402d55
  40225c:	00401c0d 	.word	0x00401c0d
  402260:	004027b1 	.word	0x004027b1
  402264:	00402649 	.word	0x00402649
  402268:	00402c95 	.word	0x00402c95
  40226c:	00402ac9 	.word	0x00402ac9
  402270:	00402c65 	.word	0x00402c65

00402274 <vQueueAddToRegistry>:
	{
  402274:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402276:	4b0b      	ldr	r3, [pc, #44]	; (4022a4 <vQueueAddToRegistry+0x30>)
  402278:	681b      	ldr	r3, [r3, #0]
  40227a:	b153      	cbz	r3, 402292 <vQueueAddToRegistry+0x1e>
  40227c:	2301      	movs	r3, #1
  40227e:	4c09      	ldr	r4, [pc, #36]	; (4022a4 <vQueueAddToRegistry+0x30>)
  402280:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402284:	b132      	cbz	r2, 402294 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402286:	3301      	adds	r3, #1
  402288:	2b08      	cmp	r3, #8
  40228a:	d1f9      	bne.n	402280 <vQueueAddToRegistry+0xc>
	}
  40228c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402290:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402292:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402294:	4a03      	ldr	r2, [pc, #12]	; (4022a4 <vQueueAddToRegistry+0x30>)
  402296:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40229a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40229e:	6058      	str	r0, [r3, #4]
				break;
  4022a0:	e7f4      	b.n	40228c <vQueueAddToRegistry+0x18>
  4022a2:	bf00      	nop
  4022a4:	20400bd4 	.word	0x20400bd4

004022a8 <vQueueWaitForMessageRestricted>:
	{
  4022a8:	b570      	push	{r4, r5, r6, lr}
  4022aa:	4604      	mov	r4, r0
  4022ac:	460d      	mov	r5, r1
  4022ae:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4022b0:	4b0f      	ldr	r3, [pc, #60]	; (4022f0 <vQueueWaitForMessageRestricted+0x48>)
  4022b2:	4798      	blx	r3
  4022b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4022ba:	d00b      	beq.n	4022d4 <vQueueWaitForMessageRestricted+0x2c>
  4022bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4022be:	f1b3 3fff 	cmp.w	r3, #4294967295
  4022c2:	d00a      	beq.n	4022da <vQueueWaitForMessageRestricted+0x32>
  4022c4:	4b0b      	ldr	r3, [pc, #44]	; (4022f4 <vQueueWaitForMessageRestricted+0x4c>)
  4022c6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4022c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4022ca:	b14b      	cbz	r3, 4022e0 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  4022cc:	4620      	mov	r0, r4
  4022ce:	4b0a      	ldr	r3, [pc, #40]	; (4022f8 <vQueueWaitForMessageRestricted+0x50>)
  4022d0:	4798      	blx	r3
  4022d2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4022d4:	2300      	movs	r3, #0
  4022d6:	6463      	str	r3, [r4, #68]	; 0x44
  4022d8:	e7f0      	b.n	4022bc <vQueueWaitForMessageRestricted+0x14>
  4022da:	2300      	movs	r3, #0
  4022dc:	64a3      	str	r3, [r4, #72]	; 0x48
  4022de:	e7f1      	b.n	4022c4 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4022e0:	4632      	mov	r2, r6
  4022e2:	4629      	mov	r1, r5
  4022e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4022e8:	4b04      	ldr	r3, [pc, #16]	; (4022fc <vQueueWaitForMessageRestricted+0x54>)
  4022ea:	4798      	blx	r3
  4022ec:	e7ee      	b.n	4022cc <vQueueWaitForMessageRestricted+0x24>
  4022ee:	bf00      	nop
  4022f0:	00401825 	.word	0x00401825
  4022f4:	00401871 	.word	0x00401871
  4022f8:	00401c0d 	.word	0x00401c0d
  4022fc:	00402b4d 	.word	0x00402b4d

00402300 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402300:	4b08      	ldr	r3, [pc, #32]	; (402324 <prvResetNextTaskUnblockTime+0x24>)
  402302:	681b      	ldr	r3, [r3, #0]
  402304:	681b      	ldr	r3, [r3, #0]
  402306:	b13b      	cbz	r3, 402318 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402308:	4b06      	ldr	r3, [pc, #24]	; (402324 <prvResetNextTaskUnblockTime+0x24>)
  40230a:	681b      	ldr	r3, [r3, #0]
  40230c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40230e:	68db      	ldr	r3, [r3, #12]
  402310:	685a      	ldr	r2, [r3, #4]
  402312:	4b05      	ldr	r3, [pc, #20]	; (402328 <prvResetNextTaskUnblockTime+0x28>)
  402314:	601a      	str	r2, [r3, #0]
  402316:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402318:	f04f 32ff 	mov.w	r2, #4294967295
  40231c:	4b02      	ldr	r3, [pc, #8]	; (402328 <prvResetNextTaskUnblockTime+0x28>)
  40231e:	601a      	str	r2, [r3, #0]
  402320:	4770      	bx	lr
  402322:	bf00      	nop
  402324:	20400a60 	.word	0x20400a60
  402328:	20400b0c 	.word	0x20400b0c

0040232c <prvAddCurrentTaskToDelayedList>:
{
  40232c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40232e:	4b0f      	ldr	r3, [pc, #60]	; (40236c <prvAddCurrentTaskToDelayedList+0x40>)
  402330:	681b      	ldr	r3, [r3, #0]
  402332:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402334:	4b0e      	ldr	r3, [pc, #56]	; (402370 <prvAddCurrentTaskToDelayedList+0x44>)
  402336:	681b      	ldr	r3, [r3, #0]
  402338:	4298      	cmp	r0, r3
  40233a:	d30e      	bcc.n	40235a <prvAddCurrentTaskToDelayedList+0x2e>
  40233c:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40233e:	4b0d      	ldr	r3, [pc, #52]	; (402374 <prvAddCurrentTaskToDelayedList+0x48>)
  402340:	6818      	ldr	r0, [r3, #0]
  402342:	4b0a      	ldr	r3, [pc, #40]	; (40236c <prvAddCurrentTaskToDelayedList+0x40>)
  402344:	6819      	ldr	r1, [r3, #0]
  402346:	3104      	adds	r1, #4
  402348:	4b0b      	ldr	r3, [pc, #44]	; (402378 <prvAddCurrentTaskToDelayedList+0x4c>)
  40234a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  40234c:	4b0b      	ldr	r3, [pc, #44]	; (40237c <prvAddCurrentTaskToDelayedList+0x50>)
  40234e:	681b      	ldr	r3, [r3, #0]
  402350:	429c      	cmp	r4, r3
  402352:	d201      	bcs.n	402358 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402354:	4b09      	ldr	r3, [pc, #36]	; (40237c <prvAddCurrentTaskToDelayedList+0x50>)
  402356:	601c      	str	r4, [r3, #0]
  402358:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40235a:	4b09      	ldr	r3, [pc, #36]	; (402380 <prvAddCurrentTaskToDelayedList+0x54>)
  40235c:	6818      	ldr	r0, [r3, #0]
  40235e:	4b03      	ldr	r3, [pc, #12]	; (40236c <prvAddCurrentTaskToDelayedList+0x40>)
  402360:	6819      	ldr	r1, [r3, #0]
  402362:	3104      	adds	r1, #4
  402364:	4b04      	ldr	r3, [pc, #16]	; (402378 <prvAddCurrentTaskToDelayedList+0x4c>)
  402366:	4798      	blx	r3
  402368:	bd10      	pop	{r4, pc}
  40236a:	bf00      	nop
  40236c:	20400a5c 	.word	0x20400a5c
  402370:	20400b54 	.word	0x20400b54
  402374:	20400a60 	.word	0x20400a60
  402378:	0040170d 	.word	0x0040170d
  40237c:	20400b0c 	.word	0x20400b0c
  402380:	20400a64 	.word	0x20400a64

00402384 <xTaskGenericCreate>:
{
  402384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402388:	b083      	sub	sp, #12
  40238a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40238c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402390:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402392:	b160      	cbz	r0, 4023ae <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402394:	2d04      	cmp	r5, #4
  402396:	d915      	bls.n	4023c4 <xTaskGenericCreate+0x40>
  402398:	f04f 0380 	mov.w	r3, #128	; 0x80
  40239c:	b672      	cpsid	i
  40239e:	f383 8811 	msr	BASEPRI, r3
  4023a2:	f3bf 8f6f 	isb	sy
  4023a6:	f3bf 8f4f 	dsb	sy
  4023aa:	b662      	cpsie	i
  4023ac:	e7fe      	b.n	4023ac <xTaskGenericCreate+0x28>
  4023ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023b2:	b672      	cpsid	i
  4023b4:	f383 8811 	msr	BASEPRI, r3
  4023b8:	f3bf 8f6f 	isb	sy
  4023bc:	f3bf 8f4f 	dsb	sy
  4023c0:	b662      	cpsie	i
  4023c2:	e7fe      	b.n	4023c2 <xTaskGenericCreate+0x3e>
  4023c4:	9001      	str	r0, [sp, #4]
  4023c6:	4698      	mov	r8, r3
  4023c8:	4691      	mov	r9, r2
  4023ca:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023cc:	b936      	cbnz	r6, 4023dc <xTaskGenericCreate+0x58>
  4023ce:	0090      	lsls	r0, r2, #2
  4023d0:	4b62      	ldr	r3, [pc, #392]	; (40255c <xTaskGenericCreate+0x1d8>)
  4023d2:	4798      	blx	r3
		if( pxStack != NULL )
  4023d4:	4606      	mov	r6, r0
  4023d6:	2800      	cmp	r0, #0
  4023d8:	f000 809e 	beq.w	402518 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4023dc:	2058      	movs	r0, #88	; 0x58
  4023de:	4b5f      	ldr	r3, [pc, #380]	; (40255c <xTaskGenericCreate+0x1d8>)
  4023e0:	4798      	blx	r3
			if( pxNewTCB != NULL )
  4023e2:	4604      	mov	r4, r0
  4023e4:	2800      	cmp	r0, #0
  4023e6:	f000 8094 	beq.w	402512 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  4023ea:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4023ec:	ea4f 0289 	mov.w	r2, r9, lsl #2
  4023f0:	21a5      	movs	r1, #165	; 0xa5
  4023f2:	4630      	mov	r0, r6
  4023f4:	4b5a      	ldr	r3, [pc, #360]	; (402560 <xTaskGenericCreate+0x1dc>)
  4023f6:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4023f8:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  4023fc:	444e      	add	r6, r9
  4023fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402400:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402404:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402408:	783b      	ldrb	r3, [r7, #0]
  40240a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40240e:	783b      	ldrb	r3, [r7, #0]
  402410:	2b00      	cmp	r3, #0
  402412:	f040 8084 	bne.w	40251e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402416:	2700      	movs	r7, #0
  402418:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  40241c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40241e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402420:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402422:	f104 0904 	add.w	r9, r4, #4
  402426:	4648      	mov	r0, r9
  402428:	f8df b184 	ldr.w	fp, [pc, #388]	; 4025b0 <xTaskGenericCreate+0x22c>
  40242c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40242e:	f104 0018 	add.w	r0, r4, #24
  402432:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402434:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402436:	f1c5 0305 	rsb	r3, r5, #5
  40243a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40243c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  40243e:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402440:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402444:	4642      	mov	r2, r8
  402446:	9901      	ldr	r1, [sp, #4]
  402448:	4630      	mov	r0, r6
  40244a:	4b46      	ldr	r3, [pc, #280]	; (402564 <xTaskGenericCreate+0x1e0>)
  40244c:	4798      	blx	r3
  40244e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402450:	f1ba 0f00 	cmp.w	sl, #0
  402454:	d001      	beq.n	40245a <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402456:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  40245a:	4b43      	ldr	r3, [pc, #268]	; (402568 <xTaskGenericCreate+0x1e4>)
  40245c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  40245e:	4a43      	ldr	r2, [pc, #268]	; (40256c <xTaskGenericCreate+0x1e8>)
  402460:	6813      	ldr	r3, [r2, #0]
  402462:	3301      	adds	r3, #1
  402464:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402466:	4b42      	ldr	r3, [pc, #264]	; (402570 <xTaskGenericCreate+0x1ec>)
  402468:	681b      	ldr	r3, [r3, #0]
  40246a:	2b00      	cmp	r3, #0
  40246c:	d166      	bne.n	40253c <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  40246e:	4b40      	ldr	r3, [pc, #256]	; (402570 <xTaskGenericCreate+0x1ec>)
  402470:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402472:	6813      	ldr	r3, [r2, #0]
  402474:	2b01      	cmp	r3, #1
  402476:	d121      	bne.n	4024bc <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402478:	4f3e      	ldr	r7, [pc, #248]	; (402574 <xTaskGenericCreate+0x1f0>)
  40247a:	4638      	mov	r0, r7
  40247c:	4e3e      	ldr	r6, [pc, #248]	; (402578 <xTaskGenericCreate+0x1f4>)
  40247e:	47b0      	blx	r6
  402480:	f107 0014 	add.w	r0, r7, #20
  402484:	47b0      	blx	r6
  402486:	f107 0028 	add.w	r0, r7, #40	; 0x28
  40248a:	47b0      	blx	r6
  40248c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402490:	47b0      	blx	r6
  402492:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402496:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402498:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4025b4 <xTaskGenericCreate+0x230>
  40249c:	4640      	mov	r0, r8
  40249e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4024a0:	4f36      	ldr	r7, [pc, #216]	; (40257c <xTaskGenericCreate+0x1f8>)
  4024a2:	4638      	mov	r0, r7
  4024a4:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4024a6:	4836      	ldr	r0, [pc, #216]	; (402580 <xTaskGenericCreate+0x1fc>)
  4024a8:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4024aa:	4836      	ldr	r0, [pc, #216]	; (402584 <xTaskGenericCreate+0x200>)
  4024ac:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4024ae:	4836      	ldr	r0, [pc, #216]	; (402588 <xTaskGenericCreate+0x204>)
  4024b0:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4024b2:	4b36      	ldr	r3, [pc, #216]	; (40258c <xTaskGenericCreate+0x208>)
  4024b4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4024b8:	4b35      	ldr	r3, [pc, #212]	; (402590 <xTaskGenericCreate+0x20c>)
  4024ba:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  4024bc:	4a35      	ldr	r2, [pc, #212]	; (402594 <xTaskGenericCreate+0x210>)
  4024be:	6813      	ldr	r3, [r2, #0]
  4024c0:	3301      	adds	r3, #1
  4024c2:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4024c4:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4024c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4024c8:	4a33      	ldr	r2, [pc, #204]	; (402598 <xTaskGenericCreate+0x214>)
  4024ca:	6811      	ldr	r1, [r2, #0]
  4024cc:	2301      	movs	r3, #1
  4024ce:	4083      	lsls	r3, r0
  4024d0:	430b      	orrs	r3, r1
  4024d2:	6013      	str	r3, [r2, #0]
  4024d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4024d8:	4649      	mov	r1, r9
  4024da:	4b26      	ldr	r3, [pc, #152]	; (402574 <xTaskGenericCreate+0x1f0>)
  4024dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4024e0:	4b2e      	ldr	r3, [pc, #184]	; (40259c <xTaskGenericCreate+0x218>)
  4024e2:	4798      	blx	r3
		taskEXIT_CRITICAL();
  4024e4:	4b2e      	ldr	r3, [pc, #184]	; (4025a0 <xTaskGenericCreate+0x21c>)
  4024e6:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4024e8:	4b2e      	ldr	r3, [pc, #184]	; (4025a4 <xTaskGenericCreate+0x220>)
  4024ea:	681b      	ldr	r3, [r3, #0]
  4024ec:	2b00      	cmp	r3, #0
  4024ee:	d031      	beq.n	402554 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  4024f0:	4b1f      	ldr	r3, [pc, #124]	; (402570 <xTaskGenericCreate+0x1ec>)
  4024f2:	681b      	ldr	r3, [r3, #0]
  4024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4024f6:	429d      	cmp	r5, r3
  4024f8:	d92e      	bls.n	402558 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  4024fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4024fe:	4b2a      	ldr	r3, [pc, #168]	; (4025a8 <xTaskGenericCreate+0x224>)
  402500:	601a      	str	r2, [r3, #0]
  402502:	f3bf 8f4f 	dsb	sy
  402506:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40250a:	2001      	movs	r0, #1
}
  40250c:	b003      	add	sp, #12
  40250e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402512:	4630      	mov	r0, r6
  402514:	4b25      	ldr	r3, [pc, #148]	; (4025ac <xTaskGenericCreate+0x228>)
  402516:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402518:	f04f 30ff 	mov.w	r0, #4294967295
  40251c:	e7f6      	b.n	40250c <xTaskGenericCreate+0x188>
  40251e:	463b      	mov	r3, r7
  402520:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402524:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402526:	7859      	ldrb	r1, [r3, #1]
  402528:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40252c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402530:	2900      	cmp	r1, #0
  402532:	f43f af70 	beq.w	402416 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402536:	42bb      	cmp	r3, r7
  402538:	d1f5      	bne.n	402526 <xTaskGenericCreate+0x1a2>
  40253a:	e76c      	b.n	402416 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  40253c:	4b19      	ldr	r3, [pc, #100]	; (4025a4 <xTaskGenericCreate+0x220>)
  40253e:	681b      	ldr	r3, [r3, #0]
  402540:	2b00      	cmp	r3, #0
  402542:	d1bb      	bne.n	4024bc <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402544:	4b0a      	ldr	r3, [pc, #40]	; (402570 <xTaskGenericCreate+0x1ec>)
  402546:	681b      	ldr	r3, [r3, #0]
  402548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40254a:	429d      	cmp	r5, r3
  40254c:	d3b6      	bcc.n	4024bc <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  40254e:	4b08      	ldr	r3, [pc, #32]	; (402570 <xTaskGenericCreate+0x1ec>)
  402550:	601c      	str	r4, [r3, #0]
  402552:	e7b3      	b.n	4024bc <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  402554:	2001      	movs	r0, #1
  402556:	e7d9      	b.n	40250c <xTaskGenericCreate+0x188>
  402558:	2001      	movs	r0, #1
	return xReturn;
  40255a:	e7d7      	b.n	40250c <xTaskGenericCreate+0x188>
  40255c:	00401a81 	.word	0x00401a81
  402560:	004068bd 	.word	0x004068bd
  402564:	004017d9 	.word	0x004017d9
  402568:	00401825 	.word	0x00401825
  40256c:	20400acc 	.word	0x20400acc
  402570:	20400a5c 	.word	0x20400a5c
  402574:	20400a68 	.word	0x20400a68
  402578:	004016d9 	.word	0x004016d9
  40257c:	20400af8 	.word	0x20400af8
  402580:	20400b14 	.word	0x20400b14
  402584:	20400b40 	.word	0x20400b40
  402588:	20400b2c 	.word	0x20400b2c
  40258c:	20400a60 	.word	0x20400a60
  402590:	20400a64 	.word	0x20400a64
  402594:	20400ad8 	.word	0x20400ad8
  402598:	20400ae0 	.word	0x20400ae0
  40259c:	004016f5 	.word	0x004016f5
  4025a0:	00401871 	.word	0x00401871
  4025a4:	20400b28 	.word	0x20400b28
  4025a8:	e000ed04 	.word	0xe000ed04
  4025ac:	00401ab1 	.word	0x00401ab1
  4025b0:	004016ef 	.word	0x004016ef
  4025b4:	20400ae4 	.word	0x20400ae4

004025b8 <vTaskStartScheduler>:
{
  4025b8:	b510      	push	{r4, lr}
  4025ba:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4025bc:	2300      	movs	r3, #0
  4025be:	9303      	str	r3, [sp, #12]
  4025c0:	9302      	str	r3, [sp, #8]
  4025c2:	9301      	str	r3, [sp, #4]
  4025c4:	9300      	str	r3, [sp, #0]
  4025c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4025ca:	4917      	ldr	r1, [pc, #92]	; (402628 <vTaskStartScheduler+0x70>)
  4025cc:	4817      	ldr	r0, [pc, #92]	; (40262c <vTaskStartScheduler+0x74>)
  4025ce:	4c18      	ldr	r4, [pc, #96]	; (402630 <vTaskStartScheduler+0x78>)
  4025d0:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4025d2:	2801      	cmp	r0, #1
  4025d4:	d00b      	beq.n	4025ee <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  4025d6:	bb20      	cbnz	r0, 402622 <vTaskStartScheduler+0x6a>
  4025d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025dc:	b672      	cpsid	i
  4025de:	f383 8811 	msr	BASEPRI, r3
  4025e2:	f3bf 8f6f 	isb	sy
  4025e6:	f3bf 8f4f 	dsb	sy
  4025ea:	b662      	cpsie	i
  4025ec:	e7fe      	b.n	4025ec <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  4025ee:	4b11      	ldr	r3, [pc, #68]	; (402634 <vTaskStartScheduler+0x7c>)
  4025f0:	4798      	blx	r3
	if( xReturn == pdPASS )
  4025f2:	2801      	cmp	r0, #1
  4025f4:	d1ef      	bne.n	4025d6 <vTaskStartScheduler+0x1e>
  4025f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025fa:	b672      	cpsid	i
  4025fc:	f383 8811 	msr	BASEPRI, r3
  402600:	f3bf 8f6f 	isb	sy
  402604:	f3bf 8f4f 	dsb	sy
  402608:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  40260a:	f04f 32ff 	mov.w	r2, #4294967295
  40260e:	4b0a      	ldr	r3, [pc, #40]	; (402638 <vTaskStartScheduler+0x80>)
  402610:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402612:	2201      	movs	r2, #1
  402614:	4b09      	ldr	r3, [pc, #36]	; (40263c <vTaskStartScheduler+0x84>)
  402616:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402618:	2200      	movs	r2, #0
  40261a:	4b09      	ldr	r3, [pc, #36]	; (402640 <vTaskStartScheduler+0x88>)
  40261c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40261e:	4b09      	ldr	r3, [pc, #36]	; (402644 <vTaskStartScheduler+0x8c>)
  402620:	4798      	blx	r3
}
  402622:	b004      	add	sp, #16
  402624:	bd10      	pop	{r4, pc}
  402626:	bf00      	nop
  402628:	0040b27c 	.word	0x0040b27c
  40262c:	00402961 	.word	0x00402961
  402630:	00402385 	.word	0x00402385
  402634:	00402fa1 	.word	0x00402fa1
  402638:	20400b0c 	.word	0x20400b0c
  40263c:	20400b28 	.word	0x20400b28
  402640:	20400b54 	.word	0x20400b54
  402644:	00401959 	.word	0x00401959

00402648 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402648:	4a02      	ldr	r2, [pc, #8]	; (402654 <vTaskSuspendAll+0xc>)
  40264a:	6813      	ldr	r3, [r2, #0]
  40264c:	3301      	adds	r3, #1
  40264e:	6013      	str	r3, [r2, #0]
  402650:	4770      	bx	lr
  402652:	bf00      	nop
  402654:	20400ad4 	.word	0x20400ad4

00402658 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402658:	4b01      	ldr	r3, [pc, #4]	; (402660 <xTaskGetTickCount+0x8>)
  40265a:	6818      	ldr	r0, [r3, #0]
}
  40265c:	4770      	bx	lr
  40265e:	bf00      	nop
  402660:	20400b54 	.word	0x20400b54

00402664 <xTaskIncrementTick>:
{
  402664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402668:	4b42      	ldr	r3, [pc, #264]	; (402774 <xTaskIncrementTick+0x110>)
  40266a:	681b      	ldr	r3, [r3, #0]
  40266c:	2b00      	cmp	r3, #0
  40266e:	d178      	bne.n	402762 <xTaskIncrementTick+0xfe>
		++xTickCount;
  402670:	4b41      	ldr	r3, [pc, #260]	; (402778 <xTaskIncrementTick+0x114>)
  402672:	681a      	ldr	r2, [r3, #0]
  402674:	3201      	adds	r2, #1
  402676:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402678:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40267a:	b9d6      	cbnz	r6, 4026b2 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  40267c:	4b3f      	ldr	r3, [pc, #252]	; (40277c <xTaskIncrementTick+0x118>)
  40267e:	681b      	ldr	r3, [r3, #0]
  402680:	681b      	ldr	r3, [r3, #0]
  402682:	b153      	cbz	r3, 40269a <xTaskIncrementTick+0x36>
  402684:	f04f 0380 	mov.w	r3, #128	; 0x80
  402688:	b672      	cpsid	i
  40268a:	f383 8811 	msr	BASEPRI, r3
  40268e:	f3bf 8f6f 	isb	sy
  402692:	f3bf 8f4f 	dsb	sy
  402696:	b662      	cpsie	i
  402698:	e7fe      	b.n	402698 <xTaskIncrementTick+0x34>
  40269a:	4a38      	ldr	r2, [pc, #224]	; (40277c <xTaskIncrementTick+0x118>)
  40269c:	6811      	ldr	r1, [r2, #0]
  40269e:	4b38      	ldr	r3, [pc, #224]	; (402780 <xTaskIncrementTick+0x11c>)
  4026a0:	6818      	ldr	r0, [r3, #0]
  4026a2:	6010      	str	r0, [r2, #0]
  4026a4:	6019      	str	r1, [r3, #0]
  4026a6:	4a37      	ldr	r2, [pc, #220]	; (402784 <xTaskIncrementTick+0x120>)
  4026a8:	6813      	ldr	r3, [r2, #0]
  4026aa:	3301      	adds	r3, #1
  4026ac:	6013      	str	r3, [r2, #0]
  4026ae:	4b36      	ldr	r3, [pc, #216]	; (402788 <xTaskIncrementTick+0x124>)
  4026b0:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4026b2:	4b36      	ldr	r3, [pc, #216]	; (40278c <xTaskIncrementTick+0x128>)
  4026b4:	681b      	ldr	r3, [r3, #0]
  4026b6:	429e      	cmp	r6, r3
  4026b8:	d218      	bcs.n	4026ec <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4026ba:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4026bc:	4b34      	ldr	r3, [pc, #208]	; (402790 <xTaskIncrementTick+0x12c>)
  4026be:	681b      	ldr	r3, [r3, #0]
  4026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4026c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4026c6:	4a33      	ldr	r2, [pc, #204]	; (402794 <xTaskIncrementTick+0x130>)
  4026c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4026cc:	2b02      	cmp	r3, #2
  4026ce:	bf28      	it	cs
  4026d0:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4026d2:	4b31      	ldr	r3, [pc, #196]	; (402798 <xTaskIncrementTick+0x134>)
  4026d4:	681b      	ldr	r3, [r3, #0]
  4026d6:	b90b      	cbnz	r3, 4026dc <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  4026d8:	4b30      	ldr	r3, [pc, #192]	; (40279c <xTaskIncrementTick+0x138>)
  4026da:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4026dc:	4b30      	ldr	r3, [pc, #192]	; (4027a0 <xTaskIncrementTick+0x13c>)
  4026de:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4026e0:	2b00      	cmp	r3, #0
}
  4026e2:	bf0c      	ite	eq
  4026e4:	4620      	moveq	r0, r4
  4026e6:	2001      	movne	r0, #1
  4026e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026ec:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4026ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 40277c <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4026f2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4027ac <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4026f6:	4f2b      	ldr	r7, [pc, #172]	; (4027a4 <xTaskIncrementTick+0x140>)
  4026f8:	e01f      	b.n	40273a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4026fa:	f04f 32ff 	mov.w	r2, #4294967295
  4026fe:	4b23      	ldr	r3, [pc, #140]	; (40278c <xTaskIncrementTick+0x128>)
  402700:	601a      	str	r2, [r3, #0]
						break;
  402702:	e7db      	b.n	4026bc <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402704:	4a21      	ldr	r2, [pc, #132]	; (40278c <xTaskIncrementTick+0x128>)
  402706:	6013      	str	r3, [r2, #0]
							break;
  402708:	e7d8      	b.n	4026bc <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40270a:	f105 0018 	add.w	r0, r5, #24
  40270e:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402710:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402712:	683a      	ldr	r2, [r7, #0]
  402714:	2301      	movs	r3, #1
  402716:	4083      	lsls	r3, r0
  402718:	4313      	orrs	r3, r2
  40271a:	603b      	str	r3, [r7, #0]
  40271c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402720:	4651      	mov	r1, sl
  402722:	4b1c      	ldr	r3, [pc, #112]	; (402794 <xTaskIncrementTick+0x130>)
  402724:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402728:	4b1f      	ldr	r3, [pc, #124]	; (4027a8 <xTaskIncrementTick+0x144>)
  40272a:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40272c:	4b18      	ldr	r3, [pc, #96]	; (402790 <xTaskIncrementTick+0x12c>)
  40272e:	681b      	ldr	r3, [r3, #0]
  402730:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402734:	429a      	cmp	r2, r3
  402736:	bf28      	it	cs
  402738:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40273a:	f8d9 3000 	ldr.w	r3, [r9]
  40273e:	681b      	ldr	r3, [r3, #0]
  402740:	2b00      	cmp	r3, #0
  402742:	d0da      	beq.n	4026fa <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402744:	f8d9 3000 	ldr.w	r3, [r9]
  402748:	68db      	ldr	r3, [r3, #12]
  40274a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40274c:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40274e:	429e      	cmp	r6, r3
  402750:	d3d8      	bcc.n	402704 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402752:	f105 0a04 	add.w	sl, r5, #4
  402756:	4650      	mov	r0, sl
  402758:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40275a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40275c:	2b00      	cmp	r3, #0
  40275e:	d1d4      	bne.n	40270a <xTaskIncrementTick+0xa6>
  402760:	e7d6      	b.n	402710 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402762:	4a0d      	ldr	r2, [pc, #52]	; (402798 <xTaskIncrementTick+0x134>)
  402764:	6813      	ldr	r3, [r2, #0]
  402766:	3301      	adds	r3, #1
  402768:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40276a:	4b0c      	ldr	r3, [pc, #48]	; (40279c <xTaskIncrementTick+0x138>)
  40276c:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40276e:	2400      	movs	r4, #0
  402770:	e7b4      	b.n	4026dc <xTaskIncrementTick+0x78>
  402772:	bf00      	nop
  402774:	20400ad4 	.word	0x20400ad4
  402778:	20400b54 	.word	0x20400b54
  40277c:	20400a60 	.word	0x20400a60
  402780:	20400a64 	.word	0x20400a64
  402784:	20400b10 	.word	0x20400b10
  402788:	00402301 	.word	0x00402301
  40278c:	20400b0c 	.word	0x20400b0c
  402790:	20400a5c 	.word	0x20400a5c
  402794:	20400a68 	.word	0x20400a68
  402798:	20400ad0 	.word	0x20400ad0
  40279c:	004035dd 	.word	0x004035dd
  4027a0:	20400b58 	.word	0x20400b58
  4027a4:	20400ae0 	.word	0x20400ae0
  4027a8:	004016f5 	.word	0x004016f5
  4027ac:	00401741 	.word	0x00401741

004027b0 <xTaskResumeAll>:
{
  4027b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4027b4:	4b38      	ldr	r3, [pc, #224]	; (402898 <xTaskResumeAll+0xe8>)
  4027b6:	681b      	ldr	r3, [r3, #0]
  4027b8:	b953      	cbnz	r3, 4027d0 <xTaskResumeAll+0x20>
  4027ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027be:	b672      	cpsid	i
  4027c0:	f383 8811 	msr	BASEPRI, r3
  4027c4:	f3bf 8f6f 	isb	sy
  4027c8:	f3bf 8f4f 	dsb	sy
  4027cc:	b662      	cpsie	i
  4027ce:	e7fe      	b.n	4027ce <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4027d0:	4b32      	ldr	r3, [pc, #200]	; (40289c <xTaskResumeAll+0xec>)
  4027d2:	4798      	blx	r3
		--uxSchedulerSuspended;
  4027d4:	4b30      	ldr	r3, [pc, #192]	; (402898 <xTaskResumeAll+0xe8>)
  4027d6:	681a      	ldr	r2, [r3, #0]
  4027d8:	3a01      	subs	r2, #1
  4027da:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4027dc:	681b      	ldr	r3, [r3, #0]
  4027de:	2b00      	cmp	r3, #0
  4027e0:	d155      	bne.n	40288e <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4027e2:	4b2f      	ldr	r3, [pc, #188]	; (4028a0 <xTaskResumeAll+0xf0>)
  4027e4:	681b      	ldr	r3, [r3, #0]
  4027e6:	2b00      	cmp	r3, #0
  4027e8:	d132      	bne.n	402850 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4027ea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4027ec:	4b2d      	ldr	r3, [pc, #180]	; (4028a4 <xTaskResumeAll+0xf4>)
  4027ee:	4798      	blx	r3
}
  4027f0:	4620      	mov	r0, r4
  4027f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4027f6:	68fb      	ldr	r3, [r7, #12]
  4027f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4027fa:	f104 0018 	add.w	r0, r4, #24
  4027fe:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402800:	f104 0804 	add.w	r8, r4, #4
  402804:	4640      	mov	r0, r8
  402806:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402808:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40280a:	682a      	ldr	r2, [r5, #0]
  40280c:	2301      	movs	r3, #1
  40280e:	4083      	lsls	r3, r0
  402810:	4313      	orrs	r3, r2
  402812:	602b      	str	r3, [r5, #0]
  402814:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402818:	4641      	mov	r1, r8
  40281a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40281e:	4b22      	ldr	r3, [pc, #136]	; (4028a8 <xTaskResumeAll+0xf8>)
  402820:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402822:	4b22      	ldr	r3, [pc, #136]	; (4028ac <xTaskResumeAll+0xfc>)
  402824:	681b      	ldr	r3, [r3, #0]
  402826:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40282a:	429a      	cmp	r2, r3
  40282c:	d20c      	bcs.n	402848 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40282e:	683b      	ldr	r3, [r7, #0]
  402830:	2b00      	cmp	r3, #0
  402832:	d1e0      	bne.n	4027f6 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402834:	4b1e      	ldr	r3, [pc, #120]	; (4028b0 <xTaskResumeAll+0x100>)
  402836:	681b      	ldr	r3, [r3, #0]
  402838:	b1db      	cbz	r3, 402872 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40283a:	4b1d      	ldr	r3, [pc, #116]	; (4028b0 <xTaskResumeAll+0x100>)
  40283c:	681b      	ldr	r3, [r3, #0]
  40283e:	b1c3      	cbz	r3, 402872 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402840:	4e1c      	ldr	r6, [pc, #112]	; (4028b4 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402842:	4d1d      	ldr	r5, [pc, #116]	; (4028b8 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402844:	4c1a      	ldr	r4, [pc, #104]	; (4028b0 <xTaskResumeAll+0x100>)
  402846:	e00e      	b.n	402866 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402848:	2201      	movs	r2, #1
  40284a:	4b1b      	ldr	r3, [pc, #108]	; (4028b8 <xTaskResumeAll+0x108>)
  40284c:	601a      	str	r2, [r3, #0]
  40284e:	e7ee      	b.n	40282e <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402850:	4f1a      	ldr	r7, [pc, #104]	; (4028bc <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402852:	4e1b      	ldr	r6, [pc, #108]	; (4028c0 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402854:	4d1b      	ldr	r5, [pc, #108]	; (4028c4 <xTaskResumeAll+0x114>)
  402856:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4028cc <xTaskResumeAll+0x11c>
  40285a:	e7e8      	b.n	40282e <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  40285c:	6823      	ldr	r3, [r4, #0]
  40285e:	3b01      	subs	r3, #1
  402860:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402862:	6823      	ldr	r3, [r4, #0]
  402864:	b12b      	cbz	r3, 402872 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402866:	47b0      	blx	r6
  402868:	2800      	cmp	r0, #0
  40286a:	d0f7      	beq.n	40285c <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  40286c:	2301      	movs	r3, #1
  40286e:	602b      	str	r3, [r5, #0]
  402870:	e7f4      	b.n	40285c <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402872:	4b11      	ldr	r3, [pc, #68]	; (4028b8 <xTaskResumeAll+0x108>)
  402874:	681b      	ldr	r3, [r3, #0]
  402876:	2b01      	cmp	r3, #1
  402878:	d10b      	bne.n	402892 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40287a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40287e:	4b12      	ldr	r3, [pc, #72]	; (4028c8 <xTaskResumeAll+0x118>)
  402880:	601a      	str	r2, [r3, #0]
  402882:	f3bf 8f4f 	dsb	sy
  402886:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40288a:	2401      	movs	r4, #1
  40288c:	e7ae      	b.n	4027ec <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40288e:	2400      	movs	r4, #0
  402890:	e7ac      	b.n	4027ec <xTaskResumeAll+0x3c>
  402892:	2400      	movs	r4, #0
  402894:	e7aa      	b.n	4027ec <xTaskResumeAll+0x3c>
  402896:	bf00      	nop
  402898:	20400ad4 	.word	0x20400ad4
  40289c:	00401825 	.word	0x00401825
  4028a0:	20400acc 	.word	0x20400acc
  4028a4:	00401871 	.word	0x00401871
  4028a8:	004016f5 	.word	0x004016f5
  4028ac:	20400a5c 	.word	0x20400a5c
  4028b0:	20400ad0 	.word	0x20400ad0
  4028b4:	00402665 	.word	0x00402665
  4028b8:	20400b58 	.word	0x20400b58
  4028bc:	20400b14 	.word	0x20400b14
  4028c0:	00401741 	.word	0x00401741
  4028c4:	20400ae0 	.word	0x20400ae0
  4028c8:	e000ed04 	.word	0xe000ed04
  4028cc:	20400a68 	.word	0x20400a68

004028d0 <vTaskDelay>:
	{
  4028d0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4028d2:	2800      	cmp	r0, #0
  4028d4:	d029      	beq.n	40292a <vTaskDelay+0x5a>
  4028d6:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4028d8:	4b18      	ldr	r3, [pc, #96]	; (40293c <vTaskDelay+0x6c>)
  4028da:	681b      	ldr	r3, [r3, #0]
  4028dc:	b153      	cbz	r3, 4028f4 <vTaskDelay+0x24>
  4028de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028e2:	b672      	cpsid	i
  4028e4:	f383 8811 	msr	BASEPRI, r3
  4028e8:	f3bf 8f6f 	isb	sy
  4028ec:	f3bf 8f4f 	dsb	sy
  4028f0:	b662      	cpsie	i
  4028f2:	e7fe      	b.n	4028f2 <vTaskDelay+0x22>
			vTaskSuspendAll();
  4028f4:	4b12      	ldr	r3, [pc, #72]	; (402940 <vTaskDelay+0x70>)
  4028f6:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4028f8:	4b12      	ldr	r3, [pc, #72]	; (402944 <vTaskDelay+0x74>)
  4028fa:	681b      	ldr	r3, [r3, #0]
  4028fc:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4028fe:	4b12      	ldr	r3, [pc, #72]	; (402948 <vTaskDelay+0x78>)
  402900:	6818      	ldr	r0, [r3, #0]
  402902:	3004      	adds	r0, #4
  402904:	4b11      	ldr	r3, [pc, #68]	; (40294c <vTaskDelay+0x7c>)
  402906:	4798      	blx	r3
  402908:	b948      	cbnz	r0, 40291e <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40290a:	4b0f      	ldr	r3, [pc, #60]	; (402948 <vTaskDelay+0x78>)
  40290c:	681a      	ldr	r2, [r3, #0]
  40290e:	4910      	ldr	r1, [pc, #64]	; (402950 <vTaskDelay+0x80>)
  402910:	680b      	ldr	r3, [r1, #0]
  402912:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402914:	2201      	movs	r2, #1
  402916:	4082      	lsls	r2, r0
  402918:	ea23 0302 	bic.w	r3, r3, r2
  40291c:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40291e:	4620      	mov	r0, r4
  402920:	4b0c      	ldr	r3, [pc, #48]	; (402954 <vTaskDelay+0x84>)
  402922:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402924:	4b0c      	ldr	r3, [pc, #48]	; (402958 <vTaskDelay+0x88>)
  402926:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402928:	b938      	cbnz	r0, 40293a <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  40292a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40292e:	4b0b      	ldr	r3, [pc, #44]	; (40295c <vTaskDelay+0x8c>)
  402930:	601a      	str	r2, [r3, #0]
  402932:	f3bf 8f4f 	dsb	sy
  402936:	f3bf 8f6f 	isb	sy
  40293a:	bd10      	pop	{r4, pc}
  40293c:	20400ad4 	.word	0x20400ad4
  402940:	00402649 	.word	0x00402649
  402944:	20400b54 	.word	0x20400b54
  402948:	20400a5c 	.word	0x20400a5c
  40294c:	00401741 	.word	0x00401741
  402950:	20400ae0 	.word	0x20400ae0
  402954:	0040232d 	.word	0x0040232d
  402958:	004027b1 	.word	0x004027b1
  40295c:	e000ed04 	.word	0xe000ed04

00402960 <prvIdleTask>:
{
  402960:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402962:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4029ec <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402966:	4e19      	ldr	r6, [pc, #100]	; (4029cc <prvIdleTask+0x6c>)
				taskYIELD();
  402968:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4029f0 <prvIdleTask+0x90>
  40296c:	e02a      	b.n	4029c4 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40296e:	4b18      	ldr	r3, [pc, #96]	; (4029d0 <prvIdleTask+0x70>)
  402970:	681b      	ldr	r3, [r3, #0]
  402972:	2b01      	cmp	r3, #1
  402974:	d81e      	bhi.n	4029b4 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402976:	682b      	ldr	r3, [r5, #0]
  402978:	2b00      	cmp	r3, #0
  40297a:	d0f8      	beq.n	40296e <prvIdleTask+0xe>
			vTaskSuspendAll();
  40297c:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40297e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402980:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402982:	2c00      	cmp	r4, #0
  402984:	d0f7      	beq.n	402976 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  402986:	4b13      	ldr	r3, [pc, #76]	; (4029d4 <prvIdleTask+0x74>)
  402988:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40298a:	68f3      	ldr	r3, [r6, #12]
  40298c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40298e:	1d20      	adds	r0, r4, #4
  402990:	4b11      	ldr	r3, [pc, #68]	; (4029d8 <prvIdleTask+0x78>)
  402992:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402994:	4a11      	ldr	r2, [pc, #68]	; (4029dc <prvIdleTask+0x7c>)
  402996:	6813      	ldr	r3, [r2, #0]
  402998:	3b01      	subs	r3, #1
  40299a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  40299c:	682b      	ldr	r3, [r5, #0]
  40299e:	3b01      	subs	r3, #1
  4029a0:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4029a2:	4b0f      	ldr	r3, [pc, #60]	; (4029e0 <prvIdleTask+0x80>)
  4029a4:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4029a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4029a8:	f8df a048 	ldr.w	sl, [pc, #72]	; 4029f4 <prvIdleTask+0x94>
  4029ac:	47d0      	blx	sl
		vPortFree( pxTCB );
  4029ae:	4620      	mov	r0, r4
  4029b0:	47d0      	blx	sl
  4029b2:	e7e0      	b.n	402976 <prvIdleTask+0x16>
				taskYIELD();
  4029b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4029b8:	f8c9 3000 	str.w	r3, [r9]
  4029bc:	f3bf 8f4f 	dsb	sy
  4029c0:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4029c4:	4d07      	ldr	r5, [pc, #28]	; (4029e4 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4029c6:	4f08      	ldr	r7, [pc, #32]	; (4029e8 <prvIdleTask+0x88>)
  4029c8:	e7d5      	b.n	402976 <prvIdleTask+0x16>
  4029ca:	bf00      	nop
  4029cc:	20400b40 	.word	0x20400b40
  4029d0:	20400a68 	.word	0x20400a68
  4029d4:	00401825 	.word	0x00401825
  4029d8:	00401741 	.word	0x00401741
  4029dc:	20400acc 	.word	0x20400acc
  4029e0:	00401871 	.word	0x00401871
  4029e4:	20400adc 	.word	0x20400adc
  4029e8:	004027b1 	.word	0x004027b1
  4029ec:	00402649 	.word	0x00402649
  4029f0:	e000ed04 	.word	0xe000ed04
  4029f4:	00401ab1 	.word	0x00401ab1

004029f8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4029f8:	4b2d      	ldr	r3, [pc, #180]	; (402ab0 <vTaskSwitchContext+0xb8>)
  4029fa:	681b      	ldr	r3, [r3, #0]
  4029fc:	2b00      	cmp	r3, #0
  4029fe:	d12c      	bne.n	402a5a <vTaskSwitchContext+0x62>
{
  402a00:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402a02:	2200      	movs	r2, #0
  402a04:	4b2b      	ldr	r3, [pc, #172]	; (402ab4 <vTaskSwitchContext+0xbc>)
  402a06:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402a08:	4b2b      	ldr	r3, [pc, #172]	; (402ab8 <vTaskSwitchContext+0xc0>)
  402a0a:	681b      	ldr	r3, [r3, #0]
  402a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a0e:	681a      	ldr	r2, [r3, #0]
  402a10:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402a14:	d103      	bne.n	402a1e <vTaskSwitchContext+0x26>
  402a16:	685a      	ldr	r2, [r3, #4]
  402a18:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402a1c:	d021      	beq.n	402a62 <vTaskSwitchContext+0x6a>
  402a1e:	4b26      	ldr	r3, [pc, #152]	; (402ab8 <vTaskSwitchContext+0xc0>)
  402a20:	6818      	ldr	r0, [r3, #0]
  402a22:	6819      	ldr	r1, [r3, #0]
  402a24:	3134      	adds	r1, #52	; 0x34
  402a26:	4b25      	ldr	r3, [pc, #148]	; (402abc <vTaskSwitchContext+0xc4>)
  402a28:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402a2a:	4b25      	ldr	r3, [pc, #148]	; (402ac0 <vTaskSwitchContext+0xc8>)
  402a2c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402a2e:	fab3 f383 	clz	r3, r3
  402a32:	b2db      	uxtb	r3, r3
  402a34:	f1c3 031f 	rsb	r3, r3, #31
  402a38:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402a3c:	4a21      	ldr	r2, [pc, #132]	; (402ac4 <vTaskSwitchContext+0xcc>)
  402a3e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402a42:	b9ba      	cbnz	r2, 402a74 <vTaskSwitchContext+0x7c>
	__asm volatile
  402a44:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a48:	b672      	cpsid	i
  402a4a:	f383 8811 	msr	BASEPRI, r3
  402a4e:	f3bf 8f6f 	isb	sy
  402a52:	f3bf 8f4f 	dsb	sy
  402a56:	b662      	cpsie	i
  402a58:	e7fe      	b.n	402a58 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402a5a:	2201      	movs	r2, #1
  402a5c:	4b15      	ldr	r3, [pc, #84]	; (402ab4 <vTaskSwitchContext+0xbc>)
  402a5e:	601a      	str	r2, [r3, #0]
  402a60:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402a62:	689a      	ldr	r2, [r3, #8]
  402a64:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402a68:	d1d9      	bne.n	402a1e <vTaskSwitchContext+0x26>
  402a6a:	68db      	ldr	r3, [r3, #12]
  402a6c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402a70:	d1d5      	bne.n	402a1e <vTaskSwitchContext+0x26>
  402a72:	e7da      	b.n	402a2a <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402a74:	4a13      	ldr	r2, [pc, #76]	; (402ac4 <vTaskSwitchContext+0xcc>)
  402a76:	0099      	lsls	r1, r3, #2
  402a78:	18c8      	adds	r0, r1, r3
  402a7a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402a7e:	6844      	ldr	r4, [r0, #4]
  402a80:	6864      	ldr	r4, [r4, #4]
  402a82:	6044      	str	r4, [r0, #4]
  402a84:	4419      	add	r1, r3
  402a86:	4602      	mov	r2, r0
  402a88:	3208      	adds	r2, #8
  402a8a:	4294      	cmp	r4, r2
  402a8c:	d009      	beq.n	402aa2 <vTaskSwitchContext+0xaa>
  402a8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402a92:	4a0c      	ldr	r2, [pc, #48]	; (402ac4 <vTaskSwitchContext+0xcc>)
  402a94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402a98:	685b      	ldr	r3, [r3, #4]
  402a9a:	68da      	ldr	r2, [r3, #12]
  402a9c:	4b06      	ldr	r3, [pc, #24]	; (402ab8 <vTaskSwitchContext+0xc0>)
  402a9e:	601a      	str	r2, [r3, #0]
  402aa0:	bd10      	pop	{r4, pc}
  402aa2:	6860      	ldr	r0, [r4, #4]
  402aa4:	4a07      	ldr	r2, [pc, #28]	; (402ac4 <vTaskSwitchContext+0xcc>)
  402aa6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402aaa:	6050      	str	r0, [r2, #4]
  402aac:	e7ef      	b.n	402a8e <vTaskSwitchContext+0x96>
  402aae:	bf00      	nop
  402ab0:	20400ad4 	.word	0x20400ad4
  402ab4:	20400b58 	.word	0x20400b58
  402ab8:	20400a5c 	.word	0x20400a5c
  402abc:	004035c5 	.word	0x004035c5
  402ac0:	20400ae0 	.word	0x20400ae0
  402ac4:	20400a68 	.word	0x20400a68

00402ac8 <vTaskPlaceOnEventList>:
{
  402ac8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402aca:	b1e0      	cbz	r0, 402b06 <vTaskPlaceOnEventList+0x3e>
  402acc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402ace:	4d17      	ldr	r5, [pc, #92]	; (402b2c <vTaskPlaceOnEventList+0x64>)
  402ad0:	6829      	ldr	r1, [r5, #0]
  402ad2:	3118      	adds	r1, #24
  402ad4:	4b16      	ldr	r3, [pc, #88]	; (402b30 <vTaskPlaceOnEventList+0x68>)
  402ad6:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402ad8:	6828      	ldr	r0, [r5, #0]
  402ada:	3004      	adds	r0, #4
  402adc:	4b15      	ldr	r3, [pc, #84]	; (402b34 <vTaskPlaceOnEventList+0x6c>)
  402ade:	4798      	blx	r3
  402ae0:	b940      	cbnz	r0, 402af4 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402ae2:	682a      	ldr	r2, [r5, #0]
  402ae4:	4914      	ldr	r1, [pc, #80]	; (402b38 <vTaskPlaceOnEventList+0x70>)
  402ae6:	680b      	ldr	r3, [r1, #0]
  402ae8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402aea:	2201      	movs	r2, #1
  402aec:	4082      	lsls	r2, r0
  402aee:	ea23 0302 	bic.w	r3, r3, r2
  402af2:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402af4:	f1b4 3fff 	cmp.w	r4, #4294967295
  402af8:	d010      	beq.n	402b1c <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402afa:	4b10      	ldr	r3, [pc, #64]	; (402b3c <vTaskPlaceOnEventList+0x74>)
  402afc:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402afe:	4420      	add	r0, r4
  402b00:	4b0f      	ldr	r3, [pc, #60]	; (402b40 <vTaskPlaceOnEventList+0x78>)
  402b02:	4798      	blx	r3
  402b04:	bd38      	pop	{r3, r4, r5, pc}
  402b06:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b0a:	b672      	cpsid	i
  402b0c:	f383 8811 	msr	BASEPRI, r3
  402b10:	f3bf 8f6f 	isb	sy
  402b14:	f3bf 8f4f 	dsb	sy
  402b18:	b662      	cpsie	i
  402b1a:	e7fe      	b.n	402b1a <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402b1c:	4b03      	ldr	r3, [pc, #12]	; (402b2c <vTaskPlaceOnEventList+0x64>)
  402b1e:	6819      	ldr	r1, [r3, #0]
  402b20:	3104      	adds	r1, #4
  402b22:	4808      	ldr	r0, [pc, #32]	; (402b44 <vTaskPlaceOnEventList+0x7c>)
  402b24:	4b08      	ldr	r3, [pc, #32]	; (402b48 <vTaskPlaceOnEventList+0x80>)
  402b26:	4798      	blx	r3
  402b28:	bd38      	pop	{r3, r4, r5, pc}
  402b2a:	bf00      	nop
  402b2c:	20400a5c 	.word	0x20400a5c
  402b30:	0040170d 	.word	0x0040170d
  402b34:	00401741 	.word	0x00401741
  402b38:	20400ae0 	.word	0x20400ae0
  402b3c:	20400b54 	.word	0x20400b54
  402b40:	0040232d 	.word	0x0040232d
  402b44:	20400b2c 	.word	0x20400b2c
  402b48:	004016f5 	.word	0x004016f5

00402b4c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402b4c:	b1e8      	cbz	r0, 402b8a <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402b4e:	b570      	push	{r4, r5, r6, lr}
  402b50:	4615      	mov	r5, r2
  402b52:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402b54:	4e16      	ldr	r6, [pc, #88]	; (402bb0 <vTaskPlaceOnEventListRestricted+0x64>)
  402b56:	6831      	ldr	r1, [r6, #0]
  402b58:	3118      	adds	r1, #24
  402b5a:	4b16      	ldr	r3, [pc, #88]	; (402bb4 <vTaskPlaceOnEventListRestricted+0x68>)
  402b5c:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402b5e:	6830      	ldr	r0, [r6, #0]
  402b60:	3004      	adds	r0, #4
  402b62:	4b15      	ldr	r3, [pc, #84]	; (402bb8 <vTaskPlaceOnEventListRestricted+0x6c>)
  402b64:	4798      	blx	r3
  402b66:	b940      	cbnz	r0, 402b7a <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402b68:	6832      	ldr	r2, [r6, #0]
  402b6a:	4914      	ldr	r1, [pc, #80]	; (402bbc <vTaskPlaceOnEventListRestricted+0x70>)
  402b6c:	680b      	ldr	r3, [r1, #0]
  402b6e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402b70:	2201      	movs	r2, #1
  402b72:	4082      	lsls	r2, r0
  402b74:	ea23 0302 	bic.w	r3, r3, r2
  402b78:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402b7a:	2d01      	cmp	r5, #1
  402b7c:	d010      	beq.n	402ba0 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  402b7e:	4b10      	ldr	r3, [pc, #64]	; (402bc0 <vTaskPlaceOnEventListRestricted+0x74>)
  402b80:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402b82:	4420      	add	r0, r4
  402b84:	4b0f      	ldr	r3, [pc, #60]	; (402bc4 <vTaskPlaceOnEventListRestricted+0x78>)
  402b86:	4798      	blx	r3
  402b88:	bd70      	pop	{r4, r5, r6, pc}
  402b8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b8e:	b672      	cpsid	i
  402b90:	f383 8811 	msr	BASEPRI, r3
  402b94:	f3bf 8f6f 	isb	sy
  402b98:	f3bf 8f4f 	dsb	sy
  402b9c:	b662      	cpsie	i
  402b9e:	e7fe      	b.n	402b9e <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402ba0:	4b03      	ldr	r3, [pc, #12]	; (402bb0 <vTaskPlaceOnEventListRestricted+0x64>)
  402ba2:	6819      	ldr	r1, [r3, #0]
  402ba4:	3104      	adds	r1, #4
  402ba6:	4808      	ldr	r0, [pc, #32]	; (402bc8 <vTaskPlaceOnEventListRestricted+0x7c>)
  402ba8:	4b02      	ldr	r3, [pc, #8]	; (402bb4 <vTaskPlaceOnEventListRestricted+0x68>)
  402baa:	4798      	blx	r3
  402bac:	bd70      	pop	{r4, r5, r6, pc}
  402bae:	bf00      	nop
  402bb0:	20400a5c 	.word	0x20400a5c
  402bb4:	004016f5 	.word	0x004016f5
  402bb8:	00401741 	.word	0x00401741
  402bbc:	20400ae0 	.word	0x20400ae0
  402bc0:	20400b54 	.word	0x20400b54
  402bc4:	0040232d 	.word	0x0040232d
  402bc8:	20400b2c 	.word	0x20400b2c

00402bcc <xTaskRemoveFromEventList>:
{
  402bcc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402bce:	68c3      	ldr	r3, [r0, #12]
  402bd0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402bd2:	b324      	cbz	r4, 402c1e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402bd4:	f104 0518 	add.w	r5, r4, #24
  402bd8:	4628      	mov	r0, r5
  402bda:	4b1a      	ldr	r3, [pc, #104]	; (402c44 <xTaskRemoveFromEventList+0x78>)
  402bdc:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402bde:	4b1a      	ldr	r3, [pc, #104]	; (402c48 <xTaskRemoveFromEventList+0x7c>)
  402be0:	681b      	ldr	r3, [r3, #0]
  402be2:	bb3b      	cbnz	r3, 402c34 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402be4:	1d25      	adds	r5, r4, #4
  402be6:	4628      	mov	r0, r5
  402be8:	4b16      	ldr	r3, [pc, #88]	; (402c44 <xTaskRemoveFromEventList+0x78>)
  402bea:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402bec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402bee:	4a17      	ldr	r2, [pc, #92]	; (402c4c <xTaskRemoveFromEventList+0x80>)
  402bf0:	6811      	ldr	r1, [r2, #0]
  402bf2:	2301      	movs	r3, #1
  402bf4:	4083      	lsls	r3, r0
  402bf6:	430b      	orrs	r3, r1
  402bf8:	6013      	str	r3, [r2, #0]
  402bfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402bfe:	4629      	mov	r1, r5
  402c00:	4b13      	ldr	r3, [pc, #76]	; (402c50 <xTaskRemoveFromEventList+0x84>)
  402c02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c06:	4b13      	ldr	r3, [pc, #76]	; (402c54 <xTaskRemoveFromEventList+0x88>)
  402c08:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402c0a:	4b13      	ldr	r3, [pc, #76]	; (402c58 <xTaskRemoveFromEventList+0x8c>)
  402c0c:	681b      	ldr	r3, [r3, #0]
  402c0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402c12:	429a      	cmp	r2, r3
  402c14:	d913      	bls.n	402c3e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402c16:	2001      	movs	r0, #1
  402c18:	4b10      	ldr	r3, [pc, #64]	; (402c5c <xTaskRemoveFromEventList+0x90>)
  402c1a:	6018      	str	r0, [r3, #0]
  402c1c:	bd38      	pop	{r3, r4, r5, pc}
  402c1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c22:	b672      	cpsid	i
  402c24:	f383 8811 	msr	BASEPRI, r3
  402c28:	f3bf 8f6f 	isb	sy
  402c2c:	f3bf 8f4f 	dsb	sy
  402c30:	b662      	cpsie	i
  402c32:	e7fe      	b.n	402c32 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402c34:	4629      	mov	r1, r5
  402c36:	480a      	ldr	r0, [pc, #40]	; (402c60 <xTaskRemoveFromEventList+0x94>)
  402c38:	4b06      	ldr	r3, [pc, #24]	; (402c54 <xTaskRemoveFromEventList+0x88>)
  402c3a:	4798      	blx	r3
  402c3c:	e7e5      	b.n	402c0a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402c3e:	2000      	movs	r0, #0
}
  402c40:	bd38      	pop	{r3, r4, r5, pc}
  402c42:	bf00      	nop
  402c44:	00401741 	.word	0x00401741
  402c48:	20400ad4 	.word	0x20400ad4
  402c4c:	20400ae0 	.word	0x20400ae0
  402c50:	20400a68 	.word	0x20400a68
  402c54:	004016f5 	.word	0x004016f5
  402c58:	20400a5c 	.word	0x20400a5c
  402c5c:	20400b58 	.word	0x20400b58
  402c60:	20400b14 	.word	0x20400b14

00402c64 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402c64:	b130      	cbz	r0, 402c74 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402c66:	4a09      	ldr	r2, [pc, #36]	; (402c8c <vTaskSetTimeOutState+0x28>)
  402c68:	6812      	ldr	r2, [r2, #0]
  402c6a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402c6c:	4a08      	ldr	r2, [pc, #32]	; (402c90 <vTaskSetTimeOutState+0x2c>)
  402c6e:	6812      	ldr	r2, [r2, #0]
  402c70:	6042      	str	r2, [r0, #4]
  402c72:	4770      	bx	lr
  402c74:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c78:	b672      	cpsid	i
  402c7a:	f383 8811 	msr	BASEPRI, r3
  402c7e:	f3bf 8f6f 	isb	sy
  402c82:	f3bf 8f4f 	dsb	sy
  402c86:	b662      	cpsie	i
  402c88:	e7fe      	b.n	402c88 <vTaskSetTimeOutState+0x24>
  402c8a:	bf00      	nop
  402c8c:	20400b10 	.word	0x20400b10
  402c90:	20400b54 	.word	0x20400b54

00402c94 <xTaskCheckForTimeOut>:
{
  402c94:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402c96:	b1c0      	cbz	r0, 402cca <xTaskCheckForTimeOut+0x36>
  402c98:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402c9a:	b309      	cbz	r1, 402ce0 <xTaskCheckForTimeOut+0x4c>
  402c9c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402c9e:	4b1d      	ldr	r3, [pc, #116]	; (402d14 <xTaskCheckForTimeOut+0x80>)
  402ca0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402ca2:	4b1d      	ldr	r3, [pc, #116]	; (402d18 <xTaskCheckForTimeOut+0x84>)
  402ca4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402ca6:	682b      	ldr	r3, [r5, #0]
  402ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
  402cac:	d02e      	beq.n	402d0c <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402cae:	491b      	ldr	r1, [pc, #108]	; (402d1c <xTaskCheckForTimeOut+0x88>)
  402cb0:	6809      	ldr	r1, [r1, #0]
  402cb2:	6820      	ldr	r0, [r4, #0]
  402cb4:	4288      	cmp	r0, r1
  402cb6:	d002      	beq.n	402cbe <xTaskCheckForTimeOut+0x2a>
  402cb8:	6861      	ldr	r1, [r4, #4]
  402cba:	428a      	cmp	r2, r1
  402cbc:	d228      	bcs.n	402d10 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402cbe:	6861      	ldr	r1, [r4, #4]
  402cc0:	1a50      	subs	r0, r2, r1
  402cc2:	4283      	cmp	r3, r0
  402cc4:	d817      	bhi.n	402cf6 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402cc6:	2401      	movs	r4, #1
  402cc8:	e01c      	b.n	402d04 <xTaskCheckForTimeOut+0x70>
  402cca:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cce:	b672      	cpsid	i
  402cd0:	f383 8811 	msr	BASEPRI, r3
  402cd4:	f3bf 8f6f 	isb	sy
  402cd8:	f3bf 8f4f 	dsb	sy
  402cdc:	b662      	cpsie	i
  402cde:	e7fe      	b.n	402cde <xTaskCheckForTimeOut+0x4a>
  402ce0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ce4:	b672      	cpsid	i
  402ce6:	f383 8811 	msr	BASEPRI, r3
  402cea:	f3bf 8f6f 	isb	sy
  402cee:	f3bf 8f4f 	dsb	sy
  402cf2:	b662      	cpsie	i
  402cf4:	e7fe      	b.n	402cf4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402cf6:	1a9b      	subs	r3, r3, r2
  402cf8:	440b      	add	r3, r1
  402cfa:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402cfc:	4620      	mov	r0, r4
  402cfe:	4b08      	ldr	r3, [pc, #32]	; (402d20 <xTaskCheckForTimeOut+0x8c>)
  402d00:	4798      	blx	r3
			xReturn = pdFALSE;
  402d02:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402d04:	4b07      	ldr	r3, [pc, #28]	; (402d24 <xTaskCheckForTimeOut+0x90>)
  402d06:	4798      	blx	r3
}
  402d08:	4620      	mov	r0, r4
  402d0a:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402d0c:	2400      	movs	r4, #0
  402d0e:	e7f9      	b.n	402d04 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402d10:	2401      	movs	r4, #1
  402d12:	e7f7      	b.n	402d04 <xTaskCheckForTimeOut+0x70>
  402d14:	00401825 	.word	0x00401825
  402d18:	20400b54 	.word	0x20400b54
  402d1c:	20400b10 	.word	0x20400b10
  402d20:	00402c65 	.word	0x00402c65
  402d24:	00401871 	.word	0x00401871

00402d28 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402d28:	2201      	movs	r2, #1
  402d2a:	4b01      	ldr	r3, [pc, #4]	; (402d30 <vTaskMissedYield+0x8>)
  402d2c:	601a      	str	r2, [r3, #0]
  402d2e:	4770      	bx	lr
  402d30:	20400b58 	.word	0x20400b58

00402d34 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402d34:	4b05      	ldr	r3, [pc, #20]	; (402d4c <xTaskGetSchedulerState+0x18>)
  402d36:	681b      	ldr	r3, [r3, #0]
  402d38:	b133      	cbz	r3, 402d48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402d3a:	4b05      	ldr	r3, [pc, #20]	; (402d50 <xTaskGetSchedulerState+0x1c>)
  402d3c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402d3e:	2b00      	cmp	r3, #0
  402d40:	bf0c      	ite	eq
  402d42:	2002      	moveq	r0, #2
  402d44:	2000      	movne	r0, #0
  402d46:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402d48:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402d4a:	4770      	bx	lr
  402d4c:	20400b28 	.word	0x20400b28
  402d50:	20400ad4 	.word	0x20400ad4

00402d54 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402d54:	2800      	cmp	r0, #0
  402d56:	d044      	beq.n	402de2 <vTaskPriorityInherit+0x8e>
	{
  402d58:	b538      	push	{r3, r4, r5, lr}
  402d5a:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402d5c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402d5e:	4921      	ldr	r1, [pc, #132]	; (402de4 <vTaskPriorityInherit+0x90>)
  402d60:	6809      	ldr	r1, [r1, #0]
  402d62:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402d64:	428a      	cmp	r2, r1
  402d66:	d214      	bcs.n	402d92 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402d68:	6981      	ldr	r1, [r0, #24]
  402d6a:	2900      	cmp	r1, #0
  402d6c:	db05      	blt.n	402d7a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402d6e:	491d      	ldr	r1, [pc, #116]	; (402de4 <vTaskPriorityInherit+0x90>)
  402d70:	6809      	ldr	r1, [r1, #0]
  402d72:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402d74:	f1c1 0105 	rsb	r1, r1, #5
  402d78:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402d7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402d7e:	491a      	ldr	r1, [pc, #104]	; (402de8 <vTaskPriorityInherit+0x94>)
  402d80:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402d84:	6961      	ldr	r1, [r4, #20]
  402d86:	4291      	cmp	r1, r2
  402d88:	d004      	beq.n	402d94 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402d8a:	4a16      	ldr	r2, [pc, #88]	; (402de4 <vTaskPriorityInherit+0x90>)
  402d8c:	6812      	ldr	r2, [r2, #0]
  402d8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402d90:	62e2      	str	r2, [r4, #44]	; 0x2c
  402d92:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402d94:	1d25      	adds	r5, r4, #4
  402d96:	4628      	mov	r0, r5
  402d98:	4b14      	ldr	r3, [pc, #80]	; (402dec <vTaskPriorityInherit+0x98>)
  402d9a:	4798      	blx	r3
  402d9c:	b970      	cbnz	r0, 402dbc <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402d9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402da0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402da4:	4a10      	ldr	r2, [pc, #64]	; (402de8 <vTaskPriorityInherit+0x94>)
  402da6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402daa:	b93a      	cbnz	r2, 402dbc <vTaskPriorityInherit+0x68>
  402dac:	4810      	ldr	r0, [pc, #64]	; (402df0 <vTaskPriorityInherit+0x9c>)
  402dae:	6802      	ldr	r2, [r0, #0]
  402db0:	2101      	movs	r1, #1
  402db2:	fa01 f303 	lsl.w	r3, r1, r3
  402db6:	ea22 0303 	bic.w	r3, r2, r3
  402dba:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402dbc:	4b09      	ldr	r3, [pc, #36]	; (402de4 <vTaskPriorityInherit+0x90>)
  402dbe:	681b      	ldr	r3, [r3, #0]
  402dc0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402dc2:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402dc4:	4a0a      	ldr	r2, [pc, #40]	; (402df0 <vTaskPriorityInherit+0x9c>)
  402dc6:	6811      	ldr	r1, [r2, #0]
  402dc8:	2301      	movs	r3, #1
  402dca:	4083      	lsls	r3, r0
  402dcc:	430b      	orrs	r3, r1
  402dce:	6013      	str	r3, [r2, #0]
  402dd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402dd4:	4629      	mov	r1, r5
  402dd6:	4b04      	ldr	r3, [pc, #16]	; (402de8 <vTaskPriorityInherit+0x94>)
  402dd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ddc:	4b05      	ldr	r3, [pc, #20]	; (402df4 <vTaskPriorityInherit+0xa0>)
  402dde:	4798      	blx	r3
  402de0:	bd38      	pop	{r3, r4, r5, pc}
  402de2:	4770      	bx	lr
  402de4:	20400a5c 	.word	0x20400a5c
  402de8:	20400a68 	.word	0x20400a68
  402dec:	00401741 	.word	0x00401741
  402df0:	20400ae0 	.word	0x20400ae0
  402df4:	004016f5 	.word	0x004016f5

00402df8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402df8:	2800      	cmp	r0, #0
  402dfa:	d04d      	beq.n	402e98 <xTaskPriorityDisinherit+0xa0>
	{
  402dfc:	b538      	push	{r3, r4, r5, lr}
  402dfe:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402e00:	4a27      	ldr	r2, [pc, #156]	; (402ea0 <xTaskPriorityDisinherit+0xa8>)
  402e02:	6812      	ldr	r2, [r2, #0]
  402e04:	4290      	cmp	r0, r2
  402e06:	d00a      	beq.n	402e1e <xTaskPriorityDisinherit+0x26>
  402e08:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e0c:	b672      	cpsid	i
  402e0e:	f383 8811 	msr	BASEPRI, r3
  402e12:	f3bf 8f6f 	isb	sy
  402e16:	f3bf 8f4f 	dsb	sy
  402e1a:	b662      	cpsie	i
  402e1c:	e7fe      	b.n	402e1c <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402e1e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402e20:	b952      	cbnz	r2, 402e38 <xTaskPriorityDisinherit+0x40>
  402e22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e26:	b672      	cpsid	i
  402e28:	f383 8811 	msr	BASEPRI, r3
  402e2c:	f3bf 8f6f 	isb	sy
  402e30:	f3bf 8f4f 	dsb	sy
  402e34:	b662      	cpsie	i
  402e36:	e7fe      	b.n	402e36 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402e38:	3a01      	subs	r2, #1
  402e3a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402e3c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402e3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402e40:	4288      	cmp	r0, r1
  402e42:	d02b      	beq.n	402e9c <xTaskPriorityDisinherit+0xa4>
  402e44:	bb52      	cbnz	r2, 402e9c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402e46:	1d25      	adds	r5, r4, #4
  402e48:	4628      	mov	r0, r5
  402e4a:	4b16      	ldr	r3, [pc, #88]	; (402ea4 <xTaskPriorityDisinherit+0xac>)
  402e4c:	4798      	blx	r3
  402e4e:	b968      	cbnz	r0, 402e6c <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402e50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402e52:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402e56:	4b14      	ldr	r3, [pc, #80]	; (402ea8 <xTaskPriorityDisinherit+0xb0>)
  402e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402e5c:	b933      	cbnz	r3, 402e6c <xTaskPriorityDisinherit+0x74>
  402e5e:	4813      	ldr	r0, [pc, #76]	; (402eac <xTaskPriorityDisinherit+0xb4>)
  402e60:	6803      	ldr	r3, [r0, #0]
  402e62:	2201      	movs	r2, #1
  402e64:	408a      	lsls	r2, r1
  402e66:	ea23 0302 	bic.w	r3, r3, r2
  402e6a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402e6c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402e6e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402e70:	f1c0 0305 	rsb	r3, r0, #5
  402e74:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402e76:	4a0d      	ldr	r2, [pc, #52]	; (402eac <xTaskPriorityDisinherit+0xb4>)
  402e78:	6811      	ldr	r1, [r2, #0]
  402e7a:	2401      	movs	r4, #1
  402e7c:	fa04 f300 	lsl.w	r3, r4, r0
  402e80:	430b      	orrs	r3, r1
  402e82:	6013      	str	r3, [r2, #0]
  402e84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402e88:	4629      	mov	r1, r5
  402e8a:	4b07      	ldr	r3, [pc, #28]	; (402ea8 <xTaskPriorityDisinherit+0xb0>)
  402e8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402e90:	4b07      	ldr	r3, [pc, #28]	; (402eb0 <xTaskPriorityDisinherit+0xb8>)
  402e92:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402e94:	4620      	mov	r0, r4
  402e96:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402e98:	2000      	movs	r0, #0
  402e9a:	4770      	bx	lr
  402e9c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402e9e:	bd38      	pop	{r3, r4, r5, pc}
  402ea0:	20400a5c 	.word	0x20400a5c
  402ea4:	00401741 	.word	0x00401741
  402ea8:	20400a68 	.word	0x20400a68
  402eac:	20400ae0 	.word	0x20400ae0
  402eb0:	004016f5 	.word	0x004016f5

00402eb4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402eb4:	4b05      	ldr	r3, [pc, #20]	; (402ecc <pvTaskIncrementMutexHeldCount+0x18>)
  402eb6:	681b      	ldr	r3, [r3, #0]
  402eb8:	b123      	cbz	r3, 402ec4 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402eba:	4b04      	ldr	r3, [pc, #16]	; (402ecc <pvTaskIncrementMutexHeldCount+0x18>)
  402ebc:	681a      	ldr	r2, [r3, #0]
  402ebe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402ec0:	3301      	adds	r3, #1
  402ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402ec4:	4b01      	ldr	r3, [pc, #4]	; (402ecc <pvTaskIncrementMutexHeldCount+0x18>)
  402ec6:	6818      	ldr	r0, [r3, #0]
	}
  402ec8:	4770      	bx	lr
  402eca:	bf00      	nop
  402ecc:	20400a5c 	.word	0x20400a5c

00402ed0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402ed0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402ed2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402ed4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402ed6:	4291      	cmp	r1, r2
  402ed8:	d80c      	bhi.n	402ef4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402eda:	1ad2      	subs	r2, r2, r3
  402edc:	6983      	ldr	r3, [r0, #24]
  402ede:	429a      	cmp	r2, r3
  402ee0:	d301      	bcc.n	402ee6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402ee2:	2001      	movs	r0, #1
  402ee4:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402ee6:	1d01      	adds	r1, r0, #4
  402ee8:	4b09      	ldr	r3, [pc, #36]	; (402f10 <prvInsertTimerInActiveList+0x40>)
  402eea:	6818      	ldr	r0, [r3, #0]
  402eec:	4b09      	ldr	r3, [pc, #36]	; (402f14 <prvInsertTimerInActiveList+0x44>)
  402eee:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402ef0:	2000      	movs	r0, #0
  402ef2:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402ef4:	429a      	cmp	r2, r3
  402ef6:	d203      	bcs.n	402f00 <prvInsertTimerInActiveList+0x30>
  402ef8:	4299      	cmp	r1, r3
  402efa:	d301      	bcc.n	402f00 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402efc:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402efe:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402f00:	1d01      	adds	r1, r0, #4
  402f02:	4b05      	ldr	r3, [pc, #20]	; (402f18 <prvInsertTimerInActiveList+0x48>)
  402f04:	6818      	ldr	r0, [r3, #0]
  402f06:	4b03      	ldr	r3, [pc, #12]	; (402f14 <prvInsertTimerInActiveList+0x44>)
  402f08:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402f0a:	2000      	movs	r0, #0
  402f0c:	bd08      	pop	{r3, pc}
  402f0e:	bf00      	nop
  402f10:	20400b60 	.word	0x20400b60
  402f14:	0040170d 	.word	0x0040170d
  402f18:	20400b5c 	.word	0x20400b5c

00402f1c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402f1c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402f1e:	4b15      	ldr	r3, [pc, #84]	; (402f74 <prvCheckForValidListAndQueue+0x58>)
  402f20:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402f22:	4b15      	ldr	r3, [pc, #84]	; (402f78 <prvCheckForValidListAndQueue+0x5c>)
  402f24:	681b      	ldr	r3, [r3, #0]
  402f26:	b113      	cbz	r3, 402f2e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402f28:	4b14      	ldr	r3, [pc, #80]	; (402f7c <prvCheckForValidListAndQueue+0x60>)
  402f2a:	4798      	blx	r3
  402f2c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402f2e:	4d14      	ldr	r5, [pc, #80]	; (402f80 <prvCheckForValidListAndQueue+0x64>)
  402f30:	4628      	mov	r0, r5
  402f32:	4e14      	ldr	r6, [pc, #80]	; (402f84 <prvCheckForValidListAndQueue+0x68>)
  402f34:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402f36:	4c14      	ldr	r4, [pc, #80]	; (402f88 <prvCheckForValidListAndQueue+0x6c>)
  402f38:	4620      	mov	r0, r4
  402f3a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402f3c:	4b13      	ldr	r3, [pc, #76]	; (402f8c <prvCheckForValidListAndQueue+0x70>)
  402f3e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402f40:	4b13      	ldr	r3, [pc, #76]	; (402f90 <prvCheckForValidListAndQueue+0x74>)
  402f42:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402f44:	2200      	movs	r2, #0
  402f46:	2110      	movs	r1, #16
  402f48:	2005      	movs	r0, #5
  402f4a:	4b12      	ldr	r3, [pc, #72]	; (402f94 <prvCheckForValidListAndQueue+0x78>)
  402f4c:	4798      	blx	r3
  402f4e:	4b0a      	ldr	r3, [pc, #40]	; (402f78 <prvCheckForValidListAndQueue+0x5c>)
  402f50:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402f52:	b118      	cbz	r0, 402f5c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402f54:	4910      	ldr	r1, [pc, #64]	; (402f98 <prvCheckForValidListAndQueue+0x7c>)
  402f56:	4b11      	ldr	r3, [pc, #68]	; (402f9c <prvCheckForValidListAndQueue+0x80>)
  402f58:	4798      	blx	r3
  402f5a:	e7e5      	b.n	402f28 <prvCheckForValidListAndQueue+0xc>
  402f5c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f60:	b672      	cpsid	i
  402f62:	f383 8811 	msr	BASEPRI, r3
  402f66:	f3bf 8f6f 	isb	sy
  402f6a:	f3bf 8f4f 	dsb	sy
  402f6e:	b662      	cpsie	i
  402f70:	e7fe      	b.n	402f70 <prvCheckForValidListAndQueue+0x54>
  402f72:	bf00      	nop
  402f74:	00401825 	.word	0x00401825
  402f78:	20400b90 	.word	0x20400b90
  402f7c:	00401871 	.word	0x00401871
  402f80:	20400b64 	.word	0x20400b64
  402f84:	004016d9 	.word	0x004016d9
  402f88:	20400b78 	.word	0x20400b78
  402f8c:	20400b5c 	.word	0x20400b5c
  402f90:	20400b60 	.word	0x20400b60
  402f94:	00401d45 	.word	0x00401d45
  402f98:	0040b284 	.word	0x0040b284
  402f9c:	00402275 	.word	0x00402275

00402fa0 <xTimerCreateTimerTask>:
{
  402fa0:	b510      	push	{r4, lr}
  402fa2:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402fa4:	4b0f      	ldr	r3, [pc, #60]	; (402fe4 <xTimerCreateTimerTask+0x44>)
  402fa6:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402fa8:	4b0f      	ldr	r3, [pc, #60]	; (402fe8 <xTimerCreateTimerTask+0x48>)
  402faa:	681b      	ldr	r3, [r3, #0]
  402fac:	b173      	cbz	r3, 402fcc <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402fae:	2300      	movs	r3, #0
  402fb0:	9303      	str	r3, [sp, #12]
  402fb2:	9302      	str	r3, [sp, #8]
  402fb4:	9301      	str	r3, [sp, #4]
  402fb6:	2204      	movs	r2, #4
  402fb8:	9200      	str	r2, [sp, #0]
  402fba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402fbe:	490b      	ldr	r1, [pc, #44]	; (402fec <xTimerCreateTimerTask+0x4c>)
  402fc0:	480b      	ldr	r0, [pc, #44]	; (402ff0 <xTimerCreateTimerTask+0x50>)
  402fc2:	4c0c      	ldr	r4, [pc, #48]	; (402ff4 <xTimerCreateTimerTask+0x54>)
  402fc4:	47a0      	blx	r4
	configASSERT( xReturn );
  402fc6:	b108      	cbz	r0, 402fcc <xTimerCreateTimerTask+0x2c>
}
  402fc8:	b004      	add	sp, #16
  402fca:	bd10      	pop	{r4, pc}
  402fcc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fd0:	b672      	cpsid	i
  402fd2:	f383 8811 	msr	BASEPRI, r3
  402fd6:	f3bf 8f6f 	isb	sy
  402fda:	f3bf 8f4f 	dsb	sy
  402fde:	b662      	cpsie	i
  402fe0:	e7fe      	b.n	402fe0 <xTimerCreateTimerTask+0x40>
  402fe2:	bf00      	nop
  402fe4:	00402f1d 	.word	0x00402f1d
  402fe8:	20400b90 	.word	0x20400b90
  402fec:	0040b28c 	.word	0x0040b28c
  402ff0:	00403121 	.word	0x00403121
  402ff4:	00402385 	.word	0x00402385

00402ff8 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402ff8:	b1d8      	cbz	r0, 403032 <xTimerGenericCommand+0x3a>
{
  402ffa:	b530      	push	{r4, r5, lr}
  402ffc:	b085      	sub	sp, #20
  402ffe:	4615      	mov	r5, r2
  403000:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  403002:	4a15      	ldr	r2, [pc, #84]	; (403058 <xTimerGenericCommand+0x60>)
  403004:	6810      	ldr	r0, [r2, #0]
  403006:	b320      	cbz	r0, 403052 <xTimerGenericCommand+0x5a>
  403008:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  40300a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  40300c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40300e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403010:	2905      	cmp	r1, #5
  403012:	dc19      	bgt.n	403048 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  403014:	4b11      	ldr	r3, [pc, #68]	; (40305c <xTimerGenericCommand+0x64>)
  403016:	4798      	blx	r3
  403018:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  40301a:	f04f 0300 	mov.w	r3, #0
  40301e:	bf0c      	ite	eq
  403020:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  403022:	461a      	movne	r2, r3
  403024:	4669      	mov	r1, sp
  403026:	480c      	ldr	r0, [pc, #48]	; (403058 <xTimerGenericCommand+0x60>)
  403028:	6800      	ldr	r0, [r0, #0]
  40302a:	4c0d      	ldr	r4, [pc, #52]	; (403060 <xTimerGenericCommand+0x68>)
  40302c:	47a0      	blx	r4
}
  40302e:	b005      	add	sp, #20
  403030:	bd30      	pop	{r4, r5, pc}
  403032:	f04f 0380 	mov.w	r3, #128	; 0x80
  403036:	b672      	cpsid	i
  403038:	f383 8811 	msr	BASEPRI, r3
  40303c:	f3bf 8f6f 	isb	sy
  403040:	f3bf 8f4f 	dsb	sy
  403044:	b662      	cpsie	i
  403046:	e7fe      	b.n	403046 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403048:	2300      	movs	r3, #0
  40304a:	4669      	mov	r1, sp
  40304c:	4c05      	ldr	r4, [pc, #20]	; (403064 <xTimerGenericCommand+0x6c>)
  40304e:	47a0      	blx	r4
  403050:	e7ed      	b.n	40302e <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  403052:	2000      	movs	r0, #0
	return xReturn;
  403054:	e7eb      	b.n	40302e <xTimerGenericCommand+0x36>
  403056:	bf00      	nop
  403058:	20400b90 	.word	0x20400b90
  40305c:	00402d35 	.word	0x00402d35
  403060:	00401dc1 	.word	0x00401dc1
  403064:	00401fa5 	.word	0x00401fa5

00403068 <prvSampleTimeNow>:
{
  403068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40306c:	b082      	sub	sp, #8
  40306e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403070:	4b24      	ldr	r3, [pc, #144]	; (403104 <prvSampleTimeNow+0x9c>)
  403072:	4798      	blx	r3
  403074:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  403076:	4b24      	ldr	r3, [pc, #144]	; (403108 <prvSampleTimeNow+0xa0>)
  403078:	681b      	ldr	r3, [r3, #0]
  40307a:	4298      	cmp	r0, r3
  40307c:	d31b      	bcc.n	4030b6 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  40307e:	2300      	movs	r3, #0
  403080:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403084:	4b20      	ldr	r3, [pc, #128]	; (403108 <prvSampleTimeNow+0xa0>)
  403086:	601f      	str	r7, [r3, #0]
}
  403088:	4638      	mov	r0, r7
  40308a:	b002      	add	sp, #8
  40308c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403090:	2100      	movs	r1, #0
  403092:	9100      	str	r1, [sp, #0]
  403094:	460b      	mov	r3, r1
  403096:	4652      	mov	r2, sl
  403098:	4620      	mov	r0, r4
  40309a:	4c1c      	ldr	r4, [pc, #112]	; (40310c <prvSampleTimeNow+0xa4>)
  40309c:	47a0      	blx	r4
				configASSERT( xResult );
  40309e:	b960      	cbnz	r0, 4030ba <prvSampleTimeNow+0x52>
  4030a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030a4:	b672      	cpsid	i
  4030a6:	f383 8811 	msr	BASEPRI, r3
  4030aa:	f3bf 8f6f 	isb	sy
  4030ae:	f3bf 8f4f 	dsb	sy
  4030b2:	b662      	cpsie	i
  4030b4:	e7fe      	b.n	4030b4 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4030b6:	4d16      	ldr	r5, [pc, #88]	; (403110 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4030b8:	4e16      	ldr	r6, [pc, #88]	; (403114 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4030ba:	682b      	ldr	r3, [r5, #0]
  4030bc:	681a      	ldr	r2, [r3, #0]
  4030be:	b1c2      	cbz	r2, 4030f2 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4030c0:	68db      	ldr	r3, [r3, #12]
  4030c2:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4030c6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4030c8:	f104 0904 	add.w	r9, r4, #4
  4030cc:	4648      	mov	r0, r9
  4030ce:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4030d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4030d2:	4620      	mov	r0, r4
  4030d4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4030d6:	69e3      	ldr	r3, [r4, #28]
  4030d8:	2b01      	cmp	r3, #1
  4030da:	d1ee      	bne.n	4030ba <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4030dc:	69a3      	ldr	r3, [r4, #24]
  4030de:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4030e0:	459a      	cmp	sl, r3
  4030e2:	d2d5      	bcs.n	403090 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4030e4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4030e6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4030e8:	4649      	mov	r1, r9
  4030ea:	6828      	ldr	r0, [r5, #0]
  4030ec:	4b0a      	ldr	r3, [pc, #40]	; (403118 <prvSampleTimeNow+0xb0>)
  4030ee:	4798      	blx	r3
  4030f0:	e7e3      	b.n	4030ba <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  4030f2:	4a0a      	ldr	r2, [pc, #40]	; (40311c <prvSampleTimeNow+0xb4>)
  4030f4:	6810      	ldr	r0, [r2, #0]
  4030f6:	4906      	ldr	r1, [pc, #24]	; (403110 <prvSampleTimeNow+0xa8>)
  4030f8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4030fa:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  4030fc:	2301      	movs	r3, #1
  4030fe:	f8c8 3000 	str.w	r3, [r8]
  403102:	e7bf      	b.n	403084 <prvSampleTimeNow+0x1c>
  403104:	00402659 	.word	0x00402659
  403108:	20400b8c 	.word	0x20400b8c
  40310c:	00402ff9 	.word	0x00402ff9
  403110:	20400b5c 	.word	0x20400b5c
  403114:	00401741 	.word	0x00401741
  403118:	0040170d 	.word	0x0040170d
  40311c:	20400b60 	.word	0x20400b60

00403120 <prvTimerTask>:
{
  403120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403124:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403126:	4e75      	ldr	r6, [pc, #468]	; (4032fc <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  403128:	4f75      	ldr	r7, [pc, #468]	; (403300 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  40312a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403328 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40312e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 40332c <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403132:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  403134:	681a      	ldr	r2, [r3, #0]
  403136:	2a00      	cmp	r2, #0
  403138:	f000 80ce 	beq.w	4032d8 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40313c:	68db      	ldr	r3, [r3, #12]
  40313e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403140:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403142:	a804      	add	r0, sp, #16
  403144:	4b6f      	ldr	r3, [pc, #444]	; (403304 <prvTimerTask+0x1e4>)
  403146:	4798      	blx	r3
  403148:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40314a:	9b04      	ldr	r3, [sp, #16]
  40314c:	2b00      	cmp	r3, #0
  40314e:	d144      	bne.n	4031da <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403150:	42a0      	cmp	r0, r4
  403152:	d212      	bcs.n	40317a <prvTimerTask+0x5a>
  403154:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  403156:	1b61      	subs	r1, r4, r5
  403158:	4b6b      	ldr	r3, [pc, #428]	; (403308 <prvTimerTask+0x1e8>)
  40315a:	6818      	ldr	r0, [r3, #0]
  40315c:	4b6b      	ldr	r3, [pc, #428]	; (40330c <prvTimerTask+0x1ec>)
  40315e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403160:	4b6b      	ldr	r3, [pc, #428]	; (403310 <prvTimerTask+0x1f0>)
  403162:	4798      	blx	r3
  403164:	2800      	cmp	r0, #0
  403166:	d13a      	bne.n	4031de <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403168:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40316c:	f8c9 3000 	str.w	r3, [r9]
  403170:	f3bf 8f4f 	dsb	sy
  403174:	f3bf 8f6f 	isb	sy
  403178:	e031      	b.n	4031de <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  40317a:	4b65      	ldr	r3, [pc, #404]	; (403310 <prvTimerTask+0x1f0>)
  40317c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40317e:	6833      	ldr	r3, [r6, #0]
  403180:	68db      	ldr	r3, [r3, #12]
  403182:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403186:	f10a 0004 	add.w	r0, sl, #4
  40318a:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40318c:	f8da 301c 	ldr.w	r3, [sl, #28]
  403190:	2b01      	cmp	r3, #1
  403192:	d004      	beq.n	40319e <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403194:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403198:	4650      	mov	r0, sl
  40319a:	4798      	blx	r3
  40319c:	e01f      	b.n	4031de <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40319e:	f8da 1018 	ldr.w	r1, [sl, #24]
  4031a2:	4623      	mov	r3, r4
  4031a4:	462a      	mov	r2, r5
  4031a6:	4421      	add	r1, r4
  4031a8:	4650      	mov	r0, sl
  4031aa:	4d5a      	ldr	r5, [pc, #360]	; (403314 <prvTimerTask+0x1f4>)
  4031ac:	47a8      	blx	r5
  4031ae:	2801      	cmp	r0, #1
  4031b0:	d1f0      	bne.n	403194 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4031b2:	2100      	movs	r1, #0
  4031b4:	9100      	str	r1, [sp, #0]
  4031b6:	460b      	mov	r3, r1
  4031b8:	4622      	mov	r2, r4
  4031ba:	4650      	mov	r0, sl
  4031bc:	4c56      	ldr	r4, [pc, #344]	; (403318 <prvTimerTask+0x1f8>)
  4031be:	47a0      	blx	r4
			configASSERT( xResult );
  4031c0:	2800      	cmp	r0, #0
  4031c2:	d1e7      	bne.n	403194 <prvTimerTask+0x74>
  4031c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031c8:	b672      	cpsid	i
  4031ca:	f383 8811 	msr	BASEPRI, r3
  4031ce:	f3bf 8f6f 	isb	sy
  4031d2:	f3bf 8f4f 	dsb	sy
  4031d6:	b662      	cpsie	i
  4031d8:	e7fe      	b.n	4031d8 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  4031da:	4b4d      	ldr	r3, [pc, #308]	; (403310 <prvTimerTask+0x1f0>)
  4031dc:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4031de:	4d4a      	ldr	r5, [pc, #296]	; (403308 <prvTimerTask+0x1e8>)
  4031e0:	4c4e      	ldr	r4, [pc, #312]	; (40331c <prvTimerTask+0x1fc>)
  4031e2:	e006      	b.n	4031f2 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4031e4:	9907      	ldr	r1, [sp, #28]
  4031e6:	9806      	ldr	r0, [sp, #24]
  4031e8:	9b05      	ldr	r3, [sp, #20]
  4031ea:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4031ec:	9b04      	ldr	r3, [sp, #16]
  4031ee:	2b00      	cmp	r3, #0
  4031f0:	da09      	bge.n	403206 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4031f2:	2300      	movs	r3, #0
  4031f4:	461a      	mov	r2, r3
  4031f6:	a904      	add	r1, sp, #16
  4031f8:	6828      	ldr	r0, [r5, #0]
  4031fa:	47a0      	blx	r4
  4031fc:	2800      	cmp	r0, #0
  4031fe:	d098      	beq.n	403132 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403200:	9b04      	ldr	r3, [sp, #16]
  403202:	2b00      	cmp	r3, #0
  403204:	dbee      	blt.n	4031e4 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403206:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40320a:	f8da 3014 	ldr.w	r3, [sl, #20]
  40320e:	b113      	cbz	r3, 403216 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403210:	f10a 0004 	add.w	r0, sl, #4
  403214:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403216:	a803      	add	r0, sp, #12
  403218:	4b3a      	ldr	r3, [pc, #232]	; (403304 <prvTimerTask+0x1e4>)
  40321a:	4798      	blx	r3
			switch( xMessage.xMessageID )
  40321c:	9b04      	ldr	r3, [sp, #16]
  40321e:	2b09      	cmp	r3, #9
  403220:	d8e7      	bhi.n	4031f2 <prvTimerTask+0xd2>
  403222:	a201      	add	r2, pc, #4	; (adr r2, 403228 <prvTimerTask+0x108>)
  403224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403228:	00403251 	.word	0x00403251
  40322c:	00403251 	.word	0x00403251
  403230:	00403251 	.word	0x00403251
  403234:	004031f3 	.word	0x004031f3
  403238:	004032a5 	.word	0x004032a5
  40323c:	004032d1 	.word	0x004032d1
  403240:	00403251 	.word	0x00403251
  403244:	00403251 	.word	0x00403251
  403248:	004031f3 	.word	0x004031f3
  40324c:	004032a5 	.word	0x004032a5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403250:	9c05      	ldr	r4, [sp, #20]
  403252:	f8da 1018 	ldr.w	r1, [sl, #24]
  403256:	4623      	mov	r3, r4
  403258:	4602      	mov	r2, r0
  40325a:	4421      	add	r1, r4
  40325c:	4650      	mov	r0, sl
  40325e:	4c2d      	ldr	r4, [pc, #180]	; (403314 <prvTimerTask+0x1f4>)
  403260:	47a0      	blx	r4
  403262:	2801      	cmp	r0, #1
  403264:	d1bc      	bne.n	4031e0 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403266:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40326a:	4650      	mov	r0, sl
  40326c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40326e:	f8da 301c 	ldr.w	r3, [sl, #28]
  403272:	2b01      	cmp	r3, #1
  403274:	d1b4      	bne.n	4031e0 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403276:	f8da 2018 	ldr.w	r2, [sl, #24]
  40327a:	2100      	movs	r1, #0
  40327c:	9100      	str	r1, [sp, #0]
  40327e:	460b      	mov	r3, r1
  403280:	9805      	ldr	r0, [sp, #20]
  403282:	4402      	add	r2, r0
  403284:	4650      	mov	r0, sl
  403286:	4c24      	ldr	r4, [pc, #144]	; (403318 <prvTimerTask+0x1f8>)
  403288:	47a0      	blx	r4
							configASSERT( xResult );
  40328a:	2800      	cmp	r0, #0
  40328c:	d1a8      	bne.n	4031e0 <prvTimerTask+0xc0>
  40328e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403292:	b672      	cpsid	i
  403294:	f383 8811 	msr	BASEPRI, r3
  403298:	f3bf 8f6f 	isb	sy
  40329c:	f3bf 8f4f 	dsb	sy
  4032a0:	b662      	cpsie	i
  4032a2:	e7fe      	b.n	4032a2 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4032a4:	9905      	ldr	r1, [sp, #20]
  4032a6:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4032aa:	b131      	cbz	r1, 4032ba <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4032ac:	4603      	mov	r3, r0
  4032ae:	4602      	mov	r2, r0
  4032b0:	4401      	add	r1, r0
  4032b2:	4650      	mov	r0, sl
  4032b4:	4c17      	ldr	r4, [pc, #92]	; (403314 <prvTimerTask+0x1f4>)
  4032b6:	47a0      	blx	r4
  4032b8:	e792      	b.n	4031e0 <prvTimerTask+0xc0>
  4032ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032be:	b672      	cpsid	i
  4032c0:	f383 8811 	msr	BASEPRI, r3
  4032c4:	f3bf 8f6f 	isb	sy
  4032c8:	f3bf 8f4f 	dsb	sy
  4032cc:	b662      	cpsie	i
  4032ce:	e7fe      	b.n	4032ce <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  4032d0:	4650      	mov	r0, sl
  4032d2:	4b13      	ldr	r3, [pc, #76]	; (403320 <prvTimerTask+0x200>)
  4032d4:	4798      	blx	r3
  4032d6:	e783      	b.n	4031e0 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4032d8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4032da:	a804      	add	r0, sp, #16
  4032dc:	4b09      	ldr	r3, [pc, #36]	; (403304 <prvTimerTask+0x1e4>)
  4032de:	4798      	blx	r3
  4032e0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4032e2:	9b04      	ldr	r3, [sp, #16]
  4032e4:	2b00      	cmp	r3, #0
  4032e6:	f47f af78 	bne.w	4031da <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4032ea:	4b0e      	ldr	r3, [pc, #56]	; (403324 <prvTimerTask+0x204>)
  4032ec:	681b      	ldr	r3, [r3, #0]
  4032ee:	681a      	ldr	r2, [r3, #0]
  4032f0:	fab2 f282 	clz	r2, r2
  4032f4:	0952      	lsrs	r2, r2, #5
  4032f6:	2400      	movs	r4, #0
  4032f8:	e72d      	b.n	403156 <prvTimerTask+0x36>
  4032fa:	bf00      	nop
  4032fc:	20400b5c 	.word	0x20400b5c
  403300:	00402649 	.word	0x00402649
  403304:	00403069 	.word	0x00403069
  403308:	20400b90 	.word	0x20400b90
  40330c:	004022a9 	.word	0x004022a9
  403310:	004027b1 	.word	0x004027b1
  403314:	00402ed1 	.word	0x00402ed1
  403318:	00402ff9 	.word	0x00402ff9
  40331c:	004020a5 	.word	0x004020a5
  403320:	00401ab1 	.word	0x00401ab1
  403324:	20400b60 	.word	0x20400b60
  403328:	e000ed04 	.word	0xe000ed04
  40332c:	00401741 	.word	0x00401741

00403330 <task_orientacao>:
		}

	}
}

static void task_orientacao(void *pvParameters) {
  403330:	b580      	push	{r7, lr}
  403332:	b082      	sub	sp, #8

	pio_clear(LED_2_PIO, LED_2_IDX_MASK);
  403334:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403338:	4818      	ldr	r0, [pc, #96]	; (40339c <task_orientacao+0x6c>)
  40333a:	4b19      	ldr	r3, [pc, #100]	; (4033a0 <task_orientacao+0x70>)
  40333c:	4798      	blx	r3
	enum orientacao o;
	for(;;) {
		if (xQueueReceive(xQueueORIENTACAO, &o, 100)) {
  40333e:	4d19      	ldr	r5, [pc, #100]	; (4033a4 <task_orientacao+0x74>)
			pio_set(LED_1_PIO, LED_1_IDX_MASK);
  403340:	4e19      	ldr	r6, [pc, #100]	; (4033a8 <task_orientacao+0x78>)
			pio_set(LED_2_PIO, LED_2_IDX_MASK);
  403342:	4f16      	ldr	r7, [pc, #88]	; (40339c <task_orientacao+0x6c>)
  403344:	e003      	b.n	40334e <task_orientacao+0x1e>
			pio_set(LED_3_PIO, LED_3_IDX_MASK);
			if (o == 0) {
				pio_clear(LED_1_PIO, LED_1_IDX_MASK);
  403346:	2101      	movs	r1, #1
  403348:	4630      	mov	r0, r6
  40334a:	4b15      	ldr	r3, [pc, #84]	; (4033a0 <task_orientacao+0x70>)
  40334c:	4798      	blx	r3
		if (xQueueReceive(xQueueORIENTACAO, &o, 100)) {
  40334e:	4c17      	ldr	r4, [pc, #92]	; (4033ac <task_orientacao+0x7c>)
  403350:	2300      	movs	r3, #0
  403352:	2264      	movs	r2, #100	; 0x64
  403354:	f10d 0107 	add.w	r1, sp, #7
  403358:	6828      	ldr	r0, [r5, #0]
  40335a:	47a0      	blx	r4
  40335c:	2800      	cmp	r0, #0
  40335e:	d0f7      	beq.n	403350 <task_orientacao+0x20>
			pio_set(LED_1_PIO, LED_1_IDX_MASK);
  403360:	2101      	movs	r1, #1
  403362:	4630      	mov	r0, r6
  403364:	4c12      	ldr	r4, [pc, #72]	; (4033b0 <task_orientacao+0x80>)
  403366:	47a0      	blx	r4
			pio_set(LED_2_PIO, LED_2_IDX_MASK);
  403368:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40336c:	4638      	mov	r0, r7
  40336e:	47a0      	blx	r4
			pio_set(LED_3_PIO, LED_3_IDX_MASK);
  403370:	2104      	movs	r1, #4
  403372:	4810      	ldr	r0, [pc, #64]	; (4033b4 <task_orientacao+0x84>)
  403374:	47a0      	blx	r4
			if (o == 0) {
  403376:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40337a:	2b00      	cmp	r3, #0
  40337c:	d0e3      	beq.n	403346 <task_orientacao+0x16>
			} else if (o == 1) {
  40337e:	2b01      	cmp	r3, #1
  403380:	d006      	beq.n	403390 <task_orientacao+0x60>
				pio_clear(LED_2_PIO, LED_2_IDX_MASK);
			} else if (o == 2) {
  403382:	2b02      	cmp	r3, #2
  403384:	d1e3      	bne.n	40334e <task_orientacao+0x1e>
				pio_clear(LED_3_PIO, LED_3_IDX_MASK);
  403386:	2104      	movs	r1, #4
  403388:	480a      	ldr	r0, [pc, #40]	; (4033b4 <task_orientacao+0x84>)
  40338a:	4b05      	ldr	r3, [pc, #20]	; (4033a0 <task_orientacao+0x70>)
  40338c:	4798      	blx	r3
  40338e:	e7de      	b.n	40334e <task_orientacao+0x1e>
				pio_clear(LED_2_PIO, LED_2_IDX_MASK);
  403390:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403394:	4638      	mov	r0, r7
  403396:	4b02      	ldr	r3, [pc, #8]	; (4033a0 <task_orientacao+0x70>)
  403398:	4798      	blx	r3
  40339a:	e7d8      	b.n	40334e <task_orientacao+0x1e>
  40339c:	400e1200 	.word	0x400e1200
  4033a0:	00400f3d 	.word	0x00400f3d
  4033a4:	20400c18 	.word	0x20400c18
  4033a8:	400e0e00 	.word	0x400e0e00
  4033ac:	004020a5 	.word	0x004020a5
  4033b0:	00400f39 	.word	0x00400f39
  4033b4:	400e1000 	.word	0x400e1000

004033b8 <task_house_down>:
static void task_house_down(void *pvParameters) {
  4033b8:	b580      	push	{r7, lr}
		if (xSemaphoreTake(xSemaphoreDown, 1)) {
  4033ba:	4e0e      	ldr	r6, [pc, #56]	; (4033f4 <task_house_down+0x3c>)
  4033bc:	4d0e      	ldr	r5, [pc, #56]	; (4033f8 <task_house_down+0x40>)
			pio_clear(LED_PLACA_PIO, LED_PLACA_IDX_MASK);
  4033be:	4f0f      	ldr	r7, [pc, #60]	; (4033fc <task_house_down+0x44>)
		if (xSemaphoreTake(xSemaphoreDown, 1)) {
  4033c0:	2400      	movs	r4, #0
  4033c2:	4623      	mov	r3, r4
  4033c4:	2201      	movs	r2, #1
  4033c6:	4621      	mov	r1, r4
  4033c8:	6830      	ldr	r0, [r6, #0]
  4033ca:	47a8      	blx	r5
  4033cc:	2800      	cmp	r0, #0
  4033ce:	d0f8      	beq.n	4033c2 <task_house_down+0xa>
			printf("Cai \n");
  4033d0:	480b      	ldr	r0, [pc, #44]	; (403400 <task_house_down+0x48>)
  4033d2:	4b0c      	ldr	r3, [pc, #48]	; (403404 <task_house_down+0x4c>)
  4033d4:	4798      	blx	r3
			pio_clear(LED_PLACA_PIO, LED_PLACA_IDX_MASK);
  4033d6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4033da:	4638      	mov	r0, r7
  4033dc:	4b0a      	ldr	r3, [pc, #40]	; (403408 <task_house_down+0x50>)
  4033de:	4798      	blx	r3
			vTaskDelay(100);
  4033e0:	2064      	movs	r0, #100	; 0x64
  4033e2:	4b0a      	ldr	r3, [pc, #40]	; (40340c <task_house_down+0x54>)
  4033e4:	4798      	blx	r3
			pio_set(LED_PLACA_PIO, LED_PLACA_IDX_MASK);
  4033e6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4033ea:	4638      	mov	r0, r7
  4033ec:	4b08      	ldr	r3, [pc, #32]	; (403410 <task_house_down+0x58>)
  4033ee:	4798      	blx	r3
  4033f0:	e7e6      	b.n	4033c0 <task_house_down+0x8>
  4033f2:	bf00      	nop
  4033f4:	20400c14 	.word	0x20400c14
  4033f8:	004020a5 	.word	0x004020a5
  4033fc:	400e1200 	.word	0x400e1200
  403400:	0040b330 	.word	0x0040b330
  403404:	00406a35 	.word	0x00406a35
  403408:	00400f3d 	.word	0x00400f3d
  40340c:	004028d1 	.word	0x004028d1
  403410:	00400f39 	.word	0x00400f39

00403414 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403414:	b5f0      	push	{r4, r5, r6, r7, lr}
  403416:	b083      	sub	sp, #12
  403418:	4605      	mov	r5, r0
  40341a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40341c:	2300      	movs	r3, #0
  40341e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403420:	4b2a      	ldr	r3, [pc, #168]	; (4034cc <usart_serial_getchar+0xb8>)
  403422:	4298      	cmp	r0, r3
  403424:	d013      	beq.n	40344e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403426:	4b2a      	ldr	r3, [pc, #168]	; (4034d0 <usart_serial_getchar+0xbc>)
  403428:	4298      	cmp	r0, r3
  40342a:	d018      	beq.n	40345e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40342c:	4b29      	ldr	r3, [pc, #164]	; (4034d4 <usart_serial_getchar+0xc0>)
  40342e:	4298      	cmp	r0, r3
  403430:	d01d      	beq.n	40346e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403432:	4b29      	ldr	r3, [pc, #164]	; (4034d8 <usart_serial_getchar+0xc4>)
  403434:	429d      	cmp	r5, r3
  403436:	d022      	beq.n	40347e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403438:	4b28      	ldr	r3, [pc, #160]	; (4034dc <usart_serial_getchar+0xc8>)
  40343a:	429d      	cmp	r5, r3
  40343c:	d027      	beq.n	40348e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40343e:	4b28      	ldr	r3, [pc, #160]	; (4034e0 <usart_serial_getchar+0xcc>)
  403440:	429d      	cmp	r5, r3
  403442:	d02e      	beq.n	4034a2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403444:	4b27      	ldr	r3, [pc, #156]	; (4034e4 <usart_serial_getchar+0xd0>)
  403446:	429d      	cmp	r5, r3
  403448:	d035      	beq.n	4034b6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40344a:	b003      	add	sp, #12
  40344c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40344e:	461f      	mov	r7, r3
  403450:	4e25      	ldr	r6, [pc, #148]	; (4034e8 <usart_serial_getchar+0xd4>)
  403452:	4621      	mov	r1, r4
  403454:	4638      	mov	r0, r7
  403456:	47b0      	blx	r6
  403458:	2800      	cmp	r0, #0
  40345a:	d1fa      	bne.n	403452 <usart_serial_getchar+0x3e>
  40345c:	e7e9      	b.n	403432 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40345e:	461f      	mov	r7, r3
  403460:	4e21      	ldr	r6, [pc, #132]	; (4034e8 <usart_serial_getchar+0xd4>)
  403462:	4621      	mov	r1, r4
  403464:	4638      	mov	r0, r7
  403466:	47b0      	blx	r6
  403468:	2800      	cmp	r0, #0
  40346a:	d1fa      	bne.n	403462 <usart_serial_getchar+0x4e>
  40346c:	e7e4      	b.n	403438 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40346e:	461f      	mov	r7, r3
  403470:	4e1d      	ldr	r6, [pc, #116]	; (4034e8 <usart_serial_getchar+0xd4>)
  403472:	4621      	mov	r1, r4
  403474:	4638      	mov	r0, r7
  403476:	47b0      	blx	r6
  403478:	2800      	cmp	r0, #0
  40347a:	d1fa      	bne.n	403472 <usart_serial_getchar+0x5e>
  40347c:	e7df      	b.n	40343e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40347e:	461f      	mov	r7, r3
  403480:	4e19      	ldr	r6, [pc, #100]	; (4034e8 <usart_serial_getchar+0xd4>)
  403482:	4621      	mov	r1, r4
  403484:	4638      	mov	r0, r7
  403486:	47b0      	blx	r6
  403488:	2800      	cmp	r0, #0
  40348a:	d1fa      	bne.n	403482 <usart_serial_getchar+0x6e>
  40348c:	e7da      	b.n	403444 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40348e:	461e      	mov	r6, r3
  403490:	4d16      	ldr	r5, [pc, #88]	; (4034ec <usart_serial_getchar+0xd8>)
  403492:	a901      	add	r1, sp, #4
  403494:	4630      	mov	r0, r6
  403496:	47a8      	blx	r5
  403498:	2800      	cmp	r0, #0
  40349a:	d1fa      	bne.n	403492 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40349c:	9b01      	ldr	r3, [sp, #4]
  40349e:	7023      	strb	r3, [r4, #0]
  4034a0:	e7d3      	b.n	40344a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4034a2:	461e      	mov	r6, r3
  4034a4:	4d11      	ldr	r5, [pc, #68]	; (4034ec <usart_serial_getchar+0xd8>)
  4034a6:	a901      	add	r1, sp, #4
  4034a8:	4630      	mov	r0, r6
  4034aa:	47a8      	blx	r5
  4034ac:	2800      	cmp	r0, #0
  4034ae:	d1fa      	bne.n	4034a6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4034b0:	9b01      	ldr	r3, [sp, #4]
  4034b2:	7023      	strb	r3, [r4, #0]
  4034b4:	e7c9      	b.n	40344a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4034b6:	461e      	mov	r6, r3
  4034b8:	4d0c      	ldr	r5, [pc, #48]	; (4034ec <usart_serial_getchar+0xd8>)
  4034ba:	a901      	add	r1, sp, #4
  4034bc:	4630      	mov	r0, r6
  4034be:	47a8      	blx	r5
  4034c0:	2800      	cmp	r0, #0
  4034c2:	d1fa      	bne.n	4034ba <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4034c4:	9b01      	ldr	r3, [sp, #4]
  4034c6:	7023      	strb	r3, [r4, #0]
}
  4034c8:	e7bf      	b.n	40344a <usart_serial_getchar+0x36>
  4034ca:	bf00      	nop
  4034cc:	400e0800 	.word	0x400e0800
  4034d0:	400e0a00 	.word	0x400e0a00
  4034d4:	400e1a00 	.word	0x400e1a00
  4034d8:	400e1c00 	.word	0x400e1c00
  4034dc:	40024000 	.word	0x40024000
  4034e0:	40028000 	.word	0x40028000
  4034e4:	4002c000 	.word	0x4002c000
  4034e8:	00401303 	.word	0x00401303
  4034ec:	0040140f 	.word	0x0040140f

004034f0 <usart_serial_putchar>:
{
  4034f0:	b570      	push	{r4, r5, r6, lr}
  4034f2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4034f4:	4b2a      	ldr	r3, [pc, #168]	; (4035a0 <usart_serial_putchar+0xb0>)
  4034f6:	4298      	cmp	r0, r3
  4034f8:	d013      	beq.n	403522 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4034fa:	4b2a      	ldr	r3, [pc, #168]	; (4035a4 <usart_serial_putchar+0xb4>)
  4034fc:	4298      	cmp	r0, r3
  4034fe:	d019      	beq.n	403534 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403500:	4b29      	ldr	r3, [pc, #164]	; (4035a8 <usart_serial_putchar+0xb8>)
  403502:	4298      	cmp	r0, r3
  403504:	d01f      	beq.n	403546 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403506:	4b29      	ldr	r3, [pc, #164]	; (4035ac <usart_serial_putchar+0xbc>)
  403508:	4298      	cmp	r0, r3
  40350a:	d025      	beq.n	403558 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  40350c:	4b28      	ldr	r3, [pc, #160]	; (4035b0 <usart_serial_putchar+0xc0>)
  40350e:	4298      	cmp	r0, r3
  403510:	d02b      	beq.n	40356a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403512:	4b28      	ldr	r3, [pc, #160]	; (4035b4 <usart_serial_putchar+0xc4>)
  403514:	4298      	cmp	r0, r3
  403516:	d031      	beq.n	40357c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403518:	4b27      	ldr	r3, [pc, #156]	; (4035b8 <usart_serial_putchar+0xc8>)
  40351a:	4298      	cmp	r0, r3
  40351c:	d037      	beq.n	40358e <usart_serial_putchar+0x9e>
	return 0;
  40351e:	2000      	movs	r0, #0
}
  403520:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403522:	461e      	mov	r6, r3
  403524:	4d25      	ldr	r5, [pc, #148]	; (4035bc <usart_serial_putchar+0xcc>)
  403526:	4621      	mov	r1, r4
  403528:	4630      	mov	r0, r6
  40352a:	47a8      	blx	r5
  40352c:	2800      	cmp	r0, #0
  40352e:	d1fa      	bne.n	403526 <usart_serial_putchar+0x36>
		return 1;
  403530:	2001      	movs	r0, #1
  403532:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403534:	461e      	mov	r6, r3
  403536:	4d21      	ldr	r5, [pc, #132]	; (4035bc <usart_serial_putchar+0xcc>)
  403538:	4621      	mov	r1, r4
  40353a:	4630      	mov	r0, r6
  40353c:	47a8      	blx	r5
  40353e:	2800      	cmp	r0, #0
  403540:	d1fa      	bne.n	403538 <usart_serial_putchar+0x48>
		return 1;
  403542:	2001      	movs	r0, #1
  403544:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403546:	461e      	mov	r6, r3
  403548:	4d1c      	ldr	r5, [pc, #112]	; (4035bc <usart_serial_putchar+0xcc>)
  40354a:	4621      	mov	r1, r4
  40354c:	4630      	mov	r0, r6
  40354e:	47a8      	blx	r5
  403550:	2800      	cmp	r0, #0
  403552:	d1fa      	bne.n	40354a <usart_serial_putchar+0x5a>
		return 1;
  403554:	2001      	movs	r0, #1
  403556:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403558:	461e      	mov	r6, r3
  40355a:	4d18      	ldr	r5, [pc, #96]	; (4035bc <usart_serial_putchar+0xcc>)
  40355c:	4621      	mov	r1, r4
  40355e:	4630      	mov	r0, r6
  403560:	47a8      	blx	r5
  403562:	2800      	cmp	r0, #0
  403564:	d1fa      	bne.n	40355c <usart_serial_putchar+0x6c>
		return 1;
  403566:	2001      	movs	r0, #1
  403568:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40356a:	461e      	mov	r6, r3
  40356c:	4d14      	ldr	r5, [pc, #80]	; (4035c0 <usart_serial_putchar+0xd0>)
  40356e:	4621      	mov	r1, r4
  403570:	4630      	mov	r0, r6
  403572:	47a8      	blx	r5
  403574:	2800      	cmp	r0, #0
  403576:	d1fa      	bne.n	40356e <usart_serial_putchar+0x7e>
		return 1;
  403578:	2001      	movs	r0, #1
  40357a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40357c:	461e      	mov	r6, r3
  40357e:	4d10      	ldr	r5, [pc, #64]	; (4035c0 <usart_serial_putchar+0xd0>)
  403580:	4621      	mov	r1, r4
  403582:	4630      	mov	r0, r6
  403584:	47a8      	blx	r5
  403586:	2800      	cmp	r0, #0
  403588:	d1fa      	bne.n	403580 <usart_serial_putchar+0x90>
		return 1;
  40358a:	2001      	movs	r0, #1
  40358c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40358e:	461e      	mov	r6, r3
  403590:	4d0b      	ldr	r5, [pc, #44]	; (4035c0 <usart_serial_putchar+0xd0>)
  403592:	4621      	mov	r1, r4
  403594:	4630      	mov	r0, r6
  403596:	47a8      	blx	r5
  403598:	2800      	cmp	r0, #0
  40359a:	d1fa      	bne.n	403592 <usart_serial_putchar+0xa2>
		return 1;
  40359c:	2001      	movs	r0, #1
  40359e:	bd70      	pop	{r4, r5, r6, pc}
  4035a0:	400e0800 	.word	0x400e0800
  4035a4:	400e0a00 	.word	0x400e0a00
  4035a8:	400e1a00 	.word	0x400e1a00
  4035ac:	400e1c00 	.word	0x400e1c00
  4035b0:	40024000 	.word	0x40024000
  4035b4:	40028000 	.word	0x40028000
  4035b8:	4002c000 	.word	0x4002c000
  4035bc:	004012f1 	.word	0x004012f1
  4035c0:	004013f9 	.word	0x004013f9

004035c4 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  4035c4:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4035c6:	460a      	mov	r2, r1
  4035c8:	4601      	mov	r1, r0
  4035ca:	4802      	ldr	r0, [pc, #8]	; (4035d4 <vApplicationStackOverflowHook+0x10>)
  4035cc:	4b02      	ldr	r3, [pc, #8]	; (4035d8 <vApplicationStackOverflowHook+0x14>)
  4035ce:	4798      	blx	r3
  4035d0:	e7fe      	b.n	4035d0 <vApplicationStackOverflowHook+0xc>
  4035d2:	bf00      	nop
  4035d4:	0040b3c0 	.word	0x0040b3c0
  4035d8:	00406971 	.word	0x00406971

004035dc <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  4035dc:	4770      	bx	lr

004035de <vApplicationMallocFailedHook>:
  4035de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035e2:	b672      	cpsid	i
  4035e4:	f383 8811 	msr	BASEPRI, r3
  4035e8:	f3bf 8f6f 	isb	sy
  4035ec:	f3bf 8f4f 	dsb	sy
  4035f0:	b662      	cpsie	i
  4035f2:	e7fe      	b.n	4035f2 <vApplicationMallocFailedHook+0x14>

004035f4 <io_init>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void io_init(void) {
  4035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pmc_enable_periph_clk(LED_1_PIO_ID);
  4035f6:	200a      	movs	r0, #10
  4035f8:	4c18      	ldr	r4, [pc, #96]	; (40365c <io_init+0x68>)
  4035fa:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_2_PIO_ID);
  4035fc:	200c      	movs	r0, #12
  4035fe:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_3_PIO_ID);
  403600:	200b      	movs	r0, #11
  403602:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_PLACA_PIO_ID);
  403604:	200c      	movs	r0, #12
  403606:	47a0      	blx	r4

	pio_configure(LED_1_PIO, PIO_OUTPUT_0, LED_1_IDX_MASK, PIO_DEFAULT);
  403608:	4f15      	ldr	r7, [pc, #84]	; (403660 <io_init+0x6c>)
  40360a:	2300      	movs	r3, #0
  40360c:	2201      	movs	r2, #1
  40360e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403612:	4638      	mov	r0, r7
  403614:	4c13      	ldr	r4, [pc, #76]	; (403664 <io_init+0x70>)
  403616:	47a0      	blx	r4
	pio_configure(LED_2_PIO, PIO_OUTPUT_0, LED_2_IDX_MASK, PIO_DEFAULT);
  403618:	4d13      	ldr	r5, [pc, #76]	; (403668 <io_init+0x74>)
  40361a:	2300      	movs	r3, #0
  40361c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403620:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403624:	4628      	mov	r0, r5
  403626:	47a0      	blx	r4
	pio_configure(LED_3_PIO, PIO_OUTPUT_0, LED_3_IDX_MASK, PIO_DEFAULT);
  403628:	4e10      	ldr	r6, [pc, #64]	; (40366c <io_init+0x78>)
  40362a:	2300      	movs	r3, #0
  40362c:	2204      	movs	r2, #4
  40362e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403632:	4630      	mov	r0, r6
  403634:	47a0      	blx	r4
	pio_configure(LED_PLACA_PIO, PIO_OUTPUT_0, LED_PLACA_IDX_MASK, PIO_DEFAULT);
  403636:	2300      	movs	r3, #0
  403638:	f44f 7280 	mov.w	r2, #256	; 0x100
  40363c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403640:	4628      	mov	r0, r5
  403642:	47a0      	blx	r4

	pio_set(LED_1_PIO, LED_1_IDX_MASK);
  403644:	2101      	movs	r1, #1
  403646:	4638      	mov	r0, r7
  403648:	4c09      	ldr	r4, [pc, #36]	; (403670 <io_init+0x7c>)
  40364a:	47a0      	blx	r4
	pio_set(LED_3_PIO, LED_3_IDX_MASK);
  40364c:	2104      	movs	r1, #4
  40364e:	4630      	mov	r0, r6
  403650:	47a0      	blx	r4
	pio_set(LED_PLACA_PIO, LED_PLACA_IDX_MASK);
  403652:	f44f 7180 	mov.w	r1, #256	; 0x100
  403656:	4628      	mov	r0, r5
  403658:	47a0      	blx	r4
  40365a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40365c:	0040129d 	.word	0x0040129d
  403660:	400e0e00 	.word	0x400e0e00
  403664:	00401031 	.word	0x00401031
  403668:	400e1200 	.word	0x400e1200
  40366c:	400e1000 	.word	0x400e1000
  403670:	00400f39 	.word	0x00400f39

00403674 <mcu6050_i2c_bus_init>:
	pio_enable_interrupt(BUT_PIO, BUT_PIO_PIN_MASK);
	pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIO_PIN_MASK, PIO_IT_FALL_EDGE , but_callback);
}

void mcu6050_i2c_bus_init(void)
{
  403674:	b530      	push	{r4, r5, lr}
  403676:	b085      	sub	sp, #20
    twihs_options_t mcu6050_option;
    pmc_enable_periph_clk(ID_TWIHS2);
  403678:	2029      	movs	r0, #41	; 0x29
  40367a:	4c0e      	ldr	r4, [pc, #56]	; (4036b4 <mcu6050_i2c_bus_init+0x40>)
  40367c:	47a0      	blx	r4

    /* Configure the options of TWI driver */
    mcu6050_option.master_clk = sysclk_get_cpu_hz();
  40367e:	4b0e      	ldr	r3, [pc, #56]	; (4036b8 <mcu6050_i2c_bus_init+0x44>)
  403680:	9301      	str	r3, [sp, #4]
    mcu6050_option.speed      = 40000;
  403682:	f649 4340 	movw	r3, #40000	; 0x9c40
  403686:	9302      	str	r3, [sp, #8]
    twihs_master_init(TWIHS2, &mcu6050_option);
  403688:	a901      	add	r1, sp, #4
  40368a:	480c      	ldr	r0, [pc, #48]	; (4036bc <mcu6050_i2c_bus_init+0x48>)
  40368c:	4b0c      	ldr	r3, [pc, #48]	; (4036c0 <mcu6050_i2c_bus_init+0x4c>)
  40368e:	4798      	blx	r3

	/** Enable TWIHS port to control PIO pins */
	pmc_enable_periph_clk(ID_PIOD);
  403690:	2010      	movs	r0, #16
  403692:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 28);
  403694:	4d0b      	ldr	r5, [pc, #44]	; (4036c4 <mcu6050_i2c_bus_init+0x50>)
  403696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40369a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40369e:	4628      	mov	r0, r5
  4036a0:	4c09      	ldr	r4, [pc, #36]	; (4036c8 <mcu6050_i2c_bus_init+0x54>)
  4036a2:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 27);
  4036a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4036a8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4036ac:	4628      	mov	r0, r5
  4036ae:	47a0      	blx	r4
}
  4036b0:	b005      	add	sp, #20
  4036b2:	bd30      	pop	{r4, r5, pc}
  4036b4:	0040129d 	.word	0x0040129d
  4036b8:	11e1a300 	.word	0x11e1a300
  4036bc:	40060000 	.word	0x40060000
  4036c0:	0040025d 	.word	0x0040025d
  4036c4:	400e1400 	.word	0x400e1400
  4036c8:	00400f41 	.word	0x00400f41

004036cc <mcu6050_i2c_bus_write>:

int8_t mcu6050_i2c_bus_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  4036cc:	b500      	push	{lr}
  4036ce:	b087      	sub	sp, #28
    int32_t ierror = 0x00;

    twihs_packet_t p_packet;
    p_packet.chip         = dev_addr;
  4036d0:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  4036d4:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  4036d8:	2101      	movs	r1, #1
  4036da:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  4036dc:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  4036de:	9304      	str	r3, [sp, #16]

    ierror = twihs_master_write(TWIHS2, &p_packet);
  4036e0:	a901      	add	r1, sp, #4
  4036e2:	4803      	ldr	r0, [pc, #12]	; (4036f0 <mcu6050_i2c_bus_write+0x24>)
  4036e4:	4b03      	ldr	r3, [pc, #12]	; (4036f4 <mcu6050_i2c_bus_write+0x28>)
  4036e6:	4798      	blx	r3

    return (int8_t)ierror;
}
  4036e8:	b240      	sxtb	r0, r0
  4036ea:	b007      	add	sp, #28
  4036ec:	f85d fb04 	ldr.w	pc, [sp], #4
  4036f0:	40060000 	.word	0x40060000
  4036f4:	0040033d 	.word	0x0040033d

004036f8 <mcu6050_i2c_bus_read>:

int8_t mcu6050_i2c_bus_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  4036f8:	b500      	push	{lr}
  4036fa:	b087      	sub	sp, #28
    int32_t ierror = 0x00;

    twihs_packet_t p_packet;
    p_packet.chip         = dev_addr;
  4036fc:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  403700:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  403704:	2101      	movs	r1, #1
  403706:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  403708:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  40370a:	9304      	str	r3, [sp, #16]

// TODO: Algum problema no SPI faz com que devemos ler duas vezes o registrador para
//       conseguirmos pegar o valor correto.
    ierror = twihs_master_read(TWIHS2, &p_packet);
  40370c:	a901      	add	r1, sp, #4
  40370e:	4803      	ldr	r0, [pc, #12]	; (40371c <mcu6050_i2c_bus_read+0x24>)
  403710:	4b03      	ldr	r3, [pc, #12]	; (403720 <mcu6050_i2c_bus_read+0x28>)
  403712:	4798      	blx	r3

    return (int8_t)ierror;
}
  403714:	b240      	sxtb	r0, r0
  403716:	b007      	add	sp, #28
  403718:	f85d fb04 	ldr.w	pc, [sp], #4
  40371c:	40060000 	.word	0x40060000
  403720:	00400291 	.word	0x00400291
  403724:	00000000 	.word	0x00000000

00403728 <task_imu>:
static void task_imu(void *pvParameters) {
  403728:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  40372c:	ed2d 8b0a 	vpush	{d8-d12}
  403730:	b0b2      	sub	sp, #200	; 0xc8
	mcu6050_i2c_bus_init();
  403732:	4b3f      	ldr	r3, [pc, #252]	; (403830 <task_imu+0x108>)
  403734:	4798      	blx	r3
	io_init();
  403736:	4b3f      	ldr	r3, [pc, #252]	; (403834 <task_imu+0x10c>)
  403738:	4798      	blx	r3
	rtn = mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, bufferRX, 1);
  40373a:	2301      	movs	r3, #1
  40373c:	aa2b      	add	r2, sp, #172	; 0xac
  40373e:	2175      	movs	r1, #117	; 0x75
  403740:	2068      	movs	r0, #104	; 0x68
  403742:	4c3d      	ldr	r4, [pc, #244]	; (403838 <task_imu+0x110>)
  403744:	47a0      	blx	r4
    if(rtn != TWIHS_SUCCESS){
  403746:	2800      	cmp	r0, #0
  403748:	d03b      	beq.n	4037c2 <task_imu+0x9a>
        printf("[ERRO] [i2c] [probe] \n");
  40374a:	483c      	ldr	r0, [pc, #240]	; (40383c <task_imu+0x114>)
  40374c:	4b3c      	ldr	r3, [pc, #240]	; (403840 <task_imu+0x118>)
  40374e:	4798      	blx	r3
	if (bufferRX[0] != 0x68) {
  403750:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
  403754:	2b68      	cmp	r3, #104	; 0x68
		printf("[ERRO] na leitura do who am i \n");
  403756:	bf14      	ite	ne
  403758:	483a      	ldrne	r0, [pc, #232]	; (403844 <task_imu+0x11c>)
		printf("[SUCESSO] na leitura do who am i \n");
  40375a:	483b      	ldreq	r0, [pc, #236]	; (403848 <task_imu+0x120>)
  40375c:	4b38      	ldr	r3, [pc, #224]	; (403840 <task_imu+0x118>)
  40375e:	4798      	blx	r3
	bufferTX[0] = MPU6050_CLOCK_PLL_XGYRO;
  403760:	2301      	movs	r3, #1
  403762:	aa32      	add	r2, sp, #200	; 0xc8
  403764:	f802 3d28 	strb.w	r3, [r2, #-40]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, bufferTX, 1);
  403768:	216b      	movs	r1, #107	; 0x6b
  40376a:	2068      	movs	r0, #104	; 0x68
  40376c:	4c37      	ldr	r4, [pc, #220]	; (40384c <task_imu+0x124>)
  40376e:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403770:	bb70      	cbnz	r0, 4037d0 <task_imu+0xa8>
	bufferTX[0] = MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT; 
  403772:	aa32      	add	r2, sp, #200	; 0xc8
  403774:	2300      	movs	r3, #0
  403776:	f802 3d28 	strb.w	r3, [r2, #-40]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, bufferTX, 1);
  40377a:	2301      	movs	r3, #1
  40377c:	211c      	movs	r1, #28
  40377e:	2068      	movs	r0, #104	; 0x68
  403780:	4c32      	ldr	r4, [pc, #200]	; (40384c <task_imu+0x124>)
  403782:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403784:	bb40      	cbnz	r0, 4037d8 <task_imu+0xb0>
	bufferTX[0] = 0x00; // 250 °/s
  403786:	aa32      	add	r2, sp, #200	; 0xc8
  403788:	2300      	movs	r3, #0
  40378a:	f802 3d28 	strb.w	r3, [r2, #-40]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, bufferTX, 1);
  40378e:	2301      	movs	r3, #1
  403790:	211b      	movs	r1, #27
  403792:	2068      	movs	r0, #104	; 0x68
  403794:	4c2d      	ldr	r4, [pc, #180]	; (40384c <task_imu+0x124>)
  403796:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403798:	bb10      	cbnz	r0, 4037e0 <task_imu+0xb8>
	FusionAhrsInitialise(&ahrs); 
  40379a:	a80c      	add	r0, sp, #48	; 0x30
  40379c:	4b2c      	ldr	r3, [pc, #176]	; (403850 <task_imu+0x128>)
  40379e:	4798      	blx	r3
	o = FRENTE;
  4037a0:	2301      	movs	r3, #1
  4037a2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	n_o = ESQUERDA;
  4037a6:	f04f 0800 	mov.w	r8, #0
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  4037aa:	461d      	mov	r5, r3
  4037ac:	2468      	movs	r4, #104	; 0x68
		proc_acc_x = (float)raw_acc_x/16384;
  4037ae:	eddf 9a29 	vldr	s19, [pc, #164]	; 403854 <task_imu+0x12c>
		proc_gyr_x = (float)raw_gyr_x/131;
  4037b2:	ed9f 9a29 	vldr	s18, [pc, #164]	; 403858 <task_imu+0x130>
		float modulo = sqrtf(soma_dos_quadrados) * 9.81;
  4037b6:	f20f 0b70 	addw	fp, pc, #112	; 0x70
  4037ba:	e9db ab00 	ldrd	sl, fp, [fp]
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
    FusionEuler euler;
    euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x));
  4037be:	4e27      	ldr	r6, [pc, #156]	; (40385c <task_imu+0x134>)
  4037c0:	e07a      	b.n	4038b8 <task_imu+0x190>
        printf("[DADO] [i2c] %x:%x\n", MPU6050_RA_WHO_AM_I, bufferRX[0]);
  4037c2:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
  4037c6:	2175      	movs	r1, #117	; 0x75
  4037c8:	4825      	ldr	r0, [pc, #148]	; (403860 <task_imu+0x138>)
  4037ca:	4b26      	ldr	r3, [pc, #152]	; (403864 <task_imu+0x13c>)
  4037cc:	4798      	blx	r3
  4037ce:	e7bf      	b.n	403750 <task_imu+0x28>
		printf("[ERRO] [i2c] [write] \n");
  4037d0:	4825      	ldr	r0, [pc, #148]	; (403868 <task_imu+0x140>)
  4037d2:	4b1b      	ldr	r3, [pc, #108]	; (403840 <task_imu+0x118>)
  4037d4:	4798      	blx	r3
  4037d6:	e7cc      	b.n	403772 <task_imu+0x4a>
		printf("[ERRO] [i2c] [write] \n");
  4037d8:	4823      	ldr	r0, [pc, #140]	; (403868 <task_imu+0x140>)
  4037da:	4b19      	ldr	r3, [pc, #100]	; (403840 <task_imu+0x118>)
  4037dc:	4798      	blx	r3
  4037de:	e7d2      	b.n	403786 <task_imu+0x5e>
		printf("[ERRO] [i2c] [write] \n");
  4037e0:	4821      	ldr	r0, [pc, #132]	; (403868 <task_imu+0x140>)
  4037e2:	4b17      	ldr	r3, [pc, #92]	; (403840 <task_imu+0x118>)
  4037e4:	4798      	blx	r3
  4037e6:	e7d8      	b.n	40379a <task_imu+0x72>
		float modulo = sqrtf(soma_dos_quadrados) * 9.81;
  4037e8:	ee17 0a90 	vmov	r0, s15
  4037ec:	4b1f      	ldr	r3, [pc, #124]	; (40386c <task_imu+0x144>)
  4037ee:	4798      	blx	r3
  4037f0:	e108      	b.n	403a04 <task_imu+0x2dc>
			xSemaphoreGive(xSemaphoreDown);
  4037f2:	2300      	movs	r3, #0
  4037f4:	461a      	mov	r2, r3
  4037f6:	4619      	mov	r1, r3
  4037f8:	481d      	ldr	r0, [pc, #116]	; (403870 <task_imu+0x148>)
  4037fa:	6800      	ldr	r0, [r0, #0]
  4037fc:	4f1d      	ldr	r7, [pc, #116]	; (403874 <task_imu+0x14c>)
  4037fe:	47b8      	blx	r7
  403800:	e114      	b.n	403a2c <task_imu+0x304>
  403802:	eef4 7a47 	vcmp.f32	s15, s14
  403806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40380a:	dc07      	bgt.n	40381c <task_imu+0xf4>
  40380c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  403810:	eef4 7a47 	vcmp.f32	s15, s14
  403814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403818:	f140 815b 	bpl.w	403ad2 <task_imu+0x3aa>
    return asinf(value);
  40381c:	ee17 0a90 	vmov	r0, s15
  403820:	4b15      	ldr	r3, [pc, #84]	; (403878 <task_imu+0x150>)
  403822:	4798      	blx	r3
  403824:	e155      	b.n	403ad2 <task_imu+0x3aa>
  403826:	bf00      	nop
  403828:	51eb851f 	.word	0x51eb851f
  40382c:	40239eb8 	.word	0x40239eb8
  403830:	00403675 	.word	0x00403675
  403834:	004035f5 	.word	0x004035f5
  403838:	004036f9 	.word	0x004036f9
  40383c:	0040b338 	.word	0x0040b338
  403840:	00406a35 	.word	0x00406a35
  403844:	0040b364 	.word	0x0040b364
  403848:	0040b384 	.word	0x0040b384
  40384c:	004036cd 	.word	0x004036cd
  403850:	004004e5 	.word	0x004004e5
  403854:	38800000 	.word	0x38800000
  403858:	43030000 	.word	0x43030000
  40385c:	00403e6d 	.word	0x00403e6d
  403860:	0040b350 	.word	0x0040b350
  403864:	00406971 	.word	0x00406971
  403868:	0040b3a8 	.word	0x0040b3a8
  40386c:	00403e71 	.word	0x00403e71
  403870:	20400c14 	.word	0x20400c14
  403874:	00401dc1 	.word	0x00401dc1
  403878:	00403dcd 	.word	0x00403dcd
		}else if(euler.angle.yaw < -10){
  40387c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
  403880:	eef4 7ac7 	vcmpe.f32	s15, s14
  403884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403888:	f100 814b 	bmi.w	403b22 <task_imu+0x3fa>
		}else if(euler.angle.yaw > 10 ){
  40388c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
			n_o = DIREITA;
  403890:	eef4 7a47 	vcmp.f32	s15, s14
  403894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403898:	bfc8      	it	gt
  40389a:	f04f 0802 	movgt.w	r8, #2
		if (n_o != o) {
  40389e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4038a2:	4543      	cmp	r3, r8
  4038a4:	d008      	beq.n	4038b8 <task_imu+0x190>
			o = n_o;
  4038a6:	a932      	add	r1, sp, #200	; 0xc8
  4038a8:	f801 8d99 	strb.w	r8, [r1, #-153]!
			xQueueSend(xQueueORIENTACAO, &o, 0);
  4038ac:	2300      	movs	r3, #0
  4038ae:	461a      	mov	r2, r3
  4038b0:	489d      	ldr	r0, [pc, #628]	; (403b28 <task_imu+0x400>)
  4038b2:	6800      	ldr	r0, [r0, #0]
  4038b4:	4f9d      	ldr	r7, [pc, #628]	; (403b2c <task_imu+0x404>)
  4038b6:	47b8      	blx	r7
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  4038b8:	462b      	mov	r3, r5
  4038ba:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
  4038be:	213b      	movs	r1, #59	; 0x3b
  4038c0:	4620      	mov	r0, r4
  4038c2:	4f9b      	ldr	r7, [pc, #620]	; (403b30 <task_imu+0x408>)
  4038c4:	47b8      	blx	r7
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, &raw_acc_xLow,  1);
  4038c6:	462b      	mov	r3, r5
  4038c8:	aa27      	add	r2, sp, #156	; 0x9c
  4038ca:	213c      	movs	r1, #60	; 0x3c
  4038cc:	4620      	mov	r0, r4
  4038ce:	47b8      	blx	r7
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
  4038d0:	462b      	mov	r3, r5
  4038d2:	f10d 029e 	add.w	r2, sp, #158	; 0x9e
  4038d6:	213d      	movs	r1, #61	; 0x3d
  4038d8:	4620      	mov	r0, r4
  4038da:	47b8      	blx	r7
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_yLow,  1);
  4038dc:	462b      	mov	r3, r5
  4038de:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
  4038e2:	2140      	movs	r1, #64	; 0x40
  4038e4:	4620      	mov	r0, r4
  4038e6:	47b8      	blx	r7
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, &raw_acc_zHigh, 1);
  4038e8:	462b      	mov	r3, r5
  4038ea:	f10d 029d 	add.w	r2, sp, #157	; 0x9d
  4038ee:	213f      	movs	r1, #63	; 0x3f
  4038f0:	4620      	mov	r0, r4
  4038f2:	47b8      	blx	r7
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_zLow,  1);
  4038f4:	462b      	mov	r3, r5
  4038f6:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
  4038fa:	2140      	movs	r1, #64	; 0x40
  4038fc:	4620      	mov	r0, r4
  4038fe:	47b8      	blx	r7
		raw_acc_x = (raw_acc_xHigh << 8) | (raw_acc_xLow << 0);
  403900:	f89d 209f 	ldrb.w	r2, [sp, #159]	; 0x9f
  403904:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  403908:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40390c:	b21b      	sxth	r3, r3
  40390e:	ee0a 3a10 	vmov	s20, r3
		raw_acc_y = (raw_acc_yHigh << 8) | (raw_acc_yLow << 0);
  403912:	f89d 209e 	ldrb.w	r2, [sp, #158]	; 0x9e
  403916:	f89d 309b 	ldrb.w	r3, [sp, #155]	; 0x9b
  40391a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40391e:	b21b      	sxth	r3, r3
  403920:	ee08 3a90 	vmov	s17, r3
		raw_acc_z = (raw_acc_zHigh << 8) | (raw_acc_zLow << 0);
  403924:	f89d 209d 	ldrb.w	r2, [sp, #157]	; 0x9d
  403928:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
  40392c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403930:	b21b      	sxth	r3, r3
  403932:	ee08 3a10 	vmov	s16, r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_H, &raw_gyr_xHigh, 1);
  403936:	462b      	mov	r3, r5
  403938:	f10d 0299 	add.w	r2, sp, #153	; 0x99
  40393c:	2143      	movs	r1, #67	; 0x43
  40393e:	4620      	mov	r0, r4
  403940:	47b8      	blx	r7
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_L, &raw_gyr_xLow,  1);
  403942:	462b      	mov	r3, r5
  403944:	f10d 0296 	add.w	r2, sp, #150	; 0x96
  403948:	2144      	movs	r1, #68	; 0x44
  40394a:	4620      	mov	r0, r4
  40394c:	47b8      	blx	r7
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
  40394e:	462b      	mov	r3, r5
  403950:	aa26      	add	r2, sp, #152	; 0x98
  403952:	2145      	movs	r1, #69	; 0x45
  403954:	4620      	mov	r0, r4
  403956:	47b8      	blx	r7
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_yLow,  1);
  403958:	462b      	mov	r3, r5
  40395a:	f10d 0295 	add.w	r2, sp, #149	; 0x95
  40395e:	2148      	movs	r1, #72	; 0x48
  403960:	4620      	mov	r0, r4
  403962:	47b8      	blx	r7
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, &raw_gyr_zHigh, 1);
  403964:	462b      	mov	r3, r5
  403966:	f10d 0297 	add.w	r2, sp, #151	; 0x97
  40396a:	2147      	movs	r1, #71	; 0x47
  40396c:	4620      	mov	r0, r4
  40396e:	47b8      	blx	r7
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_zLow,  1);
  403970:	462b      	mov	r3, r5
  403972:	aa25      	add	r2, sp, #148	; 0x94
  403974:	2148      	movs	r1, #72	; 0x48
  403976:	4620      	mov	r0, r4
  403978:	47b8      	blx	r7
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  40397a:	f89d e099 	ldrb.w	lr, [sp, #153]	; 0x99
  40397e:	f89d 1096 	ldrb.w	r1, [sp, #150]	; 0x96
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  403982:	f89d 7098 	ldrb.w	r7, [sp, #152]	; 0x98
  403986:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  40398a:	f89d 0097 	ldrb.w	r0, [sp, #151]	; 0x97
  40398e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
		proc_acc_x = (float)raw_acc_x/16384;
  403992:	eeb8 aaca 	vcvt.f32.s32	s20, s20
  403996:	ee2a aa29 	vmul.f32	s20, s20, s19
		proc_acc_y = (float)raw_acc_y/16384;
  40399a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  40399e:	ee68 8aa9 	vmul.f32	s17, s17, s19
		proc_acc_z = (float)raw_acc_z/16384;
  4039a2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  4039a6:	ee28 8a29 	vmul.f32	s16, s16, s19
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  4039aa:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
		proc_gyr_x = (float)raw_gyr_x/131;
  4039ae:	b209      	sxth	r1, r1
  4039b0:	ee07 1a90 	vmov	s15, r1
  4039b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4039b8:	eec7 aa89 	vdiv.f32	s21, s15, s18
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  4039bc:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
		proc_gyr_y = (float)raw_gyr_y/131;
  4039c0:	b212      	sxth	r2, r2
  4039c2:	ee07 2a90 	vmov	s15, r2
  4039c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4039ca:	eec7 ba89 	vdiv.f32	s23, s15, s18
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  4039ce:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		proc_gyr_z = (float)raw_gyr_z/131;
  4039d2:	b21b      	sxth	r3, r3
  4039d4:	ee07 3a90 	vmov	s15, r3
  4039d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4039dc:	ee87 ba89 	vdiv.f32	s22, s15, s18
		float soma_dos_quadrados = proc_acc_x*proc_acc_x + proc_acc_y*proc_acc_y + proc_acc_z*proc_acc_z;
  4039e0:	ee2a 7a0a 	vmul.f32	s14, s20, s20
  4039e4:	ee68 7aa8 	vmul.f32	s15, s17, s17
  4039e8:	ee37 7a27 	vadd.f32	s14, s14, s15
  4039ec:	ee68 7a08 	vmul.f32	s15, s16, s16
  4039f0:	ee77 7a27 	vadd.f32	s15, s14, s15
		float modulo = sqrtf(soma_dos_quadrados) * 9.81;
  4039f4:	eeb1 cae7 	vsqrt.f32	s24, s15
  4039f8:	eef5 7a40 	vcmp.f32	s15, #0.0
  4039fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403a00:	f53f aef2 	bmi.w	4037e8 <task_imu+0xc0>
  403a04:	ee1c 0a10 	vmov	r0, s24
  403a08:	4b4a      	ldr	r3, [pc, #296]	; (403b34 <task_imu+0x40c>)
  403a0a:	4798      	blx	r3
  403a0c:	4652      	mov	r2, sl
  403a0e:	465b      	mov	r3, fp
  403a10:	4f49      	ldr	r7, [pc, #292]	; (403b38 <task_imu+0x410>)
  403a12:	47b8      	blx	r7
  403a14:	4b49      	ldr	r3, [pc, #292]	; (403b3c <task_imu+0x414>)
  403a16:	4798      	blx	r3
		if (modulo < 6.5) {
  403a18:	eef1 7a0a 	vmov.f32	s15, #26	; 0x40d00000  6.5
  403a1c:	ee07 0a10 	vmov	s14, r0
  403a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
  403a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403a28:	f53f aee3 	bmi.w	4037f2 <task_imu+0xca>
		vTaskDelay(100);
  403a2c:	2064      	movs	r0, #100	; 0x64
  403a2e:	4b44      	ldr	r3, [pc, #272]	; (403b40 <task_imu+0x418>)
  403a30:	4798      	blx	r3
		const FusionVector gyroscope = {proc_gyr_x, proc_gyr_y, proc_gyr_z}; 
  403a32:	edcd aa05 	vstr	s21, [sp, #20]
  403a36:	edcd ba06 	vstr	s23, [sp, #24]
  403a3a:	ed8d ba07 	vstr	s22, [sp, #28]
		const FusionVector accelerometer = {proc_acc_x, proc_acc_y, proc_acc_z};   
  403a3e:	ed8d aa08 	vstr	s20, [sp, #32]
  403a42:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
  403a46:	ed8d 8a0a 	vstr	s16, [sp, #40]	; 0x28
		FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, dT);
  403a4a:	4b3e      	ldr	r3, [pc, #248]	; (403b44 <task_imu+0x41c>)
  403a4c:	9303      	str	r3, [sp, #12]
  403a4e:	ab08      	add	r3, sp, #32
  403a50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  403a54:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  403a58:	ab05      	add	r3, sp, #20
  403a5a:	cb0e      	ldmia	r3, {r1, r2, r3}
  403a5c:	a80c      	add	r0, sp, #48	; 0x30
  403a5e:	4f3a      	ldr	r7, [pc, #232]	; (403b48 <task_imu+0x420>)
  403a60:	47b8      	blx	r7
		const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
  403a62:	a90c      	add	r1, sp, #48	; 0x30
  403a64:	a82e      	add	r0, sp, #184	; 0xb8
  403a66:	4b39      	ldr	r3, [pc, #228]	; (403b4c <task_imu+0x424>)
  403a68:	4798      	blx	r3
  403a6a:	eddd aa2e 	vldr	s21, [sp, #184]	; 0xb8
  403a6e:	eddd 8a2f 	vldr	s17, [sp, #188]	; 0xbc
  403a72:	ed9d 8a30 	vldr	s16, [sp, #192]	; 0xc0
  403a76:	ed9d aa31 	vldr	s20, [sp, #196]	; 0xc4
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
  403a7a:	ee68 7a08 	vmul.f32	s15, s16, s16
  403a7e:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
  403a82:	ee3b ba67 	vsub.f32	s22, s22, s15
    euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x));
  403a86:	ee68 6aa8 	vmul.f32	s13, s17, s17
  403a8a:	ee2a 7aa8 	vmul.f32	s14, s21, s17
  403a8e:	ee6a 7a08 	vmul.f32	s15, s20, s16
  403a92:	ee7b 6a66 	vsub.f32	s13, s22, s13
  403a96:	ee16 1a90 	vmov	r1, s13
  403a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
  403a9e:	ee17 0a90 	vmov	r0, s15
  403aa2:	47b0      	blx	r6
    euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
  403aa4:	ee2a 7a88 	vmul.f32	s14, s21, s16
  403aa8:	ee6a 7a28 	vmul.f32	s15, s20, s17
  403aac:	ee77 7a67 	vsub.f32	s15, s14, s15
  403ab0:	ee77 7aa7 	vadd.f32	s15, s15, s15
    if (value <= -1.0f) {
  403ab4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  403ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
  403abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403ac0:	d907      	bls.n	403ad2 <task_imu+0x3aa>
    if (value >= 1.0f) {
  403ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  403ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
  403aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403ace:	f6ff ae98 	blt.w	403802 <task_imu+0xda>
    euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z));
  403ad2:	ee2a 7a0a 	vmul.f32	s14, s20, s20
  403ad6:	ee6a 7a2a 	vmul.f32	s15, s20, s21
  403ada:	ee28 8a88 	vmul.f32	s16, s17, s16
  403ade:	ee3b 7a47 	vsub.f32	s14, s22, s14
  403ae2:	ee17 1a10 	vmov	r1, s14
  403ae6:	ee77 7a88 	vadd.f32	s15, s15, s16
  403aea:	ee17 0a90 	vmov	r0, s15
  403aee:	47b0      	blx	r6
    return radians * (180.0f / (float) M_PI);
  403af0:	eddf 7a17 	vldr	s15, [pc, #92]	; 403b50 <task_imu+0x428>
  403af4:	ee07 0a10 	vmov	s14, r0
  403af8:	ee67 7a27 	vmul.f32	s15, s14, s15
		if(euler.angle.yaw > -10 && euler.angle.yaw < 10){
  403afc:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
  403b00:	eef4 7ac7 	vcmpe.f32	s15, s14
  403b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403b08:	f77f aeb8 	ble.w	40387c <task_imu+0x154>
  403b0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
  403b10:	eef4 7ac7 	vcmpe.f32	s15, s14
  403b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403b18:	f57f aeb0 	bpl.w	40387c <task_imu+0x154>
			n_o = FRENTE;
  403b1c:	f04f 0801 	mov.w	r8, #1
  403b20:	e6bd      	b.n	40389e <task_imu+0x176>
			n_o = ESQUERDA;
  403b22:	f04f 0800 	mov.w	r8, #0
  403b26:	e6ba      	b.n	40389e <task_imu+0x176>
  403b28:	20400c18 	.word	0x20400c18
  403b2c:	00401dc1 	.word	0x00401dc1
  403b30:	004036f9 	.word	0x004036f9
  403b34:	00405621 	.word	0x00405621
  403b38:	004056c9 	.word	0x004056c9
  403b3c:	00405aed 	.word	0x00405aed
  403b40:	004028d1 	.word	0x004028d1
  403b44:	3dcccccd 	.word	0x3dcccccd
  403b48:	00400b1d 	.word	0x00400b1d
  403b4c:	00400511 	.word	0x00400511
  403b50:	42652ee0 	.word	0x42652ee0

00403b54 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/


int main(void) {
  403b54:	b500      	push	{lr}
  403b56:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  403b58:	4b40      	ldr	r3, [pc, #256]	; (403c5c <main+0x108>)
  403b5a:	4798      	blx	r3
	board_init();
  403b5c:	4b40      	ldr	r3, [pc, #256]	; (403c60 <main+0x10c>)
  403b5e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403b60:	4d40      	ldr	r5, [pc, #256]	; (403c64 <main+0x110>)
  403b62:	4b41      	ldr	r3, [pc, #260]	; (403c68 <main+0x114>)
  403b64:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403b66:	4a41      	ldr	r2, [pc, #260]	; (403c6c <main+0x118>)
  403b68:	4b41      	ldr	r3, [pc, #260]	; (403c70 <main+0x11c>)
  403b6a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403b6c:	4a41      	ldr	r2, [pc, #260]	; (403c74 <main+0x120>)
  403b6e:	4b42      	ldr	r3, [pc, #264]	; (403c78 <main+0x124>)
  403b70:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403b72:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403b76:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403b78:	23c0      	movs	r3, #192	; 0xc0
  403b7a:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403b7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403b80:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403b82:	2400      	movs	r4, #0
  403b84:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403b86:	9408      	str	r4, [sp, #32]
  403b88:	200e      	movs	r0, #14
  403b8a:	4b3c      	ldr	r3, [pc, #240]	; (403c7c <main+0x128>)
  403b8c:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403b8e:	4a3c      	ldr	r2, [pc, #240]	; (403c80 <main+0x12c>)
  403b90:	a904      	add	r1, sp, #16
  403b92:	4628      	mov	r0, r5
  403b94:	4b3b      	ldr	r3, [pc, #236]	; (403c84 <main+0x130>)
  403b96:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403b98:	4628      	mov	r0, r5
  403b9a:	4b3b      	ldr	r3, [pc, #236]	; (403c88 <main+0x134>)
  403b9c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403b9e:	4628      	mov	r0, r5
  403ba0:	4b3a      	ldr	r3, [pc, #232]	; (403c8c <main+0x138>)
  403ba2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403ba4:	4e3a      	ldr	r6, [pc, #232]	; (403c90 <main+0x13c>)
  403ba6:	6833      	ldr	r3, [r6, #0]
  403ba8:	4621      	mov	r1, r4
  403baa:	6898      	ldr	r0, [r3, #8]
  403bac:	4d39      	ldr	r5, [pc, #228]	; (403c94 <main+0x140>)
  403bae:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403bb0:	6833      	ldr	r3, [r6, #0]
  403bb2:	4621      	mov	r1, r4
  403bb4:	6858      	ldr	r0, [r3, #4]
  403bb6:	47a8      	blx	r5
	setbuf(stdout, NULL);
  403bb8:	6833      	ldr	r3, [r6, #0]
  403bba:	4621      	mov	r1, r4
  403bbc:	6898      	ldr	r0, [r3, #8]
  403bbe:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	xSemaphoreDown = xSemaphoreCreateBinary();
  403bc0:	2203      	movs	r2, #3
  403bc2:	4621      	mov	r1, r4
  403bc4:	2001      	movs	r0, #1
  403bc6:	4b34      	ldr	r3, [pc, #208]	; (403c98 <main+0x144>)
  403bc8:	4798      	blx	r3
  403bca:	4b34      	ldr	r3, [pc, #208]	; (403c9c <main+0x148>)
  403bcc:	6018      	str	r0, [r3, #0]
	if (xSemaphoreDown == NULL)
  403bce:	2800      	cmp	r0, #0
  403bd0:	d03b      	beq.n	403c4a <main+0xf6>
		printf("falha em criar o semaforo \n");

	xQueueORIENTACAO = xQueueCreate(100, sizeof(int));
  403bd2:	2200      	movs	r2, #0
  403bd4:	2104      	movs	r1, #4
  403bd6:	2064      	movs	r0, #100	; 0x64
  403bd8:	4b2f      	ldr	r3, [pc, #188]	; (403c98 <main+0x144>)
  403bda:	4798      	blx	r3
  403bdc:	4b30      	ldr	r3, [pc, #192]	; (403ca0 <main+0x14c>)
  403bde:	6018      	str	r0, [r3, #0]
  	if (xQueueORIENTACAO == NULL)
  403be0:	2800      	cmp	r0, #0
  403be2:	d036      	beq.n	403c52 <main+0xfe>
    	printf("falha em criar a queue xQueueADC \n");

	/* Create task to control oled */
	if (xTaskCreate(task_house_down, "house down", TASK_HOUSE_DOWN_STACK_SIZE, NULL, TASK_HOUSE_DOWN_STACK_PRIORITY, NULL) != pdPASS) {
  403be4:	2300      	movs	r3, #0
  403be6:	9303      	str	r3, [sp, #12]
  403be8:	9302      	str	r3, [sp, #8]
  403bea:	9301      	str	r3, [sp, #4]
  403bec:	9300      	str	r3, [sp, #0]
  403bee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403bf2:	492c      	ldr	r1, [pc, #176]	; (403ca4 <main+0x150>)
  403bf4:	482c      	ldr	r0, [pc, #176]	; (403ca8 <main+0x154>)
  403bf6:	4c2d      	ldr	r4, [pc, #180]	; (403cac <main+0x158>)
  403bf8:	47a0      	blx	r4
  403bfa:	2801      	cmp	r0, #1
  403bfc:	d002      	beq.n	403c04 <main+0xb0>
	  printf("Failed to create house down task\r\n");
  403bfe:	482c      	ldr	r0, [pc, #176]	; (403cb0 <main+0x15c>)
  403c00:	4b2c      	ldr	r3, [pc, #176]	; (403cb4 <main+0x160>)
  403c02:	4798      	blx	r3
	}

	if (xTaskCreate(task_orientacao, "orientacao", TASK_ORIENTACAO_STACK_SIZE, NULL, TASK_ORIENTACAO_STACK_PRIORITY, NULL) != pdPASS) {
  403c04:	2300      	movs	r3, #0
  403c06:	9303      	str	r3, [sp, #12]
  403c08:	9302      	str	r3, [sp, #8]
  403c0a:	9301      	str	r3, [sp, #4]
  403c0c:	9300      	str	r3, [sp, #0]
  403c0e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403c12:	4929      	ldr	r1, [pc, #164]	; (403cb8 <main+0x164>)
  403c14:	4829      	ldr	r0, [pc, #164]	; (403cbc <main+0x168>)
  403c16:	4c25      	ldr	r4, [pc, #148]	; (403cac <main+0x158>)
  403c18:	47a0      	blx	r4
  403c1a:	2801      	cmp	r0, #1
  403c1c:	d002      	beq.n	403c24 <main+0xd0>
	  printf("Failed to create house down task\r\n");
  403c1e:	4824      	ldr	r0, [pc, #144]	; (403cb0 <main+0x15c>)
  403c20:	4b24      	ldr	r3, [pc, #144]	; (403cb4 <main+0x160>)
  403c22:	4798      	blx	r3
	}

	if (xTaskCreate(task_imu, "imu", TASK_IMU_STACK_SIZE, NULL, TASK_IMU_STACK_PRIORITY, NULL) != pdPASS) {
  403c24:	2300      	movs	r3, #0
  403c26:	9303      	str	r3, [sp, #12]
  403c28:	9302      	str	r3, [sp, #8]
  403c2a:	9301      	str	r3, [sp, #4]
  403c2c:	9300      	str	r3, [sp, #0]
  403c2e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403c32:	4923      	ldr	r1, [pc, #140]	; (403cc0 <main+0x16c>)
  403c34:	4823      	ldr	r0, [pc, #140]	; (403cc4 <main+0x170>)
  403c36:	4c1d      	ldr	r4, [pc, #116]	; (403cac <main+0x158>)
  403c38:	47a0      	blx	r4
  403c3a:	2801      	cmp	r0, #1
  403c3c:	d002      	beq.n	403c44 <main+0xf0>
	  printf("Failed to create imu task\r\n");
  403c3e:	4822      	ldr	r0, [pc, #136]	; (403cc8 <main+0x174>)
  403c40:	4b1c      	ldr	r3, [pc, #112]	; (403cb4 <main+0x160>)
  403c42:	4798      	blx	r3
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
  403c44:	4b21      	ldr	r3, [pc, #132]	; (403ccc <main+0x178>)
  403c46:	4798      	blx	r3
  403c48:	e7fe      	b.n	403c48 <main+0xf4>
		printf("falha em criar o semaforo \n");
  403c4a:	4821      	ldr	r0, [pc, #132]	; (403cd0 <main+0x17c>)
  403c4c:	4b19      	ldr	r3, [pc, #100]	; (403cb4 <main+0x160>)
  403c4e:	4798      	blx	r3
  403c50:	e7bf      	b.n	403bd2 <main+0x7e>
    	printf("falha em criar a queue xQueueADC \n");
  403c52:	4820      	ldr	r0, [pc, #128]	; (403cd4 <main+0x180>)
  403c54:	4b17      	ldr	r3, [pc, #92]	; (403cb4 <main+0x160>)
  403c56:	4798      	blx	r3
  403c58:	e7c4      	b.n	403be4 <main+0x90>
  403c5a:	bf00      	nop
  403c5c:	00400ca5 	.word	0x00400ca5
  403c60:	00400da1 	.word	0x00400da1
  403c64:	40028000 	.word	0x40028000
  403c68:	20400bd0 	.word	0x20400bd0
  403c6c:	004034f1 	.word	0x004034f1
  403c70:	20400bcc 	.word	0x20400bcc
  403c74:	00403415 	.word	0x00403415
  403c78:	20400bc8 	.word	0x20400bc8
  403c7c:	0040129d 	.word	0x0040129d
  403c80:	08f0d180 	.word	0x08f0d180
  403c84:	00401399 	.word	0x00401399
  403c88:	004013ed 	.word	0x004013ed
  403c8c:	004013f3 	.word	0x004013f3
  403c90:	20400010 	.word	0x20400010
  403c94:	00406a69 	.word	0x00406a69
  403c98:	00401d45 	.word	0x00401d45
  403c9c:	20400c14 	.word	0x20400c14
  403ca0:	20400c18 	.word	0x20400c18
  403ca4:	0040b2d4 	.word	0x0040b2d4
  403ca8:	004033b9 	.word	0x004033b9
  403cac:	00402385 	.word	0x00402385
  403cb0:	0040b2e0 	.word	0x0040b2e0
  403cb4:	00406a35 	.word	0x00406a35
  403cb8:	0040b304 	.word	0x0040b304
  403cbc:	00403331 	.word	0x00403331
  403cc0:	0040b310 	.word	0x0040b310
  403cc4:	00403729 	.word	0x00403729
  403cc8:	0040b314 	.word	0x0040b314
  403ccc:	004025b9 	.word	0x004025b9
  403cd0:	0040b294 	.word	0x0040b294
  403cd4:	0040b2b0 	.word	0x0040b2b0

00403cd8 <cosf>:
  403cd8:	b500      	push	{lr}
  403cda:	4a1c      	ldr	r2, [pc, #112]	; (403d4c <cosf+0x74>)
  403cdc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  403ce0:	4293      	cmp	r3, r2
  403ce2:	b083      	sub	sp, #12
  403ce4:	dd18      	ble.n	403d18 <cosf+0x40>
  403ce6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  403cea:	db05      	blt.n	403cf8 <cosf+0x20>
  403cec:	4601      	mov	r1, r0
  403cee:	f001 ff51 	bl	405b94 <__aeabi_fsub>
  403cf2:	b003      	add	sp, #12
  403cf4:	f85d fb04 	ldr.w	pc, [sp], #4
  403cf8:	4669      	mov	r1, sp
  403cfa:	f000 fae5 	bl	4042c8 <__ieee754_rem_pio2f>
  403cfe:	f000 0203 	and.w	r2, r0, #3
  403d02:	2a01      	cmp	r2, #1
  403d04:	d015      	beq.n	403d32 <cosf+0x5a>
  403d06:	2a02      	cmp	r2, #2
  403d08:	d00c      	beq.n	403d24 <cosf+0x4c>
  403d0a:	b1ca      	cbz	r2, 403d40 <cosf+0x68>
  403d0c:	2201      	movs	r2, #1
  403d0e:	9901      	ldr	r1, [sp, #4]
  403d10:	9800      	ldr	r0, [sp, #0]
  403d12:	f001 f8e5 	bl	404ee0 <__kernel_sinf>
  403d16:	e7ec      	b.n	403cf2 <cosf+0x1a>
  403d18:	2100      	movs	r1, #0
  403d1a:	f000 fc97 	bl	40464c <__kernel_cosf>
  403d1e:	b003      	add	sp, #12
  403d20:	f85d fb04 	ldr.w	pc, [sp], #4
  403d24:	9901      	ldr	r1, [sp, #4]
  403d26:	9800      	ldr	r0, [sp, #0]
  403d28:	f000 fc90 	bl	40464c <__kernel_cosf>
  403d2c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  403d30:	e7df      	b.n	403cf2 <cosf+0x1a>
  403d32:	9901      	ldr	r1, [sp, #4]
  403d34:	9800      	ldr	r0, [sp, #0]
  403d36:	f001 f8d3 	bl	404ee0 <__kernel_sinf>
  403d3a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  403d3e:	e7d8      	b.n	403cf2 <cosf+0x1a>
  403d40:	9901      	ldr	r1, [sp, #4]
  403d42:	9800      	ldr	r0, [sp, #0]
  403d44:	f000 fc82 	bl	40464c <__kernel_cosf>
  403d48:	e7d3      	b.n	403cf2 <cosf+0x1a>
  403d4a:	bf00      	nop
  403d4c:	3f490fd8 	.word	0x3f490fd8

00403d50 <sinf>:
  403d50:	b500      	push	{lr}
  403d52:	4a1d      	ldr	r2, [pc, #116]	; (403dc8 <sinf+0x78>)
  403d54:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  403d58:	4293      	cmp	r3, r2
  403d5a:	b083      	sub	sp, #12
  403d5c:	dd19      	ble.n	403d92 <sinf+0x42>
  403d5e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  403d62:	db05      	blt.n	403d70 <sinf+0x20>
  403d64:	4601      	mov	r1, r0
  403d66:	f001 ff15 	bl	405b94 <__aeabi_fsub>
  403d6a:	b003      	add	sp, #12
  403d6c:	f85d fb04 	ldr.w	pc, [sp], #4
  403d70:	4669      	mov	r1, sp
  403d72:	f000 faa9 	bl	4042c8 <__ieee754_rem_pio2f>
  403d76:	f000 0003 	and.w	r0, r0, #3
  403d7a:	2801      	cmp	r0, #1
  403d7c:	d018      	beq.n	403db0 <sinf+0x60>
  403d7e:	2802      	cmp	r0, #2
  403d80:	d00e      	beq.n	403da0 <sinf+0x50>
  403d82:	b1d0      	cbz	r0, 403dba <sinf+0x6a>
  403d84:	9901      	ldr	r1, [sp, #4]
  403d86:	9800      	ldr	r0, [sp, #0]
  403d88:	f000 fc60 	bl	40464c <__kernel_cosf>
  403d8c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  403d90:	e7eb      	b.n	403d6a <sinf+0x1a>
  403d92:	2200      	movs	r2, #0
  403d94:	2100      	movs	r1, #0
  403d96:	f001 f8a3 	bl	404ee0 <__kernel_sinf>
  403d9a:	b003      	add	sp, #12
  403d9c:	f85d fb04 	ldr.w	pc, [sp], #4
  403da0:	2201      	movs	r2, #1
  403da2:	9901      	ldr	r1, [sp, #4]
  403da4:	9800      	ldr	r0, [sp, #0]
  403da6:	f001 f89b 	bl	404ee0 <__kernel_sinf>
  403daa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  403dae:	e7dc      	b.n	403d6a <sinf+0x1a>
  403db0:	9901      	ldr	r1, [sp, #4]
  403db2:	9800      	ldr	r0, [sp, #0]
  403db4:	f000 fc4a 	bl	40464c <__kernel_cosf>
  403db8:	e7d7      	b.n	403d6a <sinf+0x1a>
  403dba:	2201      	movs	r2, #1
  403dbc:	9901      	ldr	r1, [sp, #4]
  403dbe:	9800      	ldr	r0, [sp, #0]
  403dc0:	f001 f88e 	bl	404ee0 <__kernel_sinf>
  403dc4:	e7d1      	b.n	403d6a <sinf+0x1a>
  403dc6:	bf00      	nop
  403dc8:	3f490fd8 	.word	0x3f490fd8

00403dcc <asinf>:
  403dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  403dce:	4e24      	ldr	r6, [pc, #144]	; (403e60 <asinf+0x94>)
  403dd0:	b08b      	sub	sp, #44	; 0x2c
  403dd2:	4604      	mov	r4, r0
  403dd4:	f000 f89c 	bl	403f10 <__ieee754_asinf>
  403dd8:	f996 3000 	ldrsb.w	r3, [r6]
  403ddc:	3301      	adds	r3, #1
  403dde:	4605      	mov	r5, r0
  403de0:	d02f      	beq.n	403e42 <asinf+0x76>
  403de2:	4621      	mov	r1, r4
  403de4:	4620      	mov	r0, r4
  403de6:	f002 f9a5 	bl	406134 <__aeabi_fcmpun>
  403dea:	4607      	mov	r7, r0
  403dec:	bb48      	cbnz	r0, 403e42 <asinf+0x76>
  403dee:	4620      	mov	r0, r4
  403df0:	f001 fa0a 	bl	405208 <fabsf>
  403df4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  403df8:	f002 f992 	bl	406120 <__aeabi_fcmpgt>
  403dfc:	b308      	cbz	r0, 403e42 <asinf+0x76>
  403dfe:	4b19      	ldr	r3, [pc, #100]	; (403e64 <asinf+0x98>)
  403e00:	9708      	str	r7, [sp, #32]
  403e02:	2201      	movs	r2, #1
  403e04:	4620      	mov	r0, r4
  403e06:	e88d 000c 	stmia.w	sp, {r2, r3}
  403e0a:	f001 fc09 	bl	405620 <__aeabi_f2d>
  403e0e:	4602      	mov	r2, r0
  403e10:	460b      	mov	r3, r1
  403e12:	4815      	ldr	r0, [pc, #84]	; (403e68 <asinf+0x9c>)
  403e14:	e9cd 2304 	strd	r2, r3, [sp, #16]
  403e18:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403e1c:	f001 f8d8 	bl	404fd0 <nan>
  403e20:	f996 3000 	ldrsb.w	r3, [r6]
  403e24:	2b02      	cmp	r3, #2
  403e26:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403e2a:	d00d      	beq.n	403e48 <asinf+0x7c>
  403e2c:	4668      	mov	r0, sp
  403e2e:	f001 f8cd 	bl	404fcc <matherr>
  403e32:	b148      	cbz	r0, 403e48 <asinf+0x7c>
  403e34:	9b08      	ldr	r3, [sp, #32]
  403e36:	b973      	cbnz	r3, 403e56 <asinf+0x8a>
  403e38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403e3c:	f001 fe56 	bl	405aec <__aeabi_d2f>
  403e40:	4605      	mov	r5, r0
  403e42:	4628      	mov	r0, r5
  403e44:	b00b      	add	sp, #44	; 0x2c
  403e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403e48:	f002 f9b0 	bl	4061ac <__errno>
  403e4c:	2321      	movs	r3, #33	; 0x21
  403e4e:	6003      	str	r3, [r0, #0]
  403e50:	9b08      	ldr	r3, [sp, #32]
  403e52:	2b00      	cmp	r3, #0
  403e54:	d0f0      	beq.n	403e38 <asinf+0x6c>
  403e56:	f002 f9a9 	bl	4061ac <__errno>
  403e5a:	9b08      	ldr	r3, [sp, #32]
  403e5c:	6003      	str	r3, [r0, #0]
  403e5e:	e7eb      	b.n	403e38 <asinf+0x6c>
  403e60:	2040000c 	.word	0x2040000c
  403e64:	0040b3d8 	.word	0x0040b3d8
  403e68:	0040b334 	.word	0x0040b334

00403e6c <atan2f>:
  403e6c:	f000 b99a 	b.w	4041a4 <__ieee754_atan2f>

00403e70 <sqrtf>:
  403e70:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e72:	b08b      	sub	sp, #44	; 0x2c
  403e74:	4604      	mov	r4, r0
  403e76:	f000 fb95 	bl	4045a4 <__ieee754_sqrtf>
  403e7a:	4b23      	ldr	r3, [pc, #140]	; (403f08 <sqrtf+0x98>)
  403e7c:	f993 5000 	ldrsb.w	r5, [r3]
  403e80:	1c6b      	adds	r3, r5, #1
  403e82:	4606      	mov	r6, r0
  403e84:	d00a      	beq.n	403e9c <sqrtf+0x2c>
  403e86:	4621      	mov	r1, r4
  403e88:	4620      	mov	r0, r4
  403e8a:	f002 f953 	bl	406134 <__aeabi_fcmpun>
  403e8e:	4607      	mov	r7, r0
  403e90:	b920      	cbnz	r0, 403e9c <sqrtf+0x2c>
  403e92:	2100      	movs	r1, #0
  403e94:	4620      	mov	r0, r4
  403e96:	f002 f925 	bl	4060e4 <__aeabi_fcmplt>
  403e9a:	b910      	cbnz	r0, 403ea2 <sqrtf+0x32>
  403e9c:	4630      	mov	r0, r6
  403e9e:	b00b      	add	sp, #44	; 0x2c
  403ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403ea2:	4b1a      	ldr	r3, [pc, #104]	; (403f0c <sqrtf+0x9c>)
  403ea4:	9708      	str	r7, [sp, #32]
  403ea6:	2201      	movs	r2, #1
  403ea8:	4620      	mov	r0, r4
  403eaa:	e88d 000c 	stmia.w	sp, {r2, r3}
  403eae:	f001 fbb7 	bl	405620 <__aeabi_f2d>
  403eb2:	2200      	movs	r2, #0
  403eb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403ebc:	2300      	movs	r3, #0
  403ebe:	b1ad      	cbz	r5, 403eec <sqrtf+0x7c>
  403ec0:	4610      	mov	r0, r2
  403ec2:	4619      	mov	r1, r3
  403ec4:	f001 fd2a 	bl	40591c <__aeabi_ddiv>
  403ec8:	2d02      	cmp	r5, #2
  403eca:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403ece:	d10f      	bne.n	403ef0 <sqrtf+0x80>
  403ed0:	f002 f96c 	bl	4061ac <__errno>
  403ed4:	2321      	movs	r3, #33	; 0x21
  403ed6:	6003      	str	r3, [r0, #0]
  403ed8:	9b08      	ldr	r3, [sp, #32]
  403eda:	b97b      	cbnz	r3, 403efc <sqrtf+0x8c>
  403edc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403ee0:	f001 fe04 	bl	405aec <__aeabi_d2f>
  403ee4:	4606      	mov	r6, r0
  403ee6:	4630      	mov	r0, r6
  403ee8:	b00b      	add	sp, #44	; 0x2c
  403eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403eec:	e9cd 2306 	strd	r2, r3, [sp, #24]
  403ef0:	4668      	mov	r0, sp
  403ef2:	f001 f86b 	bl	404fcc <matherr>
  403ef6:	2800      	cmp	r0, #0
  403ef8:	d1ee      	bne.n	403ed8 <sqrtf+0x68>
  403efa:	e7e9      	b.n	403ed0 <sqrtf+0x60>
  403efc:	f002 f956 	bl	4061ac <__errno>
  403f00:	9b08      	ldr	r3, [sp, #32]
  403f02:	6003      	str	r3, [r0, #0]
  403f04:	e7ea      	b.n	403edc <sqrtf+0x6c>
  403f06:	bf00      	nop
  403f08:	2040000c 	.word	0x2040000c
  403f0c:	0040b3e0 	.word	0x0040b3e0

00403f10 <__ieee754_asinf>:
  403f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403f14:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  403f18:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
  403f1c:	4604      	mov	r4, r0
  403f1e:	f000 80c6 	beq.w	4040ae <__ieee754_asinf+0x19e>
  403f22:	dc12      	bgt.n	403f4a <__ieee754_asinf+0x3a>
  403f24:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
  403f28:	4606      	mov	r6, r0
  403f2a:	da16      	bge.n	403f5a <__ieee754_asinf+0x4a>
  403f2c:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
  403f30:	f280 80cb 	bge.w	4040ca <__ieee754_asinf+0x1ba>
  403f34:	498b      	ldr	r1, [pc, #556]	; (404164 <__ieee754_asinf+0x254>)
  403f36:	f001 fe2f 	bl	405b98 <__addsf3>
  403f3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  403f3e:	f002 f8ef 	bl	406120 <__aeabi_fcmpgt>
  403f42:	b150      	cbz	r0, 403f5a <__ieee754_asinf+0x4a>
  403f44:	4620      	mov	r0, r4
  403f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f4a:	4601      	mov	r1, r0
  403f4c:	f001 fe22 	bl	405b94 <__aeabi_fsub>
  403f50:	4601      	mov	r1, r0
  403f52:	f001 ffdd 	bl	405f10 <__aeabi_fdiv>
  403f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f5a:	4620      	mov	r0, r4
  403f5c:	f001 f954 	bl	405208 <fabsf>
  403f60:	4601      	mov	r1, r0
  403f62:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  403f66:	f001 fe15 	bl	405b94 <__aeabi_fsub>
  403f6a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  403f6e:	f001 ff1b 	bl	405da8 <__aeabi_fmul>
  403f72:	497d      	ldr	r1, [pc, #500]	; (404168 <__ieee754_asinf+0x258>)
  403f74:	4604      	mov	r4, r0
  403f76:	f001 ff17 	bl	405da8 <__aeabi_fmul>
  403f7a:	497c      	ldr	r1, [pc, #496]	; (40416c <__ieee754_asinf+0x25c>)
  403f7c:	f001 fe0c 	bl	405b98 <__addsf3>
  403f80:	4621      	mov	r1, r4
  403f82:	f001 ff11 	bl	405da8 <__aeabi_fmul>
  403f86:	497a      	ldr	r1, [pc, #488]	; (404170 <__ieee754_asinf+0x260>)
  403f88:	f001 fe04 	bl	405b94 <__aeabi_fsub>
  403f8c:	4621      	mov	r1, r4
  403f8e:	f001 ff0b 	bl	405da8 <__aeabi_fmul>
  403f92:	4978      	ldr	r1, [pc, #480]	; (404174 <__ieee754_asinf+0x264>)
  403f94:	f001 fe00 	bl	405b98 <__addsf3>
  403f98:	4621      	mov	r1, r4
  403f9a:	f001 ff05 	bl	405da8 <__aeabi_fmul>
  403f9e:	4976      	ldr	r1, [pc, #472]	; (404178 <__ieee754_asinf+0x268>)
  403fa0:	f001 fdf8 	bl	405b94 <__aeabi_fsub>
  403fa4:	4621      	mov	r1, r4
  403fa6:	f001 feff 	bl	405da8 <__aeabi_fmul>
  403faa:	4974      	ldr	r1, [pc, #464]	; (40417c <__ieee754_asinf+0x26c>)
  403fac:	f001 fdf4 	bl	405b98 <__addsf3>
  403fb0:	4621      	mov	r1, r4
  403fb2:	f001 fef9 	bl	405da8 <__aeabi_fmul>
  403fb6:	4972      	ldr	r1, [pc, #456]	; (404180 <__ieee754_asinf+0x270>)
  403fb8:	4680      	mov	r8, r0
  403fba:	4620      	mov	r0, r4
  403fbc:	f001 fef4 	bl	405da8 <__aeabi_fmul>
  403fc0:	4970      	ldr	r1, [pc, #448]	; (404184 <__ieee754_asinf+0x274>)
  403fc2:	f001 fde7 	bl	405b94 <__aeabi_fsub>
  403fc6:	4621      	mov	r1, r4
  403fc8:	f001 feee 	bl	405da8 <__aeabi_fmul>
  403fcc:	496e      	ldr	r1, [pc, #440]	; (404188 <__ieee754_asinf+0x278>)
  403fce:	f001 fde3 	bl	405b98 <__addsf3>
  403fd2:	4621      	mov	r1, r4
  403fd4:	f001 fee8 	bl	405da8 <__aeabi_fmul>
  403fd8:	496c      	ldr	r1, [pc, #432]	; (40418c <__ieee754_asinf+0x27c>)
  403fda:	f001 fddb 	bl	405b94 <__aeabi_fsub>
  403fde:	4621      	mov	r1, r4
  403fe0:	f001 fee2 	bl	405da8 <__aeabi_fmul>
  403fe4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  403fe8:	f001 fdd6 	bl	405b98 <__addsf3>
  403fec:	4681      	mov	r9, r0
  403fee:	4620      	mov	r0, r4
  403ff0:	f000 fad8 	bl	4045a4 <__ieee754_sqrtf>
  403ff4:	4b66      	ldr	r3, [pc, #408]	; (404190 <__ieee754_asinf+0x280>)
  403ff6:	429d      	cmp	r5, r3
  403ff8:	4607      	mov	r7, r0
  403ffa:	4649      	mov	r1, r9
  403ffc:	4640      	mov	r0, r8
  403ffe:	dc43      	bgt.n	404088 <__ieee754_asinf+0x178>
  404000:	f001 ff86 	bl	405f10 <__aeabi_fdiv>
  404004:	4639      	mov	r1, r7
  404006:	4680      	mov	r8, r0
  404008:	4638      	mov	r0, r7
  40400a:	f001 fdc5 	bl	405b98 <__addsf3>
  40400e:	4601      	mov	r1, r0
  404010:	4640      	mov	r0, r8
  404012:	f001 fec9 	bl	405da8 <__aeabi_fmul>
  404016:	f427 657f 	bic.w	r5, r7, #4080	; 0xff0
  40401a:	f025 050f 	bic.w	r5, r5, #15
  40401e:	4680      	mov	r8, r0
  404020:	4629      	mov	r1, r5
  404022:	4628      	mov	r0, r5
  404024:	f001 fec0 	bl	405da8 <__aeabi_fmul>
  404028:	4601      	mov	r1, r0
  40402a:	4620      	mov	r0, r4
  40402c:	f001 fdb2 	bl	405b94 <__aeabi_fsub>
  404030:	4639      	mov	r1, r7
  404032:	4604      	mov	r4, r0
  404034:	4628      	mov	r0, r5
  404036:	f001 fdaf 	bl	405b98 <__addsf3>
  40403a:	4601      	mov	r1, r0
  40403c:	4620      	mov	r0, r4
  40403e:	f001 ff67 	bl	405f10 <__aeabi_fdiv>
  404042:	4601      	mov	r1, r0
  404044:	f001 fda8 	bl	405b98 <__addsf3>
  404048:	4601      	mov	r1, r0
  40404a:	4852      	ldr	r0, [pc, #328]	; (404194 <__ieee754_asinf+0x284>)
  40404c:	f001 fda2 	bl	405b94 <__aeabi_fsub>
  404050:	4601      	mov	r1, r0
  404052:	4640      	mov	r0, r8
  404054:	f001 fd9e 	bl	405b94 <__aeabi_fsub>
  404058:	4629      	mov	r1, r5
  40405a:	4604      	mov	r4, r0
  40405c:	4628      	mov	r0, r5
  40405e:	f001 fd9b 	bl	405b98 <__addsf3>
  404062:	4601      	mov	r1, r0
  404064:	484c      	ldr	r0, [pc, #304]	; (404198 <__ieee754_asinf+0x288>)
  404066:	f001 fd95 	bl	405b94 <__aeabi_fsub>
  40406a:	4601      	mov	r1, r0
  40406c:	4620      	mov	r0, r4
  40406e:	f001 fd91 	bl	405b94 <__aeabi_fsub>
  404072:	4601      	mov	r1, r0
  404074:	4848      	ldr	r0, [pc, #288]	; (404198 <__ieee754_asinf+0x288>)
  404076:	f001 fd8d 	bl	405b94 <__aeabi_fsub>
  40407a:	2e00      	cmp	r6, #0
  40407c:	f73f af63 	bgt.w	403f46 <__ieee754_asinf+0x36>
  404080:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404088:	f001 ff42 	bl	405f10 <__aeabi_fdiv>
  40408c:	4639      	mov	r1, r7
  40408e:	f001 fe8b 	bl	405da8 <__aeabi_fmul>
  404092:	4639      	mov	r1, r7
  404094:	f001 fd80 	bl	405b98 <__addsf3>
  404098:	4601      	mov	r1, r0
  40409a:	f001 fd7d 	bl	405b98 <__addsf3>
  40409e:	493f      	ldr	r1, [pc, #252]	; (40419c <__ieee754_asinf+0x28c>)
  4040a0:	f001 fd7a 	bl	405b98 <__addsf3>
  4040a4:	4601      	mov	r1, r0
  4040a6:	483e      	ldr	r0, [pc, #248]	; (4041a0 <__ieee754_asinf+0x290>)
  4040a8:	f001 fd74 	bl	405b94 <__aeabi_fsub>
  4040ac:	e7e5      	b.n	40407a <__ieee754_asinf+0x16a>
  4040ae:	493c      	ldr	r1, [pc, #240]	; (4041a0 <__ieee754_asinf+0x290>)
  4040b0:	f001 fe7a 	bl	405da8 <__aeabi_fmul>
  4040b4:	4937      	ldr	r1, [pc, #220]	; (404194 <__ieee754_asinf+0x284>)
  4040b6:	4605      	mov	r5, r0
  4040b8:	4620      	mov	r0, r4
  4040ba:	f001 fe75 	bl	405da8 <__aeabi_fmul>
  4040be:	4601      	mov	r1, r0
  4040c0:	4628      	mov	r0, r5
  4040c2:	f001 fd69 	bl	405b98 <__addsf3>
  4040c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4040ca:	4601      	mov	r1, r0
  4040cc:	f001 fe6c 	bl	405da8 <__aeabi_fmul>
  4040d0:	4925      	ldr	r1, [pc, #148]	; (404168 <__ieee754_asinf+0x258>)
  4040d2:	4605      	mov	r5, r0
  4040d4:	f001 fe68 	bl	405da8 <__aeabi_fmul>
  4040d8:	4924      	ldr	r1, [pc, #144]	; (40416c <__ieee754_asinf+0x25c>)
  4040da:	f001 fd5d 	bl	405b98 <__addsf3>
  4040de:	4629      	mov	r1, r5
  4040e0:	f001 fe62 	bl	405da8 <__aeabi_fmul>
  4040e4:	4922      	ldr	r1, [pc, #136]	; (404170 <__ieee754_asinf+0x260>)
  4040e6:	f001 fd55 	bl	405b94 <__aeabi_fsub>
  4040ea:	4629      	mov	r1, r5
  4040ec:	f001 fe5c 	bl	405da8 <__aeabi_fmul>
  4040f0:	4920      	ldr	r1, [pc, #128]	; (404174 <__ieee754_asinf+0x264>)
  4040f2:	f001 fd51 	bl	405b98 <__addsf3>
  4040f6:	4629      	mov	r1, r5
  4040f8:	f001 fe56 	bl	405da8 <__aeabi_fmul>
  4040fc:	491e      	ldr	r1, [pc, #120]	; (404178 <__ieee754_asinf+0x268>)
  4040fe:	f001 fd49 	bl	405b94 <__aeabi_fsub>
  404102:	4629      	mov	r1, r5
  404104:	f001 fe50 	bl	405da8 <__aeabi_fmul>
  404108:	491c      	ldr	r1, [pc, #112]	; (40417c <__ieee754_asinf+0x26c>)
  40410a:	f001 fd45 	bl	405b98 <__addsf3>
  40410e:	4629      	mov	r1, r5
  404110:	f001 fe4a 	bl	405da8 <__aeabi_fmul>
  404114:	491a      	ldr	r1, [pc, #104]	; (404180 <__ieee754_asinf+0x270>)
  404116:	4606      	mov	r6, r0
  404118:	4628      	mov	r0, r5
  40411a:	f001 fe45 	bl	405da8 <__aeabi_fmul>
  40411e:	4919      	ldr	r1, [pc, #100]	; (404184 <__ieee754_asinf+0x274>)
  404120:	f001 fd38 	bl	405b94 <__aeabi_fsub>
  404124:	4629      	mov	r1, r5
  404126:	f001 fe3f 	bl	405da8 <__aeabi_fmul>
  40412a:	4917      	ldr	r1, [pc, #92]	; (404188 <__ieee754_asinf+0x278>)
  40412c:	f001 fd34 	bl	405b98 <__addsf3>
  404130:	4629      	mov	r1, r5
  404132:	f001 fe39 	bl	405da8 <__aeabi_fmul>
  404136:	4915      	ldr	r1, [pc, #84]	; (40418c <__ieee754_asinf+0x27c>)
  404138:	f001 fd2c 	bl	405b94 <__aeabi_fsub>
  40413c:	4629      	mov	r1, r5
  40413e:	f001 fe33 	bl	405da8 <__aeabi_fmul>
  404142:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404146:	f001 fd27 	bl	405b98 <__addsf3>
  40414a:	4601      	mov	r1, r0
  40414c:	4630      	mov	r0, r6
  40414e:	f001 fedf 	bl	405f10 <__aeabi_fdiv>
  404152:	4621      	mov	r1, r4
  404154:	f001 fe28 	bl	405da8 <__aeabi_fmul>
  404158:	4621      	mov	r1, r4
  40415a:	f001 fd1d 	bl	405b98 <__addsf3>
  40415e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404162:	bf00      	nop
  404164:	7149f2ca 	.word	0x7149f2ca
  404168:	3811ef08 	.word	0x3811ef08
  40416c:	3a4f7f04 	.word	0x3a4f7f04
  404170:	3d241146 	.word	0x3d241146
  404174:	3e4e0aa8 	.word	0x3e4e0aa8
  404178:	3ea6b090 	.word	0x3ea6b090
  40417c:	3e2aaaab 	.word	0x3e2aaaab
  404180:	3d9dc62e 	.word	0x3d9dc62e
  404184:	3f303361 	.word	0x3f303361
  404188:	4001572d 	.word	0x4001572d
  40418c:	4019d139 	.word	0x4019d139
  404190:	3f799999 	.word	0x3f799999
  404194:	b33bbd2e 	.word	0xb33bbd2e
  404198:	3f490fdb 	.word	0x3f490fdb
  40419c:	333bbd2e 	.word	0x333bbd2e
  4041a0:	3fc90fdb 	.word	0x3fc90fdb

004041a4 <__ieee754_atan2f>:
  4041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4041a6:	460c      	mov	r4, r1
  4041a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4041ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  4041b0:	4603      	mov	r3, r0
  4041b2:	dc14      	bgt.n	4041de <__ieee754_atan2f+0x3a>
  4041b4:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
  4041b8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  4041bc:	4607      	mov	r7, r0
  4041be:	dc0e      	bgt.n	4041de <__ieee754_atan2f+0x3a>
  4041c0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
  4041c4:	d03d      	beq.n	404242 <__ieee754_atan2f+0x9e>
  4041c6:	17a5      	asrs	r5, r4, #30
  4041c8:	f005 0502 	and.w	r5, r5, #2
  4041cc:	ea45 75d0 	orr.w	r5, r5, r0, lsr #31
  4041d0:	b956      	cbnz	r6, 4041e8 <__ieee754_atan2f+0x44>
  4041d2:	2d02      	cmp	r5, #2
  4041d4:	d030      	beq.n	404238 <__ieee754_atan2f+0x94>
  4041d6:	2d03      	cmp	r5, #3
  4041d8:	d130      	bne.n	40423c <__ieee754_atan2f+0x98>
  4041da:	4832      	ldr	r0, [pc, #200]	; (4042a4 <__ieee754_atan2f+0x100>)
  4041dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4041de:	4619      	mov	r1, r3
  4041e0:	4620      	mov	r0, r4
  4041e2:	f001 fcd9 	bl	405b98 <__addsf3>
  4041e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4041e8:	b301      	cbz	r1, 40422c <__ieee754_atan2f+0x88>
  4041ea:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  4041ee:	d02c      	beq.n	40424a <__ieee754_atan2f+0xa6>
  4041f0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  4041f4:	d01a      	beq.n	40422c <__ieee754_atan2f+0x88>
  4041f6:	1a71      	subs	r1, r6, r1
  4041f8:	15c9      	asrs	r1, r1, #23
  4041fa:	293c      	cmp	r1, #60	; 0x3c
  4041fc:	dc1a      	bgt.n	404234 <__ieee754_atan2f+0x90>
  4041fe:	2c00      	cmp	r4, #0
  404200:	db39      	blt.n	404276 <__ieee754_atan2f+0xd2>
  404202:	4621      	mov	r1, r4
  404204:	4618      	mov	r0, r3
  404206:	f001 fe83 	bl	405f10 <__aeabi_fdiv>
  40420a:	f000 fffd 	bl	405208 <fabsf>
  40420e:	f000 fee5 	bl	404fdc <atanf>
  404212:	2d01      	cmp	r5, #1
  404214:	d02c      	beq.n	404270 <__ieee754_atan2f+0xcc>
  404216:	2d02      	cmp	r5, #2
  404218:	d022      	beq.n	404260 <__ieee754_atan2f+0xbc>
  40421a:	2d00      	cmp	r5, #0
  40421c:	d02f      	beq.n	40427e <__ieee754_atan2f+0xda>
  40421e:	4922      	ldr	r1, [pc, #136]	; (4042a8 <__ieee754_atan2f+0x104>)
  404220:	f001 fcba 	bl	405b98 <__addsf3>
  404224:	4921      	ldr	r1, [pc, #132]	; (4042ac <__ieee754_atan2f+0x108>)
  404226:	f001 fcb5 	bl	405b94 <__aeabi_fsub>
  40422a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40422c:	2f00      	cmp	r7, #0
  40422e:	db06      	blt.n	40423e <__ieee754_atan2f+0x9a>
  404230:	481f      	ldr	r0, [pc, #124]	; (4042b0 <__ieee754_atan2f+0x10c>)
  404232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404234:	481e      	ldr	r0, [pc, #120]	; (4042b0 <__ieee754_atan2f+0x10c>)
  404236:	e7ec      	b.n	404212 <__ieee754_atan2f+0x6e>
  404238:	481c      	ldr	r0, [pc, #112]	; (4042ac <__ieee754_atan2f+0x108>)
  40423a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40423c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40423e:	481d      	ldr	r0, [pc, #116]	; (4042b4 <__ieee754_atan2f+0x110>)
  404240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404242:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  404246:	f000 bec9 	b.w	404fdc <atanf>
  40424a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  40424e:	d017      	beq.n	404280 <__ieee754_atan2f+0xdc>
  404250:	2d02      	cmp	r5, #2
  404252:	d0f1      	beq.n	404238 <__ieee754_atan2f+0x94>
  404254:	2d03      	cmp	r5, #3
  404256:	d0c0      	beq.n	4041da <__ieee754_atan2f+0x36>
  404258:	2d01      	cmp	r5, #1
  40425a:	d019      	beq.n	404290 <__ieee754_atan2f+0xec>
  40425c:	2000      	movs	r0, #0
  40425e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404260:	4911      	ldr	r1, [pc, #68]	; (4042a8 <__ieee754_atan2f+0x104>)
  404262:	f001 fc99 	bl	405b98 <__addsf3>
  404266:	4601      	mov	r1, r0
  404268:	4810      	ldr	r0, [pc, #64]	; (4042ac <__ieee754_atan2f+0x108>)
  40426a:	f001 fc93 	bl	405b94 <__aeabi_fsub>
  40426e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404270:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404276:	313c      	adds	r1, #60	; 0x3c
  404278:	dac3      	bge.n	404202 <__ieee754_atan2f+0x5e>
  40427a:	2000      	movs	r0, #0
  40427c:	e7c9      	b.n	404212 <__ieee754_atan2f+0x6e>
  40427e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404280:	2d02      	cmp	r5, #2
  404282:	d00c      	beq.n	40429e <__ieee754_atan2f+0xfa>
  404284:	2d03      	cmp	r5, #3
  404286:	d008      	beq.n	40429a <__ieee754_atan2f+0xf6>
  404288:	2d01      	cmp	r5, #1
  40428a:	d004      	beq.n	404296 <__ieee754_atan2f+0xf2>
  40428c:	480a      	ldr	r0, [pc, #40]	; (4042b8 <__ieee754_atan2f+0x114>)
  40428e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404290:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  404294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404296:	4809      	ldr	r0, [pc, #36]	; (4042bc <__ieee754_atan2f+0x118>)
  404298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40429a:	4809      	ldr	r0, [pc, #36]	; (4042c0 <__ieee754_atan2f+0x11c>)
  40429c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40429e:	4809      	ldr	r0, [pc, #36]	; (4042c4 <__ieee754_atan2f+0x120>)
  4042a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042a2:	bf00      	nop
  4042a4:	c0490fdb 	.word	0xc0490fdb
  4042a8:	33bbbd2e 	.word	0x33bbbd2e
  4042ac:	40490fdb 	.word	0x40490fdb
  4042b0:	3fc90fdb 	.word	0x3fc90fdb
  4042b4:	bfc90fdb 	.word	0xbfc90fdb
  4042b8:	3f490fdb 	.word	0x3f490fdb
  4042bc:	bf490fdb 	.word	0xbf490fdb
  4042c0:	c016cbe4 	.word	0xc016cbe4
  4042c4:	4016cbe4 	.word	0x4016cbe4

004042c8 <__ieee754_rem_pio2f>:
  4042c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042cc:	4aa8      	ldr	r2, [pc, #672]	; (404570 <__ieee754_rem_pio2f+0x2a8>)
  4042ce:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  4042d2:	4294      	cmp	r4, r2
  4042d4:	b089      	sub	sp, #36	; 0x24
  4042d6:	dd6e      	ble.n	4043b6 <__ieee754_rem_pio2f+0xee>
  4042d8:	4aa6      	ldr	r2, [pc, #664]	; (404574 <__ieee754_rem_pio2f+0x2ac>)
  4042da:	4294      	cmp	r4, r2
  4042dc:	4606      	mov	r6, r0
  4042de:	460d      	mov	r5, r1
  4042e0:	dc1c      	bgt.n	40431c <__ieee754_rem_pio2f+0x54>
  4042e2:	2800      	cmp	r0, #0
  4042e4:	49a4      	ldr	r1, [pc, #656]	; (404578 <__ieee754_rem_pio2f+0x2b0>)
  4042e6:	f340 80fc 	ble.w	4044e2 <__ieee754_rem_pio2f+0x21a>
  4042ea:	f001 fc53 	bl	405b94 <__aeabi_fsub>
  4042ee:	4ba3      	ldr	r3, [pc, #652]	; (40457c <__ieee754_rem_pio2f+0x2b4>)
  4042f0:	f024 040f 	bic.w	r4, r4, #15
  4042f4:	429c      	cmp	r4, r3
  4042f6:	4606      	mov	r6, r0
  4042f8:	d06c      	beq.n	4043d4 <__ieee754_rem_pio2f+0x10c>
  4042fa:	49a1      	ldr	r1, [pc, #644]	; (404580 <__ieee754_rem_pio2f+0x2b8>)
  4042fc:	f001 fc4a 	bl	405b94 <__aeabi_fsub>
  404300:	4601      	mov	r1, r0
  404302:	6028      	str	r0, [r5, #0]
  404304:	4630      	mov	r0, r6
  404306:	f001 fc45 	bl	405b94 <__aeabi_fsub>
  40430a:	499d      	ldr	r1, [pc, #628]	; (404580 <__ieee754_rem_pio2f+0x2b8>)
  40430c:	f001 fc42 	bl	405b94 <__aeabi_fsub>
  404310:	2701      	movs	r7, #1
  404312:	6068      	str	r0, [r5, #4]
  404314:	4638      	mov	r0, r7
  404316:	b009      	add	sp, #36	; 0x24
  404318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40431c:	4a99      	ldr	r2, [pc, #612]	; (404584 <__ieee754_rem_pio2f+0x2bc>)
  40431e:	4294      	cmp	r4, r2
  404320:	dd6a      	ble.n	4043f8 <__ieee754_rem_pio2f+0x130>
  404322:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
  404326:	da4e      	bge.n	4043c6 <__ieee754_rem_pio2f+0xfe>
  404328:	15e7      	asrs	r7, r4, #23
  40432a:	3f86      	subs	r7, #134	; 0x86
  40432c:	eba4 54c7 	sub.w	r4, r4, r7, lsl #23
  404330:	4620      	mov	r0, r4
  404332:	f001 ff15 	bl	406160 <__aeabi_f2iz>
  404336:	f001 fce3 	bl	405d00 <__aeabi_i2f>
  40433a:	4603      	mov	r3, r0
  40433c:	4601      	mov	r1, r0
  40433e:	4620      	mov	r0, r4
  404340:	9305      	str	r3, [sp, #20]
  404342:	f001 fc27 	bl	405b94 <__aeabi_fsub>
  404346:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  40434a:	f001 fd2d 	bl	405da8 <__aeabi_fmul>
  40434e:	4680      	mov	r8, r0
  404350:	f001 ff06 	bl	406160 <__aeabi_f2iz>
  404354:	f001 fcd4 	bl	405d00 <__aeabi_i2f>
  404358:	4601      	mov	r1, r0
  40435a:	4604      	mov	r4, r0
  40435c:	4640      	mov	r0, r8
  40435e:	9406      	str	r4, [sp, #24]
  404360:	f001 fc18 	bl	405b94 <__aeabi_fsub>
  404364:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404368:	f001 fd1e 	bl	405da8 <__aeabi_fmul>
  40436c:	2100      	movs	r1, #0
  40436e:	9007      	str	r0, [sp, #28]
  404370:	f001 feae 	bl	4060d0 <__aeabi_fcmpeq>
  404374:	2800      	cmp	r0, #0
  404376:	f000 80cb 	beq.w	404510 <__ieee754_rem_pio2f+0x248>
  40437a:	4620      	mov	r0, r4
  40437c:	2100      	movs	r1, #0
  40437e:	f001 fea7 	bl	4060d0 <__aeabi_fcmpeq>
  404382:	2800      	cmp	r0, #0
  404384:	bf14      	ite	ne
  404386:	2301      	movne	r3, #1
  404388:	2302      	moveq	r3, #2
  40438a:	4a7f      	ldr	r2, [pc, #508]	; (404588 <__ieee754_rem_pio2f+0x2c0>)
  40438c:	9201      	str	r2, [sp, #4]
  40438e:	2102      	movs	r1, #2
  404390:	463a      	mov	r2, r7
  404392:	9100      	str	r1, [sp, #0]
  404394:	a805      	add	r0, sp, #20
  404396:	4629      	mov	r1, r5
  404398:	f000 fa1c 	bl	4047d4 <__kernel_rem_pio2f>
  40439c:	2e00      	cmp	r6, #0
  40439e:	4607      	mov	r7, r0
  4043a0:	da0d      	bge.n	4043be <__ieee754_rem_pio2f+0xf6>
  4043a2:	e895 000c 	ldmia.w	r5, {r2, r3}
  4043a6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  4043aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4043ae:	4247      	negs	r7, r0
  4043b0:	602a      	str	r2, [r5, #0]
  4043b2:	606b      	str	r3, [r5, #4]
  4043b4:	e003      	b.n	4043be <__ieee754_rem_pio2f+0xf6>
  4043b6:	2200      	movs	r2, #0
  4043b8:	6008      	str	r0, [r1, #0]
  4043ba:	604a      	str	r2, [r1, #4]
  4043bc:	2700      	movs	r7, #0
  4043be:	4638      	mov	r0, r7
  4043c0:	b009      	add	sp, #36	; 0x24
  4043c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043c6:	4601      	mov	r1, r0
  4043c8:	f001 fbe4 	bl	405b94 <__aeabi_fsub>
  4043cc:	2700      	movs	r7, #0
  4043ce:	6068      	str	r0, [r5, #4]
  4043d0:	6028      	str	r0, [r5, #0]
  4043d2:	e7f4      	b.n	4043be <__ieee754_rem_pio2f+0xf6>
  4043d4:	496d      	ldr	r1, [pc, #436]	; (40458c <__ieee754_rem_pio2f+0x2c4>)
  4043d6:	f001 fbdd 	bl	405b94 <__aeabi_fsub>
  4043da:	496d      	ldr	r1, [pc, #436]	; (404590 <__ieee754_rem_pio2f+0x2c8>)
  4043dc:	4604      	mov	r4, r0
  4043de:	f001 fbd9 	bl	405b94 <__aeabi_fsub>
  4043e2:	4601      	mov	r1, r0
  4043e4:	6028      	str	r0, [r5, #0]
  4043e6:	4620      	mov	r0, r4
  4043e8:	f001 fbd4 	bl	405b94 <__aeabi_fsub>
  4043ec:	4968      	ldr	r1, [pc, #416]	; (404590 <__ieee754_rem_pio2f+0x2c8>)
  4043ee:	f001 fbd1 	bl	405b94 <__aeabi_fsub>
  4043f2:	2701      	movs	r7, #1
  4043f4:	6068      	str	r0, [r5, #4]
  4043f6:	e7e2      	b.n	4043be <__ieee754_rem_pio2f+0xf6>
  4043f8:	f000 ff06 	bl	405208 <fabsf>
  4043fc:	4965      	ldr	r1, [pc, #404]	; (404594 <__ieee754_rem_pio2f+0x2cc>)
  4043fe:	4680      	mov	r8, r0
  404400:	f001 fcd2 	bl	405da8 <__aeabi_fmul>
  404404:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404408:	f001 fbc6 	bl	405b98 <__addsf3>
  40440c:	f001 fea8 	bl	406160 <__aeabi_f2iz>
  404410:	4607      	mov	r7, r0
  404412:	f001 fc75 	bl	405d00 <__aeabi_i2f>
  404416:	4958      	ldr	r1, [pc, #352]	; (404578 <__ieee754_rem_pio2f+0x2b0>)
  404418:	4683      	mov	fp, r0
  40441a:	f001 fcc5 	bl	405da8 <__aeabi_fmul>
  40441e:	4601      	mov	r1, r0
  404420:	4640      	mov	r0, r8
  404422:	f001 fbb7 	bl	405b94 <__aeabi_fsub>
  404426:	4956      	ldr	r1, [pc, #344]	; (404580 <__ieee754_rem_pio2f+0x2b8>)
  404428:	4681      	mov	r9, r0
  40442a:	4658      	mov	r0, fp
  40442c:	f001 fcbc 	bl	405da8 <__aeabi_fmul>
  404430:	2f1f      	cmp	r7, #31
  404432:	4682      	mov	sl, r0
  404434:	dc21      	bgt.n	40447a <__ieee754_rem_pio2f+0x1b2>
  404436:	4a58      	ldr	r2, [pc, #352]	; (404598 <__ieee754_rem_pio2f+0x2d0>)
  404438:	1e79      	subs	r1, r7, #1
  40443a:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
  40443e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  404442:	4293      	cmp	r3, r2
  404444:	d019      	beq.n	40447a <__ieee754_rem_pio2f+0x1b2>
  404446:	4651      	mov	r1, sl
  404448:	4648      	mov	r0, r9
  40444a:	f001 fba3 	bl	405b94 <__aeabi_fsub>
  40444e:	4680      	mov	r8, r0
  404450:	f8c5 8000 	str.w	r8, [r5]
  404454:	4641      	mov	r1, r8
  404456:	4648      	mov	r0, r9
  404458:	f001 fb9c 	bl	405b94 <__aeabi_fsub>
  40445c:	4651      	mov	r1, sl
  40445e:	f001 fb99 	bl	405b94 <__aeabi_fsub>
  404462:	2e00      	cmp	r6, #0
  404464:	6068      	str	r0, [r5, #4]
  404466:	daaa      	bge.n	4043be <__ieee754_rem_pio2f+0xf6>
  404468:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  40446c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404470:	f8c5 8000 	str.w	r8, [r5]
  404474:	6068      	str	r0, [r5, #4]
  404476:	427f      	negs	r7, r7
  404478:	e7a1      	b.n	4043be <__ieee754_rem_pio2f+0xf6>
  40447a:	4651      	mov	r1, sl
  40447c:	4648      	mov	r0, r9
  40447e:	f001 fb89 	bl	405b94 <__aeabi_fsub>
  404482:	15e2      	asrs	r2, r4, #23
  404484:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  404488:	1ad3      	subs	r3, r2, r3
  40448a:	2b08      	cmp	r3, #8
  40448c:	4680      	mov	r8, r0
  40448e:	dddf      	ble.n	404450 <__ieee754_rem_pio2f+0x188>
  404490:	493e      	ldr	r1, [pc, #248]	; (40458c <__ieee754_rem_pio2f+0x2c4>)
  404492:	9203      	str	r2, [sp, #12]
  404494:	4658      	mov	r0, fp
  404496:	f001 fc87 	bl	405da8 <__aeabi_fmul>
  40449a:	4680      	mov	r8, r0
  40449c:	4601      	mov	r1, r0
  40449e:	4648      	mov	r0, r9
  4044a0:	f001 fb78 	bl	405b94 <__aeabi_fsub>
  4044a4:	4601      	mov	r1, r0
  4044a6:	4604      	mov	r4, r0
  4044a8:	4648      	mov	r0, r9
  4044aa:	f001 fb73 	bl	405b94 <__aeabi_fsub>
  4044ae:	4641      	mov	r1, r8
  4044b0:	f001 fb70 	bl	405b94 <__aeabi_fsub>
  4044b4:	4936      	ldr	r1, [pc, #216]	; (404590 <__ieee754_rem_pio2f+0x2c8>)
  4044b6:	4680      	mov	r8, r0
  4044b8:	4658      	mov	r0, fp
  4044ba:	f001 fc75 	bl	405da8 <__aeabi_fmul>
  4044be:	4641      	mov	r1, r8
  4044c0:	f001 fb68 	bl	405b94 <__aeabi_fsub>
  4044c4:	4601      	mov	r1, r0
  4044c6:	4682      	mov	sl, r0
  4044c8:	4620      	mov	r0, r4
  4044ca:	f001 fb63 	bl	405b94 <__aeabi_fsub>
  4044ce:	9a03      	ldr	r2, [sp, #12]
  4044d0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  4044d4:	1ad2      	subs	r2, r2, r3
  4044d6:	2a19      	cmp	r2, #25
  4044d8:	4680      	mov	r8, r0
  4044da:	dc2e      	bgt.n	40453a <__ieee754_rem_pio2f+0x272>
  4044dc:	6028      	str	r0, [r5, #0]
  4044de:	46a1      	mov	r9, r4
  4044e0:	e7b8      	b.n	404454 <__ieee754_rem_pio2f+0x18c>
  4044e2:	f001 fb59 	bl	405b98 <__addsf3>
  4044e6:	4b25      	ldr	r3, [pc, #148]	; (40457c <__ieee754_rem_pio2f+0x2b4>)
  4044e8:	f024 040f 	bic.w	r4, r4, #15
  4044ec:	429c      	cmp	r4, r3
  4044ee:	4606      	mov	r6, r0
  4044f0:	d010      	beq.n	404514 <__ieee754_rem_pio2f+0x24c>
  4044f2:	4923      	ldr	r1, [pc, #140]	; (404580 <__ieee754_rem_pio2f+0x2b8>)
  4044f4:	f001 fb50 	bl	405b98 <__addsf3>
  4044f8:	4601      	mov	r1, r0
  4044fa:	6028      	str	r0, [r5, #0]
  4044fc:	4630      	mov	r0, r6
  4044fe:	f001 fb49 	bl	405b94 <__aeabi_fsub>
  404502:	491f      	ldr	r1, [pc, #124]	; (404580 <__ieee754_rem_pio2f+0x2b8>)
  404504:	f001 fb48 	bl	405b98 <__addsf3>
  404508:	f04f 37ff 	mov.w	r7, #4294967295
  40450c:	6068      	str	r0, [r5, #4]
  40450e:	e756      	b.n	4043be <__ieee754_rem_pio2f+0xf6>
  404510:	2303      	movs	r3, #3
  404512:	e73a      	b.n	40438a <__ieee754_rem_pio2f+0xc2>
  404514:	491d      	ldr	r1, [pc, #116]	; (40458c <__ieee754_rem_pio2f+0x2c4>)
  404516:	f001 fb3f 	bl	405b98 <__addsf3>
  40451a:	491d      	ldr	r1, [pc, #116]	; (404590 <__ieee754_rem_pio2f+0x2c8>)
  40451c:	4604      	mov	r4, r0
  40451e:	f001 fb3b 	bl	405b98 <__addsf3>
  404522:	4601      	mov	r1, r0
  404524:	6028      	str	r0, [r5, #0]
  404526:	4620      	mov	r0, r4
  404528:	f001 fb34 	bl	405b94 <__aeabi_fsub>
  40452c:	4918      	ldr	r1, [pc, #96]	; (404590 <__ieee754_rem_pio2f+0x2c8>)
  40452e:	f001 fb33 	bl	405b98 <__addsf3>
  404532:	f04f 37ff 	mov.w	r7, #4294967295
  404536:	6068      	str	r0, [r5, #4]
  404538:	e741      	b.n	4043be <__ieee754_rem_pio2f+0xf6>
  40453a:	4918      	ldr	r1, [pc, #96]	; (40459c <__ieee754_rem_pio2f+0x2d4>)
  40453c:	4658      	mov	r0, fp
  40453e:	f001 fc33 	bl	405da8 <__aeabi_fmul>
  404542:	4601      	mov	r1, r0
  404544:	4680      	mov	r8, r0
  404546:	4620      	mov	r0, r4
  404548:	f001 fb24 	bl	405b94 <__aeabi_fsub>
  40454c:	4601      	mov	r1, r0
  40454e:	4681      	mov	r9, r0
  404550:	4620      	mov	r0, r4
  404552:	f001 fb1f 	bl	405b94 <__aeabi_fsub>
  404556:	4641      	mov	r1, r8
  404558:	f001 fb1c 	bl	405b94 <__aeabi_fsub>
  40455c:	4910      	ldr	r1, [pc, #64]	; (4045a0 <__ieee754_rem_pio2f+0x2d8>)
  40455e:	4604      	mov	r4, r0
  404560:	4658      	mov	r0, fp
  404562:	f001 fc21 	bl	405da8 <__aeabi_fmul>
  404566:	4621      	mov	r1, r4
  404568:	f001 fb14 	bl	405b94 <__aeabi_fsub>
  40456c:	4682      	mov	sl, r0
  40456e:	e76a      	b.n	404446 <__ieee754_rem_pio2f+0x17e>
  404570:	3f490fd8 	.word	0x3f490fd8
  404574:	4016cbe3 	.word	0x4016cbe3
  404578:	3fc90f80 	.word	0x3fc90f80
  40457c:	3fc90fd0 	.word	0x3fc90fd0
  404580:	37354443 	.word	0x37354443
  404584:	43490f80 	.word	0x43490f80
  404588:	0040b468 	.word	0x0040b468
  40458c:	37354400 	.word	0x37354400
  404590:	2e85a308 	.word	0x2e85a308
  404594:	3f22f984 	.word	0x3f22f984
  404598:	0040b3e8 	.word	0x0040b3e8
  40459c:	2e85a300 	.word	0x2e85a300
  4045a0:	248d3132 	.word	0x248d3132

004045a4 <__ieee754_sqrtf>:
  4045a4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
  4045a8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  4045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4045ae:	4604      	mov	r4, r0
  4045b0:	d22e      	bcs.n	404610 <__ieee754_sqrtf+0x6c>
  4045b2:	b362      	cbz	r2, 40460e <__ieee754_sqrtf+0x6a>
  4045b4:	2800      	cmp	r0, #0
  4045b6:	4603      	mov	r3, r0
  4045b8:	db3d      	blt.n	404636 <__ieee754_sqrtf+0x92>
  4045ba:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  4045be:	ea4f 50e0 	mov.w	r0, r0, asr #23
  4045c2:	d32c      	bcc.n	40461e <__ieee754_sqrtf+0x7a>
  4045c4:	387f      	subs	r0, #127	; 0x7f
  4045c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
  4045ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  4045ce:	07c2      	lsls	r2, r0, #31
  4045d0:	bf48      	it	mi
  4045d2:	005b      	lslmi	r3, r3, #1
  4045d4:	2600      	movs	r6, #0
  4045d6:	1047      	asrs	r7, r0, #1
  4045d8:	005b      	lsls	r3, r3, #1
  4045da:	4631      	mov	r1, r6
  4045dc:	2419      	movs	r4, #25
  4045de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4045e2:	188d      	adds	r5, r1, r2
  4045e4:	429d      	cmp	r5, r3
  4045e6:	dc02      	bgt.n	4045ee <__ieee754_sqrtf+0x4a>
  4045e8:	1b5b      	subs	r3, r3, r5
  4045ea:	18a9      	adds	r1, r5, r2
  4045ec:	4416      	add	r6, r2
  4045ee:	3c01      	subs	r4, #1
  4045f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4045f4:	ea4f 0252 	mov.w	r2, r2, lsr #1
  4045f8:	d1f3      	bne.n	4045e2 <__ieee754_sqrtf+0x3e>
  4045fa:	b113      	cbz	r3, 404602 <__ieee754_sqrtf+0x5e>
  4045fc:	3601      	adds	r6, #1
  4045fe:	f026 0601 	bic.w	r6, r6, #1
  404602:	1070      	asrs	r0, r6, #1
  404604:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
  404608:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
  40460c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40460e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404610:	4601      	mov	r1, r0
  404612:	f001 fbc9 	bl	405da8 <__aeabi_fmul>
  404616:	4621      	mov	r1, r4
  404618:	f001 fabe 	bl	405b98 <__addsf3>
  40461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40461e:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
  404622:	d001      	beq.n	404628 <__ieee754_sqrtf+0x84>
  404624:	e00e      	b.n	404644 <__ieee754_sqrtf+0xa0>
  404626:	460a      	mov	r2, r1
  404628:	005b      	lsls	r3, r3, #1
  40462a:	021c      	lsls	r4, r3, #8
  40462c:	f102 0101 	add.w	r1, r2, #1
  404630:	d5f9      	bpl.n	404626 <__ieee754_sqrtf+0x82>
  404632:	1a80      	subs	r0, r0, r2
  404634:	e7c6      	b.n	4045c4 <__ieee754_sqrtf+0x20>
  404636:	4601      	mov	r1, r0
  404638:	f001 faac 	bl	405b94 <__aeabi_fsub>
  40463c:	4601      	mov	r1, r0
  40463e:	f001 fc67 	bl	405f10 <__aeabi_fdiv>
  404642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404644:	f04f 32ff 	mov.w	r2, #4294967295
  404648:	e7f3      	b.n	404632 <__ieee754_sqrtf+0x8e>
  40464a:	bf00      	nop

0040464c <__kernel_cosf>:
  40464c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404650:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  404654:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
  404658:	4606      	mov	r6, r0
  40465a:	460f      	mov	r7, r1
  40465c:	da49      	bge.n	4046f2 <__kernel_cosf+0xa6>
  40465e:	f001 fd7f 	bl	406160 <__aeabi_f2iz>
  404662:	2800      	cmp	r0, #0
  404664:	f000 809d 	beq.w	4047a2 <__kernel_cosf+0x156>
  404668:	4631      	mov	r1, r6
  40466a:	4630      	mov	r0, r6
  40466c:	f001 fb9c 	bl	405da8 <__aeabi_fmul>
  404670:	494e      	ldr	r1, [pc, #312]	; (4047ac <__kernel_cosf+0x160>)
  404672:	4605      	mov	r5, r0
  404674:	f001 fb98 	bl	405da8 <__aeabi_fmul>
  404678:	494d      	ldr	r1, [pc, #308]	; (4047b0 <__kernel_cosf+0x164>)
  40467a:	f001 fa8d 	bl	405b98 <__addsf3>
  40467e:	4629      	mov	r1, r5
  404680:	f001 fb92 	bl	405da8 <__aeabi_fmul>
  404684:	494b      	ldr	r1, [pc, #300]	; (4047b4 <__kernel_cosf+0x168>)
  404686:	f001 fa85 	bl	405b94 <__aeabi_fsub>
  40468a:	4629      	mov	r1, r5
  40468c:	f001 fb8c 	bl	405da8 <__aeabi_fmul>
  404690:	4949      	ldr	r1, [pc, #292]	; (4047b8 <__kernel_cosf+0x16c>)
  404692:	f001 fa81 	bl	405b98 <__addsf3>
  404696:	4629      	mov	r1, r5
  404698:	f001 fb86 	bl	405da8 <__aeabi_fmul>
  40469c:	4947      	ldr	r1, [pc, #284]	; (4047bc <__kernel_cosf+0x170>)
  40469e:	f001 fa79 	bl	405b94 <__aeabi_fsub>
  4046a2:	4629      	mov	r1, r5
  4046a4:	f001 fb80 	bl	405da8 <__aeabi_fmul>
  4046a8:	4945      	ldr	r1, [pc, #276]	; (4047c0 <__kernel_cosf+0x174>)
  4046aa:	f001 fa75 	bl	405b98 <__addsf3>
  4046ae:	4629      	mov	r1, r5
  4046b0:	f001 fb7a 	bl	405da8 <__aeabi_fmul>
  4046b4:	4680      	mov	r8, r0
  4046b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4046ba:	4628      	mov	r0, r5
  4046bc:	f001 fb74 	bl	405da8 <__aeabi_fmul>
  4046c0:	4641      	mov	r1, r8
  4046c2:	4604      	mov	r4, r0
  4046c4:	4628      	mov	r0, r5
  4046c6:	f001 fb6f 	bl	405da8 <__aeabi_fmul>
  4046ca:	4639      	mov	r1, r7
  4046cc:	4605      	mov	r5, r0
  4046ce:	4630      	mov	r0, r6
  4046d0:	f001 fb6a 	bl	405da8 <__aeabi_fmul>
  4046d4:	4601      	mov	r1, r0
  4046d6:	4628      	mov	r0, r5
  4046d8:	f001 fa5c 	bl	405b94 <__aeabi_fsub>
  4046dc:	4601      	mov	r1, r0
  4046de:	4620      	mov	r0, r4
  4046e0:	f001 fa58 	bl	405b94 <__aeabi_fsub>
  4046e4:	4601      	mov	r1, r0
  4046e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4046ea:	f001 fa53 	bl	405b94 <__aeabi_fsub>
  4046ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4046f2:	4601      	mov	r1, r0
  4046f4:	f001 fb58 	bl	405da8 <__aeabi_fmul>
  4046f8:	492c      	ldr	r1, [pc, #176]	; (4047ac <__kernel_cosf+0x160>)
  4046fa:	4605      	mov	r5, r0
  4046fc:	f001 fb54 	bl	405da8 <__aeabi_fmul>
  404700:	492b      	ldr	r1, [pc, #172]	; (4047b0 <__kernel_cosf+0x164>)
  404702:	f001 fa49 	bl	405b98 <__addsf3>
  404706:	4629      	mov	r1, r5
  404708:	f001 fb4e 	bl	405da8 <__aeabi_fmul>
  40470c:	4929      	ldr	r1, [pc, #164]	; (4047b4 <__kernel_cosf+0x168>)
  40470e:	f001 fa41 	bl	405b94 <__aeabi_fsub>
  404712:	4629      	mov	r1, r5
  404714:	f001 fb48 	bl	405da8 <__aeabi_fmul>
  404718:	4927      	ldr	r1, [pc, #156]	; (4047b8 <__kernel_cosf+0x16c>)
  40471a:	f001 fa3d 	bl	405b98 <__addsf3>
  40471e:	4629      	mov	r1, r5
  404720:	f001 fb42 	bl	405da8 <__aeabi_fmul>
  404724:	4925      	ldr	r1, [pc, #148]	; (4047bc <__kernel_cosf+0x170>)
  404726:	f001 fa35 	bl	405b94 <__aeabi_fsub>
  40472a:	4629      	mov	r1, r5
  40472c:	f001 fb3c 	bl	405da8 <__aeabi_fmul>
  404730:	4923      	ldr	r1, [pc, #140]	; (4047c0 <__kernel_cosf+0x174>)
  404732:	f001 fa31 	bl	405b98 <__addsf3>
  404736:	4629      	mov	r1, r5
  404738:	f001 fb36 	bl	405da8 <__aeabi_fmul>
  40473c:	4b21      	ldr	r3, [pc, #132]	; (4047c4 <__kernel_cosf+0x178>)
  40473e:	429c      	cmp	r4, r3
  404740:	4680      	mov	r8, r0
  404742:	ddb8      	ble.n	4046b6 <__kernel_cosf+0x6a>
  404744:	4b20      	ldr	r3, [pc, #128]	; (4047c8 <__kernel_cosf+0x17c>)
  404746:	429c      	cmp	r4, r3
  404748:	dc27      	bgt.n	40479a <__kernel_cosf+0x14e>
  40474a:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
  40474e:	4621      	mov	r1, r4
  404750:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404754:	f001 fa1e 	bl	405b94 <__aeabi_fsub>
  404758:	4681      	mov	r9, r0
  40475a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40475e:	4628      	mov	r0, r5
  404760:	f001 fb22 	bl	405da8 <__aeabi_fmul>
  404764:	4621      	mov	r1, r4
  404766:	f001 fa15 	bl	405b94 <__aeabi_fsub>
  40476a:	4641      	mov	r1, r8
  40476c:	4604      	mov	r4, r0
  40476e:	4628      	mov	r0, r5
  404770:	f001 fb1a 	bl	405da8 <__aeabi_fmul>
  404774:	4639      	mov	r1, r7
  404776:	4605      	mov	r5, r0
  404778:	4630      	mov	r0, r6
  40477a:	f001 fb15 	bl	405da8 <__aeabi_fmul>
  40477e:	4601      	mov	r1, r0
  404780:	4628      	mov	r0, r5
  404782:	f001 fa07 	bl	405b94 <__aeabi_fsub>
  404786:	4601      	mov	r1, r0
  404788:	4620      	mov	r0, r4
  40478a:	f001 fa03 	bl	405b94 <__aeabi_fsub>
  40478e:	4601      	mov	r1, r0
  404790:	4648      	mov	r0, r9
  404792:	f001 f9ff 	bl	405b94 <__aeabi_fsub>
  404796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40479a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4047d0 <__kernel_cosf+0x184>
  40479e:	4c0b      	ldr	r4, [pc, #44]	; (4047cc <__kernel_cosf+0x180>)
  4047a0:	e7db      	b.n	40475a <__kernel_cosf+0x10e>
  4047a2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4047a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4047aa:	bf00      	nop
  4047ac:	ad47d74e 	.word	0xad47d74e
  4047b0:	310f74f6 	.word	0x310f74f6
  4047b4:	3493f27c 	.word	0x3493f27c
  4047b8:	37d00d01 	.word	0x37d00d01
  4047bc:	3ab60b61 	.word	0x3ab60b61
  4047c0:	3d2aaaab 	.word	0x3d2aaaab
  4047c4:	3e999999 	.word	0x3e999999
  4047c8:	3f480000 	.word	0x3f480000
  4047cc:	3e900000 	.word	0x3e900000
  4047d0:	3f380000 	.word	0x3f380000

004047d4 <__kernel_rem_pio2f>:
  4047d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4047d8:	b0dd      	sub	sp, #372	; 0x174
  4047da:	4c90      	ldr	r4, [pc, #576]	; (404a1c <__kernel_rem_pio2f+0x248>)
  4047dc:	9308      	str	r3, [sp, #32]
  4047de:	3b01      	subs	r3, #1
  4047e0:	9301      	str	r3, [sp, #4]
  4047e2:	1ed3      	subs	r3, r2, #3
  4047e4:	bf48      	it	mi
  4047e6:	1d13      	addmi	r3, r2, #4
  4047e8:	9d66      	ldr	r5, [sp, #408]	; 0x198
  4047ea:	9107      	str	r1, [sp, #28]
  4047ec:	10db      	asrs	r3, r3, #3
  4047ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4047f2:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
  4047f6:	9309      	str	r3, [sp, #36]	; 0x24
  4047f8:	4619      	mov	r1, r3
  4047fa:	3301      	adds	r3, #1
  4047fc:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
  404800:	9405      	str	r4, [sp, #20]
  404802:	9a01      	ldr	r2, [sp, #4]
  404804:	9304      	str	r3, [sp, #16]
  404806:	9b05      	ldr	r3, [sp, #20]
  404808:	9002      	str	r0, [sp, #8]
  40480a:	189c      	adds	r4, r3, r2
  40480c:	eba1 0602 	sub.w	r6, r1, r2
  404810:	d417      	bmi.n	404842 <__kernel_rem_pio2f+0x6e>
  404812:	4434      	add	r4, r6
  404814:	2500      	movs	r5, #0
  404816:	3401      	adds	r4, #1
  404818:	af1f      	add	r7, sp, #124	; 0x7c
  40481a:	f8dd 819c 	ldr.w	r8, [sp, #412]	; 0x19c
  40481e:	e008      	b.n	404832 <__kernel_rem_pio2f+0x5e>
  404820:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
  404824:	f001 fa6c 	bl	405d00 <__aeabi_i2f>
  404828:	3601      	adds	r6, #1
  40482a:	42a6      	cmp	r6, r4
  40482c:	f847 0f04 	str.w	r0, [r7, #4]!
  404830:	d007      	beq.n	404842 <__kernel_rem_pio2f+0x6e>
  404832:	2e00      	cmp	r6, #0
  404834:	daf4      	bge.n	404820 <__kernel_rem_pio2f+0x4c>
  404836:	3601      	adds	r6, #1
  404838:	4628      	mov	r0, r5
  40483a:	42a6      	cmp	r6, r4
  40483c:	f847 0f04 	str.w	r0, [r7, #4]!
  404840:	d1f7      	bne.n	404832 <__kernel_rem_pio2f+0x5e>
  404842:	9b05      	ldr	r3, [sp, #20]
  404844:	2b00      	cmp	r3, #0
  404846:	db28      	blt.n	40489a <__kernel_rem_pio2f+0xc6>
  404848:	9b08      	ldr	r3, [sp, #32]
  40484a:	009e      	lsls	r6, r3, #2
  40484c:	9b02      	ldr	r3, [sp, #8]
  40484e:	1f35      	subs	r5, r6, #4
  404850:	441d      	add	r5, r3
  404852:	ab20      	add	r3, sp, #128	; 0x80
  404854:	441e      	add	r6, r3
  404856:	9b05      	ldr	r3, [sp, #20]
  404858:	aa48      	add	r2, sp, #288	; 0x120
  40485a:	f04f 0900 	mov.w	r9, #0
  40485e:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  404862:	af47      	add	r7, sp, #284	; 0x11c
  404864:	9b01      	ldr	r3, [sp, #4]
  404866:	2b00      	cmp	r3, #0
  404868:	f2c0 82b9 	blt.w	404dde <__kernel_rem_pio2f+0x60a>
  40486c:	9b02      	ldr	r3, [sp, #8]
  40486e:	46b3      	mov	fp, r6
  404870:	1f1c      	subs	r4, r3, #4
  404872:	46ca      	mov	sl, r9
  404874:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  404878:	f854 0f04 	ldr.w	r0, [r4, #4]!
  40487c:	f001 fa94 	bl	405da8 <__aeabi_fmul>
  404880:	4601      	mov	r1, r0
  404882:	4650      	mov	r0, sl
  404884:	f001 f988 	bl	405b98 <__addsf3>
  404888:	42ac      	cmp	r4, r5
  40488a:	4682      	mov	sl, r0
  40488c:	d1f2      	bne.n	404874 <__kernel_rem_pio2f+0xa0>
  40488e:	f847 af04 	str.w	sl, [r7, #4]!
  404892:	4547      	cmp	r7, r8
  404894:	f106 0604 	add.w	r6, r6, #4
  404898:	d1e4      	bne.n	404864 <__kernel_rem_pio2f+0x90>
  40489a:	9805      	ldr	r0, [sp, #20]
  40489c:	9908      	ldr	r1, [sp, #32]
  40489e:	9c02      	ldr	r4, [sp, #8]
  4048a0:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  4048a4:	4603      	mov	r3, r0
  4048a6:	4413      	add	r3, r2
  4048a8:	009b      	lsls	r3, r3, #2
  4048aa:	440a      	add	r2, r1
  4048ac:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  4048b0:	1f19      	subs	r1, r3, #4
  4048b2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
  4048b6:	4453      	add	r3, sl
  4048b8:	eb0a 0201 	add.w	r2, sl, r1
  4048bc:	920a      	str	r2, [sp, #40]	; 0x28
  4048be:	930b      	str	r3, [sp, #44]	; 0x2c
  4048c0:	4680      	mov	r8, r0
  4048c2:	ea4f 0388 	mov.w	r3, r8, lsl #2
  4048c6:	aa5c      	add	r2, sp, #368	; 0x170
  4048c8:	9303      	str	r3, [sp, #12]
  4048ca:	18d3      	adds	r3, r2, r3
  4048cc:	f1b8 0f00 	cmp.w	r8, #0
  4048d0:	f853 9c50 	ldr.w	r9, [r3, #-80]
  4048d4:	dd22      	ble.n	40491c <__kernel_rem_pio2f+0x148>
  4048d6:	eb02 0488 	add.w	r4, r2, r8, lsl #2
  4048da:	3c54      	subs	r4, #84	; 0x54
  4048dc:	ae0b      	add	r6, sp, #44	; 0x2c
  4048de:	af47      	add	r7, sp, #284	; 0x11c
  4048e0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  4048e4:	4648      	mov	r0, r9
  4048e6:	f001 fa5f 	bl	405da8 <__aeabi_fmul>
  4048ea:	f001 fc39 	bl	406160 <__aeabi_f2iz>
  4048ee:	f001 fa07 	bl	405d00 <__aeabi_i2f>
  4048f2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  4048f6:	4683      	mov	fp, r0
  4048f8:	f001 fa56 	bl	405da8 <__aeabi_fmul>
  4048fc:	4601      	mov	r1, r0
  4048fe:	4648      	mov	r0, r9
  404900:	f001 f948 	bl	405b94 <__aeabi_fsub>
  404904:	f001 fc2c 	bl	406160 <__aeabi_f2iz>
  404908:	f854 1904 	ldr.w	r1, [r4], #-4
  40490c:	f846 0f04 	str.w	r0, [r6, #4]!
  404910:	4658      	mov	r0, fp
  404912:	f001 f941 	bl	405b98 <__addsf3>
  404916:	42bc      	cmp	r4, r7
  404918:	4681      	mov	r9, r0
  40491a:	d1e1      	bne.n	4048e0 <__kernel_rem_pio2f+0x10c>
  40491c:	9e04      	ldr	r6, [sp, #16]
  40491e:	4648      	mov	r0, r9
  404920:	4631      	mov	r1, r6
  404922:	f000 fcbb 	bl	40529c <scalbnf>
  404926:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
  40492a:	4604      	mov	r4, r0
  40492c:	f001 fa3c 	bl	405da8 <__aeabi_fmul>
  404930:	f000 fc6e 	bl	405210 <floorf>
  404934:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
  404938:	f001 fa36 	bl	405da8 <__aeabi_fmul>
  40493c:	4601      	mov	r1, r0
  40493e:	4620      	mov	r0, r4
  404940:	f001 f928 	bl	405b94 <__aeabi_fsub>
  404944:	4604      	mov	r4, r0
  404946:	f001 fc0b 	bl	406160 <__aeabi_f2iz>
  40494a:	4681      	mov	r9, r0
  40494c:	9006      	str	r0, [sp, #24]
  40494e:	f001 f9d7 	bl	405d00 <__aeabi_i2f>
  404952:	4601      	mov	r1, r0
  404954:	4620      	mov	r0, r4
  404956:	f001 f91d 	bl	405b94 <__aeabi_fsub>
  40495a:	2e00      	cmp	r6, #0
  40495c:	4607      	mov	r7, r0
  40495e:	f340 80e6 	ble.w	404b2e <__kernel_rem_pio2f+0x35a>
  404962:	f108 31ff 	add.w	r1, r8, #4294967295
  404966:	f1c6 0308 	rsb	r3, r6, #8
  40496a:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  40496e:	fa42 f003 	asr.w	r0, r2, r3
  404972:	fa00 f303 	lsl.w	r3, r0, r3
  404976:	1ad3      	subs	r3, r2, r3
  404978:	464a      	mov	r2, r9
  40497a:	f1c6 0407 	rsb	r4, r6, #7
  40497e:	4402      	add	r2, r0
  404980:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
  404984:	9206      	str	r2, [sp, #24]
  404986:	fa43 f404 	asr.w	r4, r3, r4
  40498a:	2c00      	cmp	r4, #0
  40498c:	dd5b      	ble.n	404a46 <__kernel_rem_pio2f+0x272>
  40498e:	9b06      	ldr	r3, [sp, #24]
  404990:	f1b8 0f00 	cmp.w	r8, #0
  404994:	f103 0301 	add.w	r3, r3, #1
  404998:	9306      	str	r3, [sp, #24]
  40499a:	f340 823b 	ble.w	404e14 <__kernel_rem_pio2f+0x640>
  40499e:	f8da 6000 	ldr.w	r6, [sl]
  4049a2:	2e00      	cmp	r6, #0
  4049a4:	f040 8294 	bne.w	404ed0 <__kernel_rem_pio2f+0x6fc>
  4049a8:	f1b8 0f01 	cmp.w	r8, #1
  4049ac:	f340 8255 	ble.w	404e5a <__kernel_rem_pio2f+0x686>
  4049b0:	4652      	mov	r2, sl
  4049b2:	2301      	movs	r3, #1
  4049b4:	f852 6f04 	ldr.w	r6, [r2, #4]!
  4049b8:	2e00      	cmp	r6, #0
  4049ba:	f000 824a 	beq.w	404e52 <__kernel_rem_pio2f+0x67e>
  4049be:	1c59      	adds	r1, r3, #1
  4049c0:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
  4049c4:	4588      	cmp	r8, r1
  4049c6:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
  4049ca:	dd14      	ble.n	4049f6 <__kernel_rem_pio2f+0x222>
  4049cc:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  4049d0:	3302      	adds	r3, #2
  4049d2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  4049d6:	4598      	cmp	r8, r3
  4049d8:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
  4049dc:	dd0b      	ble.n	4049f6 <__kernel_rem_pio2f+0x222>
  4049de:	9a03      	ldr	r2, [sp, #12]
  4049e0:	4452      	add	r2, sl
  4049e2:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  4049e6:	4691      	mov	r9, r2
  4049e8:	681a      	ldr	r2, [r3, #0]
  4049ea:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  4049ee:	f843 2b04 	str.w	r2, [r3], #4
  4049f2:	454b      	cmp	r3, r9
  4049f4:	d1f8      	bne.n	4049e8 <__kernel_rem_pio2f+0x214>
  4049f6:	9b04      	ldr	r3, [sp, #16]
  4049f8:	2b00      	cmp	r3, #0
  4049fa:	dd11      	ble.n	404a20 <__kernel_rem_pio2f+0x24c>
  4049fc:	9b04      	ldr	r3, [sp, #16]
  4049fe:	2b01      	cmp	r3, #1
  404a00:	f04f 0601 	mov.w	r6, #1
  404a04:	f040 820e 	bne.w	404e24 <__kernel_rem_pio2f+0x650>
  404a08:	f108 32ff 	add.w	r2, r8, #4294967295
  404a0c:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  404a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404a14:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  404a18:	e20e      	b.n	404e38 <__kernel_rem_pio2f+0x664>
  404a1a:	bf00      	nop
  404a1c:	0040b7ac 	.word	0x0040b7ac
  404a20:	2c02      	cmp	r4, #2
  404a22:	d110      	bne.n	404a46 <__kernel_rem_pio2f+0x272>
  404a24:	4639      	mov	r1, r7
  404a26:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404a2a:	f001 f8b3 	bl	405b94 <__aeabi_fsub>
  404a2e:	4607      	mov	r7, r0
  404a30:	9904      	ldr	r1, [sp, #16]
  404a32:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404a36:	f000 fc31 	bl	40529c <scalbnf>
  404a3a:	4601      	mov	r1, r0
  404a3c:	4638      	mov	r0, r7
  404a3e:	f001 f8a9 	bl	405b94 <__aeabi_fsub>
  404a42:	2402      	movs	r4, #2
  404a44:	4607      	mov	r7, r0
  404a46:	2100      	movs	r1, #0
  404a48:	4638      	mov	r0, r7
  404a4a:	f001 fb41 	bl	4060d0 <__aeabi_fcmpeq>
  404a4e:	2800      	cmp	r0, #0
  404a50:	f000 8083 	beq.w	404b5a <__kernel_rem_pio2f+0x386>
  404a54:	9b05      	ldr	r3, [sp, #20]
  404a56:	f108 37ff 	add.w	r7, r8, #4294967295
  404a5a:	42bb      	cmp	r3, r7
  404a5c:	dc0f      	bgt.n	404a7e <__kernel_rem_pio2f+0x2aa>
  404a5e:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
  404a62:	3b01      	subs	r3, #1
  404a64:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404a66:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  404a6a:	2200      	movs	r2, #0
  404a6c:	f853 1904 	ldr.w	r1, [r3], #-4
  404a70:	4283      	cmp	r3, r0
  404a72:	ea42 0201 	orr.w	r2, r2, r1
  404a76:	d1f9      	bne.n	404a6c <__kernel_rem_pio2f+0x298>
  404a78:	2a00      	cmp	r2, #0
  404a7a:	f040 809d 	bne.w	404bb8 <__kernel_rem_pio2f+0x3e4>
  404a7e:	9b05      	ldr	r3, [sp, #20]
  404a80:	3b01      	subs	r3, #1
  404a82:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
  404a86:	2b00      	cmp	r3, #0
  404a88:	f040 81f4 	bne.w	404e74 <__kernel_rem_pio2f+0x6a0>
  404a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404a8e:	2301      	movs	r3, #1
  404a90:	f852 1904 	ldr.w	r1, [r2], #-4
  404a94:	3301      	adds	r3, #1
  404a96:	2900      	cmp	r1, #0
  404a98:	d0fa      	beq.n	404a90 <__kernel_rem_pio2f+0x2bc>
  404a9a:	4443      	add	r3, r8
  404a9c:	461a      	mov	r2, r3
  404a9e:	9306      	str	r3, [sp, #24]
  404aa0:	f108 0301 	add.w	r3, r8, #1
  404aa4:	4293      	cmp	r3, r2
  404aa6:	dc37      	bgt.n	404b18 <__kernel_rem_pio2f+0x344>
  404aa8:	9908      	ldr	r1, [sp, #32]
  404aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404aac:	eb01 0708 	add.w	r7, r1, r8
  404ab0:	a920      	add	r1, sp, #128	; 0x80
  404ab2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  404ab6:	9906      	ldr	r1, [sp, #24]
  404ab8:	189e      	adds	r6, r3, r2
  404aba:	eb01 0902 	add.w	r9, r1, r2
  404abe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
  404ac2:	9a67      	ldr	r2, [sp, #412]	; 0x19c
  404ac4:	3e01      	subs	r6, #1
  404ac6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  404aca:	aa48      	add	r2, sp, #288	; 0x120
  404acc:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  404ad0:	9b67      	ldr	r3, [sp, #412]	; 0x19c
  404ad2:	eb03 0389 	add.w	r3, r3, r9, lsl #2
  404ad6:	9303      	str	r3, [sp, #12]
  404ad8:	f856 0f04 	ldr.w	r0, [r6, #4]!
  404adc:	f001 f910 	bl	405d00 <__aeabi_i2f>
  404ae0:	9b01      	ldr	r3, [sp, #4]
  404ae2:	f847 0b04 	str.w	r0, [r7], #4
  404ae6:	2b00      	cmp	r3, #0
  404ae8:	db19      	blt.n	404b1e <__kernel_rem_pio2f+0x34a>
  404aea:	9b02      	ldr	r3, [sp, #8]
  404aec:	46bb      	mov	fp, r7
  404aee:	1f1c      	subs	r4, r3, #4
  404af0:	f04f 0900 	mov.w	r9, #0
  404af4:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  404af8:	f854 0f04 	ldr.w	r0, [r4, #4]!
  404afc:	f001 f954 	bl	405da8 <__aeabi_fmul>
  404b00:	4601      	mov	r1, r0
  404b02:	4648      	mov	r0, r9
  404b04:	f001 f848 	bl	405b98 <__addsf3>
  404b08:	42ac      	cmp	r4, r5
  404b0a:	4681      	mov	r9, r0
  404b0c:	d1f2      	bne.n	404af4 <__kernel_rem_pio2f+0x320>
  404b0e:	9b03      	ldr	r3, [sp, #12]
  404b10:	f848 9b04 	str.w	r9, [r8], #4
  404b14:	429e      	cmp	r6, r3
  404b16:	d1df      	bne.n	404ad8 <__kernel_rem_pio2f+0x304>
  404b18:	f8dd 8018 	ldr.w	r8, [sp, #24]
  404b1c:	e6d1      	b.n	4048c2 <__kernel_rem_pio2f+0xee>
  404b1e:	9b03      	ldr	r3, [sp, #12]
  404b20:	f04f 0900 	mov.w	r9, #0
  404b24:	429e      	cmp	r6, r3
  404b26:	f848 9b04 	str.w	r9, [r8], #4
  404b2a:	d1d5      	bne.n	404ad8 <__kernel_rem_pio2f+0x304>
  404b2c:	e7f4      	b.n	404b18 <__kernel_rem_pio2f+0x344>
  404b2e:	d105      	bne.n	404b3c <__kernel_rem_pio2f+0x368>
  404b30:	f108 33ff 	add.w	r3, r8, #4294967295
  404b34:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
  404b38:	1224      	asrs	r4, r4, #8
  404b3a:	e726      	b.n	40498a <__kernel_rem_pio2f+0x1b6>
  404b3c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404b40:	f001 fae4 	bl	40610c <__aeabi_fcmpge>
  404b44:	2800      	cmp	r0, #0
  404b46:	f040 8153 	bne.w	404df0 <__kernel_rem_pio2f+0x61c>
  404b4a:	4604      	mov	r4, r0
  404b4c:	2100      	movs	r1, #0
  404b4e:	4638      	mov	r0, r7
  404b50:	f001 fabe 	bl	4060d0 <__aeabi_fcmpeq>
  404b54:	2800      	cmp	r0, #0
  404b56:	f47f af7d 	bne.w	404a54 <__kernel_rem_pio2f+0x280>
  404b5a:	9e04      	ldr	r6, [sp, #16]
  404b5c:	4638      	mov	r0, r7
  404b5e:	4271      	negs	r1, r6
  404b60:	f000 fb9c 	bl	40529c <scalbnf>
  404b64:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404b68:	46a1      	mov	r9, r4
  404b6a:	4604      	mov	r4, r0
  404b6c:	f001 face 	bl	40610c <__aeabi_fcmpge>
  404b70:	2800      	cmp	r0, #0
  404b72:	f000 818d 	beq.w	404e90 <__kernel_rem_pio2f+0x6bc>
  404b76:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  404b7a:	4620      	mov	r0, r4
  404b7c:	f001 f914 	bl	405da8 <__aeabi_fmul>
  404b80:	f001 faee 	bl	406160 <__aeabi_f2iz>
  404b84:	f001 f8bc 	bl	405d00 <__aeabi_i2f>
  404b88:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404b8c:	4605      	mov	r5, r0
  404b8e:	f001 f90b 	bl	405da8 <__aeabi_fmul>
  404b92:	4601      	mov	r1, r0
  404b94:	4620      	mov	r0, r4
  404b96:	f000 fffd 	bl	405b94 <__aeabi_fsub>
  404b9a:	f001 fae1 	bl	406160 <__aeabi_f2iz>
  404b9e:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  404ba2:	4628      	mov	r0, r5
  404ba4:	f001 fadc 	bl	406160 <__aeabi_f2iz>
  404ba8:	f108 0701 	add.w	r7, r8, #1
  404bac:	4633      	mov	r3, r6
  404bae:	3308      	adds	r3, #8
  404bb0:	9304      	str	r3, [sp, #16]
  404bb2:	f84a 0027 	str.w	r0, [sl, r7, lsl #2]
  404bb6:	e012      	b.n	404bde <__kernel_rem_pio2f+0x40a>
  404bb8:	9a04      	ldr	r2, [sp, #16]
  404bba:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  404bbe:	3a08      	subs	r2, #8
  404bc0:	46a1      	mov	r9, r4
  404bc2:	9204      	str	r2, [sp, #16]
  404bc4:	b95b      	cbnz	r3, 404bde <__kernel_rem_pio2f+0x40a>
  404bc6:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
  404bca:	3b01      	subs	r3, #1
  404bcc:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  404bd0:	f853 1904 	ldr.w	r1, [r3], #-4
  404bd4:	3f01      	subs	r7, #1
  404bd6:	3a08      	subs	r2, #8
  404bd8:	2900      	cmp	r1, #0
  404bda:	d0f9      	beq.n	404bd0 <__kernel_rem_pio2f+0x3fc>
  404bdc:	9204      	str	r2, [sp, #16]
  404bde:	9904      	ldr	r1, [sp, #16]
  404be0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404be4:	f000 fb5a 	bl	40529c <scalbnf>
  404be8:	2f00      	cmp	r7, #0
  404bea:	4604      	mov	r4, r0
  404bec:	f2c0 815c 	blt.w	404ea8 <__kernel_rem_pio2f+0x6d4>
  404bf0:	00bb      	lsls	r3, r7, #2
  404bf2:	a948      	add	r1, sp, #288	; 0x120
  404bf4:	1d1a      	adds	r2, r3, #4
  404bf6:	eb01 0803 	add.w	r8, r1, r3
  404bfa:	9301      	str	r3, [sp, #4]
  404bfc:	9202      	str	r2, [sp, #8]
  404bfe:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
  404c02:	eb0a 0b02 	add.w	fp, sl, r2
  404c06:	f108 0504 	add.w	r5, r8, #4
  404c0a:	f85b 0d04 	ldr.w	r0, [fp, #-4]!
  404c0e:	f001 f877 	bl	405d00 <__aeabi_i2f>
  404c12:	4621      	mov	r1, r4
  404c14:	f001 f8c8 	bl	405da8 <__aeabi_fmul>
  404c18:	4631      	mov	r1, r6
  404c1a:	f845 0d04 	str.w	r0, [r5, #-4]!
  404c1e:	4620      	mov	r0, r4
  404c20:	f001 f8c2 	bl	405da8 <__aeabi_fmul>
  404c24:	45d3      	cmp	fp, sl
  404c26:	4604      	mov	r4, r0
  404c28:	d1ef      	bne.n	404c0a <__kernel_rem_pio2f+0x436>
  404c2a:	2600      	movs	r6, #0
  404c2c:	f8dd b014 	ldr.w	fp, [sp, #20]
  404c30:	9703      	str	r7, [sp, #12]
  404c32:	f1a8 0804 	sub.w	r8, r8, #4
  404c36:	46b2      	mov	sl, r6
  404c38:	f1bb 0f00 	cmp.w	fp, #0
  404c3c:	bfb8      	it	lt
  404c3e:	2500      	movlt	r5, #0
  404c40:	db15      	blt.n	404c6e <__kernel_rem_pio2f+0x49a>
  404c42:	4ea5      	ldr	r6, [pc, #660]	; (404ed8 <__kernel_rem_pio2f+0x704>)
  404c44:	48a5      	ldr	r0, [pc, #660]	; (404edc <__kernel_rem_pio2f+0x708>)
  404c46:	4647      	mov	r7, r8
  404c48:	2500      	movs	r5, #0
  404c4a:	2400      	movs	r4, #0
  404c4c:	e003      	b.n	404c56 <__kernel_rem_pio2f+0x482>
  404c4e:	4554      	cmp	r4, sl
  404c50:	dc0d      	bgt.n	404c6e <__kernel_rem_pio2f+0x49a>
  404c52:	f856 0f04 	ldr.w	r0, [r6, #4]!
  404c56:	f857 1f04 	ldr.w	r1, [r7, #4]!
  404c5a:	f001 f8a5 	bl	405da8 <__aeabi_fmul>
  404c5e:	4601      	mov	r1, r0
  404c60:	4628      	mov	r0, r5
  404c62:	f000 ff99 	bl	405b98 <__addsf3>
  404c66:	3401      	adds	r4, #1
  404c68:	45a3      	cmp	fp, r4
  404c6a:	4605      	mov	r5, r0
  404c6c:	daef      	bge.n	404c4e <__kernel_rem_pio2f+0x47a>
  404c6e:	ab5c      	add	r3, sp, #368	; 0x170
  404c70:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  404c74:	f1a8 0804 	sub.w	r8, r8, #4
  404c78:	f843 5ca0 	str.w	r5, [r3, #-160]
  404c7c:	ab46      	add	r3, sp, #280	; 0x118
  404c7e:	4543      	cmp	r3, r8
  404c80:	f10a 0a01 	add.w	sl, sl, #1
  404c84:	d1d8      	bne.n	404c38 <__kernel_rem_pio2f+0x464>
  404c86:	9b66      	ldr	r3, [sp, #408]	; 0x198
  404c88:	9f03      	ldr	r7, [sp, #12]
  404c8a:	2b03      	cmp	r3, #3
  404c8c:	d85a      	bhi.n	404d44 <__kernel_rem_pio2f+0x570>
  404c8e:	e8df f003 	tbb	[pc, r3]
  404c92:	5f8e      	.short	0x5f8e
  404c94:	025f      	.short	0x025f
  404c96:	2f00      	cmp	r7, #0
  404c98:	f340 8104 	ble.w	404ea4 <__kernel_rem_pio2f+0x6d0>
  404c9c:	9a01      	ldr	r2, [sp, #4]
  404c9e:	a95c      	add	r1, sp, #368	; 0x170
  404ca0:	188b      	adds	r3, r1, r2
  404ca2:	ac34      	add	r4, sp, #208	; 0xd0
  404ca4:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  404ca8:	18a5      	adds	r5, r4, r2
  404caa:	f855 ac04 	ldr.w	sl, [r5, #-4]
  404cae:	4631      	mov	r1, r6
  404cb0:	4650      	mov	r0, sl
  404cb2:	f000 ff71 	bl	405b98 <__addsf3>
  404cb6:	4680      	mov	r8, r0
  404cb8:	4601      	mov	r1, r0
  404cba:	4650      	mov	r0, sl
  404cbc:	f000 ff6a 	bl	405b94 <__aeabi_fsub>
  404cc0:	4631      	mov	r1, r6
  404cc2:	f000 ff69 	bl	405b98 <__addsf3>
  404cc6:	6028      	str	r0, [r5, #0]
  404cc8:	f845 8d04 	str.w	r8, [r5, #-4]!
  404ccc:	42ac      	cmp	r4, r5
  404cce:	4646      	mov	r6, r8
  404cd0:	d1eb      	bne.n	404caa <__kernel_rem_pio2f+0x4d6>
  404cd2:	2f01      	cmp	r7, #1
  404cd4:	f340 80e6 	ble.w	404ea4 <__kernel_rem_pio2f+0x6d0>
  404cd8:	9a01      	ldr	r2, [sp, #4]
  404cda:	a95c      	add	r1, sp, #368	; 0x170
  404cdc:	188b      	adds	r3, r1, r2
  404cde:	4414      	add	r4, r2
  404ce0:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  404ce4:	4625      	mov	r5, r4
  404ce6:	f10d 0ad4 	add.w	sl, sp, #212	; 0xd4
  404cea:	f855 8c04 	ldr.w	r8, [r5, #-4]
  404cee:	4631      	mov	r1, r6
  404cf0:	4640      	mov	r0, r8
  404cf2:	f000 ff51 	bl	405b98 <__addsf3>
  404cf6:	4607      	mov	r7, r0
  404cf8:	4601      	mov	r1, r0
  404cfa:	4640      	mov	r0, r8
  404cfc:	f000 ff4a 	bl	405b94 <__aeabi_fsub>
  404d00:	4631      	mov	r1, r6
  404d02:	f000 ff49 	bl	405b98 <__addsf3>
  404d06:	6028      	str	r0, [r5, #0]
  404d08:	f845 7d04 	str.w	r7, [r5, #-4]!
  404d0c:	45aa      	cmp	sl, r5
  404d0e:	463e      	mov	r6, r7
  404d10:	d1eb      	bne.n	404cea <__kernel_rem_pio2f+0x516>
  404d12:	2000      	movs	r0, #0
  404d14:	3404      	adds	r4, #4
  404d16:	ad36      	add	r5, sp, #216	; 0xd8
  404d18:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  404d1c:	f000 ff3c 	bl	405b98 <__addsf3>
  404d20:	42a5      	cmp	r5, r4
  404d22:	d1f9      	bne.n	404d18 <__kernel_rem_pio2f+0x544>
  404d24:	f1b9 0f00 	cmp.w	r9, #0
  404d28:	f000 80b9 	beq.w	404e9e <__kernel_rem_pio2f+0x6ca>
  404d2c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  404d2e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  404d30:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404d34:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404d38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404d3c:	9c07      	ldr	r4, [sp, #28]
  404d3e:	60a0      	str	r0, [r4, #8]
  404d40:	6022      	str	r2, [r4, #0]
  404d42:	6063      	str	r3, [r4, #4]
  404d44:	9b06      	ldr	r3, [sp, #24]
  404d46:	f003 0007 	and.w	r0, r3, #7
  404d4a:	b05d      	add	sp, #372	; 0x174
  404d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d50:	9c01      	ldr	r4, [sp, #4]
  404d52:	ad34      	add	r5, sp, #208	; 0xd0
  404d54:	3404      	adds	r4, #4
  404d56:	442c      	add	r4, r5
  404d58:	2000      	movs	r0, #0
  404d5a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  404d5e:	f000 ff1b 	bl	405b98 <__addsf3>
  404d62:	42ac      	cmp	r4, r5
  404d64:	d1f9      	bne.n	404d5a <__kernel_rem_pio2f+0x586>
  404d66:	f1b9 0f00 	cmp.w	r9, #0
  404d6a:	f000 8085 	beq.w	404e78 <__kernel_rem_pio2f+0x6a4>
  404d6e:	9a07      	ldr	r2, [sp, #28]
  404d70:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
  404d74:	4601      	mov	r1, r0
  404d76:	6013      	str	r3, [r2, #0]
  404d78:	9834      	ldr	r0, [sp, #208]	; 0xd0
  404d7a:	f000 ff0b 	bl	405b94 <__aeabi_fsub>
  404d7e:	2f00      	cmp	r7, #0
  404d80:	dd0b      	ble.n	404d9a <__kernel_rem_pio2f+0x5c6>
  404d82:	ad34      	add	r5, sp, #208	; 0xd0
  404d84:	2401      	movs	r4, #1
  404d86:	3401      	adds	r4, #1
  404d88:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404d8c:	f000 ff04 	bl	405b98 <__addsf3>
  404d90:	42a7      	cmp	r7, r4
  404d92:	daf8      	bge.n	404d86 <__kernel_rem_pio2f+0x5b2>
  404d94:	f1b9 0f00 	cmp.w	r9, #0
  404d98:	d001      	beq.n	404d9e <__kernel_rem_pio2f+0x5ca>
  404d9a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404d9e:	9b07      	ldr	r3, [sp, #28]
  404da0:	6058      	str	r0, [r3, #4]
  404da2:	9b06      	ldr	r3, [sp, #24]
  404da4:	f003 0007 	and.w	r0, r3, #7
  404da8:	b05d      	add	sp, #372	; 0x174
  404daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dae:	9b02      	ldr	r3, [sp, #8]
  404db0:	ad34      	add	r5, sp, #208	; 0xd0
  404db2:	442b      	add	r3, r5
  404db4:	2000      	movs	r0, #0
  404db6:	461c      	mov	r4, r3
  404db8:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  404dbc:	f000 feec 	bl	405b98 <__addsf3>
  404dc0:	42a5      	cmp	r5, r4
  404dc2:	d1f9      	bne.n	404db8 <__kernel_rem_pio2f+0x5e4>
  404dc4:	f1b9 0f00 	cmp.w	r9, #0
  404dc8:	d001      	beq.n	404dce <__kernel_rem_pio2f+0x5fa>
  404dca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404dce:	9b07      	ldr	r3, [sp, #28]
  404dd0:	6018      	str	r0, [r3, #0]
  404dd2:	9b06      	ldr	r3, [sp, #24]
  404dd4:	f003 0007 	and.w	r0, r3, #7
  404dd8:	b05d      	add	sp, #372	; 0x174
  404dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dde:	46ca      	mov	sl, r9
  404de0:	f847 af04 	str.w	sl, [r7, #4]!
  404de4:	4547      	cmp	r7, r8
  404de6:	f106 0604 	add.w	r6, r6, #4
  404dea:	f47f ad3b 	bne.w	404864 <__kernel_rem_pio2f+0x90>
  404dee:	e554      	b.n	40489a <__kernel_rem_pio2f+0xc6>
  404df0:	9b06      	ldr	r3, [sp, #24]
  404df2:	f1b8 0f00 	cmp.w	r8, #0
  404df6:	f103 0301 	add.w	r3, r3, #1
  404dfa:	9306      	str	r3, [sp, #24]
  404dfc:	bfc8      	it	gt
  404dfe:	2402      	movgt	r4, #2
  404e00:	f73f adcd 	bgt.w	40499e <__kernel_rem_pio2f+0x1ca>
  404e04:	4639      	mov	r1, r7
  404e06:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404e0a:	f000 fec3 	bl	405b94 <__aeabi_fsub>
  404e0e:	2402      	movs	r4, #2
  404e10:	4607      	mov	r7, r0
  404e12:	e618      	b.n	404a46 <__kernel_rem_pio2f+0x272>
  404e14:	9b04      	ldr	r3, [sp, #16]
  404e16:	2b00      	cmp	r3, #0
  404e18:	dd22      	ble.n	404e60 <__kernel_rem_pio2f+0x68c>
  404e1a:	2600      	movs	r6, #0
  404e1c:	9b04      	ldr	r3, [sp, #16]
  404e1e:	2b01      	cmp	r3, #1
  404e20:	f43f adf2 	beq.w	404a08 <__kernel_rem_pio2f+0x234>
  404e24:	2b02      	cmp	r3, #2
  404e26:	d107      	bne.n	404e38 <__kernel_rem_pio2f+0x664>
  404e28:	f108 32ff 	add.w	r2, r8, #4294967295
  404e2c:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  404e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  404e34:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  404e38:	2c02      	cmp	r4, #2
  404e3a:	f47f ae04 	bne.w	404a46 <__kernel_rem_pio2f+0x272>
  404e3e:	4639      	mov	r1, r7
  404e40:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404e44:	f000 fea6 	bl	405b94 <__aeabi_fsub>
  404e48:	4607      	mov	r7, r0
  404e4a:	2e00      	cmp	r6, #0
  404e4c:	f43f adfb 	beq.w	404a46 <__kernel_rem_pio2f+0x272>
  404e50:	e5ee      	b.n	404a30 <__kernel_rem_pio2f+0x25c>
  404e52:	3301      	adds	r3, #1
  404e54:	4598      	cmp	r8, r3
  404e56:	f47f adad 	bne.w	4049b4 <__kernel_rem_pio2f+0x1e0>
  404e5a:	9b04      	ldr	r3, [sp, #16]
  404e5c:	2b00      	cmp	r3, #0
  404e5e:	dcdd      	bgt.n	404e1c <__kernel_rem_pio2f+0x648>
  404e60:	2c02      	cmp	r4, #2
  404e62:	f47f adf0 	bne.w	404a46 <__kernel_rem_pio2f+0x272>
  404e66:	4639      	mov	r1, r7
  404e68:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404e6c:	f000 fe92 	bl	405b94 <__aeabi_fsub>
  404e70:	4607      	mov	r7, r0
  404e72:	e5e8      	b.n	404a46 <__kernel_rem_pio2f+0x272>
  404e74:	2301      	movs	r3, #1
  404e76:	e610      	b.n	404a9a <__kernel_rem_pio2f+0x2c6>
  404e78:	9b07      	ldr	r3, [sp, #28]
  404e7a:	4601      	mov	r1, r0
  404e7c:	6018      	str	r0, [r3, #0]
  404e7e:	9834      	ldr	r0, [sp, #208]	; 0xd0
  404e80:	f000 fe88 	bl	405b94 <__aeabi_fsub>
  404e84:	2f00      	cmp	r7, #0
  404e86:	f73f af7c 	bgt.w	404d82 <__kernel_rem_pio2f+0x5ae>
  404e8a:	9b07      	ldr	r3, [sp, #28]
  404e8c:	6058      	str	r0, [r3, #4]
  404e8e:	e788      	b.n	404da2 <__kernel_rem_pio2f+0x5ce>
  404e90:	4620      	mov	r0, r4
  404e92:	f001 f965 	bl	406160 <__aeabi_f2iz>
  404e96:	4647      	mov	r7, r8
  404e98:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  404e9c:	e69f      	b.n	404bde <__kernel_rem_pio2f+0x40a>
  404e9e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  404ea0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  404ea2:	e74b      	b.n	404d3c <__kernel_rem_pio2f+0x568>
  404ea4:	2000      	movs	r0, #0
  404ea6:	e73d      	b.n	404d24 <__kernel_rem_pio2f+0x550>
  404ea8:	9b66      	ldr	r3, [sp, #408]	; 0x198
  404eaa:	2b03      	cmp	r3, #3
  404eac:	f63f af4a 	bhi.w	404d44 <__kernel_rem_pio2f+0x570>
  404eb0:	a201      	add	r2, pc, #4	; (adr r2, 404eb8 <__kernel_rem_pio2f+0x6e4>)
  404eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404eb6:	bf00      	nop
  404eb8:	00404ecd 	.word	0x00404ecd
  404ebc:	00404ec9 	.word	0x00404ec9
  404ec0:	00404ec9 	.word	0x00404ec9
  404ec4:	00404ea5 	.word	0x00404ea5
  404ec8:	2000      	movs	r0, #0
  404eca:	e74c      	b.n	404d66 <__kernel_rem_pio2f+0x592>
  404ecc:	2000      	movs	r0, #0
  404ece:	e779      	b.n	404dc4 <__kernel_rem_pio2f+0x5f0>
  404ed0:	2101      	movs	r1, #1
  404ed2:	2300      	movs	r3, #0
  404ed4:	e574      	b.n	4049c0 <__kernel_rem_pio2f+0x1ec>
  404ed6:	bf00      	nop
  404ed8:	0040b780 	.word	0x0040b780
  404edc:	3fc90000 	.word	0x3fc90000

00404ee0 <__kernel_sinf>:
  404ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404ee4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  404ee8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
  404eec:	4604      	mov	r4, r0
  404eee:	460f      	mov	r7, r1
  404ef0:	4690      	mov	r8, r2
  404ef2:	da03      	bge.n	404efc <__kernel_sinf+0x1c>
  404ef4:	f001 f934 	bl	406160 <__aeabi_f2iz>
  404ef8:	2800      	cmp	r0, #0
  404efa:	d058      	beq.n	404fae <__kernel_sinf+0xce>
  404efc:	4621      	mov	r1, r4
  404efe:	4620      	mov	r0, r4
  404f00:	f000 ff52 	bl	405da8 <__aeabi_fmul>
  404f04:	4605      	mov	r5, r0
  404f06:	4601      	mov	r1, r0
  404f08:	4620      	mov	r0, r4
  404f0a:	f000 ff4d 	bl	405da8 <__aeabi_fmul>
  404f0e:	4929      	ldr	r1, [pc, #164]	; (404fb4 <__kernel_sinf+0xd4>)
  404f10:	4606      	mov	r6, r0
  404f12:	4628      	mov	r0, r5
  404f14:	f000 ff48 	bl	405da8 <__aeabi_fmul>
  404f18:	4927      	ldr	r1, [pc, #156]	; (404fb8 <__kernel_sinf+0xd8>)
  404f1a:	f000 fe3b 	bl	405b94 <__aeabi_fsub>
  404f1e:	4629      	mov	r1, r5
  404f20:	f000 ff42 	bl	405da8 <__aeabi_fmul>
  404f24:	4925      	ldr	r1, [pc, #148]	; (404fbc <__kernel_sinf+0xdc>)
  404f26:	f000 fe37 	bl	405b98 <__addsf3>
  404f2a:	4629      	mov	r1, r5
  404f2c:	f000 ff3c 	bl	405da8 <__aeabi_fmul>
  404f30:	4923      	ldr	r1, [pc, #140]	; (404fc0 <__kernel_sinf+0xe0>)
  404f32:	f000 fe2f 	bl	405b94 <__aeabi_fsub>
  404f36:	4629      	mov	r1, r5
  404f38:	f000 ff36 	bl	405da8 <__aeabi_fmul>
  404f3c:	4921      	ldr	r1, [pc, #132]	; (404fc4 <__kernel_sinf+0xe4>)
  404f3e:	f000 fe2b 	bl	405b98 <__addsf3>
  404f42:	4681      	mov	r9, r0
  404f44:	f1b8 0f00 	cmp.w	r8, #0
  404f48:	d022      	beq.n	404f90 <__kernel_sinf+0xb0>
  404f4a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404f4e:	4638      	mov	r0, r7
  404f50:	f000 ff2a 	bl	405da8 <__aeabi_fmul>
  404f54:	4649      	mov	r1, r9
  404f56:	4680      	mov	r8, r0
  404f58:	4630      	mov	r0, r6
  404f5a:	f000 ff25 	bl	405da8 <__aeabi_fmul>
  404f5e:	4601      	mov	r1, r0
  404f60:	4640      	mov	r0, r8
  404f62:	f000 fe17 	bl	405b94 <__aeabi_fsub>
  404f66:	4629      	mov	r1, r5
  404f68:	f000 ff1e 	bl	405da8 <__aeabi_fmul>
  404f6c:	4639      	mov	r1, r7
  404f6e:	f000 fe11 	bl	405b94 <__aeabi_fsub>
  404f72:	4915      	ldr	r1, [pc, #84]	; (404fc8 <__kernel_sinf+0xe8>)
  404f74:	4605      	mov	r5, r0
  404f76:	4630      	mov	r0, r6
  404f78:	f000 ff16 	bl	405da8 <__aeabi_fmul>
  404f7c:	4601      	mov	r1, r0
  404f7e:	4628      	mov	r0, r5
  404f80:	f000 fe0a 	bl	405b98 <__addsf3>
  404f84:	4601      	mov	r1, r0
  404f86:	4620      	mov	r0, r4
  404f88:	f000 fe04 	bl	405b94 <__aeabi_fsub>
  404f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404f90:	4601      	mov	r1, r0
  404f92:	4628      	mov	r0, r5
  404f94:	f000 ff08 	bl	405da8 <__aeabi_fmul>
  404f98:	490b      	ldr	r1, [pc, #44]	; (404fc8 <__kernel_sinf+0xe8>)
  404f9a:	f000 fdfb 	bl	405b94 <__aeabi_fsub>
  404f9e:	4631      	mov	r1, r6
  404fa0:	f000 ff02 	bl	405da8 <__aeabi_fmul>
  404fa4:	4621      	mov	r1, r4
  404fa6:	f000 fdf7 	bl	405b98 <__addsf3>
  404faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404fae:	4620      	mov	r0, r4
  404fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404fb4:	2f2ec9d3 	.word	0x2f2ec9d3
  404fb8:	32d72f34 	.word	0x32d72f34
  404fbc:	3638ef1b 	.word	0x3638ef1b
  404fc0:	39500d01 	.word	0x39500d01
  404fc4:	3c088889 	.word	0x3c088889
  404fc8:	3e2aaaab 	.word	0x3e2aaaab

00404fcc <matherr>:
  404fcc:	2000      	movs	r0, #0
  404fce:	4770      	bx	lr

00404fd0 <nan>:
  404fd0:	2000      	movs	r0, #0
  404fd2:	4901      	ldr	r1, [pc, #4]	; (404fd8 <nan+0x8>)
  404fd4:	4770      	bx	lr
  404fd6:	bf00      	nop
  404fd8:	7ff80000 	.word	0x7ff80000

00404fdc <atanf>:
  404fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404fe0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  404fe4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
  404fe8:	4604      	mov	r4, r0
  404fea:	4606      	mov	r6, r0
  404fec:	db08      	blt.n	405000 <atanf+0x24>
  404fee:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  404ff2:	dc6f      	bgt.n	4050d4 <atanf+0xf8>
  404ff4:	2800      	cmp	r0, #0
  404ff6:	f340 80a0 	ble.w	40513a <atanf+0x15e>
  404ffa:	486f      	ldr	r0, [pc, #444]	; (4051b8 <atanf+0x1dc>)
  404ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405000:	4b6e      	ldr	r3, [pc, #440]	; (4051bc <atanf+0x1e0>)
  405002:	429d      	cmp	r5, r3
  405004:	dc77      	bgt.n	4050f6 <atanf+0x11a>
  405006:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
  40500a:	db68      	blt.n	4050de <atanf+0x102>
  40500c:	f04f 37ff 	mov.w	r7, #4294967295
  405010:	4621      	mov	r1, r4
  405012:	4620      	mov	r0, r4
  405014:	f000 fec8 	bl	405da8 <__aeabi_fmul>
  405018:	4601      	mov	r1, r0
  40501a:	4680      	mov	r8, r0
  40501c:	f000 fec4 	bl	405da8 <__aeabi_fmul>
  405020:	4967      	ldr	r1, [pc, #412]	; (4051c0 <atanf+0x1e4>)
  405022:	4605      	mov	r5, r0
  405024:	f000 fec0 	bl	405da8 <__aeabi_fmul>
  405028:	4966      	ldr	r1, [pc, #408]	; (4051c4 <atanf+0x1e8>)
  40502a:	f000 fdb5 	bl	405b98 <__addsf3>
  40502e:	4629      	mov	r1, r5
  405030:	f000 feba 	bl	405da8 <__aeabi_fmul>
  405034:	4964      	ldr	r1, [pc, #400]	; (4051c8 <atanf+0x1ec>)
  405036:	f000 fdaf 	bl	405b98 <__addsf3>
  40503a:	4629      	mov	r1, r5
  40503c:	f000 feb4 	bl	405da8 <__aeabi_fmul>
  405040:	4962      	ldr	r1, [pc, #392]	; (4051cc <atanf+0x1f0>)
  405042:	f000 fda9 	bl	405b98 <__addsf3>
  405046:	4629      	mov	r1, r5
  405048:	f000 feae 	bl	405da8 <__aeabi_fmul>
  40504c:	4960      	ldr	r1, [pc, #384]	; (4051d0 <atanf+0x1f4>)
  40504e:	f000 fda3 	bl	405b98 <__addsf3>
  405052:	4629      	mov	r1, r5
  405054:	f000 fea8 	bl	405da8 <__aeabi_fmul>
  405058:	495e      	ldr	r1, [pc, #376]	; (4051d4 <atanf+0x1f8>)
  40505a:	f000 fd9d 	bl	405b98 <__addsf3>
  40505e:	4641      	mov	r1, r8
  405060:	f000 fea2 	bl	405da8 <__aeabi_fmul>
  405064:	495c      	ldr	r1, [pc, #368]	; (4051d8 <atanf+0x1fc>)
  405066:	4680      	mov	r8, r0
  405068:	4628      	mov	r0, r5
  40506a:	f000 fe9d 	bl	405da8 <__aeabi_fmul>
  40506e:	495b      	ldr	r1, [pc, #364]	; (4051dc <atanf+0x200>)
  405070:	f000 fd90 	bl	405b94 <__aeabi_fsub>
  405074:	4629      	mov	r1, r5
  405076:	f000 fe97 	bl	405da8 <__aeabi_fmul>
  40507a:	4959      	ldr	r1, [pc, #356]	; (4051e0 <atanf+0x204>)
  40507c:	f000 fd8a 	bl	405b94 <__aeabi_fsub>
  405080:	4629      	mov	r1, r5
  405082:	f000 fe91 	bl	405da8 <__aeabi_fmul>
  405086:	4957      	ldr	r1, [pc, #348]	; (4051e4 <atanf+0x208>)
  405088:	f000 fd84 	bl	405b94 <__aeabi_fsub>
  40508c:	4629      	mov	r1, r5
  40508e:	f000 fe8b 	bl	405da8 <__aeabi_fmul>
  405092:	4955      	ldr	r1, [pc, #340]	; (4051e8 <atanf+0x20c>)
  405094:	f000 fd7e 	bl	405b94 <__aeabi_fsub>
  405098:	4629      	mov	r1, r5
  40509a:	f000 fe85 	bl	405da8 <__aeabi_fmul>
  40509e:	1c7b      	adds	r3, r7, #1
  4050a0:	4601      	mov	r1, r0
  4050a2:	4640      	mov	r0, r8
  4050a4:	d04c      	beq.n	405140 <atanf+0x164>
  4050a6:	f000 fd77 	bl	405b98 <__addsf3>
  4050aa:	4621      	mov	r1, r4
  4050ac:	f000 fe7c 	bl	405da8 <__aeabi_fmul>
  4050b0:	4b4e      	ldr	r3, [pc, #312]	; (4051ec <atanf+0x210>)
  4050b2:	4d4f      	ldr	r5, [pc, #316]	; (4051f0 <atanf+0x214>)
  4050b4:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
  4050b8:	f000 fd6c 	bl	405b94 <__aeabi_fsub>
  4050bc:	4621      	mov	r1, r4
  4050be:	f000 fd69 	bl	405b94 <__aeabi_fsub>
  4050c2:	4601      	mov	r1, r0
  4050c4:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
  4050c8:	f000 fd64 	bl	405b94 <__aeabi_fsub>
  4050cc:	2e00      	cmp	r6, #0
  4050ce:	db30      	blt.n	405132 <atanf+0x156>
  4050d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050d4:	4601      	mov	r1, r0
  4050d6:	f000 fd5f 	bl	405b98 <__addsf3>
  4050da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050de:	4945      	ldr	r1, [pc, #276]	; (4051f4 <atanf+0x218>)
  4050e0:	f000 fd5a 	bl	405b98 <__addsf3>
  4050e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4050e8:	f001 f81a 	bl	406120 <__aeabi_fcmpgt>
  4050ec:	2800      	cmp	r0, #0
  4050ee:	d08d      	beq.n	40500c <atanf+0x30>
  4050f0:	4620      	mov	r0, r4
  4050f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050f6:	f000 f887 	bl	405208 <fabsf>
  4050fa:	4b3f      	ldr	r3, [pc, #252]	; (4051f8 <atanf+0x21c>)
  4050fc:	429d      	cmp	r5, r3
  4050fe:	4604      	mov	r4, r0
  405100:	dc29      	bgt.n	405156 <atanf+0x17a>
  405102:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
  405106:	429d      	cmp	r5, r3
  405108:	dc44      	bgt.n	405194 <atanf+0x1b8>
  40510a:	4601      	mov	r1, r0
  40510c:	f000 fd44 	bl	405b98 <__addsf3>
  405110:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405114:	f000 fd3e 	bl	405b94 <__aeabi_fsub>
  405118:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40511c:	4605      	mov	r5, r0
  40511e:	4620      	mov	r0, r4
  405120:	f000 fd3a 	bl	405b98 <__addsf3>
  405124:	4601      	mov	r1, r0
  405126:	4628      	mov	r0, r5
  405128:	f000 fef2 	bl	405f10 <__aeabi_fdiv>
  40512c:	2700      	movs	r7, #0
  40512e:	4604      	mov	r4, r0
  405130:	e76e      	b.n	405010 <atanf+0x34>
  405132:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40513a:	4830      	ldr	r0, [pc, #192]	; (4051fc <atanf+0x220>)
  40513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405140:	f000 fd2a 	bl	405b98 <__addsf3>
  405144:	4621      	mov	r1, r4
  405146:	f000 fe2f 	bl	405da8 <__aeabi_fmul>
  40514a:	4601      	mov	r1, r0
  40514c:	4620      	mov	r0, r4
  40514e:	f000 fd21 	bl	405b94 <__aeabi_fsub>
  405152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405156:	4b2a      	ldr	r3, [pc, #168]	; (405200 <atanf+0x224>)
  405158:	429d      	cmp	r5, r3
  40515a:	dc14      	bgt.n	405186 <atanf+0x1aa>
  40515c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405160:	f000 fd18 	bl	405b94 <__aeabi_fsub>
  405164:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405168:	4605      	mov	r5, r0
  40516a:	4620      	mov	r0, r4
  40516c:	f000 fe1c 	bl	405da8 <__aeabi_fmul>
  405170:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405174:	f000 fd10 	bl	405b98 <__addsf3>
  405178:	4601      	mov	r1, r0
  40517a:	4628      	mov	r0, r5
  40517c:	f000 fec8 	bl	405f10 <__aeabi_fdiv>
  405180:	2702      	movs	r7, #2
  405182:	4604      	mov	r4, r0
  405184:	e744      	b.n	405010 <atanf+0x34>
  405186:	4601      	mov	r1, r0
  405188:	481e      	ldr	r0, [pc, #120]	; (405204 <atanf+0x228>)
  40518a:	f000 fec1 	bl	405f10 <__aeabi_fdiv>
  40518e:	2703      	movs	r7, #3
  405190:	4604      	mov	r4, r0
  405192:	e73d      	b.n	405010 <atanf+0x34>
  405194:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405198:	f000 fcfc 	bl	405b94 <__aeabi_fsub>
  40519c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4051a0:	4605      	mov	r5, r0
  4051a2:	4620      	mov	r0, r4
  4051a4:	f000 fcf8 	bl	405b98 <__addsf3>
  4051a8:	4601      	mov	r1, r0
  4051aa:	4628      	mov	r0, r5
  4051ac:	f000 feb0 	bl	405f10 <__aeabi_fdiv>
  4051b0:	2701      	movs	r7, #1
  4051b2:	4604      	mov	r4, r0
  4051b4:	e72c      	b.n	405010 <atanf+0x34>
  4051b6:	bf00      	nop
  4051b8:	3fc90fdb 	.word	0x3fc90fdb
  4051bc:	3edfffff 	.word	0x3edfffff
  4051c0:	3c8569d7 	.word	0x3c8569d7
  4051c4:	3d4bda59 	.word	0x3d4bda59
  4051c8:	3d886b35 	.word	0x3d886b35
  4051cc:	3dba2e6e 	.word	0x3dba2e6e
  4051d0:	3e124925 	.word	0x3e124925
  4051d4:	3eaaaaab 	.word	0x3eaaaaab
  4051d8:	bd15a221 	.word	0xbd15a221
  4051dc:	3d6ef16b 	.word	0x3d6ef16b
  4051e0:	3d9d8795 	.word	0x3d9d8795
  4051e4:	3de38e38 	.word	0x3de38e38
  4051e8:	3e4ccccd 	.word	0x3e4ccccd
  4051ec:	0040b7c8 	.word	0x0040b7c8
  4051f0:	0040b7b8 	.word	0x0040b7b8
  4051f4:	7149f2ca 	.word	0x7149f2ca
  4051f8:	3f97ffff 	.word	0x3f97ffff
  4051fc:	bfc90fdb 	.word	0xbfc90fdb
  405200:	401bffff 	.word	0x401bffff
  405204:	bf800000 	.word	0xbf800000

00405208 <fabsf>:
  405208:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  40520c:	4770      	bx	lr
  40520e:	bf00      	nop

00405210 <floorf>:
  405210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405214:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
  405218:	0dfc      	lsrs	r4, r7, #23
  40521a:	3c7f      	subs	r4, #127	; 0x7f
  40521c:	2c16      	cmp	r4, #22
  40521e:	4605      	mov	r5, r0
  405220:	dc13      	bgt.n	40524a <floorf+0x3a>
  405222:	2c00      	cmp	r4, #0
  405224:	4680      	mov	r8, r0
  405226:	db1b      	blt.n	405260 <floorf+0x50>
  405228:	4f19      	ldr	r7, [pc, #100]	; (405290 <floorf+0x80>)
  40522a:	4127      	asrs	r7, r4
  40522c:	4238      	tst	r0, r7
  40522e:	d014      	beq.n	40525a <floorf+0x4a>
  405230:	4918      	ldr	r1, [pc, #96]	; (405294 <floorf+0x84>)
  405232:	f000 fcb1 	bl	405b98 <__addsf3>
  405236:	2100      	movs	r1, #0
  405238:	f000 ff72 	bl	406120 <__aeabi_fcmpgt>
  40523c:	b168      	cbz	r0, 40525a <floorf+0x4a>
  40523e:	2d00      	cmp	r5, #0
  405240:	db1b      	blt.n	40527a <floorf+0x6a>
  405242:	ea28 0007 	bic.w	r0, r8, r7
  405246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40524a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
  40524e:	d304      	bcc.n	40525a <floorf+0x4a>
  405250:	4601      	mov	r1, r0
  405252:	f000 fca1 	bl	405b98 <__addsf3>
  405256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40525a:	4628      	mov	r0, r5
  40525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405260:	490c      	ldr	r1, [pc, #48]	; (405294 <floorf+0x84>)
  405262:	f000 fc99 	bl	405b98 <__addsf3>
  405266:	2100      	movs	r1, #0
  405268:	f000 ff5a 	bl	406120 <__aeabi_fcmpgt>
  40526c:	2800      	cmp	r0, #0
  40526e:	d0f4      	beq.n	40525a <floorf+0x4a>
  405270:	2d00      	cmp	r5, #0
  405272:	db08      	blt.n	405286 <floorf+0x76>
  405274:	2000      	movs	r0, #0
  405276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40527a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40527e:	fa43 f404 	asr.w	r4, r3, r4
  405282:	44a0      	add	r8, r4
  405284:	e7dd      	b.n	405242 <floorf+0x32>
  405286:	2f00      	cmp	r7, #0
  405288:	d0e7      	beq.n	40525a <floorf+0x4a>
  40528a:	4803      	ldr	r0, [pc, #12]	; (405298 <floorf+0x88>)
  40528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405290:	007fffff 	.word	0x007fffff
  405294:	7149f2ca 	.word	0x7149f2ca
  405298:	bf800000 	.word	0xbf800000

0040529c <scalbnf>:
  40529c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  4052a0:	b538      	push	{r3, r4, r5, lr}
  4052a2:	4603      	mov	r3, r0
  4052a4:	d016      	beq.n	4052d4 <scalbnf+0x38>
  4052a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  4052aa:	d20f      	bcs.n	4052cc <scalbnf+0x30>
  4052ac:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  4052b0:	460d      	mov	r5, r1
  4052b2:	d310      	bcc.n	4052d6 <scalbnf+0x3a>
  4052b4:	4604      	mov	r4, r0
  4052b6:	0dd0      	lsrs	r0, r2, #23
  4052b8:	4428      	add	r0, r5
  4052ba:	28fe      	cmp	r0, #254	; 0xfe
  4052bc:	dc2e      	bgt.n	40531c <scalbnf+0x80>
  4052be:	2800      	cmp	r0, #0
  4052c0:	dd1d      	ble.n	4052fe <scalbnf+0x62>
  4052c2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  4052c6:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  4052ca:	bd38      	pop	{r3, r4, r5, pc}
  4052cc:	4601      	mov	r1, r0
  4052ce:	f000 fc63 	bl	405b98 <__addsf3>
  4052d2:	bd38      	pop	{r3, r4, r5, pc}
  4052d4:	bd38      	pop	{r3, r4, r5, pc}
  4052d6:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
  4052da:	f000 fd65 	bl	405da8 <__aeabi_fmul>
  4052de:	4a18      	ldr	r2, [pc, #96]	; (405340 <scalbnf+0xa4>)
  4052e0:	4295      	cmp	r5, r2
  4052e2:	4603      	mov	r3, r0
  4052e4:	db07      	blt.n	4052f6 <scalbnf+0x5a>
  4052e6:	4604      	mov	r4, r0
  4052e8:	f3c0 50c7 	ubfx	r0, r0, #23, #8
  4052ec:	3819      	subs	r0, #25
  4052ee:	e7e3      	b.n	4052b8 <scalbnf+0x1c>
  4052f0:	4814      	ldr	r0, [pc, #80]	; (405344 <scalbnf+0xa8>)
  4052f2:	f000 f82b 	bl	40534c <copysignf>
  4052f6:	4913      	ldr	r1, [pc, #76]	; (405344 <scalbnf+0xa8>)
  4052f8:	f000 fd56 	bl	405da8 <__aeabi_fmul>
  4052fc:	bd38      	pop	{r3, r4, r5, pc}
  4052fe:	f110 0f16 	cmn.w	r0, #22
  405302:	da13      	bge.n	40532c <scalbnf+0x90>
  405304:	f24c 3250 	movw	r2, #50000	; 0xc350
  405308:	4295      	cmp	r5, r2
  40530a:	4619      	mov	r1, r3
  40530c:	ddf0      	ble.n	4052f0 <scalbnf+0x54>
  40530e:	480e      	ldr	r0, [pc, #56]	; (405348 <scalbnf+0xac>)
  405310:	f000 f81c 	bl	40534c <copysignf>
  405314:	490c      	ldr	r1, [pc, #48]	; (405348 <scalbnf+0xac>)
  405316:	f000 fd47 	bl	405da8 <__aeabi_fmul>
  40531a:	bd38      	pop	{r3, r4, r5, pc}
  40531c:	4619      	mov	r1, r3
  40531e:	480a      	ldr	r0, [pc, #40]	; (405348 <scalbnf+0xac>)
  405320:	f000 f814 	bl	40534c <copysignf>
  405324:	4908      	ldr	r1, [pc, #32]	; (405348 <scalbnf+0xac>)
  405326:	f000 fd3f 	bl	405da8 <__aeabi_fmul>
  40532a:	bd38      	pop	{r3, r4, r5, pc}
  40532c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  405330:	3019      	adds	r0, #25
  405332:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  405336:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
  40533a:	f000 fd35 	bl	405da8 <__aeabi_fmul>
  40533e:	bd38      	pop	{r3, r4, r5, pc}
  405340:	ffff3cb0 	.word	0xffff3cb0
  405344:	0da24260 	.word	0x0da24260
  405348:	7149f2ca 	.word	0x7149f2ca

0040534c <copysignf>:
  40534c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405350:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405354:	4308      	orrs	r0, r1
  405356:	4770      	bx	lr

00405358 <__aeabi_drsub>:
  405358:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40535c:	e002      	b.n	405364 <__adddf3>
  40535e:	bf00      	nop

00405360 <__aeabi_dsub>:
  405360:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405364 <__adddf3>:
  405364:	b530      	push	{r4, r5, lr}
  405366:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40536a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40536e:	ea94 0f05 	teq	r4, r5
  405372:	bf08      	it	eq
  405374:	ea90 0f02 	teqeq	r0, r2
  405378:	bf1f      	itttt	ne
  40537a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40537e:	ea55 0c02 	orrsne.w	ip, r5, r2
  405382:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405386:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40538a:	f000 80e2 	beq.w	405552 <__adddf3+0x1ee>
  40538e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405392:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405396:	bfb8      	it	lt
  405398:	426d      	neglt	r5, r5
  40539a:	dd0c      	ble.n	4053b6 <__adddf3+0x52>
  40539c:	442c      	add	r4, r5
  40539e:	ea80 0202 	eor.w	r2, r0, r2
  4053a2:	ea81 0303 	eor.w	r3, r1, r3
  4053a6:	ea82 0000 	eor.w	r0, r2, r0
  4053aa:	ea83 0101 	eor.w	r1, r3, r1
  4053ae:	ea80 0202 	eor.w	r2, r0, r2
  4053b2:	ea81 0303 	eor.w	r3, r1, r3
  4053b6:	2d36      	cmp	r5, #54	; 0x36
  4053b8:	bf88      	it	hi
  4053ba:	bd30      	pophi	{r4, r5, pc}
  4053bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4053c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4053c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4053c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4053cc:	d002      	beq.n	4053d4 <__adddf3+0x70>
  4053ce:	4240      	negs	r0, r0
  4053d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4053d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4053d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4053dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4053e0:	d002      	beq.n	4053e8 <__adddf3+0x84>
  4053e2:	4252      	negs	r2, r2
  4053e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4053e8:	ea94 0f05 	teq	r4, r5
  4053ec:	f000 80a7 	beq.w	40553e <__adddf3+0x1da>
  4053f0:	f1a4 0401 	sub.w	r4, r4, #1
  4053f4:	f1d5 0e20 	rsbs	lr, r5, #32
  4053f8:	db0d      	blt.n	405416 <__adddf3+0xb2>
  4053fa:	fa02 fc0e 	lsl.w	ip, r2, lr
  4053fe:	fa22 f205 	lsr.w	r2, r2, r5
  405402:	1880      	adds	r0, r0, r2
  405404:	f141 0100 	adc.w	r1, r1, #0
  405408:	fa03 f20e 	lsl.w	r2, r3, lr
  40540c:	1880      	adds	r0, r0, r2
  40540e:	fa43 f305 	asr.w	r3, r3, r5
  405412:	4159      	adcs	r1, r3
  405414:	e00e      	b.n	405434 <__adddf3+0xd0>
  405416:	f1a5 0520 	sub.w	r5, r5, #32
  40541a:	f10e 0e20 	add.w	lr, lr, #32
  40541e:	2a01      	cmp	r2, #1
  405420:	fa03 fc0e 	lsl.w	ip, r3, lr
  405424:	bf28      	it	cs
  405426:	f04c 0c02 	orrcs.w	ip, ip, #2
  40542a:	fa43 f305 	asr.w	r3, r3, r5
  40542e:	18c0      	adds	r0, r0, r3
  405430:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405438:	d507      	bpl.n	40544a <__adddf3+0xe6>
  40543a:	f04f 0e00 	mov.w	lr, #0
  40543e:	f1dc 0c00 	rsbs	ip, ip, #0
  405442:	eb7e 0000 	sbcs.w	r0, lr, r0
  405446:	eb6e 0101 	sbc.w	r1, lr, r1
  40544a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40544e:	d31b      	bcc.n	405488 <__adddf3+0x124>
  405450:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405454:	d30c      	bcc.n	405470 <__adddf3+0x10c>
  405456:	0849      	lsrs	r1, r1, #1
  405458:	ea5f 0030 	movs.w	r0, r0, rrx
  40545c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405460:	f104 0401 	add.w	r4, r4, #1
  405464:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405468:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40546c:	f080 809a 	bcs.w	4055a4 <__adddf3+0x240>
  405470:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405474:	bf08      	it	eq
  405476:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40547a:	f150 0000 	adcs.w	r0, r0, #0
  40547e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405482:	ea41 0105 	orr.w	r1, r1, r5
  405486:	bd30      	pop	{r4, r5, pc}
  405488:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40548c:	4140      	adcs	r0, r0
  40548e:	eb41 0101 	adc.w	r1, r1, r1
  405492:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405496:	f1a4 0401 	sub.w	r4, r4, #1
  40549a:	d1e9      	bne.n	405470 <__adddf3+0x10c>
  40549c:	f091 0f00 	teq	r1, #0
  4054a0:	bf04      	itt	eq
  4054a2:	4601      	moveq	r1, r0
  4054a4:	2000      	moveq	r0, #0
  4054a6:	fab1 f381 	clz	r3, r1
  4054aa:	bf08      	it	eq
  4054ac:	3320      	addeq	r3, #32
  4054ae:	f1a3 030b 	sub.w	r3, r3, #11
  4054b2:	f1b3 0220 	subs.w	r2, r3, #32
  4054b6:	da0c      	bge.n	4054d2 <__adddf3+0x16e>
  4054b8:	320c      	adds	r2, #12
  4054ba:	dd08      	ble.n	4054ce <__adddf3+0x16a>
  4054bc:	f102 0c14 	add.w	ip, r2, #20
  4054c0:	f1c2 020c 	rsb	r2, r2, #12
  4054c4:	fa01 f00c 	lsl.w	r0, r1, ip
  4054c8:	fa21 f102 	lsr.w	r1, r1, r2
  4054cc:	e00c      	b.n	4054e8 <__adddf3+0x184>
  4054ce:	f102 0214 	add.w	r2, r2, #20
  4054d2:	bfd8      	it	le
  4054d4:	f1c2 0c20 	rsble	ip, r2, #32
  4054d8:	fa01 f102 	lsl.w	r1, r1, r2
  4054dc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4054e0:	bfdc      	itt	le
  4054e2:	ea41 010c 	orrle.w	r1, r1, ip
  4054e6:	4090      	lslle	r0, r2
  4054e8:	1ae4      	subs	r4, r4, r3
  4054ea:	bfa2      	ittt	ge
  4054ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4054f0:	4329      	orrge	r1, r5
  4054f2:	bd30      	popge	{r4, r5, pc}
  4054f4:	ea6f 0404 	mvn.w	r4, r4
  4054f8:	3c1f      	subs	r4, #31
  4054fa:	da1c      	bge.n	405536 <__adddf3+0x1d2>
  4054fc:	340c      	adds	r4, #12
  4054fe:	dc0e      	bgt.n	40551e <__adddf3+0x1ba>
  405500:	f104 0414 	add.w	r4, r4, #20
  405504:	f1c4 0220 	rsb	r2, r4, #32
  405508:	fa20 f004 	lsr.w	r0, r0, r4
  40550c:	fa01 f302 	lsl.w	r3, r1, r2
  405510:	ea40 0003 	orr.w	r0, r0, r3
  405514:	fa21 f304 	lsr.w	r3, r1, r4
  405518:	ea45 0103 	orr.w	r1, r5, r3
  40551c:	bd30      	pop	{r4, r5, pc}
  40551e:	f1c4 040c 	rsb	r4, r4, #12
  405522:	f1c4 0220 	rsb	r2, r4, #32
  405526:	fa20 f002 	lsr.w	r0, r0, r2
  40552a:	fa01 f304 	lsl.w	r3, r1, r4
  40552e:	ea40 0003 	orr.w	r0, r0, r3
  405532:	4629      	mov	r1, r5
  405534:	bd30      	pop	{r4, r5, pc}
  405536:	fa21 f004 	lsr.w	r0, r1, r4
  40553a:	4629      	mov	r1, r5
  40553c:	bd30      	pop	{r4, r5, pc}
  40553e:	f094 0f00 	teq	r4, #0
  405542:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405546:	bf06      	itte	eq
  405548:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40554c:	3401      	addeq	r4, #1
  40554e:	3d01      	subne	r5, #1
  405550:	e74e      	b.n	4053f0 <__adddf3+0x8c>
  405552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405556:	bf18      	it	ne
  405558:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40555c:	d029      	beq.n	4055b2 <__adddf3+0x24e>
  40555e:	ea94 0f05 	teq	r4, r5
  405562:	bf08      	it	eq
  405564:	ea90 0f02 	teqeq	r0, r2
  405568:	d005      	beq.n	405576 <__adddf3+0x212>
  40556a:	ea54 0c00 	orrs.w	ip, r4, r0
  40556e:	bf04      	itt	eq
  405570:	4619      	moveq	r1, r3
  405572:	4610      	moveq	r0, r2
  405574:	bd30      	pop	{r4, r5, pc}
  405576:	ea91 0f03 	teq	r1, r3
  40557a:	bf1e      	ittt	ne
  40557c:	2100      	movne	r1, #0
  40557e:	2000      	movne	r0, #0
  405580:	bd30      	popne	{r4, r5, pc}
  405582:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405586:	d105      	bne.n	405594 <__adddf3+0x230>
  405588:	0040      	lsls	r0, r0, #1
  40558a:	4149      	adcs	r1, r1
  40558c:	bf28      	it	cs
  40558e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405592:	bd30      	pop	{r4, r5, pc}
  405594:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405598:	bf3c      	itt	cc
  40559a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40559e:	bd30      	popcc	{r4, r5, pc}
  4055a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4055a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4055a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4055ac:	f04f 0000 	mov.w	r0, #0
  4055b0:	bd30      	pop	{r4, r5, pc}
  4055b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4055b6:	bf1a      	itte	ne
  4055b8:	4619      	movne	r1, r3
  4055ba:	4610      	movne	r0, r2
  4055bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4055c0:	bf1c      	itt	ne
  4055c2:	460b      	movne	r3, r1
  4055c4:	4602      	movne	r2, r0
  4055c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4055ca:	bf06      	itte	eq
  4055cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4055d0:	ea91 0f03 	teqeq	r1, r3
  4055d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4055d8:	bd30      	pop	{r4, r5, pc}
  4055da:	bf00      	nop

004055dc <__aeabi_ui2d>:
  4055dc:	f090 0f00 	teq	r0, #0
  4055e0:	bf04      	itt	eq
  4055e2:	2100      	moveq	r1, #0
  4055e4:	4770      	bxeq	lr
  4055e6:	b530      	push	{r4, r5, lr}
  4055e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4055ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4055f0:	f04f 0500 	mov.w	r5, #0
  4055f4:	f04f 0100 	mov.w	r1, #0
  4055f8:	e750      	b.n	40549c <__adddf3+0x138>
  4055fa:	bf00      	nop

004055fc <__aeabi_i2d>:
  4055fc:	f090 0f00 	teq	r0, #0
  405600:	bf04      	itt	eq
  405602:	2100      	moveq	r1, #0
  405604:	4770      	bxeq	lr
  405606:	b530      	push	{r4, r5, lr}
  405608:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40560c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405610:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405614:	bf48      	it	mi
  405616:	4240      	negmi	r0, r0
  405618:	f04f 0100 	mov.w	r1, #0
  40561c:	e73e      	b.n	40549c <__adddf3+0x138>
  40561e:	bf00      	nop

00405620 <__aeabi_f2d>:
  405620:	0042      	lsls	r2, r0, #1
  405622:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405626:	ea4f 0131 	mov.w	r1, r1, rrx
  40562a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40562e:	bf1f      	itttt	ne
  405630:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405634:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405638:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40563c:	4770      	bxne	lr
  40563e:	f092 0f00 	teq	r2, #0
  405642:	bf14      	ite	ne
  405644:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405648:	4770      	bxeq	lr
  40564a:	b530      	push	{r4, r5, lr}
  40564c:	f44f 7460 	mov.w	r4, #896	; 0x380
  405650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405658:	e720      	b.n	40549c <__adddf3+0x138>
  40565a:	bf00      	nop

0040565c <__aeabi_ul2d>:
  40565c:	ea50 0201 	orrs.w	r2, r0, r1
  405660:	bf08      	it	eq
  405662:	4770      	bxeq	lr
  405664:	b530      	push	{r4, r5, lr}
  405666:	f04f 0500 	mov.w	r5, #0
  40566a:	e00a      	b.n	405682 <__aeabi_l2d+0x16>

0040566c <__aeabi_l2d>:
  40566c:	ea50 0201 	orrs.w	r2, r0, r1
  405670:	bf08      	it	eq
  405672:	4770      	bxeq	lr
  405674:	b530      	push	{r4, r5, lr}
  405676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40567a:	d502      	bpl.n	405682 <__aeabi_l2d+0x16>
  40567c:	4240      	negs	r0, r0
  40567e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405682:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405686:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40568a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40568e:	f43f aedc 	beq.w	40544a <__adddf3+0xe6>
  405692:	f04f 0203 	mov.w	r2, #3
  405696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40569a:	bf18      	it	ne
  40569c:	3203      	addne	r2, #3
  40569e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4056a2:	bf18      	it	ne
  4056a4:	3203      	addne	r2, #3
  4056a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4056aa:	f1c2 0320 	rsb	r3, r2, #32
  4056ae:	fa00 fc03 	lsl.w	ip, r0, r3
  4056b2:	fa20 f002 	lsr.w	r0, r0, r2
  4056b6:	fa01 fe03 	lsl.w	lr, r1, r3
  4056ba:	ea40 000e 	orr.w	r0, r0, lr
  4056be:	fa21 f102 	lsr.w	r1, r1, r2
  4056c2:	4414      	add	r4, r2
  4056c4:	e6c1      	b.n	40544a <__adddf3+0xe6>
  4056c6:	bf00      	nop

004056c8 <__aeabi_dmul>:
  4056c8:	b570      	push	{r4, r5, r6, lr}
  4056ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4056ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4056d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4056d6:	bf1d      	ittte	ne
  4056d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4056dc:	ea94 0f0c 	teqne	r4, ip
  4056e0:	ea95 0f0c 	teqne	r5, ip
  4056e4:	f000 f8de 	bleq	4058a4 <__aeabi_dmul+0x1dc>
  4056e8:	442c      	add	r4, r5
  4056ea:	ea81 0603 	eor.w	r6, r1, r3
  4056ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4056f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4056f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4056fa:	bf18      	it	ne
  4056fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405708:	d038      	beq.n	40577c <__aeabi_dmul+0xb4>
  40570a:	fba0 ce02 	umull	ip, lr, r0, r2
  40570e:	f04f 0500 	mov.w	r5, #0
  405712:	fbe1 e502 	umlal	lr, r5, r1, r2
  405716:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40571a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40571e:	f04f 0600 	mov.w	r6, #0
  405722:	fbe1 5603 	umlal	r5, r6, r1, r3
  405726:	f09c 0f00 	teq	ip, #0
  40572a:	bf18      	it	ne
  40572c:	f04e 0e01 	orrne.w	lr, lr, #1
  405730:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405734:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405738:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40573c:	d204      	bcs.n	405748 <__aeabi_dmul+0x80>
  40573e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405742:	416d      	adcs	r5, r5
  405744:	eb46 0606 	adc.w	r6, r6, r6
  405748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40574c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40575c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405760:	bf88      	it	hi
  405762:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405766:	d81e      	bhi.n	4057a6 <__aeabi_dmul+0xde>
  405768:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40576c:	bf08      	it	eq
  40576e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405772:	f150 0000 	adcs.w	r0, r0, #0
  405776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40577a:	bd70      	pop	{r4, r5, r6, pc}
  40577c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405780:	ea46 0101 	orr.w	r1, r6, r1
  405784:	ea40 0002 	orr.w	r0, r0, r2
  405788:	ea81 0103 	eor.w	r1, r1, r3
  40578c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405790:	bfc2      	ittt	gt
  405792:	ebd4 050c 	rsbsgt	r5, r4, ip
  405796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40579a:	bd70      	popgt	{r4, r5, r6, pc}
  40579c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4057a0:	f04f 0e00 	mov.w	lr, #0
  4057a4:	3c01      	subs	r4, #1
  4057a6:	f300 80ab 	bgt.w	405900 <__aeabi_dmul+0x238>
  4057aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4057ae:	bfde      	ittt	le
  4057b0:	2000      	movle	r0, #0
  4057b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4057b6:	bd70      	pople	{r4, r5, r6, pc}
  4057b8:	f1c4 0400 	rsb	r4, r4, #0
  4057bc:	3c20      	subs	r4, #32
  4057be:	da35      	bge.n	40582c <__aeabi_dmul+0x164>
  4057c0:	340c      	adds	r4, #12
  4057c2:	dc1b      	bgt.n	4057fc <__aeabi_dmul+0x134>
  4057c4:	f104 0414 	add.w	r4, r4, #20
  4057c8:	f1c4 0520 	rsb	r5, r4, #32
  4057cc:	fa00 f305 	lsl.w	r3, r0, r5
  4057d0:	fa20 f004 	lsr.w	r0, r0, r4
  4057d4:	fa01 f205 	lsl.w	r2, r1, r5
  4057d8:	ea40 0002 	orr.w	r0, r0, r2
  4057dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4057e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4057e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4057e8:	fa21 f604 	lsr.w	r6, r1, r4
  4057ec:	eb42 0106 	adc.w	r1, r2, r6
  4057f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4057f4:	bf08      	it	eq
  4057f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4057fa:	bd70      	pop	{r4, r5, r6, pc}
  4057fc:	f1c4 040c 	rsb	r4, r4, #12
  405800:	f1c4 0520 	rsb	r5, r4, #32
  405804:	fa00 f304 	lsl.w	r3, r0, r4
  405808:	fa20 f005 	lsr.w	r0, r0, r5
  40580c:	fa01 f204 	lsl.w	r2, r1, r4
  405810:	ea40 0002 	orr.w	r0, r0, r2
  405814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40581c:	f141 0100 	adc.w	r1, r1, #0
  405820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405824:	bf08      	it	eq
  405826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40582a:	bd70      	pop	{r4, r5, r6, pc}
  40582c:	f1c4 0520 	rsb	r5, r4, #32
  405830:	fa00 f205 	lsl.w	r2, r0, r5
  405834:	ea4e 0e02 	orr.w	lr, lr, r2
  405838:	fa20 f304 	lsr.w	r3, r0, r4
  40583c:	fa01 f205 	lsl.w	r2, r1, r5
  405840:	ea43 0302 	orr.w	r3, r3, r2
  405844:	fa21 f004 	lsr.w	r0, r1, r4
  405848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40584c:	fa21 f204 	lsr.w	r2, r1, r4
  405850:	ea20 0002 	bic.w	r0, r0, r2
  405854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40585c:	bf08      	it	eq
  40585e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405862:	bd70      	pop	{r4, r5, r6, pc}
  405864:	f094 0f00 	teq	r4, #0
  405868:	d10f      	bne.n	40588a <__aeabi_dmul+0x1c2>
  40586a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40586e:	0040      	lsls	r0, r0, #1
  405870:	eb41 0101 	adc.w	r1, r1, r1
  405874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405878:	bf08      	it	eq
  40587a:	3c01      	subeq	r4, #1
  40587c:	d0f7      	beq.n	40586e <__aeabi_dmul+0x1a6>
  40587e:	ea41 0106 	orr.w	r1, r1, r6
  405882:	f095 0f00 	teq	r5, #0
  405886:	bf18      	it	ne
  405888:	4770      	bxne	lr
  40588a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40588e:	0052      	lsls	r2, r2, #1
  405890:	eb43 0303 	adc.w	r3, r3, r3
  405894:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405898:	bf08      	it	eq
  40589a:	3d01      	subeq	r5, #1
  40589c:	d0f7      	beq.n	40588e <__aeabi_dmul+0x1c6>
  40589e:	ea43 0306 	orr.w	r3, r3, r6
  4058a2:	4770      	bx	lr
  4058a4:	ea94 0f0c 	teq	r4, ip
  4058a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4058ac:	bf18      	it	ne
  4058ae:	ea95 0f0c 	teqne	r5, ip
  4058b2:	d00c      	beq.n	4058ce <__aeabi_dmul+0x206>
  4058b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4058b8:	bf18      	it	ne
  4058ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4058be:	d1d1      	bne.n	405864 <__aeabi_dmul+0x19c>
  4058c0:	ea81 0103 	eor.w	r1, r1, r3
  4058c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4058c8:	f04f 0000 	mov.w	r0, #0
  4058cc:	bd70      	pop	{r4, r5, r6, pc}
  4058ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4058d2:	bf06      	itte	eq
  4058d4:	4610      	moveq	r0, r2
  4058d6:	4619      	moveq	r1, r3
  4058d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4058dc:	d019      	beq.n	405912 <__aeabi_dmul+0x24a>
  4058de:	ea94 0f0c 	teq	r4, ip
  4058e2:	d102      	bne.n	4058ea <__aeabi_dmul+0x222>
  4058e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4058e8:	d113      	bne.n	405912 <__aeabi_dmul+0x24a>
  4058ea:	ea95 0f0c 	teq	r5, ip
  4058ee:	d105      	bne.n	4058fc <__aeabi_dmul+0x234>
  4058f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4058f4:	bf1c      	itt	ne
  4058f6:	4610      	movne	r0, r2
  4058f8:	4619      	movne	r1, r3
  4058fa:	d10a      	bne.n	405912 <__aeabi_dmul+0x24a>
  4058fc:	ea81 0103 	eor.w	r1, r1, r3
  405900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405904:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405908:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40590c:	f04f 0000 	mov.w	r0, #0
  405910:	bd70      	pop	{r4, r5, r6, pc}
  405912:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405916:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40591a:	bd70      	pop	{r4, r5, r6, pc}

0040591c <__aeabi_ddiv>:
  40591c:	b570      	push	{r4, r5, r6, lr}
  40591e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405922:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40592a:	bf1d      	ittte	ne
  40592c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405930:	ea94 0f0c 	teqne	r4, ip
  405934:	ea95 0f0c 	teqne	r5, ip
  405938:	f000 f8a7 	bleq	405a8a <__aeabi_ddiv+0x16e>
  40593c:	eba4 0405 	sub.w	r4, r4, r5
  405940:	ea81 0e03 	eor.w	lr, r1, r3
  405944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405948:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40594c:	f000 8088 	beq.w	405a60 <__aeabi_ddiv+0x144>
  405950:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405954:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40595c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405960:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40596c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405970:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405974:	429d      	cmp	r5, r3
  405976:	bf08      	it	eq
  405978:	4296      	cmpeq	r6, r2
  40597a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40597e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405982:	d202      	bcs.n	40598a <__aeabi_ddiv+0x6e>
  405984:	085b      	lsrs	r3, r3, #1
  405986:	ea4f 0232 	mov.w	r2, r2, rrx
  40598a:	1ab6      	subs	r6, r6, r2
  40598c:	eb65 0503 	sbc.w	r5, r5, r3
  405990:	085b      	lsrs	r3, r3, #1
  405992:	ea4f 0232 	mov.w	r2, r2, rrx
  405996:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40599a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40599e:	ebb6 0e02 	subs.w	lr, r6, r2
  4059a2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4059a6:	bf22      	ittt	cs
  4059a8:	1ab6      	subcs	r6, r6, r2
  4059aa:	4675      	movcs	r5, lr
  4059ac:	ea40 000c 	orrcs.w	r0, r0, ip
  4059b0:	085b      	lsrs	r3, r3, #1
  4059b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4059b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4059ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4059be:	bf22      	ittt	cs
  4059c0:	1ab6      	subcs	r6, r6, r2
  4059c2:	4675      	movcs	r5, lr
  4059c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4059c8:	085b      	lsrs	r3, r3, #1
  4059ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4059ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4059d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4059d6:	bf22      	ittt	cs
  4059d8:	1ab6      	subcs	r6, r6, r2
  4059da:	4675      	movcs	r5, lr
  4059dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4059e0:	085b      	lsrs	r3, r3, #1
  4059e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4059e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4059ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4059ee:	bf22      	ittt	cs
  4059f0:	1ab6      	subcs	r6, r6, r2
  4059f2:	4675      	movcs	r5, lr
  4059f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4059f8:	ea55 0e06 	orrs.w	lr, r5, r6
  4059fc:	d018      	beq.n	405a30 <__aeabi_ddiv+0x114>
  4059fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405a1a:	d1c0      	bne.n	40599e <__aeabi_ddiv+0x82>
  405a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405a20:	d10b      	bne.n	405a3a <__aeabi_ddiv+0x11e>
  405a22:	ea41 0100 	orr.w	r1, r1, r0
  405a26:	f04f 0000 	mov.w	r0, #0
  405a2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405a2e:	e7b6      	b.n	40599e <__aeabi_ddiv+0x82>
  405a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405a34:	bf04      	itt	eq
  405a36:	4301      	orreq	r1, r0
  405a38:	2000      	moveq	r0, #0
  405a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405a3e:	bf88      	it	hi
  405a40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405a44:	f63f aeaf 	bhi.w	4057a6 <__aeabi_dmul+0xde>
  405a48:	ebb5 0c03 	subs.w	ip, r5, r3
  405a4c:	bf04      	itt	eq
  405a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
  405a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405a56:	f150 0000 	adcs.w	r0, r0, #0
  405a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405a5e:	bd70      	pop	{r4, r5, r6, pc}
  405a60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405a6c:	bfc2      	ittt	gt
  405a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
  405a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405a76:	bd70      	popgt	{r4, r5, r6, pc}
  405a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405a7c:	f04f 0e00 	mov.w	lr, #0
  405a80:	3c01      	subs	r4, #1
  405a82:	e690      	b.n	4057a6 <__aeabi_dmul+0xde>
  405a84:	ea45 0e06 	orr.w	lr, r5, r6
  405a88:	e68d      	b.n	4057a6 <__aeabi_dmul+0xde>
  405a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405a8e:	ea94 0f0c 	teq	r4, ip
  405a92:	bf08      	it	eq
  405a94:	ea95 0f0c 	teqeq	r5, ip
  405a98:	f43f af3b 	beq.w	405912 <__aeabi_dmul+0x24a>
  405a9c:	ea94 0f0c 	teq	r4, ip
  405aa0:	d10a      	bne.n	405ab8 <__aeabi_ddiv+0x19c>
  405aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405aa6:	f47f af34 	bne.w	405912 <__aeabi_dmul+0x24a>
  405aaa:	ea95 0f0c 	teq	r5, ip
  405aae:	f47f af25 	bne.w	4058fc <__aeabi_dmul+0x234>
  405ab2:	4610      	mov	r0, r2
  405ab4:	4619      	mov	r1, r3
  405ab6:	e72c      	b.n	405912 <__aeabi_dmul+0x24a>
  405ab8:	ea95 0f0c 	teq	r5, ip
  405abc:	d106      	bne.n	405acc <__aeabi_ddiv+0x1b0>
  405abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405ac2:	f43f aefd 	beq.w	4058c0 <__aeabi_dmul+0x1f8>
  405ac6:	4610      	mov	r0, r2
  405ac8:	4619      	mov	r1, r3
  405aca:	e722      	b.n	405912 <__aeabi_dmul+0x24a>
  405acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405ad0:	bf18      	it	ne
  405ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405ad6:	f47f aec5 	bne.w	405864 <__aeabi_dmul+0x19c>
  405ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405ade:	f47f af0d 	bne.w	4058fc <__aeabi_dmul+0x234>
  405ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405ae6:	f47f aeeb 	bne.w	4058c0 <__aeabi_dmul+0x1f8>
  405aea:	e712      	b.n	405912 <__aeabi_dmul+0x24a>

00405aec <__aeabi_d2f>:
  405aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405af4:	bf24      	itt	cs
  405af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  405afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  405afe:	d90d      	bls.n	405b1c <__aeabi_d2f+0x30>
  405b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  405b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  405b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405b14:	bf08      	it	eq
  405b16:	f020 0001 	biceq.w	r0, r0, #1
  405b1a:	4770      	bx	lr
  405b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405b20:	d121      	bne.n	405b66 <__aeabi_d2f+0x7a>
  405b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405b26:	bfbc      	itt	lt
  405b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  405b2c:	4770      	bxlt	lr
  405b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
  405b36:	f1c2 0218 	rsb	r2, r2, #24
  405b3a:	f1c2 0c20 	rsb	ip, r2, #32
  405b3e:	fa10 f30c 	lsls.w	r3, r0, ip
  405b42:	fa20 f002 	lsr.w	r0, r0, r2
  405b46:	bf18      	it	ne
  405b48:	f040 0001 	orrne.w	r0, r0, #1
  405b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405b54:	fa03 fc0c 	lsl.w	ip, r3, ip
  405b58:	ea40 000c 	orr.w	r0, r0, ip
  405b5c:	fa23 f302 	lsr.w	r3, r3, r2
  405b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405b64:	e7cc      	b.n	405b00 <__aeabi_d2f+0x14>
  405b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
  405b6a:	d107      	bne.n	405b7c <__aeabi_d2f+0x90>
  405b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  405b70:	bf1e      	ittt	ne
  405b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  405b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  405b7a:	4770      	bxne	lr
  405b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  405b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405b88:	4770      	bx	lr
  405b8a:	bf00      	nop

00405b8c <__aeabi_frsub>:
  405b8c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  405b90:	e002      	b.n	405b98 <__addsf3>
  405b92:	bf00      	nop

00405b94 <__aeabi_fsub>:
  405b94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00405b98 <__addsf3>:
  405b98:	0042      	lsls	r2, r0, #1
  405b9a:	bf1f      	itttt	ne
  405b9c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  405ba0:	ea92 0f03 	teqne	r2, r3
  405ba4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  405ba8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405bac:	d06a      	beq.n	405c84 <__addsf3+0xec>
  405bae:	ea4f 6212 	mov.w	r2, r2, lsr #24
  405bb2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  405bb6:	bfc1      	itttt	gt
  405bb8:	18d2      	addgt	r2, r2, r3
  405bba:	4041      	eorgt	r1, r0
  405bbc:	4048      	eorgt	r0, r1
  405bbe:	4041      	eorgt	r1, r0
  405bc0:	bfb8      	it	lt
  405bc2:	425b      	neglt	r3, r3
  405bc4:	2b19      	cmp	r3, #25
  405bc6:	bf88      	it	hi
  405bc8:	4770      	bxhi	lr
  405bca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405bd2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  405bd6:	bf18      	it	ne
  405bd8:	4240      	negne	r0, r0
  405bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405bde:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  405be2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  405be6:	bf18      	it	ne
  405be8:	4249      	negne	r1, r1
  405bea:	ea92 0f03 	teq	r2, r3
  405bee:	d03f      	beq.n	405c70 <__addsf3+0xd8>
  405bf0:	f1a2 0201 	sub.w	r2, r2, #1
  405bf4:	fa41 fc03 	asr.w	ip, r1, r3
  405bf8:	eb10 000c 	adds.w	r0, r0, ip
  405bfc:	f1c3 0320 	rsb	r3, r3, #32
  405c00:	fa01 f103 	lsl.w	r1, r1, r3
  405c04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405c08:	d502      	bpl.n	405c10 <__addsf3+0x78>
  405c0a:	4249      	negs	r1, r1
  405c0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  405c10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405c14:	d313      	bcc.n	405c3e <__addsf3+0xa6>
  405c16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  405c1a:	d306      	bcc.n	405c2a <__addsf3+0x92>
  405c1c:	0840      	lsrs	r0, r0, #1
  405c1e:	ea4f 0131 	mov.w	r1, r1, rrx
  405c22:	f102 0201 	add.w	r2, r2, #1
  405c26:	2afe      	cmp	r2, #254	; 0xfe
  405c28:	d251      	bcs.n	405cce <__addsf3+0x136>
  405c2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  405c2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405c32:	bf08      	it	eq
  405c34:	f020 0001 	biceq.w	r0, r0, #1
  405c38:	ea40 0003 	orr.w	r0, r0, r3
  405c3c:	4770      	bx	lr
  405c3e:	0049      	lsls	r1, r1, #1
  405c40:	eb40 0000 	adc.w	r0, r0, r0
  405c44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  405c48:	f1a2 0201 	sub.w	r2, r2, #1
  405c4c:	d1ed      	bne.n	405c2a <__addsf3+0x92>
  405c4e:	fab0 fc80 	clz	ip, r0
  405c52:	f1ac 0c08 	sub.w	ip, ip, #8
  405c56:	ebb2 020c 	subs.w	r2, r2, ip
  405c5a:	fa00 f00c 	lsl.w	r0, r0, ip
  405c5e:	bfaa      	itet	ge
  405c60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  405c64:	4252      	neglt	r2, r2
  405c66:	4318      	orrge	r0, r3
  405c68:	bfbc      	itt	lt
  405c6a:	40d0      	lsrlt	r0, r2
  405c6c:	4318      	orrlt	r0, r3
  405c6e:	4770      	bx	lr
  405c70:	f092 0f00 	teq	r2, #0
  405c74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  405c78:	bf06      	itte	eq
  405c7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  405c7e:	3201      	addeq	r2, #1
  405c80:	3b01      	subne	r3, #1
  405c82:	e7b5      	b.n	405bf0 <__addsf3+0x58>
  405c84:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405c88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405c8c:	bf18      	it	ne
  405c8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405c92:	d021      	beq.n	405cd8 <__addsf3+0x140>
  405c94:	ea92 0f03 	teq	r2, r3
  405c98:	d004      	beq.n	405ca4 <__addsf3+0x10c>
  405c9a:	f092 0f00 	teq	r2, #0
  405c9e:	bf08      	it	eq
  405ca0:	4608      	moveq	r0, r1
  405ca2:	4770      	bx	lr
  405ca4:	ea90 0f01 	teq	r0, r1
  405ca8:	bf1c      	itt	ne
  405caa:	2000      	movne	r0, #0
  405cac:	4770      	bxne	lr
  405cae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  405cb2:	d104      	bne.n	405cbe <__addsf3+0x126>
  405cb4:	0040      	lsls	r0, r0, #1
  405cb6:	bf28      	it	cs
  405cb8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  405cbc:	4770      	bx	lr
  405cbe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  405cc2:	bf3c      	itt	cc
  405cc4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  405cc8:	4770      	bxcc	lr
  405cca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405cce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  405cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405cd6:	4770      	bx	lr
  405cd8:	ea7f 6222 	mvns.w	r2, r2, asr #24
  405cdc:	bf16      	itet	ne
  405cde:	4608      	movne	r0, r1
  405ce0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  405ce4:	4601      	movne	r1, r0
  405ce6:	0242      	lsls	r2, r0, #9
  405ce8:	bf06      	itte	eq
  405cea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  405cee:	ea90 0f01 	teqeq	r0, r1
  405cf2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  405cf6:	4770      	bx	lr

00405cf8 <__aeabi_ui2f>:
  405cf8:	f04f 0300 	mov.w	r3, #0
  405cfc:	e004      	b.n	405d08 <__aeabi_i2f+0x8>
  405cfe:	bf00      	nop

00405d00 <__aeabi_i2f>:
  405d00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405d04:	bf48      	it	mi
  405d06:	4240      	negmi	r0, r0
  405d08:	ea5f 0c00 	movs.w	ip, r0
  405d0c:	bf08      	it	eq
  405d0e:	4770      	bxeq	lr
  405d10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405d14:	4601      	mov	r1, r0
  405d16:	f04f 0000 	mov.w	r0, #0
  405d1a:	e01c      	b.n	405d56 <__aeabi_l2f+0x2a>

00405d1c <__aeabi_ul2f>:
  405d1c:	ea50 0201 	orrs.w	r2, r0, r1
  405d20:	bf08      	it	eq
  405d22:	4770      	bxeq	lr
  405d24:	f04f 0300 	mov.w	r3, #0
  405d28:	e00a      	b.n	405d40 <__aeabi_l2f+0x14>
  405d2a:	bf00      	nop

00405d2c <__aeabi_l2f>:
  405d2c:	ea50 0201 	orrs.w	r2, r0, r1
  405d30:	bf08      	it	eq
  405d32:	4770      	bxeq	lr
  405d34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  405d38:	d502      	bpl.n	405d40 <__aeabi_l2f+0x14>
  405d3a:	4240      	negs	r0, r0
  405d3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405d40:	ea5f 0c01 	movs.w	ip, r1
  405d44:	bf02      	ittt	eq
  405d46:	4684      	moveq	ip, r0
  405d48:	4601      	moveq	r1, r0
  405d4a:	2000      	moveq	r0, #0
  405d4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  405d50:	bf08      	it	eq
  405d52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  405d56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  405d5a:	fabc f28c 	clz	r2, ip
  405d5e:	3a08      	subs	r2, #8
  405d60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  405d64:	db10      	blt.n	405d88 <__aeabi_l2f+0x5c>
  405d66:	fa01 fc02 	lsl.w	ip, r1, r2
  405d6a:	4463      	add	r3, ip
  405d6c:	fa00 fc02 	lsl.w	ip, r0, r2
  405d70:	f1c2 0220 	rsb	r2, r2, #32
  405d74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405d78:	fa20 f202 	lsr.w	r2, r0, r2
  405d7c:	eb43 0002 	adc.w	r0, r3, r2
  405d80:	bf08      	it	eq
  405d82:	f020 0001 	biceq.w	r0, r0, #1
  405d86:	4770      	bx	lr
  405d88:	f102 0220 	add.w	r2, r2, #32
  405d8c:	fa01 fc02 	lsl.w	ip, r1, r2
  405d90:	f1c2 0220 	rsb	r2, r2, #32
  405d94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  405d98:	fa21 f202 	lsr.w	r2, r1, r2
  405d9c:	eb43 0002 	adc.w	r0, r3, r2
  405da0:	bf08      	it	eq
  405da2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405da6:	4770      	bx	lr

00405da8 <__aeabi_fmul>:
  405da8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405dac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405db0:	bf1e      	ittt	ne
  405db2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405db6:	ea92 0f0c 	teqne	r2, ip
  405dba:	ea93 0f0c 	teqne	r3, ip
  405dbe:	d06f      	beq.n	405ea0 <__aeabi_fmul+0xf8>
  405dc0:	441a      	add	r2, r3
  405dc2:	ea80 0c01 	eor.w	ip, r0, r1
  405dc6:	0240      	lsls	r0, r0, #9
  405dc8:	bf18      	it	ne
  405dca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  405dce:	d01e      	beq.n	405e0e <__aeabi_fmul+0x66>
  405dd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  405dd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  405dd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  405ddc:	fba0 3101 	umull	r3, r1, r0, r1
  405de0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405de4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  405de8:	bf3e      	ittt	cc
  405dea:	0049      	lslcc	r1, r1, #1
  405dec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  405df0:	005b      	lslcc	r3, r3, #1
  405df2:	ea40 0001 	orr.w	r0, r0, r1
  405df6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  405dfa:	2afd      	cmp	r2, #253	; 0xfd
  405dfc:	d81d      	bhi.n	405e3a <__aeabi_fmul+0x92>
  405dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  405e02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405e06:	bf08      	it	eq
  405e08:	f020 0001 	biceq.w	r0, r0, #1
  405e0c:	4770      	bx	lr
  405e0e:	f090 0f00 	teq	r0, #0
  405e12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405e16:	bf08      	it	eq
  405e18:	0249      	lsleq	r1, r1, #9
  405e1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405e1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  405e22:	3a7f      	subs	r2, #127	; 0x7f
  405e24:	bfc2      	ittt	gt
  405e26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405e2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405e2e:	4770      	bxgt	lr
  405e30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405e34:	f04f 0300 	mov.w	r3, #0
  405e38:	3a01      	subs	r2, #1
  405e3a:	dc5d      	bgt.n	405ef8 <__aeabi_fmul+0x150>
  405e3c:	f112 0f19 	cmn.w	r2, #25
  405e40:	bfdc      	itt	le
  405e42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  405e46:	4770      	bxle	lr
  405e48:	f1c2 0200 	rsb	r2, r2, #0
  405e4c:	0041      	lsls	r1, r0, #1
  405e4e:	fa21 f102 	lsr.w	r1, r1, r2
  405e52:	f1c2 0220 	rsb	r2, r2, #32
  405e56:	fa00 fc02 	lsl.w	ip, r0, r2
  405e5a:	ea5f 0031 	movs.w	r0, r1, rrx
  405e5e:	f140 0000 	adc.w	r0, r0, #0
  405e62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  405e66:	bf08      	it	eq
  405e68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405e6c:	4770      	bx	lr
  405e6e:	f092 0f00 	teq	r2, #0
  405e72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405e76:	bf02      	ittt	eq
  405e78:	0040      	lsleq	r0, r0, #1
  405e7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405e7e:	3a01      	subeq	r2, #1
  405e80:	d0f9      	beq.n	405e76 <__aeabi_fmul+0xce>
  405e82:	ea40 000c 	orr.w	r0, r0, ip
  405e86:	f093 0f00 	teq	r3, #0
  405e8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405e8e:	bf02      	ittt	eq
  405e90:	0049      	lsleq	r1, r1, #1
  405e92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405e96:	3b01      	subeq	r3, #1
  405e98:	d0f9      	beq.n	405e8e <__aeabi_fmul+0xe6>
  405e9a:	ea41 010c 	orr.w	r1, r1, ip
  405e9e:	e78f      	b.n	405dc0 <__aeabi_fmul+0x18>
  405ea0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405ea4:	ea92 0f0c 	teq	r2, ip
  405ea8:	bf18      	it	ne
  405eaa:	ea93 0f0c 	teqne	r3, ip
  405eae:	d00a      	beq.n	405ec6 <__aeabi_fmul+0x11e>
  405eb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405eb4:	bf18      	it	ne
  405eb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405eba:	d1d8      	bne.n	405e6e <__aeabi_fmul+0xc6>
  405ebc:	ea80 0001 	eor.w	r0, r0, r1
  405ec0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405ec4:	4770      	bx	lr
  405ec6:	f090 0f00 	teq	r0, #0
  405eca:	bf17      	itett	ne
  405ecc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  405ed0:	4608      	moveq	r0, r1
  405ed2:	f091 0f00 	teqne	r1, #0
  405ed6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  405eda:	d014      	beq.n	405f06 <__aeabi_fmul+0x15e>
  405edc:	ea92 0f0c 	teq	r2, ip
  405ee0:	d101      	bne.n	405ee6 <__aeabi_fmul+0x13e>
  405ee2:	0242      	lsls	r2, r0, #9
  405ee4:	d10f      	bne.n	405f06 <__aeabi_fmul+0x15e>
  405ee6:	ea93 0f0c 	teq	r3, ip
  405eea:	d103      	bne.n	405ef4 <__aeabi_fmul+0x14c>
  405eec:	024b      	lsls	r3, r1, #9
  405eee:	bf18      	it	ne
  405ef0:	4608      	movne	r0, r1
  405ef2:	d108      	bne.n	405f06 <__aeabi_fmul+0x15e>
  405ef4:	ea80 0001 	eor.w	r0, r0, r1
  405ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405efc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405f00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405f04:	4770      	bx	lr
  405f06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405f0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  405f0e:	4770      	bx	lr

00405f10 <__aeabi_fdiv>:
  405f10:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405f14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405f18:	bf1e      	ittt	ne
  405f1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405f1e:	ea92 0f0c 	teqne	r2, ip
  405f22:	ea93 0f0c 	teqne	r3, ip
  405f26:	d069      	beq.n	405ffc <__aeabi_fdiv+0xec>
  405f28:	eba2 0203 	sub.w	r2, r2, r3
  405f2c:	ea80 0c01 	eor.w	ip, r0, r1
  405f30:	0249      	lsls	r1, r1, #9
  405f32:	ea4f 2040 	mov.w	r0, r0, lsl #9
  405f36:	d037      	beq.n	405fa8 <__aeabi_fdiv+0x98>
  405f38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  405f3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  405f40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  405f44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405f48:	428b      	cmp	r3, r1
  405f4a:	bf38      	it	cc
  405f4c:	005b      	lslcc	r3, r3, #1
  405f4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  405f52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  405f56:	428b      	cmp	r3, r1
  405f58:	bf24      	itt	cs
  405f5a:	1a5b      	subcs	r3, r3, r1
  405f5c:	ea40 000c 	orrcs.w	r0, r0, ip
  405f60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405f64:	bf24      	itt	cs
  405f66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  405f6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405f6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  405f72:	bf24      	itt	cs
  405f74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  405f78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405f7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  405f80:	bf24      	itt	cs
  405f82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  405f86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405f8a:	011b      	lsls	r3, r3, #4
  405f8c:	bf18      	it	ne
  405f8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  405f92:	d1e0      	bne.n	405f56 <__aeabi_fdiv+0x46>
  405f94:	2afd      	cmp	r2, #253	; 0xfd
  405f96:	f63f af50 	bhi.w	405e3a <__aeabi_fmul+0x92>
  405f9a:	428b      	cmp	r3, r1
  405f9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405fa0:	bf08      	it	eq
  405fa2:	f020 0001 	biceq.w	r0, r0, #1
  405fa6:	4770      	bx	lr
  405fa8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405fac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405fb0:	327f      	adds	r2, #127	; 0x7f
  405fb2:	bfc2      	ittt	gt
  405fb4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405fb8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405fbc:	4770      	bxgt	lr
  405fbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405fc2:	f04f 0300 	mov.w	r3, #0
  405fc6:	3a01      	subs	r2, #1
  405fc8:	e737      	b.n	405e3a <__aeabi_fmul+0x92>
  405fca:	f092 0f00 	teq	r2, #0
  405fce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405fd2:	bf02      	ittt	eq
  405fd4:	0040      	lsleq	r0, r0, #1
  405fd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405fda:	3a01      	subeq	r2, #1
  405fdc:	d0f9      	beq.n	405fd2 <__aeabi_fdiv+0xc2>
  405fde:	ea40 000c 	orr.w	r0, r0, ip
  405fe2:	f093 0f00 	teq	r3, #0
  405fe6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405fea:	bf02      	ittt	eq
  405fec:	0049      	lsleq	r1, r1, #1
  405fee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405ff2:	3b01      	subeq	r3, #1
  405ff4:	d0f9      	beq.n	405fea <__aeabi_fdiv+0xda>
  405ff6:	ea41 010c 	orr.w	r1, r1, ip
  405ffa:	e795      	b.n	405f28 <__aeabi_fdiv+0x18>
  405ffc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406000:	ea92 0f0c 	teq	r2, ip
  406004:	d108      	bne.n	406018 <__aeabi_fdiv+0x108>
  406006:	0242      	lsls	r2, r0, #9
  406008:	f47f af7d 	bne.w	405f06 <__aeabi_fmul+0x15e>
  40600c:	ea93 0f0c 	teq	r3, ip
  406010:	f47f af70 	bne.w	405ef4 <__aeabi_fmul+0x14c>
  406014:	4608      	mov	r0, r1
  406016:	e776      	b.n	405f06 <__aeabi_fmul+0x15e>
  406018:	ea93 0f0c 	teq	r3, ip
  40601c:	d104      	bne.n	406028 <__aeabi_fdiv+0x118>
  40601e:	024b      	lsls	r3, r1, #9
  406020:	f43f af4c 	beq.w	405ebc <__aeabi_fmul+0x114>
  406024:	4608      	mov	r0, r1
  406026:	e76e      	b.n	405f06 <__aeabi_fmul+0x15e>
  406028:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40602c:	bf18      	it	ne
  40602e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406032:	d1ca      	bne.n	405fca <__aeabi_fdiv+0xba>
  406034:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  406038:	f47f af5c 	bne.w	405ef4 <__aeabi_fmul+0x14c>
  40603c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406040:	f47f af3c 	bne.w	405ebc <__aeabi_fmul+0x114>
  406044:	e75f      	b.n	405f06 <__aeabi_fmul+0x15e>
  406046:	bf00      	nop

00406048 <__gesf2>:
  406048:	f04f 3cff 	mov.w	ip, #4294967295
  40604c:	e006      	b.n	40605c <__cmpsf2+0x4>
  40604e:	bf00      	nop

00406050 <__lesf2>:
  406050:	f04f 0c01 	mov.w	ip, #1
  406054:	e002      	b.n	40605c <__cmpsf2+0x4>
  406056:	bf00      	nop

00406058 <__cmpsf2>:
  406058:	f04f 0c01 	mov.w	ip, #1
  40605c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406060:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406064:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406068:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40606c:	bf18      	it	ne
  40606e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  406072:	d011      	beq.n	406098 <__cmpsf2+0x40>
  406074:	b001      	add	sp, #4
  406076:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  40607a:	bf18      	it	ne
  40607c:	ea90 0f01 	teqne	r0, r1
  406080:	bf58      	it	pl
  406082:	ebb2 0003 	subspl.w	r0, r2, r3
  406086:	bf88      	it	hi
  406088:	17c8      	asrhi	r0, r1, #31
  40608a:	bf38      	it	cc
  40608c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  406090:	bf18      	it	ne
  406092:	f040 0001 	orrne.w	r0, r0, #1
  406096:	4770      	bx	lr
  406098:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40609c:	d102      	bne.n	4060a4 <__cmpsf2+0x4c>
  40609e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  4060a2:	d105      	bne.n	4060b0 <__cmpsf2+0x58>
  4060a4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  4060a8:	d1e4      	bne.n	406074 <__cmpsf2+0x1c>
  4060aa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  4060ae:	d0e1      	beq.n	406074 <__cmpsf2+0x1c>
  4060b0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4060b4:	4770      	bx	lr
  4060b6:	bf00      	nop

004060b8 <__aeabi_cfrcmple>:
  4060b8:	4684      	mov	ip, r0
  4060ba:	4608      	mov	r0, r1
  4060bc:	4661      	mov	r1, ip
  4060be:	e7ff      	b.n	4060c0 <__aeabi_cfcmpeq>

004060c0 <__aeabi_cfcmpeq>:
  4060c0:	b50f      	push	{r0, r1, r2, r3, lr}
  4060c2:	f7ff ffc9 	bl	406058 <__cmpsf2>
  4060c6:	2800      	cmp	r0, #0
  4060c8:	bf48      	it	mi
  4060ca:	f110 0f00 	cmnmi.w	r0, #0
  4060ce:	bd0f      	pop	{r0, r1, r2, r3, pc}

004060d0 <__aeabi_fcmpeq>:
  4060d0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060d4:	f7ff fff4 	bl	4060c0 <__aeabi_cfcmpeq>
  4060d8:	bf0c      	ite	eq
  4060da:	2001      	moveq	r0, #1
  4060dc:	2000      	movne	r0, #0
  4060de:	f85d fb08 	ldr.w	pc, [sp], #8
  4060e2:	bf00      	nop

004060e4 <__aeabi_fcmplt>:
  4060e4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060e8:	f7ff ffea 	bl	4060c0 <__aeabi_cfcmpeq>
  4060ec:	bf34      	ite	cc
  4060ee:	2001      	movcc	r0, #1
  4060f0:	2000      	movcs	r0, #0
  4060f2:	f85d fb08 	ldr.w	pc, [sp], #8
  4060f6:	bf00      	nop

004060f8 <__aeabi_fcmple>:
  4060f8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060fc:	f7ff ffe0 	bl	4060c0 <__aeabi_cfcmpeq>
  406100:	bf94      	ite	ls
  406102:	2001      	movls	r0, #1
  406104:	2000      	movhi	r0, #0
  406106:	f85d fb08 	ldr.w	pc, [sp], #8
  40610a:	bf00      	nop

0040610c <__aeabi_fcmpge>:
  40610c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406110:	f7ff ffd2 	bl	4060b8 <__aeabi_cfrcmple>
  406114:	bf94      	ite	ls
  406116:	2001      	movls	r0, #1
  406118:	2000      	movhi	r0, #0
  40611a:	f85d fb08 	ldr.w	pc, [sp], #8
  40611e:	bf00      	nop

00406120 <__aeabi_fcmpgt>:
  406120:	f84d ed08 	str.w	lr, [sp, #-8]!
  406124:	f7ff ffc8 	bl	4060b8 <__aeabi_cfrcmple>
  406128:	bf34      	ite	cc
  40612a:	2001      	movcc	r0, #1
  40612c:	2000      	movcs	r0, #0
  40612e:	f85d fb08 	ldr.w	pc, [sp], #8
  406132:	bf00      	nop

00406134 <__aeabi_fcmpun>:
  406134:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406138:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40613c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406140:	d102      	bne.n	406148 <__aeabi_fcmpun+0x14>
  406142:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  406146:	d108      	bne.n	40615a <__aeabi_fcmpun+0x26>
  406148:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  40614c:	d102      	bne.n	406154 <__aeabi_fcmpun+0x20>
  40614e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  406152:	d102      	bne.n	40615a <__aeabi_fcmpun+0x26>
  406154:	f04f 0000 	mov.w	r0, #0
  406158:	4770      	bx	lr
  40615a:	f04f 0001 	mov.w	r0, #1
  40615e:	4770      	bx	lr

00406160 <__aeabi_f2iz>:
  406160:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406164:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  406168:	d30f      	bcc.n	40618a <__aeabi_f2iz+0x2a>
  40616a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40616e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  406172:	d90d      	bls.n	406190 <__aeabi_f2iz+0x30>
  406174:	ea4f 2300 	mov.w	r3, r0, lsl #8
  406178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40617c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  406180:	fa23 f002 	lsr.w	r0, r3, r2
  406184:	bf18      	it	ne
  406186:	4240      	negne	r0, r0
  406188:	4770      	bx	lr
  40618a:	f04f 0000 	mov.w	r0, #0
  40618e:	4770      	bx	lr
  406190:	f112 0f61 	cmn.w	r2, #97	; 0x61
  406194:	d101      	bne.n	40619a <__aeabi_f2iz+0x3a>
  406196:	0242      	lsls	r2, r0, #9
  406198:	d105      	bne.n	4061a6 <__aeabi_f2iz+0x46>
  40619a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  40619e:	bf08      	it	eq
  4061a0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4061a4:	4770      	bx	lr
  4061a6:	f04f 0000 	mov.w	r0, #0
  4061aa:	4770      	bx	lr

004061ac <__errno>:
  4061ac:	4b01      	ldr	r3, [pc, #4]	; (4061b4 <__errno+0x8>)
  4061ae:	6818      	ldr	r0, [r3, #0]
  4061b0:	4770      	bx	lr
  4061b2:	bf00      	nop
  4061b4:	20400010 	.word	0x20400010

004061b8 <__libc_init_array>:
  4061b8:	b570      	push	{r4, r5, r6, lr}
  4061ba:	4e0f      	ldr	r6, [pc, #60]	; (4061f8 <__libc_init_array+0x40>)
  4061bc:	4d0f      	ldr	r5, [pc, #60]	; (4061fc <__libc_init_array+0x44>)
  4061be:	1b76      	subs	r6, r6, r5
  4061c0:	10b6      	asrs	r6, r6, #2
  4061c2:	bf18      	it	ne
  4061c4:	2400      	movne	r4, #0
  4061c6:	d005      	beq.n	4061d4 <__libc_init_array+0x1c>
  4061c8:	3401      	adds	r4, #1
  4061ca:	f855 3b04 	ldr.w	r3, [r5], #4
  4061ce:	4798      	blx	r3
  4061d0:	42a6      	cmp	r6, r4
  4061d2:	d1f9      	bne.n	4061c8 <__libc_init_array+0x10>
  4061d4:	4e0a      	ldr	r6, [pc, #40]	; (406200 <__libc_init_array+0x48>)
  4061d6:	4d0b      	ldr	r5, [pc, #44]	; (406204 <__libc_init_array+0x4c>)
  4061d8:	1b76      	subs	r6, r6, r5
  4061da:	f005 fc45 	bl	40ba68 <_init>
  4061de:	10b6      	asrs	r6, r6, #2
  4061e0:	bf18      	it	ne
  4061e2:	2400      	movne	r4, #0
  4061e4:	d006      	beq.n	4061f4 <__libc_init_array+0x3c>
  4061e6:	3401      	adds	r4, #1
  4061e8:	f855 3b04 	ldr.w	r3, [r5], #4
  4061ec:	4798      	blx	r3
  4061ee:	42a6      	cmp	r6, r4
  4061f0:	d1f9      	bne.n	4061e6 <__libc_init_array+0x2e>
  4061f2:	bd70      	pop	{r4, r5, r6, pc}
  4061f4:	bd70      	pop	{r4, r5, r6, pc}
  4061f6:	bf00      	nop
  4061f8:	0040ba74 	.word	0x0040ba74
  4061fc:	0040ba74 	.word	0x0040ba74
  406200:	0040ba7c 	.word	0x0040ba7c
  406204:	0040ba74 	.word	0x0040ba74

00406208 <malloc>:
  406208:	4b02      	ldr	r3, [pc, #8]	; (406214 <malloc+0xc>)
  40620a:	4601      	mov	r1, r0
  40620c:	6818      	ldr	r0, [r3, #0]
  40620e:	f000 b80b 	b.w	406228 <_malloc_r>
  406212:	bf00      	nop
  406214:	20400010 	.word	0x20400010

00406218 <free>:
  406218:	4b02      	ldr	r3, [pc, #8]	; (406224 <free+0xc>)
  40621a:	4601      	mov	r1, r0
  40621c:	6818      	ldr	r0, [r3, #0]
  40621e:	f003 ba37 	b.w	409690 <_free_r>
  406222:	bf00      	nop
  406224:	20400010 	.word	0x20400010

00406228 <_malloc_r>:
  406228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40622c:	f101 060b 	add.w	r6, r1, #11
  406230:	2e16      	cmp	r6, #22
  406232:	b083      	sub	sp, #12
  406234:	4605      	mov	r5, r0
  406236:	f240 809e 	bls.w	406376 <_malloc_r+0x14e>
  40623a:	f036 0607 	bics.w	r6, r6, #7
  40623e:	f100 80bd 	bmi.w	4063bc <_malloc_r+0x194>
  406242:	42b1      	cmp	r1, r6
  406244:	f200 80ba 	bhi.w	4063bc <_malloc_r+0x194>
  406248:	f000 fb86 	bl	406958 <__malloc_lock>
  40624c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406250:	f0c0 8293 	bcc.w	40677a <_malloc_r+0x552>
  406254:	0a73      	lsrs	r3, r6, #9
  406256:	f000 80b8 	beq.w	4063ca <_malloc_r+0x1a2>
  40625a:	2b04      	cmp	r3, #4
  40625c:	f200 8179 	bhi.w	406552 <_malloc_r+0x32a>
  406260:	09b3      	lsrs	r3, r6, #6
  406262:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406266:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40626a:	00c3      	lsls	r3, r0, #3
  40626c:	4fbf      	ldr	r7, [pc, #764]	; (40656c <_malloc_r+0x344>)
  40626e:	443b      	add	r3, r7
  406270:	f1a3 0108 	sub.w	r1, r3, #8
  406274:	685c      	ldr	r4, [r3, #4]
  406276:	42a1      	cmp	r1, r4
  406278:	d106      	bne.n	406288 <_malloc_r+0x60>
  40627a:	e00c      	b.n	406296 <_malloc_r+0x6e>
  40627c:	2a00      	cmp	r2, #0
  40627e:	f280 80aa 	bge.w	4063d6 <_malloc_r+0x1ae>
  406282:	68e4      	ldr	r4, [r4, #12]
  406284:	42a1      	cmp	r1, r4
  406286:	d006      	beq.n	406296 <_malloc_r+0x6e>
  406288:	6863      	ldr	r3, [r4, #4]
  40628a:	f023 0303 	bic.w	r3, r3, #3
  40628e:	1b9a      	subs	r2, r3, r6
  406290:	2a0f      	cmp	r2, #15
  406292:	ddf3      	ble.n	40627c <_malloc_r+0x54>
  406294:	4670      	mov	r0, lr
  406296:	693c      	ldr	r4, [r7, #16]
  406298:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406580 <_malloc_r+0x358>
  40629c:	4574      	cmp	r4, lr
  40629e:	f000 81ab 	beq.w	4065f8 <_malloc_r+0x3d0>
  4062a2:	6863      	ldr	r3, [r4, #4]
  4062a4:	f023 0303 	bic.w	r3, r3, #3
  4062a8:	1b9a      	subs	r2, r3, r6
  4062aa:	2a0f      	cmp	r2, #15
  4062ac:	f300 8190 	bgt.w	4065d0 <_malloc_r+0x3a8>
  4062b0:	2a00      	cmp	r2, #0
  4062b2:	f8c7 e014 	str.w	lr, [r7, #20]
  4062b6:	f8c7 e010 	str.w	lr, [r7, #16]
  4062ba:	f280 809d 	bge.w	4063f8 <_malloc_r+0x1d0>
  4062be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4062c2:	f080 8161 	bcs.w	406588 <_malloc_r+0x360>
  4062c6:	08db      	lsrs	r3, r3, #3
  4062c8:	f103 0c01 	add.w	ip, r3, #1
  4062cc:	1099      	asrs	r1, r3, #2
  4062ce:	687a      	ldr	r2, [r7, #4]
  4062d0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4062d4:	f8c4 8008 	str.w	r8, [r4, #8]
  4062d8:	2301      	movs	r3, #1
  4062da:	408b      	lsls	r3, r1
  4062dc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4062e0:	4313      	orrs	r3, r2
  4062e2:	3908      	subs	r1, #8
  4062e4:	60e1      	str	r1, [r4, #12]
  4062e6:	607b      	str	r3, [r7, #4]
  4062e8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4062ec:	f8c8 400c 	str.w	r4, [r8, #12]
  4062f0:	1082      	asrs	r2, r0, #2
  4062f2:	2401      	movs	r4, #1
  4062f4:	4094      	lsls	r4, r2
  4062f6:	429c      	cmp	r4, r3
  4062f8:	f200 808b 	bhi.w	406412 <_malloc_r+0x1ea>
  4062fc:	421c      	tst	r4, r3
  4062fe:	d106      	bne.n	40630e <_malloc_r+0xe6>
  406300:	f020 0003 	bic.w	r0, r0, #3
  406304:	0064      	lsls	r4, r4, #1
  406306:	421c      	tst	r4, r3
  406308:	f100 0004 	add.w	r0, r0, #4
  40630c:	d0fa      	beq.n	406304 <_malloc_r+0xdc>
  40630e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406312:	46cc      	mov	ip, r9
  406314:	4680      	mov	r8, r0
  406316:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40631a:	459c      	cmp	ip, r3
  40631c:	d107      	bne.n	40632e <_malloc_r+0x106>
  40631e:	e16d      	b.n	4065fc <_malloc_r+0x3d4>
  406320:	2a00      	cmp	r2, #0
  406322:	f280 817b 	bge.w	40661c <_malloc_r+0x3f4>
  406326:	68db      	ldr	r3, [r3, #12]
  406328:	459c      	cmp	ip, r3
  40632a:	f000 8167 	beq.w	4065fc <_malloc_r+0x3d4>
  40632e:	6859      	ldr	r1, [r3, #4]
  406330:	f021 0103 	bic.w	r1, r1, #3
  406334:	1b8a      	subs	r2, r1, r6
  406336:	2a0f      	cmp	r2, #15
  406338:	ddf2      	ble.n	406320 <_malloc_r+0xf8>
  40633a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40633e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406342:	9300      	str	r3, [sp, #0]
  406344:	199c      	adds	r4, r3, r6
  406346:	4628      	mov	r0, r5
  406348:	f046 0601 	orr.w	r6, r6, #1
  40634c:	f042 0501 	orr.w	r5, r2, #1
  406350:	605e      	str	r6, [r3, #4]
  406352:	f8c8 c00c 	str.w	ip, [r8, #12]
  406356:	f8cc 8008 	str.w	r8, [ip, #8]
  40635a:	617c      	str	r4, [r7, #20]
  40635c:	613c      	str	r4, [r7, #16]
  40635e:	f8c4 e00c 	str.w	lr, [r4, #12]
  406362:	f8c4 e008 	str.w	lr, [r4, #8]
  406366:	6065      	str	r5, [r4, #4]
  406368:	505a      	str	r2, [r3, r1]
  40636a:	f000 fafb 	bl	406964 <__malloc_unlock>
  40636e:	9b00      	ldr	r3, [sp, #0]
  406370:	f103 0408 	add.w	r4, r3, #8
  406374:	e01e      	b.n	4063b4 <_malloc_r+0x18c>
  406376:	2910      	cmp	r1, #16
  406378:	d820      	bhi.n	4063bc <_malloc_r+0x194>
  40637a:	f000 faed 	bl	406958 <__malloc_lock>
  40637e:	2610      	movs	r6, #16
  406380:	2318      	movs	r3, #24
  406382:	2002      	movs	r0, #2
  406384:	4f79      	ldr	r7, [pc, #484]	; (40656c <_malloc_r+0x344>)
  406386:	443b      	add	r3, r7
  406388:	f1a3 0208 	sub.w	r2, r3, #8
  40638c:	685c      	ldr	r4, [r3, #4]
  40638e:	4294      	cmp	r4, r2
  406390:	f000 813d 	beq.w	40660e <_malloc_r+0x3e6>
  406394:	6863      	ldr	r3, [r4, #4]
  406396:	68e1      	ldr	r1, [r4, #12]
  406398:	68a6      	ldr	r6, [r4, #8]
  40639a:	f023 0303 	bic.w	r3, r3, #3
  40639e:	4423      	add	r3, r4
  4063a0:	4628      	mov	r0, r5
  4063a2:	685a      	ldr	r2, [r3, #4]
  4063a4:	60f1      	str	r1, [r6, #12]
  4063a6:	f042 0201 	orr.w	r2, r2, #1
  4063aa:	608e      	str	r6, [r1, #8]
  4063ac:	605a      	str	r2, [r3, #4]
  4063ae:	f000 fad9 	bl	406964 <__malloc_unlock>
  4063b2:	3408      	adds	r4, #8
  4063b4:	4620      	mov	r0, r4
  4063b6:	b003      	add	sp, #12
  4063b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063bc:	2400      	movs	r4, #0
  4063be:	230c      	movs	r3, #12
  4063c0:	4620      	mov	r0, r4
  4063c2:	602b      	str	r3, [r5, #0]
  4063c4:	b003      	add	sp, #12
  4063c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063ca:	2040      	movs	r0, #64	; 0x40
  4063cc:	f44f 7300 	mov.w	r3, #512	; 0x200
  4063d0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4063d4:	e74a      	b.n	40626c <_malloc_r+0x44>
  4063d6:	4423      	add	r3, r4
  4063d8:	68e1      	ldr	r1, [r4, #12]
  4063da:	685a      	ldr	r2, [r3, #4]
  4063dc:	68a6      	ldr	r6, [r4, #8]
  4063de:	f042 0201 	orr.w	r2, r2, #1
  4063e2:	60f1      	str	r1, [r6, #12]
  4063e4:	4628      	mov	r0, r5
  4063e6:	608e      	str	r6, [r1, #8]
  4063e8:	605a      	str	r2, [r3, #4]
  4063ea:	f000 fabb 	bl	406964 <__malloc_unlock>
  4063ee:	3408      	adds	r4, #8
  4063f0:	4620      	mov	r0, r4
  4063f2:	b003      	add	sp, #12
  4063f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063f8:	4423      	add	r3, r4
  4063fa:	4628      	mov	r0, r5
  4063fc:	685a      	ldr	r2, [r3, #4]
  4063fe:	f042 0201 	orr.w	r2, r2, #1
  406402:	605a      	str	r2, [r3, #4]
  406404:	f000 faae 	bl	406964 <__malloc_unlock>
  406408:	3408      	adds	r4, #8
  40640a:	4620      	mov	r0, r4
  40640c:	b003      	add	sp, #12
  40640e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406412:	68bc      	ldr	r4, [r7, #8]
  406414:	6863      	ldr	r3, [r4, #4]
  406416:	f023 0803 	bic.w	r8, r3, #3
  40641a:	45b0      	cmp	r8, r6
  40641c:	d304      	bcc.n	406428 <_malloc_r+0x200>
  40641e:	eba8 0306 	sub.w	r3, r8, r6
  406422:	2b0f      	cmp	r3, #15
  406424:	f300 8085 	bgt.w	406532 <_malloc_r+0x30a>
  406428:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406584 <_malloc_r+0x35c>
  40642c:	4b50      	ldr	r3, [pc, #320]	; (406570 <_malloc_r+0x348>)
  40642e:	f8d9 2000 	ldr.w	r2, [r9]
  406432:	681b      	ldr	r3, [r3, #0]
  406434:	3201      	adds	r2, #1
  406436:	4433      	add	r3, r6
  406438:	eb04 0a08 	add.w	sl, r4, r8
  40643c:	f000 8155 	beq.w	4066ea <_malloc_r+0x4c2>
  406440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406444:	330f      	adds	r3, #15
  406446:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40644a:	f02b 0b0f 	bic.w	fp, fp, #15
  40644e:	4659      	mov	r1, fp
  406450:	4628      	mov	r0, r5
  406452:	f000 faf7 	bl	406a44 <_sbrk_r>
  406456:	1c41      	adds	r1, r0, #1
  406458:	4602      	mov	r2, r0
  40645a:	f000 80fc 	beq.w	406656 <_malloc_r+0x42e>
  40645e:	4582      	cmp	sl, r0
  406460:	f200 80f7 	bhi.w	406652 <_malloc_r+0x42a>
  406464:	4b43      	ldr	r3, [pc, #268]	; (406574 <_malloc_r+0x34c>)
  406466:	6819      	ldr	r1, [r3, #0]
  406468:	4459      	add	r1, fp
  40646a:	6019      	str	r1, [r3, #0]
  40646c:	f000 814d 	beq.w	40670a <_malloc_r+0x4e2>
  406470:	f8d9 0000 	ldr.w	r0, [r9]
  406474:	3001      	adds	r0, #1
  406476:	bf1b      	ittet	ne
  406478:	eba2 0a0a 	subne.w	sl, r2, sl
  40647c:	4451      	addne	r1, sl
  40647e:	f8c9 2000 	streq.w	r2, [r9]
  406482:	6019      	strne	r1, [r3, #0]
  406484:	f012 0107 	ands.w	r1, r2, #7
  406488:	f000 8115 	beq.w	4066b6 <_malloc_r+0x48e>
  40648c:	f1c1 0008 	rsb	r0, r1, #8
  406490:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406494:	4402      	add	r2, r0
  406496:	3108      	adds	r1, #8
  406498:	eb02 090b 	add.w	r9, r2, fp
  40649c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4064a0:	eba1 0909 	sub.w	r9, r1, r9
  4064a4:	4649      	mov	r1, r9
  4064a6:	4628      	mov	r0, r5
  4064a8:	9301      	str	r3, [sp, #4]
  4064aa:	9200      	str	r2, [sp, #0]
  4064ac:	f000 faca 	bl	406a44 <_sbrk_r>
  4064b0:	1c43      	adds	r3, r0, #1
  4064b2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4064b6:	f000 8143 	beq.w	406740 <_malloc_r+0x518>
  4064ba:	1a80      	subs	r0, r0, r2
  4064bc:	4448      	add	r0, r9
  4064be:	f040 0001 	orr.w	r0, r0, #1
  4064c2:	6819      	ldr	r1, [r3, #0]
  4064c4:	60ba      	str	r2, [r7, #8]
  4064c6:	4449      	add	r1, r9
  4064c8:	42bc      	cmp	r4, r7
  4064ca:	6050      	str	r0, [r2, #4]
  4064cc:	6019      	str	r1, [r3, #0]
  4064ce:	d017      	beq.n	406500 <_malloc_r+0x2d8>
  4064d0:	f1b8 0f0f 	cmp.w	r8, #15
  4064d4:	f240 80fb 	bls.w	4066ce <_malloc_r+0x4a6>
  4064d8:	6860      	ldr	r0, [r4, #4]
  4064da:	f1a8 020c 	sub.w	r2, r8, #12
  4064de:	f022 0207 	bic.w	r2, r2, #7
  4064e2:	eb04 0e02 	add.w	lr, r4, r2
  4064e6:	f000 0001 	and.w	r0, r0, #1
  4064ea:	f04f 0c05 	mov.w	ip, #5
  4064ee:	4310      	orrs	r0, r2
  4064f0:	2a0f      	cmp	r2, #15
  4064f2:	6060      	str	r0, [r4, #4]
  4064f4:	f8ce c004 	str.w	ip, [lr, #4]
  4064f8:	f8ce c008 	str.w	ip, [lr, #8]
  4064fc:	f200 8117 	bhi.w	40672e <_malloc_r+0x506>
  406500:	4b1d      	ldr	r3, [pc, #116]	; (406578 <_malloc_r+0x350>)
  406502:	68bc      	ldr	r4, [r7, #8]
  406504:	681a      	ldr	r2, [r3, #0]
  406506:	4291      	cmp	r1, r2
  406508:	bf88      	it	hi
  40650a:	6019      	strhi	r1, [r3, #0]
  40650c:	4b1b      	ldr	r3, [pc, #108]	; (40657c <_malloc_r+0x354>)
  40650e:	681a      	ldr	r2, [r3, #0]
  406510:	4291      	cmp	r1, r2
  406512:	6862      	ldr	r2, [r4, #4]
  406514:	bf88      	it	hi
  406516:	6019      	strhi	r1, [r3, #0]
  406518:	f022 0203 	bic.w	r2, r2, #3
  40651c:	4296      	cmp	r6, r2
  40651e:	eba2 0306 	sub.w	r3, r2, r6
  406522:	d801      	bhi.n	406528 <_malloc_r+0x300>
  406524:	2b0f      	cmp	r3, #15
  406526:	dc04      	bgt.n	406532 <_malloc_r+0x30a>
  406528:	4628      	mov	r0, r5
  40652a:	f000 fa1b 	bl	406964 <__malloc_unlock>
  40652e:	2400      	movs	r4, #0
  406530:	e740      	b.n	4063b4 <_malloc_r+0x18c>
  406532:	19a2      	adds	r2, r4, r6
  406534:	f043 0301 	orr.w	r3, r3, #1
  406538:	f046 0601 	orr.w	r6, r6, #1
  40653c:	6066      	str	r6, [r4, #4]
  40653e:	4628      	mov	r0, r5
  406540:	60ba      	str	r2, [r7, #8]
  406542:	6053      	str	r3, [r2, #4]
  406544:	f000 fa0e 	bl	406964 <__malloc_unlock>
  406548:	3408      	adds	r4, #8
  40654a:	4620      	mov	r0, r4
  40654c:	b003      	add	sp, #12
  40654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406552:	2b14      	cmp	r3, #20
  406554:	d971      	bls.n	40663a <_malloc_r+0x412>
  406556:	2b54      	cmp	r3, #84	; 0x54
  406558:	f200 80a3 	bhi.w	4066a2 <_malloc_r+0x47a>
  40655c:	0b33      	lsrs	r3, r6, #12
  40655e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406562:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406566:	00c3      	lsls	r3, r0, #3
  406568:	e680      	b.n	40626c <_malloc_r+0x44>
  40656a:	bf00      	nop
  40656c:	20400440 	.word	0x20400440
  406570:	20400bc4 	.word	0x20400bc4
  406574:	20400b94 	.word	0x20400b94
  406578:	20400bbc 	.word	0x20400bbc
  40657c:	20400bc0 	.word	0x20400bc0
  406580:	20400448 	.word	0x20400448
  406584:	20400848 	.word	0x20400848
  406588:	0a5a      	lsrs	r2, r3, #9
  40658a:	2a04      	cmp	r2, #4
  40658c:	d95b      	bls.n	406646 <_malloc_r+0x41e>
  40658e:	2a14      	cmp	r2, #20
  406590:	f200 80ae 	bhi.w	4066f0 <_malloc_r+0x4c8>
  406594:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406598:	00c9      	lsls	r1, r1, #3
  40659a:	325b      	adds	r2, #91	; 0x5b
  40659c:	eb07 0c01 	add.w	ip, r7, r1
  4065a0:	5879      	ldr	r1, [r7, r1]
  4065a2:	f1ac 0c08 	sub.w	ip, ip, #8
  4065a6:	458c      	cmp	ip, r1
  4065a8:	f000 8088 	beq.w	4066bc <_malloc_r+0x494>
  4065ac:	684a      	ldr	r2, [r1, #4]
  4065ae:	f022 0203 	bic.w	r2, r2, #3
  4065b2:	4293      	cmp	r3, r2
  4065b4:	d273      	bcs.n	40669e <_malloc_r+0x476>
  4065b6:	6889      	ldr	r1, [r1, #8]
  4065b8:	458c      	cmp	ip, r1
  4065ba:	d1f7      	bne.n	4065ac <_malloc_r+0x384>
  4065bc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4065c0:	687b      	ldr	r3, [r7, #4]
  4065c2:	60e2      	str	r2, [r4, #12]
  4065c4:	f8c4 c008 	str.w	ip, [r4, #8]
  4065c8:	6094      	str	r4, [r2, #8]
  4065ca:	f8cc 400c 	str.w	r4, [ip, #12]
  4065ce:	e68f      	b.n	4062f0 <_malloc_r+0xc8>
  4065d0:	19a1      	adds	r1, r4, r6
  4065d2:	f046 0c01 	orr.w	ip, r6, #1
  4065d6:	f042 0601 	orr.w	r6, r2, #1
  4065da:	f8c4 c004 	str.w	ip, [r4, #4]
  4065de:	4628      	mov	r0, r5
  4065e0:	6179      	str	r1, [r7, #20]
  4065e2:	6139      	str	r1, [r7, #16]
  4065e4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4065e8:	f8c1 e008 	str.w	lr, [r1, #8]
  4065ec:	604e      	str	r6, [r1, #4]
  4065ee:	50e2      	str	r2, [r4, r3]
  4065f0:	f000 f9b8 	bl	406964 <__malloc_unlock>
  4065f4:	3408      	adds	r4, #8
  4065f6:	e6dd      	b.n	4063b4 <_malloc_r+0x18c>
  4065f8:	687b      	ldr	r3, [r7, #4]
  4065fa:	e679      	b.n	4062f0 <_malloc_r+0xc8>
  4065fc:	f108 0801 	add.w	r8, r8, #1
  406600:	f018 0f03 	tst.w	r8, #3
  406604:	f10c 0c08 	add.w	ip, ip, #8
  406608:	f47f ae85 	bne.w	406316 <_malloc_r+0xee>
  40660c:	e02d      	b.n	40666a <_malloc_r+0x442>
  40660e:	68dc      	ldr	r4, [r3, #12]
  406610:	42a3      	cmp	r3, r4
  406612:	bf08      	it	eq
  406614:	3002      	addeq	r0, #2
  406616:	f43f ae3e 	beq.w	406296 <_malloc_r+0x6e>
  40661a:	e6bb      	b.n	406394 <_malloc_r+0x16c>
  40661c:	4419      	add	r1, r3
  40661e:	461c      	mov	r4, r3
  406620:	684a      	ldr	r2, [r1, #4]
  406622:	68db      	ldr	r3, [r3, #12]
  406624:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406628:	f042 0201 	orr.w	r2, r2, #1
  40662c:	604a      	str	r2, [r1, #4]
  40662e:	4628      	mov	r0, r5
  406630:	60f3      	str	r3, [r6, #12]
  406632:	609e      	str	r6, [r3, #8]
  406634:	f000 f996 	bl	406964 <__malloc_unlock>
  406638:	e6bc      	b.n	4063b4 <_malloc_r+0x18c>
  40663a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40663e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406642:	00c3      	lsls	r3, r0, #3
  406644:	e612      	b.n	40626c <_malloc_r+0x44>
  406646:	099a      	lsrs	r2, r3, #6
  406648:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40664c:	00c9      	lsls	r1, r1, #3
  40664e:	3238      	adds	r2, #56	; 0x38
  406650:	e7a4      	b.n	40659c <_malloc_r+0x374>
  406652:	42bc      	cmp	r4, r7
  406654:	d054      	beq.n	406700 <_malloc_r+0x4d8>
  406656:	68bc      	ldr	r4, [r7, #8]
  406658:	6862      	ldr	r2, [r4, #4]
  40665a:	f022 0203 	bic.w	r2, r2, #3
  40665e:	e75d      	b.n	40651c <_malloc_r+0x2f4>
  406660:	f859 3908 	ldr.w	r3, [r9], #-8
  406664:	4599      	cmp	r9, r3
  406666:	f040 8086 	bne.w	406776 <_malloc_r+0x54e>
  40666a:	f010 0f03 	tst.w	r0, #3
  40666e:	f100 30ff 	add.w	r0, r0, #4294967295
  406672:	d1f5      	bne.n	406660 <_malloc_r+0x438>
  406674:	687b      	ldr	r3, [r7, #4]
  406676:	ea23 0304 	bic.w	r3, r3, r4
  40667a:	607b      	str	r3, [r7, #4]
  40667c:	0064      	lsls	r4, r4, #1
  40667e:	429c      	cmp	r4, r3
  406680:	f63f aec7 	bhi.w	406412 <_malloc_r+0x1ea>
  406684:	2c00      	cmp	r4, #0
  406686:	f43f aec4 	beq.w	406412 <_malloc_r+0x1ea>
  40668a:	421c      	tst	r4, r3
  40668c:	4640      	mov	r0, r8
  40668e:	f47f ae3e 	bne.w	40630e <_malloc_r+0xe6>
  406692:	0064      	lsls	r4, r4, #1
  406694:	421c      	tst	r4, r3
  406696:	f100 0004 	add.w	r0, r0, #4
  40669a:	d0fa      	beq.n	406692 <_malloc_r+0x46a>
  40669c:	e637      	b.n	40630e <_malloc_r+0xe6>
  40669e:	468c      	mov	ip, r1
  4066a0:	e78c      	b.n	4065bc <_malloc_r+0x394>
  4066a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4066a6:	d815      	bhi.n	4066d4 <_malloc_r+0x4ac>
  4066a8:	0bf3      	lsrs	r3, r6, #15
  4066aa:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4066ae:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4066b2:	00c3      	lsls	r3, r0, #3
  4066b4:	e5da      	b.n	40626c <_malloc_r+0x44>
  4066b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4066ba:	e6ed      	b.n	406498 <_malloc_r+0x270>
  4066bc:	687b      	ldr	r3, [r7, #4]
  4066be:	1092      	asrs	r2, r2, #2
  4066c0:	2101      	movs	r1, #1
  4066c2:	fa01 f202 	lsl.w	r2, r1, r2
  4066c6:	4313      	orrs	r3, r2
  4066c8:	607b      	str	r3, [r7, #4]
  4066ca:	4662      	mov	r2, ip
  4066cc:	e779      	b.n	4065c2 <_malloc_r+0x39a>
  4066ce:	2301      	movs	r3, #1
  4066d0:	6053      	str	r3, [r2, #4]
  4066d2:	e729      	b.n	406528 <_malloc_r+0x300>
  4066d4:	f240 5254 	movw	r2, #1364	; 0x554
  4066d8:	4293      	cmp	r3, r2
  4066da:	d822      	bhi.n	406722 <_malloc_r+0x4fa>
  4066dc:	0cb3      	lsrs	r3, r6, #18
  4066de:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4066e2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4066e6:	00c3      	lsls	r3, r0, #3
  4066e8:	e5c0      	b.n	40626c <_malloc_r+0x44>
  4066ea:	f103 0b10 	add.w	fp, r3, #16
  4066ee:	e6ae      	b.n	40644e <_malloc_r+0x226>
  4066f0:	2a54      	cmp	r2, #84	; 0x54
  4066f2:	d829      	bhi.n	406748 <_malloc_r+0x520>
  4066f4:	0b1a      	lsrs	r2, r3, #12
  4066f6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4066fa:	00c9      	lsls	r1, r1, #3
  4066fc:	326e      	adds	r2, #110	; 0x6e
  4066fe:	e74d      	b.n	40659c <_malloc_r+0x374>
  406700:	4b20      	ldr	r3, [pc, #128]	; (406784 <_malloc_r+0x55c>)
  406702:	6819      	ldr	r1, [r3, #0]
  406704:	4459      	add	r1, fp
  406706:	6019      	str	r1, [r3, #0]
  406708:	e6b2      	b.n	406470 <_malloc_r+0x248>
  40670a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40670e:	2800      	cmp	r0, #0
  406710:	f47f aeae 	bne.w	406470 <_malloc_r+0x248>
  406714:	eb08 030b 	add.w	r3, r8, fp
  406718:	68ba      	ldr	r2, [r7, #8]
  40671a:	f043 0301 	orr.w	r3, r3, #1
  40671e:	6053      	str	r3, [r2, #4]
  406720:	e6ee      	b.n	406500 <_malloc_r+0x2d8>
  406722:	207f      	movs	r0, #127	; 0x7f
  406724:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406728:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40672c:	e59e      	b.n	40626c <_malloc_r+0x44>
  40672e:	f104 0108 	add.w	r1, r4, #8
  406732:	4628      	mov	r0, r5
  406734:	9300      	str	r3, [sp, #0]
  406736:	f002 ffab 	bl	409690 <_free_r>
  40673a:	9b00      	ldr	r3, [sp, #0]
  40673c:	6819      	ldr	r1, [r3, #0]
  40673e:	e6df      	b.n	406500 <_malloc_r+0x2d8>
  406740:	2001      	movs	r0, #1
  406742:	f04f 0900 	mov.w	r9, #0
  406746:	e6bc      	b.n	4064c2 <_malloc_r+0x29a>
  406748:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40674c:	d805      	bhi.n	40675a <_malloc_r+0x532>
  40674e:	0bda      	lsrs	r2, r3, #15
  406750:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406754:	00c9      	lsls	r1, r1, #3
  406756:	3277      	adds	r2, #119	; 0x77
  406758:	e720      	b.n	40659c <_malloc_r+0x374>
  40675a:	f240 5154 	movw	r1, #1364	; 0x554
  40675e:	428a      	cmp	r2, r1
  406760:	d805      	bhi.n	40676e <_malloc_r+0x546>
  406762:	0c9a      	lsrs	r2, r3, #18
  406764:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406768:	00c9      	lsls	r1, r1, #3
  40676a:	327c      	adds	r2, #124	; 0x7c
  40676c:	e716      	b.n	40659c <_malloc_r+0x374>
  40676e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406772:	227e      	movs	r2, #126	; 0x7e
  406774:	e712      	b.n	40659c <_malloc_r+0x374>
  406776:	687b      	ldr	r3, [r7, #4]
  406778:	e780      	b.n	40667c <_malloc_r+0x454>
  40677a:	08f0      	lsrs	r0, r6, #3
  40677c:	f106 0308 	add.w	r3, r6, #8
  406780:	e600      	b.n	406384 <_malloc_r+0x15c>
  406782:	bf00      	nop
  406784:	20400b94 	.word	0x20400b94

00406788 <memcpy>:
  406788:	4684      	mov	ip, r0
  40678a:	ea41 0300 	orr.w	r3, r1, r0
  40678e:	f013 0303 	ands.w	r3, r3, #3
  406792:	d16d      	bne.n	406870 <memcpy+0xe8>
  406794:	3a40      	subs	r2, #64	; 0x40
  406796:	d341      	bcc.n	40681c <memcpy+0x94>
  406798:	f851 3b04 	ldr.w	r3, [r1], #4
  40679c:	f840 3b04 	str.w	r3, [r0], #4
  4067a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067a4:	f840 3b04 	str.w	r3, [r0], #4
  4067a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067ac:	f840 3b04 	str.w	r3, [r0], #4
  4067b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067b4:	f840 3b04 	str.w	r3, [r0], #4
  4067b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067bc:	f840 3b04 	str.w	r3, [r0], #4
  4067c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067c4:	f840 3b04 	str.w	r3, [r0], #4
  4067c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067cc:	f840 3b04 	str.w	r3, [r0], #4
  4067d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067d4:	f840 3b04 	str.w	r3, [r0], #4
  4067d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067dc:	f840 3b04 	str.w	r3, [r0], #4
  4067e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067e4:	f840 3b04 	str.w	r3, [r0], #4
  4067e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067ec:	f840 3b04 	str.w	r3, [r0], #4
  4067f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067f4:	f840 3b04 	str.w	r3, [r0], #4
  4067f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067fc:	f840 3b04 	str.w	r3, [r0], #4
  406800:	f851 3b04 	ldr.w	r3, [r1], #4
  406804:	f840 3b04 	str.w	r3, [r0], #4
  406808:	f851 3b04 	ldr.w	r3, [r1], #4
  40680c:	f840 3b04 	str.w	r3, [r0], #4
  406810:	f851 3b04 	ldr.w	r3, [r1], #4
  406814:	f840 3b04 	str.w	r3, [r0], #4
  406818:	3a40      	subs	r2, #64	; 0x40
  40681a:	d2bd      	bcs.n	406798 <memcpy+0x10>
  40681c:	3230      	adds	r2, #48	; 0x30
  40681e:	d311      	bcc.n	406844 <memcpy+0xbc>
  406820:	f851 3b04 	ldr.w	r3, [r1], #4
  406824:	f840 3b04 	str.w	r3, [r0], #4
  406828:	f851 3b04 	ldr.w	r3, [r1], #4
  40682c:	f840 3b04 	str.w	r3, [r0], #4
  406830:	f851 3b04 	ldr.w	r3, [r1], #4
  406834:	f840 3b04 	str.w	r3, [r0], #4
  406838:	f851 3b04 	ldr.w	r3, [r1], #4
  40683c:	f840 3b04 	str.w	r3, [r0], #4
  406840:	3a10      	subs	r2, #16
  406842:	d2ed      	bcs.n	406820 <memcpy+0x98>
  406844:	320c      	adds	r2, #12
  406846:	d305      	bcc.n	406854 <memcpy+0xcc>
  406848:	f851 3b04 	ldr.w	r3, [r1], #4
  40684c:	f840 3b04 	str.w	r3, [r0], #4
  406850:	3a04      	subs	r2, #4
  406852:	d2f9      	bcs.n	406848 <memcpy+0xc0>
  406854:	3204      	adds	r2, #4
  406856:	d008      	beq.n	40686a <memcpy+0xe2>
  406858:	07d2      	lsls	r2, r2, #31
  40685a:	bf1c      	itt	ne
  40685c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406860:	f800 3b01 	strbne.w	r3, [r0], #1
  406864:	d301      	bcc.n	40686a <memcpy+0xe2>
  406866:	880b      	ldrh	r3, [r1, #0]
  406868:	8003      	strh	r3, [r0, #0]
  40686a:	4660      	mov	r0, ip
  40686c:	4770      	bx	lr
  40686e:	bf00      	nop
  406870:	2a08      	cmp	r2, #8
  406872:	d313      	bcc.n	40689c <memcpy+0x114>
  406874:	078b      	lsls	r3, r1, #30
  406876:	d08d      	beq.n	406794 <memcpy+0xc>
  406878:	f010 0303 	ands.w	r3, r0, #3
  40687c:	d08a      	beq.n	406794 <memcpy+0xc>
  40687e:	f1c3 0304 	rsb	r3, r3, #4
  406882:	1ad2      	subs	r2, r2, r3
  406884:	07db      	lsls	r3, r3, #31
  406886:	bf1c      	itt	ne
  406888:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40688c:	f800 3b01 	strbne.w	r3, [r0], #1
  406890:	d380      	bcc.n	406794 <memcpy+0xc>
  406892:	f831 3b02 	ldrh.w	r3, [r1], #2
  406896:	f820 3b02 	strh.w	r3, [r0], #2
  40689a:	e77b      	b.n	406794 <memcpy+0xc>
  40689c:	3a04      	subs	r2, #4
  40689e:	d3d9      	bcc.n	406854 <memcpy+0xcc>
  4068a0:	3a01      	subs	r2, #1
  4068a2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4068a6:	f800 3b01 	strb.w	r3, [r0], #1
  4068aa:	d2f9      	bcs.n	4068a0 <memcpy+0x118>
  4068ac:	780b      	ldrb	r3, [r1, #0]
  4068ae:	7003      	strb	r3, [r0, #0]
  4068b0:	784b      	ldrb	r3, [r1, #1]
  4068b2:	7043      	strb	r3, [r0, #1]
  4068b4:	788b      	ldrb	r3, [r1, #2]
  4068b6:	7083      	strb	r3, [r0, #2]
  4068b8:	4660      	mov	r0, ip
  4068ba:	4770      	bx	lr

004068bc <memset>:
  4068bc:	b470      	push	{r4, r5, r6}
  4068be:	0786      	lsls	r6, r0, #30
  4068c0:	d046      	beq.n	406950 <memset+0x94>
  4068c2:	1e54      	subs	r4, r2, #1
  4068c4:	2a00      	cmp	r2, #0
  4068c6:	d041      	beq.n	40694c <memset+0x90>
  4068c8:	b2ca      	uxtb	r2, r1
  4068ca:	4603      	mov	r3, r0
  4068cc:	e002      	b.n	4068d4 <memset+0x18>
  4068ce:	f114 34ff 	adds.w	r4, r4, #4294967295
  4068d2:	d33b      	bcc.n	40694c <memset+0x90>
  4068d4:	f803 2b01 	strb.w	r2, [r3], #1
  4068d8:	079d      	lsls	r5, r3, #30
  4068da:	d1f8      	bne.n	4068ce <memset+0x12>
  4068dc:	2c03      	cmp	r4, #3
  4068de:	d92e      	bls.n	40693e <memset+0x82>
  4068e0:	b2cd      	uxtb	r5, r1
  4068e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4068e6:	2c0f      	cmp	r4, #15
  4068e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4068ec:	d919      	bls.n	406922 <memset+0x66>
  4068ee:	f103 0210 	add.w	r2, r3, #16
  4068f2:	4626      	mov	r6, r4
  4068f4:	3e10      	subs	r6, #16
  4068f6:	2e0f      	cmp	r6, #15
  4068f8:	f842 5c10 	str.w	r5, [r2, #-16]
  4068fc:	f842 5c0c 	str.w	r5, [r2, #-12]
  406900:	f842 5c08 	str.w	r5, [r2, #-8]
  406904:	f842 5c04 	str.w	r5, [r2, #-4]
  406908:	f102 0210 	add.w	r2, r2, #16
  40690c:	d8f2      	bhi.n	4068f4 <memset+0x38>
  40690e:	f1a4 0210 	sub.w	r2, r4, #16
  406912:	f022 020f 	bic.w	r2, r2, #15
  406916:	f004 040f 	and.w	r4, r4, #15
  40691a:	3210      	adds	r2, #16
  40691c:	2c03      	cmp	r4, #3
  40691e:	4413      	add	r3, r2
  406920:	d90d      	bls.n	40693e <memset+0x82>
  406922:	461e      	mov	r6, r3
  406924:	4622      	mov	r2, r4
  406926:	3a04      	subs	r2, #4
  406928:	2a03      	cmp	r2, #3
  40692a:	f846 5b04 	str.w	r5, [r6], #4
  40692e:	d8fa      	bhi.n	406926 <memset+0x6a>
  406930:	1f22      	subs	r2, r4, #4
  406932:	f022 0203 	bic.w	r2, r2, #3
  406936:	3204      	adds	r2, #4
  406938:	4413      	add	r3, r2
  40693a:	f004 0403 	and.w	r4, r4, #3
  40693e:	b12c      	cbz	r4, 40694c <memset+0x90>
  406940:	b2c9      	uxtb	r1, r1
  406942:	441c      	add	r4, r3
  406944:	f803 1b01 	strb.w	r1, [r3], #1
  406948:	429c      	cmp	r4, r3
  40694a:	d1fb      	bne.n	406944 <memset+0x88>
  40694c:	bc70      	pop	{r4, r5, r6}
  40694e:	4770      	bx	lr
  406950:	4614      	mov	r4, r2
  406952:	4603      	mov	r3, r0
  406954:	e7c2      	b.n	4068dc <memset+0x20>
  406956:	bf00      	nop

00406958 <__malloc_lock>:
  406958:	4801      	ldr	r0, [pc, #4]	; (406960 <__malloc_lock+0x8>)
  40695a:	f003 b933 	b.w	409bc4 <__retarget_lock_acquire_recursive>
  40695e:	bf00      	nop
  406960:	20400c2c 	.word	0x20400c2c

00406964 <__malloc_unlock>:
  406964:	4801      	ldr	r0, [pc, #4]	; (40696c <__malloc_unlock+0x8>)
  406966:	f003 b92f 	b.w	409bc8 <__retarget_lock_release_recursive>
  40696a:	bf00      	nop
  40696c:	20400c2c 	.word	0x20400c2c

00406970 <printf>:
  406970:	b40f      	push	{r0, r1, r2, r3}
  406972:	b500      	push	{lr}
  406974:	4907      	ldr	r1, [pc, #28]	; (406994 <printf+0x24>)
  406976:	b083      	sub	sp, #12
  406978:	ab04      	add	r3, sp, #16
  40697a:	6808      	ldr	r0, [r1, #0]
  40697c:	f853 2b04 	ldr.w	r2, [r3], #4
  406980:	6881      	ldr	r1, [r0, #8]
  406982:	9301      	str	r3, [sp, #4]
  406984:	f000 f9ca 	bl	406d1c <_vfprintf_r>
  406988:	b003      	add	sp, #12
  40698a:	f85d eb04 	ldr.w	lr, [sp], #4
  40698e:	b004      	add	sp, #16
  406990:	4770      	bx	lr
  406992:	bf00      	nop
  406994:	20400010 	.word	0x20400010

00406998 <_puts_r>:
  406998:	b5f0      	push	{r4, r5, r6, r7, lr}
  40699a:	4605      	mov	r5, r0
  40699c:	b089      	sub	sp, #36	; 0x24
  40699e:	4608      	mov	r0, r1
  4069a0:	460c      	mov	r4, r1
  4069a2:	f000 f94d 	bl	406c40 <strlen>
  4069a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4069a8:	4f21      	ldr	r7, [pc, #132]	; (406a30 <_puts_r+0x98>)
  4069aa:	9404      	str	r4, [sp, #16]
  4069ac:	2601      	movs	r6, #1
  4069ae:	1c44      	adds	r4, r0, #1
  4069b0:	a904      	add	r1, sp, #16
  4069b2:	2202      	movs	r2, #2
  4069b4:	9403      	str	r4, [sp, #12]
  4069b6:	9005      	str	r0, [sp, #20]
  4069b8:	68ac      	ldr	r4, [r5, #8]
  4069ba:	9706      	str	r7, [sp, #24]
  4069bc:	9607      	str	r6, [sp, #28]
  4069be:	9101      	str	r1, [sp, #4]
  4069c0:	9202      	str	r2, [sp, #8]
  4069c2:	b353      	cbz	r3, 406a1a <_puts_r+0x82>
  4069c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4069c6:	f013 0f01 	tst.w	r3, #1
  4069ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4069ce:	b29a      	uxth	r2, r3
  4069d0:	d101      	bne.n	4069d6 <_puts_r+0x3e>
  4069d2:	0590      	lsls	r0, r2, #22
  4069d4:	d525      	bpl.n	406a22 <_puts_r+0x8a>
  4069d6:	0491      	lsls	r1, r2, #18
  4069d8:	d406      	bmi.n	4069e8 <_puts_r+0x50>
  4069da:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4069dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4069e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4069e4:	81a3      	strh	r3, [r4, #12]
  4069e6:	6662      	str	r2, [r4, #100]	; 0x64
  4069e8:	4628      	mov	r0, r5
  4069ea:	aa01      	add	r2, sp, #4
  4069ec:	4621      	mov	r1, r4
  4069ee:	f002 ff35 	bl	40985c <__sfvwrite_r>
  4069f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4069f4:	2800      	cmp	r0, #0
  4069f6:	bf0c      	ite	eq
  4069f8:	250a      	moveq	r5, #10
  4069fa:	f04f 35ff 	movne.w	r5, #4294967295
  4069fe:	07da      	lsls	r2, r3, #31
  406a00:	d402      	bmi.n	406a08 <_puts_r+0x70>
  406a02:	89a3      	ldrh	r3, [r4, #12]
  406a04:	059b      	lsls	r3, r3, #22
  406a06:	d502      	bpl.n	406a0e <_puts_r+0x76>
  406a08:	4628      	mov	r0, r5
  406a0a:	b009      	add	sp, #36	; 0x24
  406a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406a0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406a10:	f003 f8da 	bl	409bc8 <__retarget_lock_release_recursive>
  406a14:	4628      	mov	r0, r5
  406a16:	b009      	add	sp, #36	; 0x24
  406a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406a1a:	4628      	mov	r0, r5
  406a1c:	f002 fd96 	bl	40954c <__sinit>
  406a20:	e7d0      	b.n	4069c4 <_puts_r+0x2c>
  406a22:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406a24:	f003 f8ce 	bl	409bc4 <__retarget_lock_acquire_recursive>
  406a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a2c:	b29a      	uxth	r2, r3
  406a2e:	e7d2      	b.n	4069d6 <_puts_r+0x3e>
  406a30:	0040b7dc 	.word	0x0040b7dc

00406a34 <puts>:
  406a34:	4b02      	ldr	r3, [pc, #8]	; (406a40 <puts+0xc>)
  406a36:	4601      	mov	r1, r0
  406a38:	6818      	ldr	r0, [r3, #0]
  406a3a:	f7ff bfad 	b.w	406998 <_puts_r>
  406a3e:	bf00      	nop
  406a40:	20400010 	.word	0x20400010

00406a44 <_sbrk_r>:
  406a44:	b538      	push	{r3, r4, r5, lr}
  406a46:	4c07      	ldr	r4, [pc, #28]	; (406a64 <_sbrk_r+0x20>)
  406a48:	2300      	movs	r3, #0
  406a4a:	4605      	mov	r5, r0
  406a4c:	4608      	mov	r0, r1
  406a4e:	6023      	str	r3, [r4, #0]
  406a50:	f7fa fe1a 	bl	401688 <_sbrk>
  406a54:	1c43      	adds	r3, r0, #1
  406a56:	d000      	beq.n	406a5a <_sbrk_r+0x16>
  406a58:	bd38      	pop	{r3, r4, r5, pc}
  406a5a:	6823      	ldr	r3, [r4, #0]
  406a5c:	2b00      	cmp	r3, #0
  406a5e:	d0fb      	beq.n	406a58 <_sbrk_r+0x14>
  406a60:	602b      	str	r3, [r5, #0]
  406a62:	bd38      	pop	{r3, r4, r5, pc}
  406a64:	20400c40 	.word	0x20400c40

00406a68 <setbuf>:
  406a68:	2900      	cmp	r1, #0
  406a6a:	bf0c      	ite	eq
  406a6c:	2202      	moveq	r2, #2
  406a6e:	2200      	movne	r2, #0
  406a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406a74:	f000 b800 	b.w	406a78 <setvbuf>

00406a78 <setvbuf>:
  406a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406a7c:	4c61      	ldr	r4, [pc, #388]	; (406c04 <setvbuf+0x18c>)
  406a7e:	6825      	ldr	r5, [r4, #0]
  406a80:	b083      	sub	sp, #12
  406a82:	4604      	mov	r4, r0
  406a84:	460f      	mov	r7, r1
  406a86:	4690      	mov	r8, r2
  406a88:	461e      	mov	r6, r3
  406a8a:	b115      	cbz	r5, 406a92 <setvbuf+0x1a>
  406a8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406a8e:	2b00      	cmp	r3, #0
  406a90:	d064      	beq.n	406b5c <setvbuf+0xe4>
  406a92:	f1b8 0f02 	cmp.w	r8, #2
  406a96:	d006      	beq.n	406aa6 <setvbuf+0x2e>
  406a98:	f1b8 0f01 	cmp.w	r8, #1
  406a9c:	f200 809f 	bhi.w	406bde <setvbuf+0x166>
  406aa0:	2e00      	cmp	r6, #0
  406aa2:	f2c0 809c 	blt.w	406bde <setvbuf+0x166>
  406aa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406aa8:	07d8      	lsls	r0, r3, #31
  406aaa:	d534      	bpl.n	406b16 <setvbuf+0x9e>
  406aac:	4621      	mov	r1, r4
  406aae:	4628      	mov	r0, r5
  406ab0:	f002 fcf4 	bl	40949c <_fflush_r>
  406ab4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406ab6:	b141      	cbz	r1, 406aca <setvbuf+0x52>
  406ab8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406abc:	4299      	cmp	r1, r3
  406abe:	d002      	beq.n	406ac6 <setvbuf+0x4e>
  406ac0:	4628      	mov	r0, r5
  406ac2:	f002 fde5 	bl	409690 <_free_r>
  406ac6:	2300      	movs	r3, #0
  406ac8:	6323      	str	r3, [r4, #48]	; 0x30
  406aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406ace:	2200      	movs	r2, #0
  406ad0:	61a2      	str	r2, [r4, #24]
  406ad2:	6062      	str	r2, [r4, #4]
  406ad4:	061a      	lsls	r2, r3, #24
  406ad6:	d43a      	bmi.n	406b4e <setvbuf+0xd6>
  406ad8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  406adc:	f023 0303 	bic.w	r3, r3, #3
  406ae0:	f1b8 0f02 	cmp.w	r8, #2
  406ae4:	81a3      	strh	r3, [r4, #12]
  406ae6:	d01d      	beq.n	406b24 <setvbuf+0xac>
  406ae8:	ab01      	add	r3, sp, #4
  406aea:	466a      	mov	r2, sp
  406aec:	4621      	mov	r1, r4
  406aee:	4628      	mov	r0, r5
  406af0:	f003 f86c 	bl	409bcc <__swhatbuf_r>
  406af4:	89a3      	ldrh	r3, [r4, #12]
  406af6:	4318      	orrs	r0, r3
  406af8:	81a0      	strh	r0, [r4, #12]
  406afa:	2e00      	cmp	r6, #0
  406afc:	d132      	bne.n	406b64 <setvbuf+0xec>
  406afe:	9e00      	ldr	r6, [sp, #0]
  406b00:	4630      	mov	r0, r6
  406b02:	f7ff fb81 	bl	406208 <malloc>
  406b06:	4607      	mov	r7, r0
  406b08:	2800      	cmp	r0, #0
  406b0a:	d06b      	beq.n	406be4 <setvbuf+0x16c>
  406b0c:	89a3      	ldrh	r3, [r4, #12]
  406b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406b12:	81a3      	strh	r3, [r4, #12]
  406b14:	e028      	b.n	406b68 <setvbuf+0xf0>
  406b16:	89a3      	ldrh	r3, [r4, #12]
  406b18:	0599      	lsls	r1, r3, #22
  406b1a:	d4c7      	bmi.n	406aac <setvbuf+0x34>
  406b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406b1e:	f003 f851 	bl	409bc4 <__retarget_lock_acquire_recursive>
  406b22:	e7c3      	b.n	406aac <setvbuf+0x34>
  406b24:	2500      	movs	r5, #0
  406b26:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406b28:	2600      	movs	r6, #0
  406b2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406b2e:	f043 0302 	orr.w	r3, r3, #2
  406b32:	2001      	movs	r0, #1
  406b34:	60a6      	str	r6, [r4, #8]
  406b36:	07ce      	lsls	r6, r1, #31
  406b38:	81a3      	strh	r3, [r4, #12]
  406b3a:	6022      	str	r2, [r4, #0]
  406b3c:	6122      	str	r2, [r4, #16]
  406b3e:	6160      	str	r0, [r4, #20]
  406b40:	d401      	bmi.n	406b46 <setvbuf+0xce>
  406b42:	0598      	lsls	r0, r3, #22
  406b44:	d53e      	bpl.n	406bc4 <setvbuf+0x14c>
  406b46:	4628      	mov	r0, r5
  406b48:	b003      	add	sp, #12
  406b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406b4e:	6921      	ldr	r1, [r4, #16]
  406b50:	4628      	mov	r0, r5
  406b52:	f002 fd9d 	bl	409690 <_free_r>
  406b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406b5a:	e7bd      	b.n	406ad8 <setvbuf+0x60>
  406b5c:	4628      	mov	r0, r5
  406b5e:	f002 fcf5 	bl	40954c <__sinit>
  406b62:	e796      	b.n	406a92 <setvbuf+0x1a>
  406b64:	2f00      	cmp	r7, #0
  406b66:	d0cb      	beq.n	406b00 <setvbuf+0x88>
  406b68:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406b6a:	2b00      	cmp	r3, #0
  406b6c:	d033      	beq.n	406bd6 <setvbuf+0x15e>
  406b6e:	9b00      	ldr	r3, [sp, #0]
  406b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406b74:	6027      	str	r7, [r4, #0]
  406b76:	429e      	cmp	r6, r3
  406b78:	bf1c      	itt	ne
  406b7a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  406b7e:	81a2      	strhne	r2, [r4, #12]
  406b80:	f1b8 0f01 	cmp.w	r8, #1
  406b84:	bf04      	itt	eq
  406b86:	f042 0201 	orreq.w	r2, r2, #1
  406b8a:	81a2      	strheq	r2, [r4, #12]
  406b8c:	b292      	uxth	r2, r2
  406b8e:	f012 0308 	ands.w	r3, r2, #8
  406b92:	6127      	str	r7, [r4, #16]
  406b94:	6166      	str	r6, [r4, #20]
  406b96:	d00e      	beq.n	406bb6 <setvbuf+0x13e>
  406b98:	07d1      	lsls	r1, r2, #31
  406b9a:	d51a      	bpl.n	406bd2 <setvbuf+0x15a>
  406b9c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406b9e:	4276      	negs	r6, r6
  406ba0:	2300      	movs	r3, #0
  406ba2:	f015 0501 	ands.w	r5, r5, #1
  406ba6:	61a6      	str	r6, [r4, #24]
  406ba8:	60a3      	str	r3, [r4, #8]
  406baa:	d009      	beq.n	406bc0 <setvbuf+0x148>
  406bac:	2500      	movs	r5, #0
  406bae:	4628      	mov	r0, r5
  406bb0:	b003      	add	sp, #12
  406bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406bb6:	60a3      	str	r3, [r4, #8]
  406bb8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406bba:	f015 0501 	ands.w	r5, r5, #1
  406bbe:	d1f5      	bne.n	406bac <setvbuf+0x134>
  406bc0:	0593      	lsls	r3, r2, #22
  406bc2:	d4c0      	bmi.n	406b46 <setvbuf+0xce>
  406bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406bc6:	f002 ffff 	bl	409bc8 <__retarget_lock_release_recursive>
  406bca:	4628      	mov	r0, r5
  406bcc:	b003      	add	sp, #12
  406bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406bd2:	60a6      	str	r6, [r4, #8]
  406bd4:	e7f0      	b.n	406bb8 <setvbuf+0x140>
  406bd6:	4628      	mov	r0, r5
  406bd8:	f002 fcb8 	bl	40954c <__sinit>
  406bdc:	e7c7      	b.n	406b6e <setvbuf+0xf6>
  406bde:	f04f 35ff 	mov.w	r5, #4294967295
  406be2:	e7b0      	b.n	406b46 <setvbuf+0xce>
  406be4:	f8dd 9000 	ldr.w	r9, [sp]
  406be8:	45b1      	cmp	r9, r6
  406bea:	d004      	beq.n	406bf6 <setvbuf+0x17e>
  406bec:	4648      	mov	r0, r9
  406bee:	f7ff fb0b 	bl	406208 <malloc>
  406bf2:	4607      	mov	r7, r0
  406bf4:	b920      	cbnz	r0, 406c00 <setvbuf+0x188>
  406bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406bfa:	f04f 35ff 	mov.w	r5, #4294967295
  406bfe:	e792      	b.n	406b26 <setvbuf+0xae>
  406c00:	464e      	mov	r6, r9
  406c02:	e783      	b.n	406b0c <setvbuf+0x94>
  406c04:	20400010 	.word	0x20400010
	...

00406c40 <strlen>:
  406c40:	f890 f000 	pld	[r0]
  406c44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406c48:	f020 0107 	bic.w	r1, r0, #7
  406c4c:	f06f 0c00 	mvn.w	ip, #0
  406c50:	f010 0407 	ands.w	r4, r0, #7
  406c54:	f891 f020 	pld	[r1, #32]
  406c58:	f040 8049 	bne.w	406cee <strlen+0xae>
  406c5c:	f04f 0400 	mov.w	r4, #0
  406c60:	f06f 0007 	mvn.w	r0, #7
  406c64:	e9d1 2300 	ldrd	r2, r3, [r1]
  406c68:	f891 f040 	pld	[r1, #64]	; 0x40
  406c6c:	f100 0008 	add.w	r0, r0, #8
  406c70:	fa82 f24c 	uadd8	r2, r2, ip
  406c74:	faa4 f28c 	sel	r2, r4, ip
  406c78:	fa83 f34c 	uadd8	r3, r3, ip
  406c7c:	faa2 f38c 	sel	r3, r2, ip
  406c80:	bb4b      	cbnz	r3, 406cd6 <strlen+0x96>
  406c82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406c86:	fa82 f24c 	uadd8	r2, r2, ip
  406c8a:	f100 0008 	add.w	r0, r0, #8
  406c8e:	faa4 f28c 	sel	r2, r4, ip
  406c92:	fa83 f34c 	uadd8	r3, r3, ip
  406c96:	faa2 f38c 	sel	r3, r2, ip
  406c9a:	b9e3      	cbnz	r3, 406cd6 <strlen+0x96>
  406c9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406ca0:	fa82 f24c 	uadd8	r2, r2, ip
  406ca4:	f100 0008 	add.w	r0, r0, #8
  406ca8:	faa4 f28c 	sel	r2, r4, ip
  406cac:	fa83 f34c 	uadd8	r3, r3, ip
  406cb0:	faa2 f38c 	sel	r3, r2, ip
  406cb4:	b97b      	cbnz	r3, 406cd6 <strlen+0x96>
  406cb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406cba:	f101 0120 	add.w	r1, r1, #32
  406cbe:	fa82 f24c 	uadd8	r2, r2, ip
  406cc2:	f100 0008 	add.w	r0, r0, #8
  406cc6:	faa4 f28c 	sel	r2, r4, ip
  406cca:	fa83 f34c 	uadd8	r3, r3, ip
  406cce:	faa2 f38c 	sel	r3, r2, ip
  406cd2:	2b00      	cmp	r3, #0
  406cd4:	d0c6      	beq.n	406c64 <strlen+0x24>
  406cd6:	2a00      	cmp	r2, #0
  406cd8:	bf04      	itt	eq
  406cda:	3004      	addeq	r0, #4
  406cdc:	461a      	moveq	r2, r3
  406cde:	ba12      	rev	r2, r2
  406ce0:	fab2 f282 	clz	r2, r2
  406ce4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406ce8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406cec:	4770      	bx	lr
  406cee:	e9d1 2300 	ldrd	r2, r3, [r1]
  406cf2:	f004 0503 	and.w	r5, r4, #3
  406cf6:	f1c4 0000 	rsb	r0, r4, #0
  406cfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406cfe:	f014 0f04 	tst.w	r4, #4
  406d02:	f891 f040 	pld	[r1, #64]	; 0x40
  406d06:	fa0c f505 	lsl.w	r5, ip, r5
  406d0a:	ea62 0205 	orn	r2, r2, r5
  406d0e:	bf1c      	itt	ne
  406d10:	ea63 0305 	ornne	r3, r3, r5
  406d14:	4662      	movne	r2, ip
  406d16:	f04f 0400 	mov.w	r4, #0
  406d1a:	e7a9      	b.n	406c70 <strlen+0x30>

00406d1c <_vfprintf_r>:
  406d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d20:	b0c1      	sub	sp, #260	; 0x104
  406d22:	461d      	mov	r5, r3
  406d24:	468a      	mov	sl, r1
  406d26:	4691      	mov	r9, r2
  406d28:	4604      	mov	r4, r0
  406d2a:	9008      	str	r0, [sp, #32]
  406d2c:	f002 ff38 	bl	409ba0 <_localeconv_r>
  406d30:	6803      	ldr	r3, [r0, #0]
  406d32:	9315      	str	r3, [sp, #84]	; 0x54
  406d34:	4618      	mov	r0, r3
  406d36:	f7ff ff83 	bl	406c40 <strlen>
  406d3a:	950e      	str	r5, [sp, #56]	; 0x38
  406d3c:	9014      	str	r0, [sp, #80]	; 0x50
  406d3e:	b11c      	cbz	r4, 406d48 <_vfprintf_r+0x2c>
  406d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  406d42:	2b00      	cmp	r3, #0
  406d44:	f000 825f 	beq.w	407206 <_vfprintf_r+0x4ea>
  406d48:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  406d4c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  406d50:	f013 0f01 	tst.w	r3, #1
  406d54:	b293      	uxth	r3, r2
  406d56:	d102      	bne.n	406d5e <_vfprintf_r+0x42>
  406d58:	0599      	lsls	r1, r3, #22
  406d5a:	f140 8275 	bpl.w	407248 <_vfprintf_r+0x52c>
  406d5e:	049f      	lsls	r7, r3, #18
  406d60:	d40a      	bmi.n	406d78 <_vfprintf_r+0x5c>
  406d62:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  406d66:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  406d6a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406d6e:	f8aa 300c 	strh.w	r3, [sl, #12]
  406d72:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  406d76:	b29b      	uxth	r3, r3
  406d78:	071e      	lsls	r6, r3, #28
  406d7a:	f140 8223 	bpl.w	4071c4 <_vfprintf_r+0x4a8>
  406d7e:	f8da 2010 	ldr.w	r2, [sl, #16]
  406d82:	2a00      	cmp	r2, #0
  406d84:	f000 821e 	beq.w	4071c4 <_vfprintf_r+0x4a8>
  406d88:	f003 021a 	and.w	r2, r3, #26
  406d8c:	2a0a      	cmp	r2, #10
  406d8e:	f000 823e 	beq.w	40720e <_vfprintf_r+0x4f2>
  406d92:	2300      	movs	r3, #0
  406d94:	4618      	mov	r0, r3
  406d96:	9311      	str	r3, [sp, #68]	; 0x44
  406d98:	9313      	str	r3, [sp, #76]	; 0x4c
  406d9a:	9312      	str	r3, [sp, #72]	; 0x48
  406d9c:	9325      	str	r3, [sp, #148]	; 0x94
  406d9e:	9324      	str	r3, [sp, #144]	; 0x90
  406da0:	9318      	str	r3, [sp, #96]	; 0x60
  406da2:	9319      	str	r3, [sp, #100]	; 0x64
  406da4:	930b      	str	r3, [sp, #44]	; 0x2c
  406da6:	ab30      	add	r3, sp, #192	; 0xc0
  406da8:	9323      	str	r3, [sp, #140]	; 0x8c
  406daa:	4698      	mov	r8, r3
  406dac:	9016      	str	r0, [sp, #88]	; 0x58
  406dae:	9017      	str	r0, [sp, #92]	; 0x5c
  406db0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  406db4:	f899 3000 	ldrb.w	r3, [r9]
  406db8:	464c      	mov	r4, r9
  406dba:	b1eb      	cbz	r3, 406df8 <_vfprintf_r+0xdc>
  406dbc:	2b25      	cmp	r3, #37	; 0x25
  406dbe:	d102      	bne.n	406dc6 <_vfprintf_r+0xaa>
  406dc0:	e01a      	b.n	406df8 <_vfprintf_r+0xdc>
  406dc2:	2b25      	cmp	r3, #37	; 0x25
  406dc4:	d003      	beq.n	406dce <_vfprintf_r+0xb2>
  406dc6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406dca:	2b00      	cmp	r3, #0
  406dcc:	d1f9      	bne.n	406dc2 <_vfprintf_r+0xa6>
  406dce:	eba4 0509 	sub.w	r5, r4, r9
  406dd2:	b18d      	cbz	r5, 406df8 <_vfprintf_r+0xdc>
  406dd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406dd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406dd8:	f8c8 9000 	str.w	r9, [r8]
  406ddc:	3301      	adds	r3, #1
  406dde:	442a      	add	r2, r5
  406de0:	2b07      	cmp	r3, #7
  406de2:	f8c8 5004 	str.w	r5, [r8, #4]
  406de6:	9225      	str	r2, [sp, #148]	; 0x94
  406de8:	9324      	str	r3, [sp, #144]	; 0x90
  406dea:	f300 8201 	bgt.w	4071f0 <_vfprintf_r+0x4d4>
  406dee:	f108 0808 	add.w	r8, r8, #8
  406df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406df4:	442b      	add	r3, r5
  406df6:	930b      	str	r3, [sp, #44]	; 0x2c
  406df8:	7823      	ldrb	r3, [r4, #0]
  406dfa:	2b00      	cmp	r3, #0
  406dfc:	f000 83f0 	beq.w	4075e0 <_vfprintf_r+0x8c4>
  406e00:	2300      	movs	r3, #0
  406e02:	461a      	mov	r2, r3
  406e04:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406e08:	4619      	mov	r1, r3
  406e0a:	930c      	str	r3, [sp, #48]	; 0x30
  406e0c:	469b      	mov	fp, r3
  406e0e:	7866      	ldrb	r6, [r4, #1]
  406e10:	f04f 33ff 	mov.w	r3, #4294967295
  406e14:	f104 0901 	add.w	r9, r4, #1
  406e18:	9309      	str	r3, [sp, #36]	; 0x24
  406e1a:	f109 0901 	add.w	r9, r9, #1
  406e1e:	f1a6 0320 	sub.w	r3, r6, #32
  406e22:	2b58      	cmp	r3, #88	; 0x58
  406e24:	f200 83bf 	bhi.w	4075a6 <_vfprintf_r+0x88a>
  406e28:	e8df f013 	tbh	[pc, r3, lsl #1]
  406e2c:	03bd02e0 	.word	0x03bd02e0
  406e30:	034f03bd 	.word	0x034f03bd
  406e34:	03bd03bd 	.word	0x03bd03bd
  406e38:	03bd03bd 	.word	0x03bd03bd
  406e3c:	03bd03bd 	.word	0x03bd03bd
  406e40:	03080354 	.word	0x03080354
  406e44:	021a03bd 	.word	0x021a03bd
  406e48:	03bd02e8 	.word	0x03bd02e8
  406e4c:	033a0303 	.word	0x033a0303
  406e50:	033a033a 	.word	0x033a033a
  406e54:	033a033a 	.word	0x033a033a
  406e58:	033a033a 	.word	0x033a033a
  406e5c:	033a033a 	.word	0x033a033a
  406e60:	03bd03bd 	.word	0x03bd03bd
  406e64:	03bd03bd 	.word	0x03bd03bd
  406e68:	03bd03bd 	.word	0x03bd03bd
  406e6c:	03bd03bd 	.word	0x03bd03bd
  406e70:	03bd03bd 	.word	0x03bd03bd
  406e74:	03620349 	.word	0x03620349
  406e78:	036203bd 	.word	0x036203bd
  406e7c:	03bd03bd 	.word	0x03bd03bd
  406e80:	03bd03bd 	.word	0x03bd03bd
  406e84:	03bd03a2 	.word	0x03bd03a2
  406e88:	006f03bd 	.word	0x006f03bd
  406e8c:	03bd03bd 	.word	0x03bd03bd
  406e90:	03bd03bd 	.word	0x03bd03bd
  406e94:	005903bd 	.word	0x005903bd
  406e98:	03bd03bd 	.word	0x03bd03bd
  406e9c:	03bd031e 	.word	0x03bd031e
  406ea0:	03bd03bd 	.word	0x03bd03bd
  406ea4:	03bd03bd 	.word	0x03bd03bd
  406ea8:	03bd03bd 	.word	0x03bd03bd
  406eac:	03bd03bd 	.word	0x03bd03bd
  406eb0:	032403bd 	.word	0x032403bd
  406eb4:	03620273 	.word	0x03620273
  406eb8:	03620362 	.word	0x03620362
  406ebc:	027302b7 	.word	0x027302b7
  406ec0:	03bd03bd 	.word	0x03bd03bd
  406ec4:	03bd02bc 	.word	0x03bd02bc
  406ec8:	007102c9 	.word	0x007102c9
  406ecc:	0247030d 	.word	0x0247030d
  406ed0:	025203bd 	.word	0x025203bd
  406ed4:	005b03bd 	.word	0x005b03bd
  406ed8:	03bd03bd 	.word	0x03bd03bd
  406edc:	021f      	.short	0x021f
  406ede:	f04b 0b10 	orr.w	fp, fp, #16
  406ee2:	f01b 0f20 	tst.w	fp, #32
  406ee6:	f040 8353 	bne.w	407590 <_vfprintf_r+0x874>
  406eea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406eec:	f01b 0f10 	tst.w	fp, #16
  406ef0:	4613      	mov	r3, r2
  406ef2:	f040 85b4 	bne.w	407a5e <_vfprintf_r+0xd42>
  406ef6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406efa:	f000 85b0 	beq.w	407a5e <_vfprintf_r+0xd42>
  406efe:	8814      	ldrh	r4, [r2, #0]
  406f00:	3204      	adds	r2, #4
  406f02:	2500      	movs	r5, #0
  406f04:	2301      	movs	r3, #1
  406f06:	920e      	str	r2, [sp, #56]	; 0x38
  406f08:	e014      	b.n	406f34 <_vfprintf_r+0x218>
  406f0a:	f04b 0b10 	orr.w	fp, fp, #16
  406f0e:	f01b 0320 	ands.w	r3, fp, #32
  406f12:	f040 8332 	bne.w	40757a <_vfprintf_r+0x85e>
  406f16:	f01b 0210 	ands.w	r2, fp, #16
  406f1a:	f040 8589 	bne.w	407a30 <_vfprintf_r+0xd14>
  406f1e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  406f22:	f000 8585 	beq.w	407a30 <_vfprintf_r+0xd14>
  406f26:	990e      	ldr	r1, [sp, #56]	; 0x38
  406f28:	4613      	mov	r3, r2
  406f2a:	460a      	mov	r2, r1
  406f2c:	3204      	adds	r2, #4
  406f2e:	880c      	ldrh	r4, [r1, #0]
  406f30:	920e      	str	r2, [sp, #56]	; 0x38
  406f32:	2500      	movs	r5, #0
  406f34:	f04f 0a00 	mov.w	sl, #0
  406f38:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  406f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
  406f3e:	1c4a      	adds	r2, r1, #1
  406f40:	f000 820b 	beq.w	40735a <_vfprintf_r+0x63e>
  406f44:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  406f48:	9206      	str	r2, [sp, #24]
  406f4a:	ea54 0205 	orrs.w	r2, r4, r5
  406f4e:	f040 820a 	bne.w	407366 <_vfprintf_r+0x64a>
  406f52:	2900      	cmp	r1, #0
  406f54:	f040 846f 	bne.w	407836 <_vfprintf_r+0xb1a>
  406f58:	2b00      	cmp	r3, #0
  406f5a:	f040 852d 	bne.w	4079b8 <_vfprintf_r+0xc9c>
  406f5e:	f01b 0301 	ands.w	r3, fp, #1
  406f62:	930d      	str	r3, [sp, #52]	; 0x34
  406f64:	f000 8668 	beq.w	407c38 <_vfprintf_r+0xf1c>
  406f68:	af40      	add	r7, sp, #256	; 0x100
  406f6a:	2330      	movs	r3, #48	; 0x30
  406f6c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  406f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406f72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406f74:	4293      	cmp	r3, r2
  406f76:	bfb8      	it	lt
  406f78:	4613      	movlt	r3, r2
  406f7a:	9307      	str	r3, [sp, #28]
  406f7c:	2300      	movs	r3, #0
  406f7e:	9310      	str	r3, [sp, #64]	; 0x40
  406f80:	f1ba 0f00 	cmp.w	sl, #0
  406f84:	d002      	beq.n	406f8c <_vfprintf_r+0x270>
  406f86:	9b07      	ldr	r3, [sp, #28]
  406f88:	3301      	adds	r3, #1
  406f8a:	9307      	str	r3, [sp, #28]
  406f8c:	9b06      	ldr	r3, [sp, #24]
  406f8e:	f013 0302 	ands.w	r3, r3, #2
  406f92:	930f      	str	r3, [sp, #60]	; 0x3c
  406f94:	d002      	beq.n	406f9c <_vfprintf_r+0x280>
  406f96:	9b07      	ldr	r3, [sp, #28]
  406f98:	3302      	adds	r3, #2
  406f9a:	9307      	str	r3, [sp, #28]
  406f9c:	9b06      	ldr	r3, [sp, #24]
  406f9e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  406fa2:	f040 831b 	bne.w	4075dc <_vfprintf_r+0x8c0>
  406fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406fa8:	9a07      	ldr	r2, [sp, #28]
  406faa:	eba3 0b02 	sub.w	fp, r3, r2
  406fae:	f1bb 0f00 	cmp.w	fp, #0
  406fb2:	f340 8313 	ble.w	4075dc <_vfprintf_r+0x8c0>
  406fb6:	f1bb 0f10 	cmp.w	fp, #16
  406fba:	9925      	ldr	r1, [sp, #148]	; 0x94
  406fbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406fbe:	dd28      	ble.n	407012 <_vfprintf_r+0x2f6>
  406fc0:	4643      	mov	r3, r8
  406fc2:	2410      	movs	r4, #16
  406fc4:	46a8      	mov	r8, r5
  406fc6:	f8dd a020 	ldr.w	sl, [sp, #32]
  406fca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406fcc:	e006      	b.n	406fdc <_vfprintf_r+0x2c0>
  406fce:	f1ab 0b10 	sub.w	fp, fp, #16
  406fd2:	f1bb 0f10 	cmp.w	fp, #16
  406fd6:	f103 0308 	add.w	r3, r3, #8
  406fda:	dd18      	ble.n	40700e <_vfprintf_r+0x2f2>
  406fdc:	3201      	adds	r2, #1
  406fde:	48b9      	ldr	r0, [pc, #740]	; (4072c4 <_vfprintf_r+0x5a8>)
  406fe0:	9224      	str	r2, [sp, #144]	; 0x90
  406fe2:	3110      	adds	r1, #16
  406fe4:	2a07      	cmp	r2, #7
  406fe6:	9125      	str	r1, [sp, #148]	; 0x94
  406fe8:	e883 0011 	stmia.w	r3, {r0, r4}
  406fec:	ddef      	ble.n	406fce <_vfprintf_r+0x2b2>
  406fee:	aa23      	add	r2, sp, #140	; 0x8c
  406ff0:	4629      	mov	r1, r5
  406ff2:	4650      	mov	r0, sl
  406ff4:	f003 fc3c 	bl	40a870 <__sprint_r>
  406ff8:	2800      	cmp	r0, #0
  406ffa:	f040 836a 	bne.w	4076d2 <_vfprintf_r+0x9b6>
  406ffe:	f1ab 0b10 	sub.w	fp, fp, #16
  407002:	f1bb 0f10 	cmp.w	fp, #16
  407006:	9925      	ldr	r1, [sp, #148]	; 0x94
  407008:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40700a:	ab30      	add	r3, sp, #192	; 0xc0
  40700c:	dce6      	bgt.n	406fdc <_vfprintf_r+0x2c0>
  40700e:	4645      	mov	r5, r8
  407010:	4698      	mov	r8, r3
  407012:	3201      	adds	r2, #1
  407014:	4bab      	ldr	r3, [pc, #684]	; (4072c4 <_vfprintf_r+0x5a8>)
  407016:	9224      	str	r2, [sp, #144]	; 0x90
  407018:	eb0b 0401 	add.w	r4, fp, r1
  40701c:	2a07      	cmp	r2, #7
  40701e:	9425      	str	r4, [sp, #148]	; 0x94
  407020:	e888 0808 	stmia.w	r8, {r3, fp}
  407024:	f300 84cd 	bgt.w	4079c2 <_vfprintf_r+0xca6>
  407028:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40702c:	f108 0808 	add.w	r8, r8, #8
  407030:	f1ba 0f00 	cmp.w	sl, #0
  407034:	d00e      	beq.n	407054 <_vfprintf_r+0x338>
  407036:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407038:	3301      	adds	r3, #1
  40703a:	3401      	adds	r4, #1
  40703c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  407040:	2201      	movs	r2, #1
  407042:	2b07      	cmp	r3, #7
  407044:	9425      	str	r4, [sp, #148]	; 0x94
  407046:	9324      	str	r3, [sp, #144]	; 0x90
  407048:	e888 0006 	stmia.w	r8, {r1, r2}
  40704c:	f300 840a 	bgt.w	407864 <_vfprintf_r+0xb48>
  407050:	f108 0808 	add.w	r8, r8, #8
  407054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407056:	b16b      	cbz	r3, 407074 <_vfprintf_r+0x358>
  407058:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40705a:	3301      	adds	r3, #1
  40705c:	3402      	adds	r4, #2
  40705e:	a91c      	add	r1, sp, #112	; 0x70
  407060:	2202      	movs	r2, #2
  407062:	2b07      	cmp	r3, #7
  407064:	9425      	str	r4, [sp, #148]	; 0x94
  407066:	9324      	str	r3, [sp, #144]	; 0x90
  407068:	e888 0006 	stmia.w	r8, {r1, r2}
  40706c:	f300 8406 	bgt.w	40787c <_vfprintf_r+0xb60>
  407070:	f108 0808 	add.w	r8, r8, #8
  407074:	2d80      	cmp	r5, #128	; 0x80
  407076:	f000 832e 	beq.w	4076d6 <_vfprintf_r+0x9ba>
  40707a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40707c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40707e:	eba3 0a02 	sub.w	sl, r3, r2
  407082:	f1ba 0f00 	cmp.w	sl, #0
  407086:	dd3b      	ble.n	407100 <_vfprintf_r+0x3e4>
  407088:	f1ba 0f10 	cmp.w	sl, #16
  40708c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40708e:	4d8e      	ldr	r5, [pc, #568]	; (4072c8 <_vfprintf_r+0x5ac>)
  407090:	dd2b      	ble.n	4070ea <_vfprintf_r+0x3ce>
  407092:	4642      	mov	r2, r8
  407094:	4621      	mov	r1, r4
  407096:	46b0      	mov	r8, r6
  407098:	f04f 0b10 	mov.w	fp, #16
  40709c:	462e      	mov	r6, r5
  40709e:	9c08      	ldr	r4, [sp, #32]
  4070a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4070a2:	e006      	b.n	4070b2 <_vfprintf_r+0x396>
  4070a4:	f1aa 0a10 	sub.w	sl, sl, #16
  4070a8:	f1ba 0f10 	cmp.w	sl, #16
  4070ac:	f102 0208 	add.w	r2, r2, #8
  4070b0:	dd17      	ble.n	4070e2 <_vfprintf_r+0x3c6>
  4070b2:	3301      	adds	r3, #1
  4070b4:	3110      	adds	r1, #16
  4070b6:	2b07      	cmp	r3, #7
  4070b8:	9125      	str	r1, [sp, #148]	; 0x94
  4070ba:	9324      	str	r3, [sp, #144]	; 0x90
  4070bc:	e882 0840 	stmia.w	r2, {r6, fp}
  4070c0:	ddf0      	ble.n	4070a4 <_vfprintf_r+0x388>
  4070c2:	aa23      	add	r2, sp, #140	; 0x8c
  4070c4:	4629      	mov	r1, r5
  4070c6:	4620      	mov	r0, r4
  4070c8:	f003 fbd2 	bl	40a870 <__sprint_r>
  4070cc:	2800      	cmp	r0, #0
  4070ce:	f040 8300 	bne.w	4076d2 <_vfprintf_r+0x9b6>
  4070d2:	f1aa 0a10 	sub.w	sl, sl, #16
  4070d6:	f1ba 0f10 	cmp.w	sl, #16
  4070da:	9925      	ldr	r1, [sp, #148]	; 0x94
  4070dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4070de:	aa30      	add	r2, sp, #192	; 0xc0
  4070e0:	dce7      	bgt.n	4070b2 <_vfprintf_r+0x396>
  4070e2:	4635      	mov	r5, r6
  4070e4:	460c      	mov	r4, r1
  4070e6:	4646      	mov	r6, r8
  4070e8:	4690      	mov	r8, r2
  4070ea:	3301      	adds	r3, #1
  4070ec:	4454      	add	r4, sl
  4070ee:	2b07      	cmp	r3, #7
  4070f0:	9425      	str	r4, [sp, #148]	; 0x94
  4070f2:	9324      	str	r3, [sp, #144]	; 0x90
  4070f4:	e888 0420 	stmia.w	r8, {r5, sl}
  4070f8:	f300 83a9 	bgt.w	40784e <_vfprintf_r+0xb32>
  4070fc:	f108 0808 	add.w	r8, r8, #8
  407100:	9b06      	ldr	r3, [sp, #24]
  407102:	05db      	lsls	r3, r3, #23
  407104:	f100 8285 	bmi.w	407612 <_vfprintf_r+0x8f6>
  407108:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40710a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40710c:	f8c8 7000 	str.w	r7, [r8]
  407110:	3301      	adds	r3, #1
  407112:	440c      	add	r4, r1
  407114:	2b07      	cmp	r3, #7
  407116:	9425      	str	r4, [sp, #148]	; 0x94
  407118:	f8c8 1004 	str.w	r1, [r8, #4]
  40711c:	9324      	str	r3, [sp, #144]	; 0x90
  40711e:	f300 8375 	bgt.w	40780c <_vfprintf_r+0xaf0>
  407122:	f108 0808 	add.w	r8, r8, #8
  407126:	9b06      	ldr	r3, [sp, #24]
  407128:	0759      	lsls	r1, r3, #29
  40712a:	d53b      	bpl.n	4071a4 <_vfprintf_r+0x488>
  40712c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40712e:	9a07      	ldr	r2, [sp, #28]
  407130:	1a9d      	subs	r5, r3, r2
  407132:	2d00      	cmp	r5, #0
  407134:	dd36      	ble.n	4071a4 <_vfprintf_r+0x488>
  407136:	2d10      	cmp	r5, #16
  407138:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40713a:	dd21      	ble.n	407180 <_vfprintf_r+0x464>
  40713c:	2610      	movs	r6, #16
  40713e:	9f08      	ldr	r7, [sp, #32]
  407140:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  407144:	e004      	b.n	407150 <_vfprintf_r+0x434>
  407146:	3d10      	subs	r5, #16
  407148:	2d10      	cmp	r5, #16
  40714a:	f108 0808 	add.w	r8, r8, #8
  40714e:	dd17      	ble.n	407180 <_vfprintf_r+0x464>
  407150:	3301      	adds	r3, #1
  407152:	4a5c      	ldr	r2, [pc, #368]	; (4072c4 <_vfprintf_r+0x5a8>)
  407154:	9324      	str	r3, [sp, #144]	; 0x90
  407156:	3410      	adds	r4, #16
  407158:	2b07      	cmp	r3, #7
  40715a:	9425      	str	r4, [sp, #148]	; 0x94
  40715c:	e888 0044 	stmia.w	r8, {r2, r6}
  407160:	ddf1      	ble.n	407146 <_vfprintf_r+0x42a>
  407162:	aa23      	add	r2, sp, #140	; 0x8c
  407164:	4651      	mov	r1, sl
  407166:	4638      	mov	r0, r7
  407168:	f003 fb82 	bl	40a870 <__sprint_r>
  40716c:	2800      	cmp	r0, #0
  40716e:	f040 823f 	bne.w	4075f0 <_vfprintf_r+0x8d4>
  407172:	3d10      	subs	r5, #16
  407174:	2d10      	cmp	r5, #16
  407176:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407178:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40717a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40717e:	dce7      	bgt.n	407150 <_vfprintf_r+0x434>
  407180:	3301      	adds	r3, #1
  407182:	4a50      	ldr	r2, [pc, #320]	; (4072c4 <_vfprintf_r+0x5a8>)
  407184:	9324      	str	r3, [sp, #144]	; 0x90
  407186:	442c      	add	r4, r5
  407188:	2b07      	cmp	r3, #7
  40718a:	9425      	str	r4, [sp, #148]	; 0x94
  40718c:	e888 0024 	stmia.w	r8, {r2, r5}
  407190:	dd08      	ble.n	4071a4 <_vfprintf_r+0x488>
  407192:	aa23      	add	r2, sp, #140	; 0x8c
  407194:	990a      	ldr	r1, [sp, #40]	; 0x28
  407196:	9808      	ldr	r0, [sp, #32]
  407198:	f003 fb6a 	bl	40a870 <__sprint_r>
  40719c:	2800      	cmp	r0, #0
  40719e:	f040 8347 	bne.w	407830 <_vfprintf_r+0xb14>
  4071a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4071a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4071a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4071a8:	9907      	ldr	r1, [sp, #28]
  4071aa:	428a      	cmp	r2, r1
  4071ac:	bfac      	ite	ge
  4071ae:	189b      	addge	r3, r3, r2
  4071b0:	185b      	addlt	r3, r3, r1
  4071b2:	930b      	str	r3, [sp, #44]	; 0x2c
  4071b4:	2c00      	cmp	r4, #0
  4071b6:	f040 8333 	bne.w	407820 <_vfprintf_r+0xb04>
  4071ba:	2300      	movs	r3, #0
  4071bc:	9324      	str	r3, [sp, #144]	; 0x90
  4071be:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4071c2:	e5f7      	b.n	406db4 <_vfprintf_r+0x98>
  4071c4:	4651      	mov	r1, sl
  4071c6:	9808      	ldr	r0, [sp, #32]
  4071c8:	f001 f896 	bl	4082f8 <__swsetup_r>
  4071cc:	2800      	cmp	r0, #0
  4071ce:	d038      	beq.n	407242 <_vfprintf_r+0x526>
  4071d0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4071d4:	07dd      	lsls	r5, r3, #31
  4071d6:	d404      	bmi.n	4071e2 <_vfprintf_r+0x4c6>
  4071d8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4071dc:	059c      	lsls	r4, r3, #22
  4071de:	f140 85ca 	bpl.w	407d76 <_vfprintf_r+0x105a>
  4071e2:	f04f 33ff 	mov.w	r3, #4294967295
  4071e6:	930b      	str	r3, [sp, #44]	; 0x2c
  4071e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4071ea:	b041      	add	sp, #260	; 0x104
  4071ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4071f0:	aa23      	add	r2, sp, #140	; 0x8c
  4071f2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4071f4:	9808      	ldr	r0, [sp, #32]
  4071f6:	f003 fb3b 	bl	40a870 <__sprint_r>
  4071fa:	2800      	cmp	r0, #0
  4071fc:	f040 8318 	bne.w	407830 <_vfprintf_r+0xb14>
  407200:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407204:	e5f5      	b.n	406df2 <_vfprintf_r+0xd6>
  407206:	9808      	ldr	r0, [sp, #32]
  407208:	f002 f9a0 	bl	40954c <__sinit>
  40720c:	e59c      	b.n	406d48 <_vfprintf_r+0x2c>
  40720e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  407212:	2a00      	cmp	r2, #0
  407214:	f6ff adbd 	blt.w	406d92 <_vfprintf_r+0x76>
  407218:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  40721c:	07d0      	lsls	r0, r2, #31
  40721e:	d405      	bmi.n	40722c <_vfprintf_r+0x510>
  407220:	0599      	lsls	r1, r3, #22
  407222:	d403      	bmi.n	40722c <_vfprintf_r+0x510>
  407224:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  407228:	f002 fcce 	bl	409bc8 <__retarget_lock_release_recursive>
  40722c:	462b      	mov	r3, r5
  40722e:	464a      	mov	r2, r9
  407230:	4651      	mov	r1, sl
  407232:	9808      	ldr	r0, [sp, #32]
  407234:	f001 f81e 	bl	408274 <__sbprintf>
  407238:	900b      	str	r0, [sp, #44]	; 0x2c
  40723a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40723c:	b041      	add	sp, #260	; 0x104
  40723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407242:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  407246:	e59f      	b.n	406d88 <_vfprintf_r+0x6c>
  407248:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40724c:	f002 fcba 	bl	409bc4 <__retarget_lock_acquire_recursive>
  407250:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  407254:	b293      	uxth	r3, r2
  407256:	e582      	b.n	406d5e <_vfprintf_r+0x42>
  407258:	980c      	ldr	r0, [sp, #48]	; 0x30
  40725a:	930e      	str	r3, [sp, #56]	; 0x38
  40725c:	4240      	negs	r0, r0
  40725e:	900c      	str	r0, [sp, #48]	; 0x30
  407260:	f04b 0b04 	orr.w	fp, fp, #4
  407264:	f899 6000 	ldrb.w	r6, [r9]
  407268:	e5d7      	b.n	406e1a <_vfprintf_r+0xfe>
  40726a:	2a00      	cmp	r2, #0
  40726c:	f040 87df 	bne.w	40822e <_vfprintf_r+0x1512>
  407270:	4b16      	ldr	r3, [pc, #88]	; (4072cc <_vfprintf_r+0x5b0>)
  407272:	9318      	str	r3, [sp, #96]	; 0x60
  407274:	f01b 0f20 	tst.w	fp, #32
  407278:	f040 84b9 	bne.w	407bee <_vfprintf_r+0xed2>
  40727c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40727e:	f01b 0f10 	tst.w	fp, #16
  407282:	4613      	mov	r3, r2
  407284:	f040 83dc 	bne.w	407a40 <_vfprintf_r+0xd24>
  407288:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40728c:	f000 83d8 	beq.w	407a40 <_vfprintf_r+0xd24>
  407290:	3304      	adds	r3, #4
  407292:	8814      	ldrh	r4, [r2, #0]
  407294:	930e      	str	r3, [sp, #56]	; 0x38
  407296:	2500      	movs	r5, #0
  407298:	f01b 0f01 	tst.w	fp, #1
  40729c:	f000 8322 	beq.w	4078e4 <_vfprintf_r+0xbc8>
  4072a0:	ea54 0305 	orrs.w	r3, r4, r5
  4072a4:	f000 831e 	beq.w	4078e4 <_vfprintf_r+0xbc8>
  4072a8:	2330      	movs	r3, #48	; 0x30
  4072aa:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4072ae:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4072b2:	f04b 0b02 	orr.w	fp, fp, #2
  4072b6:	2302      	movs	r3, #2
  4072b8:	e63c      	b.n	406f34 <_vfprintf_r+0x218>
  4072ba:	f04b 0b20 	orr.w	fp, fp, #32
  4072be:	f899 6000 	ldrb.w	r6, [r9]
  4072c2:	e5aa      	b.n	406e1a <_vfprintf_r+0xfe>
  4072c4:	0040b824 	.word	0x0040b824
  4072c8:	0040b834 	.word	0x0040b834
  4072cc:	0040b804 	.word	0x0040b804
  4072d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4072d2:	6817      	ldr	r7, [r2, #0]
  4072d4:	2400      	movs	r4, #0
  4072d6:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4072da:	1d15      	adds	r5, r2, #4
  4072dc:	2f00      	cmp	r7, #0
  4072de:	f000 864e 	beq.w	407f7e <_vfprintf_r+0x1262>
  4072e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4072e4:	1c53      	adds	r3, r2, #1
  4072e6:	f000 85cc 	beq.w	407e82 <_vfprintf_r+0x1166>
  4072ea:	4621      	mov	r1, r4
  4072ec:	4638      	mov	r0, r7
  4072ee:	f002 fce7 	bl	409cc0 <memchr>
  4072f2:	2800      	cmp	r0, #0
  4072f4:	f000 8697 	beq.w	408026 <_vfprintf_r+0x130a>
  4072f8:	1bc3      	subs	r3, r0, r7
  4072fa:	930d      	str	r3, [sp, #52]	; 0x34
  4072fc:	9409      	str	r4, [sp, #36]	; 0x24
  4072fe:	950e      	str	r5, [sp, #56]	; 0x38
  407300:	f8cd b018 	str.w	fp, [sp, #24]
  407304:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407308:	9307      	str	r3, [sp, #28]
  40730a:	9410      	str	r4, [sp, #64]	; 0x40
  40730c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407310:	e636      	b.n	406f80 <_vfprintf_r+0x264>
  407312:	2a00      	cmp	r2, #0
  407314:	f040 8796 	bne.w	408244 <_vfprintf_r+0x1528>
  407318:	f01b 0f20 	tst.w	fp, #32
  40731c:	f040 845a 	bne.w	407bd4 <_vfprintf_r+0xeb8>
  407320:	f01b 0f10 	tst.w	fp, #16
  407324:	f040 83a2 	bne.w	407a6c <_vfprintf_r+0xd50>
  407328:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40732c:	f000 839e 	beq.w	407a6c <_vfprintf_r+0xd50>
  407330:	990e      	ldr	r1, [sp, #56]	; 0x38
  407332:	f9b1 4000 	ldrsh.w	r4, [r1]
  407336:	3104      	adds	r1, #4
  407338:	17e5      	asrs	r5, r4, #31
  40733a:	4622      	mov	r2, r4
  40733c:	462b      	mov	r3, r5
  40733e:	910e      	str	r1, [sp, #56]	; 0x38
  407340:	2a00      	cmp	r2, #0
  407342:	f173 0300 	sbcs.w	r3, r3, #0
  407346:	f2c0 8487 	blt.w	407c58 <_vfprintf_r+0xf3c>
  40734a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40734c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407350:	1c4a      	adds	r2, r1, #1
  407352:	f04f 0301 	mov.w	r3, #1
  407356:	f47f adf5 	bne.w	406f44 <_vfprintf_r+0x228>
  40735a:	ea54 0205 	orrs.w	r2, r4, r5
  40735e:	f000 826c 	beq.w	40783a <_vfprintf_r+0xb1e>
  407362:	f8cd b018 	str.w	fp, [sp, #24]
  407366:	2b01      	cmp	r3, #1
  407368:	f000 8308 	beq.w	40797c <_vfprintf_r+0xc60>
  40736c:	2b02      	cmp	r3, #2
  40736e:	f040 8295 	bne.w	40789c <_vfprintf_r+0xb80>
  407372:	9818      	ldr	r0, [sp, #96]	; 0x60
  407374:	af30      	add	r7, sp, #192	; 0xc0
  407376:	0923      	lsrs	r3, r4, #4
  407378:	f004 010f 	and.w	r1, r4, #15
  40737c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407380:	092a      	lsrs	r2, r5, #4
  407382:	461c      	mov	r4, r3
  407384:	4615      	mov	r5, r2
  407386:	5c43      	ldrb	r3, [r0, r1]
  407388:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40738c:	ea54 0305 	orrs.w	r3, r4, r5
  407390:	d1f1      	bne.n	407376 <_vfprintf_r+0x65a>
  407392:	ab30      	add	r3, sp, #192	; 0xc0
  407394:	1bdb      	subs	r3, r3, r7
  407396:	930d      	str	r3, [sp, #52]	; 0x34
  407398:	e5ea      	b.n	406f70 <_vfprintf_r+0x254>
  40739a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40739e:	f899 6000 	ldrb.w	r6, [r9]
  4073a2:	e53a      	b.n	406e1a <_vfprintf_r+0xfe>
  4073a4:	f899 6000 	ldrb.w	r6, [r9]
  4073a8:	2e6c      	cmp	r6, #108	; 0x6c
  4073aa:	bf03      	ittte	eq
  4073ac:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  4073b0:	f04b 0b20 	orreq.w	fp, fp, #32
  4073b4:	f109 0901 	addeq.w	r9, r9, #1
  4073b8:	f04b 0b10 	orrne.w	fp, fp, #16
  4073bc:	e52d      	b.n	406e1a <_vfprintf_r+0xfe>
  4073be:	2a00      	cmp	r2, #0
  4073c0:	f040 874c 	bne.w	40825c <_vfprintf_r+0x1540>
  4073c4:	f01b 0f20 	tst.w	fp, #32
  4073c8:	f040 853f 	bne.w	407e4a <_vfprintf_r+0x112e>
  4073cc:	f01b 0f10 	tst.w	fp, #16
  4073d0:	f040 80fc 	bne.w	4075cc <_vfprintf_r+0x8b0>
  4073d4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4073d8:	f000 80f8 	beq.w	4075cc <_vfprintf_r+0x8b0>
  4073dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4073de:	6813      	ldr	r3, [r2, #0]
  4073e0:	3204      	adds	r2, #4
  4073e2:	920e      	str	r2, [sp, #56]	; 0x38
  4073e4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4073e8:	801a      	strh	r2, [r3, #0]
  4073ea:	e4e3      	b.n	406db4 <_vfprintf_r+0x98>
  4073ec:	f899 6000 	ldrb.w	r6, [r9]
  4073f0:	2900      	cmp	r1, #0
  4073f2:	f47f ad12 	bne.w	406e1a <_vfprintf_r+0xfe>
  4073f6:	2201      	movs	r2, #1
  4073f8:	2120      	movs	r1, #32
  4073fa:	e50e      	b.n	406e1a <_vfprintf_r+0xfe>
  4073fc:	f899 6000 	ldrb.w	r6, [r9]
  407400:	2e2a      	cmp	r6, #42	; 0x2a
  407402:	f109 0001 	add.w	r0, r9, #1
  407406:	f000 86f1 	beq.w	4081ec <_vfprintf_r+0x14d0>
  40740a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40740e:	2b09      	cmp	r3, #9
  407410:	4681      	mov	r9, r0
  407412:	bf98      	it	ls
  407414:	2000      	movls	r0, #0
  407416:	f200 863d 	bhi.w	408094 <_vfprintf_r+0x1378>
  40741a:	f819 6b01 	ldrb.w	r6, [r9], #1
  40741e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  407422:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  407426:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40742a:	2b09      	cmp	r3, #9
  40742c:	d9f5      	bls.n	40741a <_vfprintf_r+0x6fe>
  40742e:	9009      	str	r0, [sp, #36]	; 0x24
  407430:	e4f5      	b.n	406e1e <_vfprintf_r+0x102>
  407432:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  407436:	f899 6000 	ldrb.w	r6, [r9]
  40743a:	e4ee      	b.n	406e1a <_vfprintf_r+0xfe>
  40743c:	f899 6000 	ldrb.w	r6, [r9]
  407440:	2201      	movs	r2, #1
  407442:	212b      	movs	r1, #43	; 0x2b
  407444:	e4e9      	b.n	406e1a <_vfprintf_r+0xfe>
  407446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407448:	4bae      	ldr	r3, [pc, #696]	; (407704 <_vfprintf_r+0x9e8>)
  40744a:	6814      	ldr	r4, [r2, #0]
  40744c:	9318      	str	r3, [sp, #96]	; 0x60
  40744e:	2678      	movs	r6, #120	; 0x78
  407450:	2330      	movs	r3, #48	; 0x30
  407452:	3204      	adds	r2, #4
  407454:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  407458:	f04b 0b02 	orr.w	fp, fp, #2
  40745c:	920e      	str	r2, [sp, #56]	; 0x38
  40745e:	2500      	movs	r5, #0
  407460:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  407464:	2302      	movs	r3, #2
  407466:	e565      	b.n	406f34 <_vfprintf_r+0x218>
  407468:	2a00      	cmp	r2, #0
  40746a:	f040 86e4 	bne.w	408236 <_vfprintf_r+0x151a>
  40746e:	4ba6      	ldr	r3, [pc, #664]	; (407708 <_vfprintf_r+0x9ec>)
  407470:	9318      	str	r3, [sp, #96]	; 0x60
  407472:	e6ff      	b.n	407274 <_vfprintf_r+0x558>
  407474:	990e      	ldr	r1, [sp, #56]	; 0x38
  407476:	f8cd b018 	str.w	fp, [sp, #24]
  40747a:	680a      	ldr	r2, [r1, #0]
  40747c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  407480:	2300      	movs	r3, #0
  407482:	460a      	mov	r2, r1
  407484:	469a      	mov	sl, r3
  407486:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40748a:	3204      	adds	r2, #4
  40748c:	2301      	movs	r3, #1
  40748e:	9307      	str	r3, [sp, #28]
  407490:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  407494:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  407498:	920e      	str	r2, [sp, #56]	; 0x38
  40749a:	930d      	str	r3, [sp, #52]	; 0x34
  40749c:	af26      	add	r7, sp, #152	; 0x98
  40749e:	e575      	b.n	406f8c <_vfprintf_r+0x270>
  4074a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4074a4:	2000      	movs	r0, #0
  4074a6:	f819 6b01 	ldrb.w	r6, [r9], #1
  4074aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4074ae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  4074b2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4074b6:	2b09      	cmp	r3, #9
  4074b8:	d9f5      	bls.n	4074a6 <_vfprintf_r+0x78a>
  4074ba:	900c      	str	r0, [sp, #48]	; 0x30
  4074bc:	e4af      	b.n	406e1e <_vfprintf_r+0x102>
  4074be:	2a00      	cmp	r2, #0
  4074c0:	f040 86c8 	bne.w	408254 <_vfprintf_r+0x1538>
  4074c4:	f04b 0b10 	orr.w	fp, fp, #16
  4074c8:	e726      	b.n	407318 <_vfprintf_r+0x5fc>
  4074ca:	f04b 0b01 	orr.w	fp, fp, #1
  4074ce:	f899 6000 	ldrb.w	r6, [r9]
  4074d2:	e4a2      	b.n	406e1a <_vfprintf_r+0xfe>
  4074d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4074d6:	6823      	ldr	r3, [r4, #0]
  4074d8:	930c      	str	r3, [sp, #48]	; 0x30
  4074da:	4618      	mov	r0, r3
  4074dc:	2800      	cmp	r0, #0
  4074de:	4623      	mov	r3, r4
  4074e0:	f103 0304 	add.w	r3, r3, #4
  4074e4:	f6ff aeb8 	blt.w	407258 <_vfprintf_r+0x53c>
  4074e8:	930e      	str	r3, [sp, #56]	; 0x38
  4074ea:	f899 6000 	ldrb.w	r6, [r9]
  4074ee:	e494      	b.n	406e1a <_vfprintf_r+0xfe>
  4074f0:	2a00      	cmp	r2, #0
  4074f2:	f040 86b7 	bne.w	408264 <_vfprintf_r+0x1548>
  4074f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4074f8:	3507      	adds	r5, #7
  4074fa:	f025 0307 	bic.w	r3, r5, #7
  4074fe:	f103 0208 	add.w	r2, r3, #8
  407502:	920e      	str	r2, [sp, #56]	; 0x38
  407504:	681a      	ldr	r2, [r3, #0]
  407506:	9213      	str	r2, [sp, #76]	; 0x4c
  407508:	685b      	ldr	r3, [r3, #4]
  40750a:	9312      	str	r3, [sp, #72]	; 0x48
  40750c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40750e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  407510:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  407514:	4628      	mov	r0, r5
  407516:	4621      	mov	r1, r4
  407518:	f04f 32ff 	mov.w	r2, #4294967295
  40751c:	4b7b      	ldr	r3, [pc, #492]	; (40770c <_vfprintf_r+0x9f0>)
  40751e:	f003 fcdf 	bl	40aee0 <__aeabi_dcmpun>
  407522:	2800      	cmp	r0, #0
  407524:	f040 83a2 	bne.w	407c6c <_vfprintf_r+0xf50>
  407528:	4628      	mov	r0, r5
  40752a:	4621      	mov	r1, r4
  40752c:	f04f 32ff 	mov.w	r2, #4294967295
  407530:	4b76      	ldr	r3, [pc, #472]	; (40770c <_vfprintf_r+0x9f0>)
  407532:	f003 fcb7 	bl	40aea4 <__aeabi_dcmple>
  407536:	2800      	cmp	r0, #0
  407538:	f040 8398 	bne.w	407c6c <_vfprintf_r+0xf50>
  40753c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40753e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407542:	9912      	ldr	r1, [sp, #72]	; 0x48
  407544:	f003 fca4 	bl	40ae90 <__aeabi_dcmplt>
  407548:	2800      	cmp	r0, #0
  40754a:	f040 8435 	bne.w	407db8 <_vfprintf_r+0x109c>
  40754e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407552:	4f6f      	ldr	r7, [pc, #444]	; (407710 <_vfprintf_r+0x9f4>)
  407554:	4b6f      	ldr	r3, [pc, #444]	; (407714 <_vfprintf_r+0x9f8>)
  407556:	2203      	movs	r2, #3
  407558:	2100      	movs	r1, #0
  40755a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40755e:	9207      	str	r2, [sp, #28]
  407560:	9109      	str	r1, [sp, #36]	; 0x24
  407562:	9006      	str	r0, [sp, #24]
  407564:	2e47      	cmp	r6, #71	; 0x47
  407566:	bfd8      	it	le
  407568:	461f      	movle	r7, r3
  40756a:	920d      	str	r2, [sp, #52]	; 0x34
  40756c:	9110      	str	r1, [sp, #64]	; 0x40
  40756e:	e507      	b.n	406f80 <_vfprintf_r+0x264>
  407570:	f04b 0b08 	orr.w	fp, fp, #8
  407574:	f899 6000 	ldrb.w	r6, [r9]
  407578:	e44f      	b.n	406e1a <_vfprintf_r+0xfe>
  40757a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40757c:	3507      	adds	r5, #7
  40757e:	f025 0307 	bic.w	r3, r5, #7
  407582:	f103 0208 	add.w	r2, r3, #8
  407586:	e9d3 4500 	ldrd	r4, r5, [r3]
  40758a:	920e      	str	r2, [sp, #56]	; 0x38
  40758c:	2300      	movs	r3, #0
  40758e:	e4d1      	b.n	406f34 <_vfprintf_r+0x218>
  407590:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  407592:	3507      	adds	r5, #7
  407594:	f025 0307 	bic.w	r3, r5, #7
  407598:	f103 0208 	add.w	r2, r3, #8
  40759c:	e9d3 4500 	ldrd	r4, r5, [r3]
  4075a0:	920e      	str	r2, [sp, #56]	; 0x38
  4075a2:	2301      	movs	r3, #1
  4075a4:	e4c6      	b.n	406f34 <_vfprintf_r+0x218>
  4075a6:	2a00      	cmp	r2, #0
  4075a8:	f040 8650 	bne.w	40824c <_vfprintf_r+0x1530>
  4075ac:	b1c6      	cbz	r6, 4075e0 <_vfprintf_r+0x8c4>
  4075ae:	2300      	movs	r3, #0
  4075b0:	2201      	movs	r2, #1
  4075b2:	469a      	mov	sl, r3
  4075b4:	9207      	str	r2, [sp, #28]
  4075b6:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  4075ba:	f8cd b018 	str.w	fp, [sp, #24]
  4075be:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4075c2:	9309      	str	r3, [sp, #36]	; 0x24
  4075c4:	9310      	str	r3, [sp, #64]	; 0x40
  4075c6:	920d      	str	r2, [sp, #52]	; 0x34
  4075c8:	af26      	add	r7, sp, #152	; 0x98
  4075ca:	e4df      	b.n	406f8c <_vfprintf_r+0x270>
  4075cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4075ce:	6813      	ldr	r3, [r2, #0]
  4075d0:	3204      	adds	r2, #4
  4075d2:	920e      	str	r2, [sp, #56]	; 0x38
  4075d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4075d6:	601a      	str	r2, [r3, #0]
  4075d8:	f7ff bbec 	b.w	406db4 <_vfprintf_r+0x98>
  4075dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4075de:	e527      	b.n	407030 <_vfprintf_r+0x314>
  4075e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4075e2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4075e6:	2b00      	cmp	r3, #0
  4075e8:	f040 8594 	bne.w	408114 <_vfprintf_r+0x13f8>
  4075ec:	2300      	movs	r3, #0
  4075ee:	9324      	str	r3, [sp, #144]	; 0x90
  4075f0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4075f4:	f013 0f01 	tst.w	r3, #1
  4075f8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4075fc:	d102      	bne.n	407604 <_vfprintf_r+0x8e8>
  4075fe:	059a      	lsls	r2, r3, #22
  407600:	f140 8249 	bpl.w	407a96 <_vfprintf_r+0xd7a>
  407604:	065b      	lsls	r3, r3, #25
  407606:	f53f adec 	bmi.w	4071e2 <_vfprintf_r+0x4c6>
  40760a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40760c:	b041      	add	sp, #260	; 0x104
  40760e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407612:	2e65      	cmp	r6, #101	; 0x65
  407614:	f340 80b2 	ble.w	40777c <_vfprintf_r+0xa60>
  407618:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40761a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40761c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40761e:	9912      	ldr	r1, [sp, #72]	; 0x48
  407620:	f003 fc2c 	bl	40ae7c <__aeabi_dcmpeq>
  407624:	2800      	cmp	r0, #0
  407626:	f000 8160 	beq.w	4078ea <_vfprintf_r+0xbce>
  40762a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40762c:	4a3a      	ldr	r2, [pc, #232]	; (407718 <_vfprintf_r+0x9fc>)
  40762e:	f8c8 2000 	str.w	r2, [r8]
  407632:	3301      	adds	r3, #1
  407634:	3401      	adds	r4, #1
  407636:	2201      	movs	r2, #1
  407638:	2b07      	cmp	r3, #7
  40763a:	9425      	str	r4, [sp, #148]	; 0x94
  40763c:	9324      	str	r3, [sp, #144]	; 0x90
  40763e:	f8c8 2004 	str.w	r2, [r8, #4]
  407642:	f300 83bf 	bgt.w	407dc4 <_vfprintf_r+0x10a8>
  407646:	f108 0808 	add.w	r8, r8, #8
  40764a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40764c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40764e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407650:	4293      	cmp	r3, r2
  407652:	db03      	blt.n	40765c <_vfprintf_r+0x940>
  407654:	9b06      	ldr	r3, [sp, #24]
  407656:	07df      	lsls	r7, r3, #31
  407658:	f57f ad65 	bpl.w	407126 <_vfprintf_r+0x40a>
  40765c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40765e:	9914      	ldr	r1, [sp, #80]	; 0x50
  407660:	9a15      	ldr	r2, [sp, #84]	; 0x54
  407662:	f8c8 2000 	str.w	r2, [r8]
  407666:	3301      	adds	r3, #1
  407668:	440c      	add	r4, r1
  40766a:	2b07      	cmp	r3, #7
  40766c:	f8c8 1004 	str.w	r1, [r8, #4]
  407670:	9425      	str	r4, [sp, #148]	; 0x94
  407672:	9324      	str	r3, [sp, #144]	; 0x90
  407674:	f300 83f8 	bgt.w	407e68 <_vfprintf_r+0x114c>
  407678:	f108 0808 	add.w	r8, r8, #8
  40767c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40767e:	1e5e      	subs	r6, r3, #1
  407680:	2e00      	cmp	r6, #0
  407682:	f77f ad50 	ble.w	407126 <_vfprintf_r+0x40a>
  407686:	2e10      	cmp	r6, #16
  407688:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40768a:	4d24      	ldr	r5, [pc, #144]	; (40771c <_vfprintf_r+0xa00>)
  40768c:	f340 81dd 	ble.w	407a4a <_vfprintf_r+0xd2e>
  407690:	2710      	movs	r7, #16
  407692:	f8dd a020 	ldr.w	sl, [sp, #32]
  407696:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40769a:	e005      	b.n	4076a8 <_vfprintf_r+0x98c>
  40769c:	f108 0808 	add.w	r8, r8, #8
  4076a0:	3e10      	subs	r6, #16
  4076a2:	2e10      	cmp	r6, #16
  4076a4:	f340 81d1 	ble.w	407a4a <_vfprintf_r+0xd2e>
  4076a8:	3301      	adds	r3, #1
  4076aa:	3410      	adds	r4, #16
  4076ac:	2b07      	cmp	r3, #7
  4076ae:	9425      	str	r4, [sp, #148]	; 0x94
  4076b0:	9324      	str	r3, [sp, #144]	; 0x90
  4076b2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4076b6:	ddf1      	ble.n	40769c <_vfprintf_r+0x980>
  4076b8:	aa23      	add	r2, sp, #140	; 0x8c
  4076ba:	4659      	mov	r1, fp
  4076bc:	4650      	mov	r0, sl
  4076be:	f003 f8d7 	bl	40a870 <__sprint_r>
  4076c2:	2800      	cmp	r0, #0
  4076c4:	f040 83cd 	bne.w	407e62 <_vfprintf_r+0x1146>
  4076c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4076ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4076cc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4076d0:	e7e6      	b.n	4076a0 <_vfprintf_r+0x984>
  4076d2:	46aa      	mov	sl, r5
  4076d4:	e78c      	b.n	4075f0 <_vfprintf_r+0x8d4>
  4076d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4076d8:	9a07      	ldr	r2, [sp, #28]
  4076da:	eba3 0a02 	sub.w	sl, r3, r2
  4076de:	f1ba 0f00 	cmp.w	sl, #0
  4076e2:	f77f acca 	ble.w	40707a <_vfprintf_r+0x35e>
  4076e6:	f1ba 0f10 	cmp.w	sl, #16
  4076ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4076ec:	4d0b      	ldr	r5, [pc, #44]	; (40771c <_vfprintf_r+0xa00>)
  4076ee:	dd39      	ble.n	407764 <_vfprintf_r+0xa48>
  4076f0:	4642      	mov	r2, r8
  4076f2:	4621      	mov	r1, r4
  4076f4:	46b0      	mov	r8, r6
  4076f6:	f04f 0b10 	mov.w	fp, #16
  4076fa:	462e      	mov	r6, r5
  4076fc:	9c08      	ldr	r4, [sp, #32]
  4076fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407700:	e015      	b.n	40772e <_vfprintf_r+0xa12>
  407702:	bf00      	nop
  407704:	0040b804 	.word	0x0040b804
  407708:	0040b7f0 	.word	0x0040b7f0
  40770c:	7fefffff 	.word	0x7fefffff
  407710:	0040b7e4 	.word	0x0040b7e4
  407714:	0040b7e0 	.word	0x0040b7e0
  407718:	0040b820 	.word	0x0040b820
  40771c:	0040b834 	.word	0x0040b834
  407720:	f1aa 0a10 	sub.w	sl, sl, #16
  407724:	f1ba 0f10 	cmp.w	sl, #16
  407728:	f102 0208 	add.w	r2, r2, #8
  40772c:	dd16      	ble.n	40775c <_vfprintf_r+0xa40>
  40772e:	3301      	adds	r3, #1
  407730:	3110      	adds	r1, #16
  407732:	2b07      	cmp	r3, #7
  407734:	9125      	str	r1, [sp, #148]	; 0x94
  407736:	9324      	str	r3, [sp, #144]	; 0x90
  407738:	e882 0840 	stmia.w	r2, {r6, fp}
  40773c:	ddf0      	ble.n	407720 <_vfprintf_r+0xa04>
  40773e:	aa23      	add	r2, sp, #140	; 0x8c
  407740:	4629      	mov	r1, r5
  407742:	4620      	mov	r0, r4
  407744:	f003 f894 	bl	40a870 <__sprint_r>
  407748:	2800      	cmp	r0, #0
  40774a:	d1c2      	bne.n	4076d2 <_vfprintf_r+0x9b6>
  40774c:	f1aa 0a10 	sub.w	sl, sl, #16
  407750:	f1ba 0f10 	cmp.w	sl, #16
  407754:	9925      	ldr	r1, [sp, #148]	; 0x94
  407756:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407758:	aa30      	add	r2, sp, #192	; 0xc0
  40775a:	dce8      	bgt.n	40772e <_vfprintf_r+0xa12>
  40775c:	4635      	mov	r5, r6
  40775e:	460c      	mov	r4, r1
  407760:	4646      	mov	r6, r8
  407762:	4690      	mov	r8, r2
  407764:	3301      	adds	r3, #1
  407766:	4454      	add	r4, sl
  407768:	2b07      	cmp	r3, #7
  40776a:	9425      	str	r4, [sp, #148]	; 0x94
  40776c:	9324      	str	r3, [sp, #144]	; 0x90
  40776e:	e888 0420 	stmia.w	r8, {r5, sl}
  407772:	f300 8264 	bgt.w	407c3e <_vfprintf_r+0xf22>
  407776:	f108 0808 	add.w	r8, r8, #8
  40777a:	e47e      	b.n	40707a <_vfprintf_r+0x35e>
  40777c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40777e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407780:	2b01      	cmp	r3, #1
  407782:	f340 81fd 	ble.w	407b80 <_vfprintf_r+0xe64>
  407786:	3601      	adds	r6, #1
  407788:	3401      	adds	r4, #1
  40778a:	2301      	movs	r3, #1
  40778c:	2e07      	cmp	r6, #7
  40778e:	9425      	str	r4, [sp, #148]	; 0x94
  407790:	9624      	str	r6, [sp, #144]	; 0x90
  407792:	f8c8 7000 	str.w	r7, [r8]
  407796:	f8c8 3004 	str.w	r3, [r8, #4]
  40779a:	f300 820e 	bgt.w	407bba <_vfprintf_r+0xe9e>
  40779e:	f108 0808 	add.w	r8, r8, #8
  4077a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4077a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4077a6:	f8c8 3000 	str.w	r3, [r8]
  4077aa:	3601      	adds	r6, #1
  4077ac:	4414      	add	r4, r2
  4077ae:	2e07      	cmp	r6, #7
  4077b0:	9425      	str	r4, [sp, #148]	; 0x94
  4077b2:	9624      	str	r6, [sp, #144]	; 0x90
  4077b4:	f8c8 2004 	str.w	r2, [r8, #4]
  4077b8:	f300 822e 	bgt.w	407c18 <_vfprintf_r+0xefc>
  4077bc:	f108 0808 	add.w	r8, r8, #8
  4077c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4077c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4077c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4077c6:	9912      	ldr	r1, [sp, #72]	; 0x48
  4077c8:	f003 fb58 	bl	40ae7c <__aeabi_dcmpeq>
  4077cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4077ce:	2800      	cmp	r0, #0
  4077d0:	f040 8106 	bne.w	4079e0 <_vfprintf_r+0xcc4>
  4077d4:	3b01      	subs	r3, #1
  4077d6:	3601      	adds	r6, #1
  4077d8:	3701      	adds	r7, #1
  4077da:	441c      	add	r4, r3
  4077dc:	2e07      	cmp	r6, #7
  4077de:	9624      	str	r6, [sp, #144]	; 0x90
  4077e0:	9425      	str	r4, [sp, #148]	; 0x94
  4077e2:	f8c8 7000 	str.w	r7, [r8]
  4077e6:	f8c8 3004 	str.w	r3, [r8, #4]
  4077ea:	f300 81d9 	bgt.w	407ba0 <_vfprintf_r+0xe84>
  4077ee:	f108 0808 	add.w	r8, r8, #8
  4077f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4077f4:	f8c8 2004 	str.w	r2, [r8, #4]
  4077f8:	3601      	adds	r6, #1
  4077fa:	4414      	add	r4, r2
  4077fc:	ab1f      	add	r3, sp, #124	; 0x7c
  4077fe:	2e07      	cmp	r6, #7
  407800:	9425      	str	r4, [sp, #148]	; 0x94
  407802:	9624      	str	r6, [sp, #144]	; 0x90
  407804:	f8c8 3000 	str.w	r3, [r8]
  407808:	f77f ac8b 	ble.w	407122 <_vfprintf_r+0x406>
  40780c:	aa23      	add	r2, sp, #140	; 0x8c
  40780e:	990a      	ldr	r1, [sp, #40]	; 0x28
  407810:	9808      	ldr	r0, [sp, #32]
  407812:	f003 f82d 	bl	40a870 <__sprint_r>
  407816:	b958      	cbnz	r0, 407830 <_vfprintf_r+0xb14>
  407818:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40781a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40781e:	e482      	b.n	407126 <_vfprintf_r+0x40a>
  407820:	aa23      	add	r2, sp, #140	; 0x8c
  407822:	990a      	ldr	r1, [sp, #40]	; 0x28
  407824:	9808      	ldr	r0, [sp, #32]
  407826:	f003 f823 	bl	40a870 <__sprint_r>
  40782a:	2800      	cmp	r0, #0
  40782c:	f43f acc5 	beq.w	4071ba <_vfprintf_r+0x49e>
  407830:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  407834:	e6dc      	b.n	4075f0 <_vfprintf_r+0x8d4>
  407836:	f8dd b018 	ldr.w	fp, [sp, #24]
  40783a:	2b01      	cmp	r3, #1
  40783c:	f000 8121 	beq.w	407a82 <_vfprintf_r+0xd66>
  407840:	2b02      	cmp	r3, #2
  407842:	d127      	bne.n	407894 <_vfprintf_r+0xb78>
  407844:	f8cd b018 	str.w	fp, [sp, #24]
  407848:	2400      	movs	r4, #0
  40784a:	2500      	movs	r5, #0
  40784c:	e591      	b.n	407372 <_vfprintf_r+0x656>
  40784e:	aa23      	add	r2, sp, #140	; 0x8c
  407850:	990a      	ldr	r1, [sp, #40]	; 0x28
  407852:	9808      	ldr	r0, [sp, #32]
  407854:	f003 f80c 	bl	40a870 <__sprint_r>
  407858:	2800      	cmp	r0, #0
  40785a:	d1e9      	bne.n	407830 <_vfprintf_r+0xb14>
  40785c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40785e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407862:	e44d      	b.n	407100 <_vfprintf_r+0x3e4>
  407864:	aa23      	add	r2, sp, #140	; 0x8c
  407866:	990a      	ldr	r1, [sp, #40]	; 0x28
  407868:	9808      	ldr	r0, [sp, #32]
  40786a:	f003 f801 	bl	40a870 <__sprint_r>
  40786e:	2800      	cmp	r0, #0
  407870:	d1de      	bne.n	407830 <_vfprintf_r+0xb14>
  407872:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407874:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407878:	f7ff bbec 	b.w	407054 <_vfprintf_r+0x338>
  40787c:	aa23      	add	r2, sp, #140	; 0x8c
  40787e:	990a      	ldr	r1, [sp, #40]	; 0x28
  407880:	9808      	ldr	r0, [sp, #32]
  407882:	f002 fff5 	bl	40a870 <__sprint_r>
  407886:	2800      	cmp	r0, #0
  407888:	d1d2      	bne.n	407830 <_vfprintf_r+0xb14>
  40788a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40788c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407890:	f7ff bbf0 	b.w	407074 <_vfprintf_r+0x358>
  407894:	f8cd b018 	str.w	fp, [sp, #24]
  407898:	2400      	movs	r4, #0
  40789a:	2500      	movs	r5, #0
  40789c:	a930      	add	r1, sp, #192	; 0xc0
  40789e:	e000      	b.n	4078a2 <_vfprintf_r+0xb86>
  4078a0:	4639      	mov	r1, r7
  4078a2:	08e2      	lsrs	r2, r4, #3
  4078a4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4078a8:	08e8      	lsrs	r0, r5, #3
  4078aa:	f004 0307 	and.w	r3, r4, #7
  4078ae:	4605      	mov	r5, r0
  4078b0:	4614      	mov	r4, r2
  4078b2:	3330      	adds	r3, #48	; 0x30
  4078b4:	ea54 0205 	orrs.w	r2, r4, r5
  4078b8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4078bc:	f101 37ff 	add.w	r7, r1, #4294967295
  4078c0:	d1ee      	bne.n	4078a0 <_vfprintf_r+0xb84>
  4078c2:	9a06      	ldr	r2, [sp, #24]
  4078c4:	07d2      	lsls	r2, r2, #31
  4078c6:	f57f ad64 	bpl.w	407392 <_vfprintf_r+0x676>
  4078ca:	2b30      	cmp	r3, #48	; 0x30
  4078cc:	f43f ad61 	beq.w	407392 <_vfprintf_r+0x676>
  4078d0:	2330      	movs	r3, #48	; 0x30
  4078d2:	3902      	subs	r1, #2
  4078d4:	f807 3c01 	strb.w	r3, [r7, #-1]
  4078d8:	ab30      	add	r3, sp, #192	; 0xc0
  4078da:	1a5b      	subs	r3, r3, r1
  4078dc:	930d      	str	r3, [sp, #52]	; 0x34
  4078de:	460f      	mov	r7, r1
  4078e0:	f7ff bb46 	b.w	406f70 <_vfprintf_r+0x254>
  4078e4:	2302      	movs	r3, #2
  4078e6:	f7ff bb25 	b.w	406f34 <_vfprintf_r+0x218>
  4078ea:	991d      	ldr	r1, [sp, #116]	; 0x74
  4078ec:	2900      	cmp	r1, #0
  4078ee:	f340 8274 	ble.w	407dda <_vfprintf_r+0x10be>
  4078f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4078f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4078f6:	4293      	cmp	r3, r2
  4078f8:	bfa8      	it	ge
  4078fa:	4613      	movge	r3, r2
  4078fc:	2b00      	cmp	r3, #0
  4078fe:	461e      	mov	r6, r3
  407900:	dd0d      	ble.n	40791e <_vfprintf_r+0xc02>
  407902:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407904:	f8c8 7000 	str.w	r7, [r8]
  407908:	3301      	adds	r3, #1
  40790a:	4434      	add	r4, r6
  40790c:	2b07      	cmp	r3, #7
  40790e:	9425      	str	r4, [sp, #148]	; 0x94
  407910:	f8c8 6004 	str.w	r6, [r8, #4]
  407914:	9324      	str	r3, [sp, #144]	; 0x90
  407916:	f300 8324 	bgt.w	407f62 <_vfprintf_r+0x1246>
  40791a:	f108 0808 	add.w	r8, r8, #8
  40791e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407920:	2e00      	cmp	r6, #0
  407922:	bfa8      	it	ge
  407924:	1b9b      	subge	r3, r3, r6
  407926:	2b00      	cmp	r3, #0
  407928:	461e      	mov	r6, r3
  40792a:	f340 80d0 	ble.w	407ace <_vfprintf_r+0xdb2>
  40792e:	2e10      	cmp	r6, #16
  407930:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407932:	4dc0      	ldr	r5, [pc, #768]	; (407c34 <_vfprintf_r+0xf18>)
  407934:	f340 80b7 	ble.w	407aa6 <_vfprintf_r+0xd8a>
  407938:	4622      	mov	r2, r4
  40793a:	f04f 0a10 	mov.w	sl, #16
  40793e:	f8dd b020 	ldr.w	fp, [sp, #32]
  407942:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407944:	e005      	b.n	407952 <_vfprintf_r+0xc36>
  407946:	f108 0808 	add.w	r8, r8, #8
  40794a:	3e10      	subs	r6, #16
  40794c:	2e10      	cmp	r6, #16
  40794e:	f340 80a9 	ble.w	407aa4 <_vfprintf_r+0xd88>
  407952:	3301      	adds	r3, #1
  407954:	3210      	adds	r2, #16
  407956:	2b07      	cmp	r3, #7
  407958:	9225      	str	r2, [sp, #148]	; 0x94
  40795a:	9324      	str	r3, [sp, #144]	; 0x90
  40795c:	e888 0420 	stmia.w	r8, {r5, sl}
  407960:	ddf1      	ble.n	407946 <_vfprintf_r+0xc2a>
  407962:	aa23      	add	r2, sp, #140	; 0x8c
  407964:	4621      	mov	r1, r4
  407966:	4658      	mov	r0, fp
  407968:	f002 ff82 	bl	40a870 <__sprint_r>
  40796c:	2800      	cmp	r0, #0
  40796e:	f040 8324 	bne.w	407fba <_vfprintf_r+0x129e>
  407972:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407974:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407976:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40797a:	e7e6      	b.n	40794a <_vfprintf_r+0xc2e>
  40797c:	2d00      	cmp	r5, #0
  40797e:	bf08      	it	eq
  407980:	2c0a      	cmpeq	r4, #10
  407982:	d37c      	bcc.n	407a7e <_vfprintf_r+0xd62>
  407984:	af30      	add	r7, sp, #192	; 0xc0
  407986:	4620      	mov	r0, r4
  407988:	4629      	mov	r1, r5
  40798a:	220a      	movs	r2, #10
  40798c:	2300      	movs	r3, #0
  40798e:	f003 fae5 	bl	40af5c <__aeabi_uldivmod>
  407992:	3230      	adds	r2, #48	; 0x30
  407994:	f807 2d01 	strb.w	r2, [r7, #-1]!
  407998:	4620      	mov	r0, r4
  40799a:	4629      	mov	r1, r5
  40799c:	2300      	movs	r3, #0
  40799e:	220a      	movs	r2, #10
  4079a0:	f003 fadc 	bl	40af5c <__aeabi_uldivmod>
  4079a4:	4604      	mov	r4, r0
  4079a6:	460d      	mov	r5, r1
  4079a8:	ea54 0305 	orrs.w	r3, r4, r5
  4079ac:	d1eb      	bne.n	407986 <_vfprintf_r+0xc6a>
  4079ae:	ab30      	add	r3, sp, #192	; 0xc0
  4079b0:	1bdb      	subs	r3, r3, r7
  4079b2:	930d      	str	r3, [sp, #52]	; 0x34
  4079b4:	f7ff badc 	b.w	406f70 <_vfprintf_r+0x254>
  4079b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4079ba:	930d      	str	r3, [sp, #52]	; 0x34
  4079bc:	af30      	add	r7, sp, #192	; 0xc0
  4079be:	f7ff bad7 	b.w	406f70 <_vfprintf_r+0x254>
  4079c2:	aa23      	add	r2, sp, #140	; 0x8c
  4079c4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4079c6:	9808      	ldr	r0, [sp, #32]
  4079c8:	f002 ff52 	bl	40a870 <__sprint_r>
  4079cc:	2800      	cmp	r0, #0
  4079ce:	f47f af2f 	bne.w	407830 <_vfprintf_r+0xb14>
  4079d2:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4079d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4079d8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4079dc:	f7ff bb28 	b.w	407030 <_vfprintf_r+0x314>
  4079e0:	1e5f      	subs	r7, r3, #1
  4079e2:	2f00      	cmp	r7, #0
  4079e4:	f77f af05 	ble.w	4077f2 <_vfprintf_r+0xad6>
  4079e8:	2f10      	cmp	r7, #16
  4079ea:	4d92      	ldr	r5, [pc, #584]	; (407c34 <_vfprintf_r+0xf18>)
  4079ec:	f340 810a 	ble.w	407c04 <_vfprintf_r+0xee8>
  4079f0:	f04f 0a10 	mov.w	sl, #16
  4079f4:	f8dd b020 	ldr.w	fp, [sp, #32]
  4079f8:	e005      	b.n	407a06 <_vfprintf_r+0xcea>
  4079fa:	f108 0808 	add.w	r8, r8, #8
  4079fe:	3f10      	subs	r7, #16
  407a00:	2f10      	cmp	r7, #16
  407a02:	f340 80ff 	ble.w	407c04 <_vfprintf_r+0xee8>
  407a06:	3601      	adds	r6, #1
  407a08:	3410      	adds	r4, #16
  407a0a:	2e07      	cmp	r6, #7
  407a0c:	9425      	str	r4, [sp, #148]	; 0x94
  407a0e:	9624      	str	r6, [sp, #144]	; 0x90
  407a10:	e888 0420 	stmia.w	r8, {r5, sl}
  407a14:	ddf1      	ble.n	4079fa <_vfprintf_r+0xcde>
  407a16:	aa23      	add	r2, sp, #140	; 0x8c
  407a18:	990a      	ldr	r1, [sp, #40]	; 0x28
  407a1a:	4658      	mov	r0, fp
  407a1c:	f002 ff28 	bl	40a870 <__sprint_r>
  407a20:	2800      	cmp	r0, #0
  407a22:	f47f af05 	bne.w	407830 <_vfprintf_r+0xb14>
  407a26:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407a28:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407a2a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407a2e:	e7e6      	b.n	4079fe <_vfprintf_r+0xce2>
  407a30:	990e      	ldr	r1, [sp, #56]	; 0x38
  407a32:	460a      	mov	r2, r1
  407a34:	3204      	adds	r2, #4
  407a36:	680c      	ldr	r4, [r1, #0]
  407a38:	920e      	str	r2, [sp, #56]	; 0x38
  407a3a:	2500      	movs	r5, #0
  407a3c:	f7ff ba7a 	b.w	406f34 <_vfprintf_r+0x218>
  407a40:	681c      	ldr	r4, [r3, #0]
  407a42:	3304      	adds	r3, #4
  407a44:	930e      	str	r3, [sp, #56]	; 0x38
  407a46:	2500      	movs	r5, #0
  407a48:	e426      	b.n	407298 <_vfprintf_r+0x57c>
  407a4a:	3301      	adds	r3, #1
  407a4c:	4434      	add	r4, r6
  407a4e:	2b07      	cmp	r3, #7
  407a50:	9425      	str	r4, [sp, #148]	; 0x94
  407a52:	9324      	str	r3, [sp, #144]	; 0x90
  407a54:	e888 0060 	stmia.w	r8, {r5, r6}
  407a58:	f77f ab63 	ble.w	407122 <_vfprintf_r+0x406>
  407a5c:	e6d6      	b.n	40780c <_vfprintf_r+0xaf0>
  407a5e:	3204      	adds	r2, #4
  407a60:	681c      	ldr	r4, [r3, #0]
  407a62:	920e      	str	r2, [sp, #56]	; 0x38
  407a64:	2301      	movs	r3, #1
  407a66:	2500      	movs	r5, #0
  407a68:	f7ff ba64 	b.w	406f34 <_vfprintf_r+0x218>
  407a6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407a6e:	6814      	ldr	r4, [r2, #0]
  407a70:	4613      	mov	r3, r2
  407a72:	3304      	adds	r3, #4
  407a74:	17e5      	asrs	r5, r4, #31
  407a76:	930e      	str	r3, [sp, #56]	; 0x38
  407a78:	4622      	mov	r2, r4
  407a7a:	462b      	mov	r3, r5
  407a7c:	e460      	b.n	407340 <_vfprintf_r+0x624>
  407a7e:	f8dd b018 	ldr.w	fp, [sp, #24]
  407a82:	f8cd b018 	str.w	fp, [sp, #24]
  407a86:	af40      	add	r7, sp, #256	; 0x100
  407a88:	3430      	adds	r4, #48	; 0x30
  407a8a:	2301      	movs	r3, #1
  407a8c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  407a90:	930d      	str	r3, [sp, #52]	; 0x34
  407a92:	f7ff ba6d 	b.w	406f70 <_vfprintf_r+0x254>
  407a96:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  407a9a:	f002 f895 	bl	409bc8 <__retarget_lock_release_recursive>
  407a9e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  407aa2:	e5af      	b.n	407604 <_vfprintf_r+0x8e8>
  407aa4:	4614      	mov	r4, r2
  407aa6:	3301      	adds	r3, #1
  407aa8:	4434      	add	r4, r6
  407aaa:	2b07      	cmp	r3, #7
  407aac:	9425      	str	r4, [sp, #148]	; 0x94
  407aae:	9324      	str	r3, [sp, #144]	; 0x90
  407ab0:	e888 0060 	stmia.w	r8, {r5, r6}
  407ab4:	f340 816d 	ble.w	407d92 <_vfprintf_r+0x1076>
  407ab8:	aa23      	add	r2, sp, #140	; 0x8c
  407aba:	990a      	ldr	r1, [sp, #40]	; 0x28
  407abc:	9808      	ldr	r0, [sp, #32]
  407abe:	f002 fed7 	bl	40a870 <__sprint_r>
  407ac2:	2800      	cmp	r0, #0
  407ac4:	f47f aeb4 	bne.w	407830 <_vfprintf_r+0xb14>
  407ac8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407aca:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407ace:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407ad0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407ad2:	4293      	cmp	r3, r2
  407ad4:	f280 8158 	bge.w	407d88 <_vfprintf_r+0x106c>
  407ad8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407ada:	9814      	ldr	r0, [sp, #80]	; 0x50
  407adc:	9915      	ldr	r1, [sp, #84]	; 0x54
  407ade:	f8c8 1000 	str.w	r1, [r8]
  407ae2:	3201      	adds	r2, #1
  407ae4:	4404      	add	r4, r0
  407ae6:	2a07      	cmp	r2, #7
  407ae8:	9425      	str	r4, [sp, #148]	; 0x94
  407aea:	f8c8 0004 	str.w	r0, [r8, #4]
  407aee:	9224      	str	r2, [sp, #144]	; 0x90
  407af0:	f300 8152 	bgt.w	407d98 <_vfprintf_r+0x107c>
  407af4:	f108 0808 	add.w	r8, r8, #8
  407af8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407afa:	9910      	ldr	r1, [sp, #64]	; 0x40
  407afc:	1ad3      	subs	r3, r2, r3
  407afe:	1a56      	subs	r6, r2, r1
  407b00:	429e      	cmp	r6, r3
  407b02:	bfa8      	it	ge
  407b04:	461e      	movge	r6, r3
  407b06:	2e00      	cmp	r6, #0
  407b08:	dd0e      	ble.n	407b28 <_vfprintf_r+0xe0c>
  407b0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407b0c:	f8c8 6004 	str.w	r6, [r8, #4]
  407b10:	3201      	adds	r2, #1
  407b12:	440f      	add	r7, r1
  407b14:	4434      	add	r4, r6
  407b16:	2a07      	cmp	r2, #7
  407b18:	f8c8 7000 	str.w	r7, [r8]
  407b1c:	9425      	str	r4, [sp, #148]	; 0x94
  407b1e:	9224      	str	r2, [sp, #144]	; 0x90
  407b20:	f300 823c 	bgt.w	407f9c <_vfprintf_r+0x1280>
  407b24:	f108 0808 	add.w	r8, r8, #8
  407b28:	2e00      	cmp	r6, #0
  407b2a:	bfac      	ite	ge
  407b2c:	1b9e      	subge	r6, r3, r6
  407b2e:	461e      	movlt	r6, r3
  407b30:	2e00      	cmp	r6, #0
  407b32:	f77f aaf8 	ble.w	407126 <_vfprintf_r+0x40a>
  407b36:	2e10      	cmp	r6, #16
  407b38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b3a:	4d3e      	ldr	r5, [pc, #248]	; (407c34 <_vfprintf_r+0xf18>)
  407b3c:	dd85      	ble.n	407a4a <_vfprintf_r+0xd2e>
  407b3e:	2710      	movs	r7, #16
  407b40:	f8dd a020 	ldr.w	sl, [sp, #32]
  407b44:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407b48:	e005      	b.n	407b56 <_vfprintf_r+0xe3a>
  407b4a:	f108 0808 	add.w	r8, r8, #8
  407b4e:	3e10      	subs	r6, #16
  407b50:	2e10      	cmp	r6, #16
  407b52:	f77f af7a 	ble.w	407a4a <_vfprintf_r+0xd2e>
  407b56:	3301      	adds	r3, #1
  407b58:	3410      	adds	r4, #16
  407b5a:	2b07      	cmp	r3, #7
  407b5c:	9425      	str	r4, [sp, #148]	; 0x94
  407b5e:	9324      	str	r3, [sp, #144]	; 0x90
  407b60:	e888 00a0 	stmia.w	r8, {r5, r7}
  407b64:	ddf1      	ble.n	407b4a <_vfprintf_r+0xe2e>
  407b66:	aa23      	add	r2, sp, #140	; 0x8c
  407b68:	4659      	mov	r1, fp
  407b6a:	4650      	mov	r0, sl
  407b6c:	f002 fe80 	bl	40a870 <__sprint_r>
  407b70:	2800      	cmp	r0, #0
  407b72:	f040 8176 	bne.w	407e62 <_vfprintf_r+0x1146>
  407b76:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407b78:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b7a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407b7e:	e7e6      	b.n	407b4e <_vfprintf_r+0xe32>
  407b80:	9b06      	ldr	r3, [sp, #24]
  407b82:	07d8      	lsls	r0, r3, #31
  407b84:	f53f adff 	bmi.w	407786 <_vfprintf_r+0xa6a>
  407b88:	3601      	adds	r6, #1
  407b8a:	3401      	adds	r4, #1
  407b8c:	2301      	movs	r3, #1
  407b8e:	2e07      	cmp	r6, #7
  407b90:	9425      	str	r4, [sp, #148]	; 0x94
  407b92:	9624      	str	r6, [sp, #144]	; 0x90
  407b94:	f8c8 7000 	str.w	r7, [r8]
  407b98:	f8c8 3004 	str.w	r3, [r8, #4]
  407b9c:	f77f ae27 	ble.w	4077ee <_vfprintf_r+0xad2>
  407ba0:	aa23      	add	r2, sp, #140	; 0x8c
  407ba2:	990a      	ldr	r1, [sp, #40]	; 0x28
  407ba4:	9808      	ldr	r0, [sp, #32]
  407ba6:	f002 fe63 	bl	40a870 <__sprint_r>
  407baa:	2800      	cmp	r0, #0
  407bac:	f47f ae40 	bne.w	407830 <_vfprintf_r+0xb14>
  407bb0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407bb2:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407bb4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407bb8:	e61b      	b.n	4077f2 <_vfprintf_r+0xad6>
  407bba:	aa23      	add	r2, sp, #140	; 0x8c
  407bbc:	990a      	ldr	r1, [sp, #40]	; 0x28
  407bbe:	9808      	ldr	r0, [sp, #32]
  407bc0:	f002 fe56 	bl	40a870 <__sprint_r>
  407bc4:	2800      	cmp	r0, #0
  407bc6:	f47f ae33 	bne.w	407830 <_vfprintf_r+0xb14>
  407bca:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407bcc:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407bce:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407bd2:	e5e6      	b.n	4077a2 <_vfprintf_r+0xa86>
  407bd4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  407bd6:	3507      	adds	r5, #7
  407bd8:	f025 0507 	bic.w	r5, r5, #7
  407bdc:	e9d5 2300 	ldrd	r2, r3, [r5]
  407be0:	f105 0108 	add.w	r1, r5, #8
  407be4:	910e      	str	r1, [sp, #56]	; 0x38
  407be6:	4614      	mov	r4, r2
  407be8:	461d      	mov	r5, r3
  407bea:	f7ff bba9 	b.w	407340 <_vfprintf_r+0x624>
  407bee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  407bf0:	3507      	adds	r5, #7
  407bf2:	f025 0307 	bic.w	r3, r5, #7
  407bf6:	f103 0208 	add.w	r2, r3, #8
  407bfa:	920e      	str	r2, [sp, #56]	; 0x38
  407bfc:	e9d3 4500 	ldrd	r4, r5, [r3]
  407c00:	f7ff bb4a 	b.w	407298 <_vfprintf_r+0x57c>
  407c04:	3601      	adds	r6, #1
  407c06:	443c      	add	r4, r7
  407c08:	2e07      	cmp	r6, #7
  407c0a:	9425      	str	r4, [sp, #148]	; 0x94
  407c0c:	9624      	str	r6, [sp, #144]	; 0x90
  407c0e:	e888 00a0 	stmia.w	r8, {r5, r7}
  407c12:	f77f adec 	ble.w	4077ee <_vfprintf_r+0xad2>
  407c16:	e7c3      	b.n	407ba0 <_vfprintf_r+0xe84>
  407c18:	aa23      	add	r2, sp, #140	; 0x8c
  407c1a:	990a      	ldr	r1, [sp, #40]	; 0x28
  407c1c:	9808      	ldr	r0, [sp, #32]
  407c1e:	f002 fe27 	bl	40a870 <__sprint_r>
  407c22:	2800      	cmp	r0, #0
  407c24:	f47f ae04 	bne.w	407830 <_vfprintf_r+0xb14>
  407c28:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407c2a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407c2c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407c30:	e5c6      	b.n	4077c0 <_vfprintf_r+0xaa4>
  407c32:	bf00      	nop
  407c34:	0040b834 	.word	0x0040b834
  407c38:	af30      	add	r7, sp, #192	; 0xc0
  407c3a:	f7ff b999 	b.w	406f70 <_vfprintf_r+0x254>
  407c3e:	aa23      	add	r2, sp, #140	; 0x8c
  407c40:	990a      	ldr	r1, [sp, #40]	; 0x28
  407c42:	9808      	ldr	r0, [sp, #32]
  407c44:	f002 fe14 	bl	40a870 <__sprint_r>
  407c48:	2800      	cmp	r0, #0
  407c4a:	f47f adf1 	bne.w	407830 <_vfprintf_r+0xb14>
  407c4e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407c50:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407c54:	f7ff ba11 	b.w	40707a <_vfprintf_r+0x35e>
  407c58:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  407c5c:	4264      	negs	r4, r4
  407c5e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  407c62:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  407c66:	2301      	movs	r3, #1
  407c68:	f7ff b968 	b.w	406f3c <_vfprintf_r+0x220>
  407c6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  407c6e:	4622      	mov	r2, r4
  407c70:	4620      	mov	r0, r4
  407c72:	9c12      	ldr	r4, [sp, #72]	; 0x48
  407c74:	4623      	mov	r3, r4
  407c76:	4621      	mov	r1, r4
  407c78:	f003 f932 	bl	40aee0 <__aeabi_dcmpun>
  407c7c:	2800      	cmp	r0, #0
  407c7e:	f040 828c 	bne.w	40819a <_vfprintf_r+0x147e>
  407c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407c84:	3301      	adds	r3, #1
  407c86:	f026 0320 	bic.w	r3, r6, #32
  407c8a:	930d      	str	r3, [sp, #52]	; 0x34
  407c8c:	f000 8091 	beq.w	407db2 <_vfprintf_r+0x1096>
  407c90:	2b47      	cmp	r3, #71	; 0x47
  407c92:	d104      	bne.n	407c9e <_vfprintf_r+0xf82>
  407c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407c96:	2b00      	cmp	r3, #0
  407c98:	bf08      	it	eq
  407c9a:	2301      	moveq	r3, #1
  407c9c:	9309      	str	r3, [sp, #36]	; 0x24
  407c9e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  407ca2:	9306      	str	r3, [sp, #24]
  407ca4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407ca6:	f1b3 0a00 	subs.w	sl, r3, #0
  407caa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407cac:	9307      	str	r3, [sp, #28]
  407cae:	bfbb      	ittet	lt
  407cb0:	4653      	movlt	r3, sl
  407cb2:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  407cb6:	2300      	movge	r3, #0
  407cb8:	232d      	movlt	r3, #45	; 0x2d
  407cba:	2e66      	cmp	r6, #102	; 0x66
  407cbc:	930f      	str	r3, [sp, #60]	; 0x3c
  407cbe:	f000 817f 	beq.w	407fc0 <_vfprintf_r+0x12a4>
  407cc2:	2e46      	cmp	r6, #70	; 0x46
  407cc4:	f000 81d4 	beq.w	408070 <_vfprintf_r+0x1354>
  407cc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407cca:	9a07      	ldr	r2, [sp, #28]
  407ccc:	2b45      	cmp	r3, #69	; 0x45
  407cce:	bf0c      	ite	eq
  407cd0:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  407cd2:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  407cd4:	a821      	add	r0, sp, #132	; 0x84
  407cd6:	a91e      	add	r1, sp, #120	; 0x78
  407cd8:	bf08      	it	eq
  407cda:	1c5d      	addeq	r5, r3, #1
  407cdc:	9004      	str	r0, [sp, #16]
  407cde:	9103      	str	r1, [sp, #12]
  407ce0:	a81d      	add	r0, sp, #116	; 0x74
  407ce2:	2102      	movs	r1, #2
  407ce4:	9002      	str	r0, [sp, #8]
  407ce6:	4653      	mov	r3, sl
  407ce8:	9501      	str	r5, [sp, #4]
  407cea:	9100      	str	r1, [sp, #0]
  407cec:	9808      	ldr	r0, [sp, #32]
  407cee:	f000 fc0b 	bl	408508 <_dtoa_r>
  407cf2:	2e67      	cmp	r6, #103	; 0x67
  407cf4:	4607      	mov	r7, r0
  407cf6:	f040 81af 	bne.w	408058 <_vfprintf_r+0x133c>
  407cfa:	f01b 0f01 	tst.w	fp, #1
  407cfe:	f000 8213 	beq.w	408128 <_vfprintf_r+0x140c>
  407d02:	197c      	adds	r4, r7, r5
  407d04:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407d06:	9807      	ldr	r0, [sp, #28]
  407d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407d0a:	4651      	mov	r1, sl
  407d0c:	f003 f8b6 	bl	40ae7c <__aeabi_dcmpeq>
  407d10:	2800      	cmp	r0, #0
  407d12:	f040 8132 	bne.w	407f7a <_vfprintf_r+0x125e>
  407d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407d18:	42a3      	cmp	r3, r4
  407d1a:	d206      	bcs.n	407d2a <_vfprintf_r+0x100e>
  407d1c:	2130      	movs	r1, #48	; 0x30
  407d1e:	1c5a      	adds	r2, r3, #1
  407d20:	9221      	str	r2, [sp, #132]	; 0x84
  407d22:	7019      	strb	r1, [r3, #0]
  407d24:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407d26:	429c      	cmp	r4, r3
  407d28:	d8f9      	bhi.n	407d1e <_vfprintf_r+0x1002>
  407d2a:	1bdb      	subs	r3, r3, r7
  407d2c:	9311      	str	r3, [sp, #68]	; 0x44
  407d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407d30:	2b47      	cmp	r3, #71	; 0x47
  407d32:	f000 80b9 	beq.w	407ea8 <_vfprintf_r+0x118c>
  407d36:	2e65      	cmp	r6, #101	; 0x65
  407d38:	f340 8276 	ble.w	408228 <_vfprintf_r+0x150c>
  407d3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407d3e:	9310      	str	r3, [sp, #64]	; 0x40
  407d40:	2e66      	cmp	r6, #102	; 0x66
  407d42:	f000 8162 	beq.w	40800a <_vfprintf_r+0x12ee>
  407d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407d48:	9a10      	ldr	r2, [sp, #64]	; 0x40
  407d4a:	4619      	mov	r1, r3
  407d4c:	4291      	cmp	r1, r2
  407d4e:	f300 814f 	bgt.w	407ff0 <_vfprintf_r+0x12d4>
  407d52:	f01b 0f01 	tst.w	fp, #1
  407d56:	f040 8209 	bne.w	40816c <_vfprintf_r+0x1450>
  407d5a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407d5e:	9307      	str	r3, [sp, #28]
  407d60:	920d      	str	r2, [sp, #52]	; 0x34
  407d62:	2667      	movs	r6, #103	; 0x67
  407d64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407d66:	2b00      	cmp	r3, #0
  407d68:	f040 8096 	bne.w	407e98 <_vfprintf_r+0x117c>
  407d6c:	9309      	str	r3, [sp, #36]	; 0x24
  407d6e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407d72:	f7ff b905 	b.w	406f80 <_vfprintf_r+0x264>
  407d76:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  407d7a:	f001 ff25 	bl	409bc8 <__retarget_lock_release_recursive>
  407d7e:	f04f 33ff 	mov.w	r3, #4294967295
  407d82:	930b      	str	r3, [sp, #44]	; 0x2c
  407d84:	f7ff ba30 	b.w	4071e8 <_vfprintf_r+0x4cc>
  407d88:	9a06      	ldr	r2, [sp, #24]
  407d8a:	07d5      	lsls	r5, r2, #31
  407d8c:	f57f aeb4 	bpl.w	407af8 <_vfprintf_r+0xddc>
  407d90:	e6a2      	b.n	407ad8 <_vfprintf_r+0xdbc>
  407d92:	f108 0808 	add.w	r8, r8, #8
  407d96:	e69a      	b.n	407ace <_vfprintf_r+0xdb2>
  407d98:	aa23      	add	r2, sp, #140	; 0x8c
  407d9a:	990a      	ldr	r1, [sp, #40]	; 0x28
  407d9c:	9808      	ldr	r0, [sp, #32]
  407d9e:	f002 fd67 	bl	40a870 <__sprint_r>
  407da2:	2800      	cmp	r0, #0
  407da4:	f47f ad44 	bne.w	407830 <_vfprintf_r+0xb14>
  407da8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407daa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407dac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407db0:	e6a2      	b.n	407af8 <_vfprintf_r+0xddc>
  407db2:	2306      	movs	r3, #6
  407db4:	9309      	str	r3, [sp, #36]	; 0x24
  407db6:	e772      	b.n	407c9e <_vfprintf_r+0xf82>
  407db8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  407dbc:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  407dc0:	f7ff bbc7 	b.w	407552 <_vfprintf_r+0x836>
  407dc4:	aa23      	add	r2, sp, #140	; 0x8c
  407dc6:	990a      	ldr	r1, [sp, #40]	; 0x28
  407dc8:	9808      	ldr	r0, [sp, #32]
  407dca:	f002 fd51 	bl	40a870 <__sprint_r>
  407dce:	2800      	cmp	r0, #0
  407dd0:	f47f ad2e 	bne.w	407830 <_vfprintf_r+0xb14>
  407dd4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407dd8:	e437      	b.n	40764a <_vfprintf_r+0x92e>
  407dda:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407ddc:	4ab4      	ldr	r2, [pc, #720]	; (4080b0 <_vfprintf_r+0x1394>)
  407dde:	f8c8 2000 	str.w	r2, [r8]
  407de2:	3301      	adds	r3, #1
  407de4:	3401      	adds	r4, #1
  407de6:	2201      	movs	r2, #1
  407de8:	2b07      	cmp	r3, #7
  407dea:	9425      	str	r4, [sp, #148]	; 0x94
  407dec:	9324      	str	r3, [sp, #144]	; 0x90
  407dee:	f8c8 2004 	str.w	r2, [r8, #4]
  407df2:	f300 8124 	bgt.w	40803e <_vfprintf_r+0x1322>
  407df6:	f108 0808 	add.w	r8, r8, #8
  407dfa:	b929      	cbnz	r1, 407e08 <_vfprintf_r+0x10ec>
  407dfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407dfe:	b91b      	cbnz	r3, 407e08 <_vfprintf_r+0x10ec>
  407e00:	9b06      	ldr	r3, [sp, #24]
  407e02:	07de      	lsls	r6, r3, #31
  407e04:	f57f a98f 	bpl.w	407126 <_vfprintf_r+0x40a>
  407e08:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407e0a:	9814      	ldr	r0, [sp, #80]	; 0x50
  407e0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  407e0e:	f8c8 2000 	str.w	r2, [r8]
  407e12:	3301      	adds	r3, #1
  407e14:	4602      	mov	r2, r0
  407e16:	4422      	add	r2, r4
  407e18:	2b07      	cmp	r3, #7
  407e1a:	9225      	str	r2, [sp, #148]	; 0x94
  407e1c:	f8c8 0004 	str.w	r0, [r8, #4]
  407e20:	9324      	str	r3, [sp, #144]	; 0x90
  407e22:	f300 8169 	bgt.w	4080f8 <_vfprintf_r+0x13dc>
  407e26:	f108 0808 	add.w	r8, r8, #8
  407e2a:	2900      	cmp	r1, #0
  407e2c:	f2c0 8136 	blt.w	40809c <_vfprintf_r+0x1380>
  407e30:	9911      	ldr	r1, [sp, #68]	; 0x44
  407e32:	f8c8 7000 	str.w	r7, [r8]
  407e36:	3301      	adds	r3, #1
  407e38:	188c      	adds	r4, r1, r2
  407e3a:	2b07      	cmp	r3, #7
  407e3c:	9425      	str	r4, [sp, #148]	; 0x94
  407e3e:	9324      	str	r3, [sp, #144]	; 0x90
  407e40:	f8c8 1004 	str.w	r1, [r8, #4]
  407e44:	f77f a96d 	ble.w	407122 <_vfprintf_r+0x406>
  407e48:	e4e0      	b.n	40780c <_vfprintf_r+0xaf0>
  407e4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407e4e:	6813      	ldr	r3, [r2, #0]
  407e50:	17cd      	asrs	r5, r1, #31
  407e52:	4608      	mov	r0, r1
  407e54:	3204      	adds	r2, #4
  407e56:	4629      	mov	r1, r5
  407e58:	920e      	str	r2, [sp, #56]	; 0x38
  407e5a:	e9c3 0100 	strd	r0, r1, [r3]
  407e5e:	f7fe bfa9 	b.w	406db4 <_vfprintf_r+0x98>
  407e62:	46da      	mov	sl, fp
  407e64:	f7ff bbc4 	b.w	4075f0 <_vfprintf_r+0x8d4>
  407e68:	aa23      	add	r2, sp, #140	; 0x8c
  407e6a:	990a      	ldr	r1, [sp, #40]	; 0x28
  407e6c:	9808      	ldr	r0, [sp, #32]
  407e6e:	f002 fcff 	bl	40a870 <__sprint_r>
  407e72:	2800      	cmp	r0, #0
  407e74:	f47f acdc 	bne.w	407830 <_vfprintf_r+0xb14>
  407e78:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407e7a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407e7e:	f7ff bbfd 	b.w	40767c <_vfprintf_r+0x960>
  407e82:	4638      	mov	r0, r7
  407e84:	9409      	str	r4, [sp, #36]	; 0x24
  407e86:	f7fe fedb 	bl	406c40 <strlen>
  407e8a:	950e      	str	r5, [sp, #56]	; 0x38
  407e8c:	900d      	str	r0, [sp, #52]	; 0x34
  407e8e:	f8cd b018 	str.w	fp, [sp, #24]
  407e92:	4603      	mov	r3, r0
  407e94:	f7ff ba36 	b.w	407304 <_vfprintf_r+0x5e8>
  407e98:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  407e9c:	2300      	movs	r3, #0
  407e9e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  407ea2:	9309      	str	r3, [sp, #36]	; 0x24
  407ea4:	f7ff b86f 	b.w	406f86 <_vfprintf_r+0x26a>
  407ea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407eaa:	9310      	str	r3, [sp, #64]	; 0x40
  407eac:	461a      	mov	r2, r3
  407eae:	3303      	adds	r3, #3
  407eb0:	db04      	blt.n	407ebc <_vfprintf_r+0x11a0>
  407eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407eb4:	4619      	mov	r1, r3
  407eb6:	4291      	cmp	r1, r2
  407eb8:	f6bf af45 	bge.w	407d46 <_vfprintf_r+0x102a>
  407ebc:	3e02      	subs	r6, #2
  407ebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407ec0:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  407ec4:	3b01      	subs	r3, #1
  407ec6:	2b00      	cmp	r3, #0
  407ec8:	931d      	str	r3, [sp, #116]	; 0x74
  407eca:	bfbd      	ittte	lt
  407ecc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  407ece:	f1c3 0301 	rsblt	r3, r3, #1
  407ed2:	222d      	movlt	r2, #45	; 0x2d
  407ed4:	222b      	movge	r2, #43	; 0x2b
  407ed6:	2b09      	cmp	r3, #9
  407ed8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  407edc:	f340 813e 	ble.w	40815c <_vfprintf_r+0x1440>
  407ee0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  407ee4:	4620      	mov	r0, r4
  407ee6:	4d73      	ldr	r5, [pc, #460]	; (4080b4 <_vfprintf_r+0x1398>)
  407ee8:	e000      	b.n	407eec <_vfprintf_r+0x11d0>
  407eea:	4610      	mov	r0, r2
  407eec:	fb85 1203 	smull	r1, r2, r5, r3
  407ef0:	17d9      	asrs	r1, r3, #31
  407ef2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407ef6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407efa:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  407efe:	3230      	adds	r2, #48	; 0x30
  407f00:	2909      	cmp	r1, #9
  407f02:	f800 2c01 	strb.w	r2, [r0, #-1]
  407f06:	460b      	mov	r3, r1
  407f08:	f100 32ff 	add.w	r2, r0, #4294967295
  407f0c:	dced      	bgt.n	407eea <_vfprintf_r+0x11ce>
  407f0e:	3330      	adds	r3, #48	; 0x30
  407f10:	3802      	subs	r0, #2
  407f12:	b2d9      	uxtb	r1, r3
  407f14:	4284      	cmp	r4, r0
  407f16:	f802 1c01 	strb.w	r1, [r2, #-1]
  407f1a:	f240 8190 	bls.w	40823e <_vfprintf_r+0x1522>
  407f1e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  407f22:	4613      	mov	r3, r2
  407f24:	e001      	b.n	407f2a <_vfprintf_r+0x120e>
  407f26:	f813 1b01 	ldrb.w	r1, [r3], #1
  407f2a:	f800 1b01 	strb.w	r1, [r0], #1
  407f2e:	42a3      	cmp	r3, r4
  407f30:	d1f9      	bne.n	407f26 <_vfprintf_r+0x120a>
  407f32:	3301      	adds	r3, #1
  407f34:	1a9b      	subs	r3, r3, r2
  407f36:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  407f3a:	4413      	add	r3, r2
  407f3c:	aa1f      	add	r2, sp, #124	; 0x7c
  407f3e:	1a9b      	subs	r3, r3, r2
  407f40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407f42:	9319      	str	r3, [sp, #100]	; 0x64
  407f44:	2a01      	cmp	r2, #1
  407f46:	4413      	add	r3, r2
  407f48:	930d      	str	r3, [sp, #52]	; 0x34
  407f4a:	f340 8145 	ble.w	4081d8 <_vfprintf_r+0x14bc>
  407f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407f50:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407f52:	4413      	add	r3, r2
  407f54:	930d      	str	r3, [sp, #52]	; 0x34
  407f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407f5a:	9307      	str	r3, [sp, #28]
  407f5c:	2300      	movs	r3, #0
  407f5e:	9310      	str	r3, [sp, #64]	; 0x40
  407f60:	e700      	b.n	407d64 <_vfprintf_r+0x1048>
  407f62:	aa23      	add	r2, sp, #140	; 0x8c
  407f64:	990a      	ldr	r1, [sp, #40]	; 0x28
  407f66:	9808      	ldr	r0, [sp, #32]
  407f68:	f002 fc82 	bl	40a870 <__sprint_r>
  407f6c:	2800      	cmp	r0, #0
  407f6e:	f47f ac5f 	bne.w	407830 <_vfprintf_r+0xb14>
  407f72:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407f74:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407f78:	e4d1      	b.n	40791e <_vfprintf_r+0xc02>
  407f7a:	4623      	mov	r3, r4
  407f7c:	e6d5      	b.n	407d2a <_vfprintf_r+0x100e>
  407f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407f80:	9710      	str	r7, [sp, #64]	; 0x40
  407f82:	2b06      	cmp	r3, #6
  407f84:	bf28      	it	cs
  407f86:	2306      	movcs	r3, #6
  407f88:	9709      	str	r7, [sp, #36]	; 0x24
  407f8a:	46ba      	mov	sl, r7
  407f8c:	9307      	str	r3, [sp, #28]
  407f8e:	950e      	str	r5, [sp, #56]	; 0x38
  407f90:	f8cd b018 	str.w	fp, [sp, #24]
  407f94:	930d      	str	r3, [sp, #52]	; 0x34
  407f96:	4f48      	ldr	r7, [pc, #288]	; (4080b8 <_vfprintf_r+0x139c>)
  407f98:	f7fe bff2 	b.w	406f80 <_vfprintf_r+0x264>
  407f9c:	aa23      	add	r2, sp, #140	; 0x8c
  407f9e:	990a      	ldr	r1, [sp, #40]	; 0x28
  407fa0:	9808      	ldr	r0, [sp, #32]
  407fa2:	f002 fc65 	bl	40a870 <__sprint_r>
  407fa6:	2800      	cmp	r0, #0
  407fa8:	f47f ac42 	bne.w	407830 <_vfprintf_r+0xb14>
  407fac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407fae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407fb0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407fb2:	1ad3      	subs	r3, r2, r3
  407fb4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407fb8:	e5b6      	b.n	407b28 <_vfprintf_r+0xe0c>
  407fba:	46a2      	mov	sl, r4
  407fbc:	f7ff bb18 	b.w	4075f0 <_vfprintf_r+0x8d4>
  407fc0:	a821      	add	r0, sp, #132	; 0x84
  407fc2:	a91e      	add	r1, sp, #120	; 0x78
  407fc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  407fc6:	9004      	str	r0, [sp, #16]
  407fc8:	9103      	str	r1, [sp, #12]
  407fca:	a81d      	add	r0, sp, #116	; 0x74
  407fcc:	2103      	movs	r1, #3
  407fce:	9002      	str	r0, [sp, #8]
  407fd0:	9a07      	ldr	r2, [sp, #28]
  407fd2:	9501      	str	r5, [sp, #4]
  407fd4:	4653      	mov	r3, sl
  407fd6:	9100      	str	r1, [sp, #0]
  407fd8:	9808      	ldr	r0, [sp, #32]
  407fda:	f000 fa95 	bl	408508 <_dtoa_r>
  407fde:	4607      	mov	r7, r0
  407fe0:	1944      	adds	r4, r0, r5
  407fe2:	783b      	ldrb	r3, [r7, #0]
  407fe4:	2b30      	cmp	r3, #48	; 0x30
  407fe6:	f000 80ca 	beq.w	40817e <_vfprintf_r+0x1462>
  407fea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  407fec:	442c      	add	r4, r5
  407fee:	e689      	b.n	407d04 <_vfprintf_r+0xfe8>
  407ff0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407ff4:	4413      	add	r3, r2
  407ff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  407ff8:	930d      	str	r3, [sp, #52]	; 0x34
  407ffa:	2a00      	cmp	r2, #0
  407ffc:	f340 80e4 	ble.w	4081c8 <_vfprintf_r+0x14ac>
  408000:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408004:	9307      	str	r3, [sp, #28]
  408006:	2667      	movs	r6, #103	; 0x67
  408008:	e6ac      	b.n	407d64 <_vfprintf_r+0x1048>
  40800a:	2b00      	cmp	r3, #0
  40800c:	f340 80fb 	ble.w	408206 <_vfprintf_r+0x14ea>
  408010:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408012:	2a00      	cmp	r2, #0
  408014:	f040 80ce 	bne.w	4081b4 <_vfprintf_r+0x1498>
  408018:	f01b 0f01 	tst.w	fp, #1
  40801c:	f040 80ca 	bne.w	4081b4 <_vfprintf_r+0x1498>
  408020:	9307      	str	r3, [sp, #28]
  408022:	930d      	str	r3, [sp, #52]	; 0x34
  408024:	e69e      	b.n	407d64 <_vfprintf_r+0x1048>
  408026:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408028:	9307      	str	r3, [sp, #28]
  40802a:	930d      	str	r3, [sp, #52]	; 0x34
  40802c:	9009      	str	r0, [sp, #36]	; 0x24
  40802e:	950e      	str	r5, [sp, #56]	; 0x38
  408030:	f8cd b018 	str.w	fp, [sp, #24]
  408034:	9010      	str	r0, [sp, #64]	; 0x40
  408036:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40803a:	f7fe bfa1 	b.w	406f80 <_vfprintf_r+0x264>
  40803e:	aa23      	add	r2, sp, #140	; 0x8c
  408040:	990a      	ldr	r1, [sp, #40]	; 0x28
  408042:	9808      	ldr	r0, [sp, #32]
  408044:	f002 fc14 	bl	40a870 <__sprint_r>
  408048:	2800      	cmp	r0, #0
  40804a:	f47f abf1 	bne.w	407830 <_vfprintf_r+0xb14>
  40804e:	991d      	ldr	r1, [sp, #116]	; 0x74
  408050:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408052:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408056:	e6d0      	b.n	407dfa <_vfprintf_r+0x10de>
  408058:	2e47      	cmp	r6, #71	; 0x47
  40805a:	f47f ae52 	bne.w	407d02 <_vfprintf_r+0xfe6>
  40805e:	f01b 0f01 	tst.w	fp, #1
  408062:	f000 80da 	beq.w	40821a <_vfprintf_r+0x14fe>
  408066:	2e46      	cmp	r6, #70	; 0x46
  408068:	eb07 0405 	add.w	r4, r7, r5
  40806c:	d0b9      	beq.n	407fe2 <_vfprintf_r+0x12c6>
  40806e:	e649      	b.n	407d04 <_vfprintf_r+0xfe8>
  408070:	a821      	add	r0, sp, #132	; 0x84
  408072:	a91e      	add	r1, sp, #120	; 0x78
  408074:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408076:	9004      	str	r0, [sp, #16]
  408078:	9103      	str	r1, [sp, #12]
  40807a:	a81d      	add	r0, sp, #116	; 0x74
  40807c:	2103      	movs	r1, #3
  40807e:	9002      	str	r0, [sp, #8]
  408080:	9a07      	ldr	r2, [sp, #28]
  408082:	9401      	str	r4, [sp, #4]
  408084:	4653      	mov	r3, sl
  408086:	9100      	str	r1, [sp, #0]
  408088:	9808      	ldr	r0, [sp, #32]
  40808a:	f000 fa3d 	bl	408508 <_dtoa_r>
  40808e:	4625      	mov	r5, r4
  408090:	4607      	mov	r7, r0
  408092:	e7e8      	b.n	408066 <_vfprintf_r+0x134a>
  408094:	2300      	movs	r3, #0
  408096:	9309      	str	r3, [sp, #36]	; 0x24
  408098:	f7fe bec1 	b.w	406e1e <_vfprintf_r+0x102>
  40809c:	424e      	negs	r6, r1
  40809e:	3110      	adds	r1, #16
  4080a0:	4d06      	ldr	r5, [pc, #24]	; (4080bc <_vfprintf_r+0x13a0>)
  4080a2:	da43      	bge.n	40812c <_vfprintf_r+0x1410>
  4080a4:	2410      	movs	r4, #16
  4080a6:	f8dd a020 	ldr.w	sl, [sp, #32]
  4080aa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4080ae:	e00c      	b.n	4080ca <_vfprintf_r+0x13ae>
  4080b0:	0040b820 	.word	0x0040b820
  4080b4:	66666667 	.word	0x66666667
  4080b8:	0040b818 	.word	0x0040b818
  4080bc:	0040b834 	.word	0x0040b834
  4080c0:	f108 0808 	add.w	r8, r8, #8
  4080c4:	3e10      	subs	r6, #16
  4080c6:	2e10      	cmp	r6, #16
  4080c8:	dd30      	ble.n	40812c <_vfprintf_r+0x1410>
  4080ca:	3301      	adds	r3, #1
  4080cc:	3210      	adds	r2, #16
  4080ce:	2b07      	cmp	r3, #7
  4080d0:	9225      	str	r2, [sp, #148]	; 0x94
  4080d2:	9324      	str	r3, [sp, #144]	; 0x90
  4080d4:	f8c8 5000 	str.w	r5, [r8]
  4080d8:	f8c8 4004 	str.w	r4, [r8, #4]
  4080dc:	ddf0      	ble.n	4080c0 <_vfprintf_r+0x13a4>
  4080de:	aa23      	add	r2, sp, #140	; 0x8c
  4080e0:	4659      	mov	r1, fp
  4080e2:	4650      	mov	r0, sl
  4080e4:	f002 fbc4 	bl	40a870 <__sprint_r>
  4080e8:	2800      	cmp	r0, #0
  4080ea:	f47f aeba 	bne.w	407e62 <_vfprintf_r+0x1146>
  4080ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4080f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4080f2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4080f6:	e7e5      	b.n	4080c4 <_vfprintf_r+0x13a8>
  4080f8:	aa23      	add	r2, sp, #140	; 0x8c
  4080fa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4080fc:	9808      	ldr	r0, [sp, #32]
  4080fe:	f002 fbb7 	bl	40a870 <__sprint_r>
  408102:	2800      	cmp	r0, #0
  408104:	f47f ab94 	bne.w	407830 <_vfprintf_r+0xb14>
  408108:	991d      	ldr	r1, [sp, #116]	; 0x74
  40810a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40810c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40810e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408112:	e68a      	b.n	407e2a <_vfprintf_r+0x110e>
  408114:	9808      	ldr	r0, [sp, #32]
  408116:	aa23      	add	r2, sp, #140	; 0x8c
  408118:	4651      	mov	r1, sl
  40811a:	f002 fba9 	bl	40a870 <__sprint_r>
  40811e:	2800      	cmp	r0, #0
  408120:	f43f aa64 	beq.w	4075ec <_vfprintf_r+0x8d0>
  408124:	f7ff ba64 	b.w	4075f0 <_vfprintf_r+0x8d4>
  408128:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40812a:	e5fe      	b.n	407d2a <_vfprintf_r+0x100e>
  40812c:	3301      	adds	r3, #1
  40812e:	4432      	add	r2, r6
  408130:	2b07      	cmp	r3, #7
  408132:	e888 0060 	stmia.w	r8, {r5, r6}
  408136:	9225      	str	r2, [sp, #148]	; 0x94
  408138:	9324      	str	r3, [sp, #144]	; 0x90
  40813a:	f108 0808 	add.w	r8, r8, #8
  40813e:	f77f ae77 	ble.w	407e30 <_vfprintf_r+0x1114>
  408142:	aa23      	add	r2, sp, #140	; 0x8c
  408144:	990a      	ldr	r1, [sp, #40]	; 0x28
  408146:	9808      	ldr	r0, [sp, #32]
  408148:	f002 fb92 	bl	40a870 <__sprint_r>
  40814c:	2800      	cmp	r0, #0
  40814e:	f47f ab6f 	bne.w	407830 <_vfprintf_r+0xb14>
  408152:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408154:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408156:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40815a:	e669      	b.n	407e30 <_vfprintf_r+0x1114>
  40815c:	3330      	adds	r3, #48	; 0x30
  40815e:	2230      	movs	r2, #48	; 0x30
  408160:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  408164:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  408168:	ab20      	add	r3, sp, #128	; 0x80
  40816a:	e6e7      	b.n	407f3c <_vfprintf_r+0x1220>
  40816c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40816e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408170:	4413      	add	r3, r2
  408172:	930d      	str	r3, [sp, #52]	; 0x34
  408174:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408178:	9307      	str	r3, [sp, #28]
  40817a:	2667      	movs	r6, #103	; 0x67
  40817c:	e5f2      	b.n	407d64 <_vfprintf_r+0x1048>
  40817e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408180:	9807      	ldr	r0, [sp, #28]
  408182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408184:	4651      	mov	r1, sl
  408186:	f002 fe79 	bl	40ae7c <__aeabi_dcmpeq>
  40818a:	2800      	cmp	r0, #0
  40818c:	f47f af2d 	bne.w	407fea <_vfprintf_r+0x12ce>
  408190:	f1c5 0501 	rsb	r5, r5, #1
  408194:	951d      	str	r5, [sp, #116]	; 0x74
  408196:	442c      	add	r4, r5
  408198:	e5b4      	b.n	407d04 <_vfprintf_r+0xfe8>
  40819a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40819c:	4f33      	ldr	r7, [pc, #204]	; (40826c <_vfprintf_r+0x1550>)
  40819e:	2b00      	cmp	r3, #0
  4081a0:	bfb6      	itet	lt
  4081a2:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  4081a6:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  4081aa:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  4081ae:	4b30      	ldr	r3, [pc, #192]	; (408270 <_vfprintf_r+0x1554>)
  4081b0:	f7ff b9d1 	b.w	407556 <_vfprintf_r+0x83a>
  4081b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4081b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4081b8:	4413      	add	r3, r2
  4081ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4081bc:	441a      	add	r2, r3
  4081be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4081c2:	920d      	str	r2, [sp, #52]	; 0x34
  4081c4:	9307      	str	r3, [sp, #28]
  4081c6:	e5cd      	b.n	407d64 <_vfprintf_r+0x1048>
  4081c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4081ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4081cc:	f1c3 0301 	rsb	r3, r3, #1
  4081d0:	441a      	add	r2, r3
  4081d2:	4613      	mov	r3, r2
  4081d4:	920d      	str	r2, [sp, #52]	; 0x34
  4081d6:	e713      	b.n	408000 <_vfprintf_r+0x12e4>
  4081d8:	f01b 0301 	ands.w	r3, fp, #1
  4081dc:	9310      	str	r3, [sp, #64]	; 0x40
  4081de:	f47f aeb6 	bne.w	407f4e <_vfprintf_r+0x1232>
  4081e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4081e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4081e8:	9307      	str	r3, [sp, #28]
  4081ea:	e5bb      	b.n	407d64 <_vfprintf_r+0x1048>
  4081ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4081ee:	f899 6001 	ldrb.w	r6, [r9, #1]
  4081f2:	6823      	ldr	r3, [r4, #0]
  4081f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  4081f8:	9309      	str	r3, [sp, #36]	; 0x24
  4081fa:	4623      	mov	r3, r4
  4081fc:	3304      	adds	r3, #4
  4081fe:	4681      	mov	r9, r0
  408200:	930e      	str	r3, [sp, #56]	; 0x38
  408202:	f7fe be0a 	b.w	406e1a <_vfprintf_r+0xfe>
  408206:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408208:	b913      	cbnz	r3, 408210 <_vfprintf_r+0x14f4>
  40820a:	f01b 0f01 	tst.w	fp, #1
  40820e:	d002      	beq.n	408216 <_vfprintf_r+0x14fa>
  408210:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408212:	3301      	adds	r3, #1
  408214:	e7d1      	b.n	4081ba <_vfprintf_r+0x149e>
  408216:	2301      	movs	r3, #1
  408218:	e702      	b.n	408020 <_vfprintf_r+0x1304>
  40821a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40821c:	1bdb      	subs	r3, r3, r7
  40821e:	9311      	str	r3, [sp, #68]	; 0x44
  408220:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408222:	2b47      	cmp	r3, #71	; 0x47
  408224:	f43f ae40 	beq.w	407ea8 <_vfprintf_r+0x118c>
  408228:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40822a:	9310      	str	r3, [sp, #64]	; 0x40
  40822c:	e647      	b.n	407ebe <_vfprintf_r+0x11a2>
  40822e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408232:	f7ff b81d 	b.w	407270 <_vfprintf_r+0x554>
  408236:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40823a:	f7ff b918 	b.w	40746e <_vfprintf_r+0x752>
  40823e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  408242:	e67b      	b.n	407f3c <_vfprintf_r+0x1220>
  408244:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408248:	f7ff b866 	b.w	407318 <_vfprintf_r+0x5fc>
  40824c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408250:	f7ff b9ac 	b.w	4075ac <_vfprintf_r+0x890>
  408254:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408258:	f7ff b934 	b.w	4074c4 <_vfprintf_r+0x7a8>
  40825c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408260:	f7ff b8b0 	b.w	4073c4 <_vfprintf_r+0x6a8>
  408264:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408268:	f7ff b945 	b.w	4074f6 <_vfprintf_r+0x7da>
  40826c:	0040b7ec 	.word	0x0040b7ec
  408270:	0040b7e8 	.word	0x0040b7e8

00408274 <__sbprintf>:
  408274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408278:	460c      	mov	r4, r1
  40827a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40827e:	8989      	ldrh	r1, [r1, #12]
  408280:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408282:	89e5      	ldrh	r5, [r4, #14]
  408284:	9619      	str	r6, [sp, #100]	; 0x64
  408286:	f021 0102 	bic.w	r1, r1, #2
  40828a:	4606      	mov	r6, r0
  40828c:	69e0      	ldr	r0, [r4, #28]
  40828e:	f8ad 100c 	strh.w	r1, [sp, #12]
  408292:	4617      	mov	r7, r2
  408294:	f44f 6180 	mov.w	r1, #1024	; 0x400
  408298:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40829a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40829e:	4698      	mov	r8, r3
  4082a0:	ad1a      	add	r5, sp, #104	; 0x68
  4082a2:	2300      	movs	r3, #0
  4082a4:	9007      	str	r0, [sp, #28]
  4082a6:	a816      	add	r0, sp, #88	; 0x58
  4082a8:	9209      	str	r2, [sp, #36]	; 0x24
  4082aa:	9306      	str	r3, [sp, #24]
  4082ac:	9500      	str	r5, [sp, #0]
  4082ae:	9504      	str	r5, [sp, #16]
  4082b0:	9102      	str	r1, [sp, #8]
  4082b2:	9105      	str	r1, [sp, #20]
  4082b4:	f001 fc82 	bl	409bbc <__retarget_lock_init_recursive>
  4082b8:	4643      	mov	r3, r8
  4082ba:	463a      	mov	r2, r7
  4082bc:	4669      	mov	r1, sp
  4082be:	4630      	mov	r0, r6
  4082c0:	f7fe fd2c 	bl	406d1c <_vfprintf_r>
  4082c4:	1e05      	subs	r5, r0, #0
  4082c6:	db07      	blt.n	4082d8 <__sbprintf+0x64>
  4082c8:	4630      	mov	r0, r6
  4082ca:	4669      	mov	r1, sp
  4082cc:	f001 f8e6 	bl	40949c <_fflush_r>
  4082d0:	2800      	cmp	r0, #0
  4082d2:	bf18      	it	ne
  4082d4:	f04f 35ff 	movne.w	r5, #4294967295
  4082d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4082dc:	065b      	lsls	r3, r3, #25
  4082de:	d503      	bpl.n	4082e8 <__sbprintf+0x74>
  4082e0:	89a3      	ldrh	r3, [r4, #12]
  4082e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4082e6:	81a3      	strh	r3, [r4, #12]
  4082e8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4082ea:	f001 fc69 	bl	409bc0 <__retarget_lock_close_recursive>
  4082ee:	4628      	mov	r0, r5
  4082f0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4082f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004082f8 <__swsetup_r>:
  4082f8:	b538      	push	{r3, r4, r5, lr}
  4082fa:	4b30      	ldr	r3, [pc, #192]	; (4083bc <__swsetup_r+0xc4>)
  4082fc:	681b      	ldr	r3, [r3, #0]
  4082fe:	4605      	mov	r5, r0
  408300:	460c      	mov	r4, r1
  408302:	b113      	cbz	r3, 40830a <__swsetup_r+0x12>
  408304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408306:	2a00      	cmp	r2, #0
  408308:	d038      	beq.n	40837c <__swsetup_r+0x84>
  40830a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40830e:	b293      	uxth	r3, r2
  408310:	0718      	lsls	r0, r3, #28
  408312:	d50c      	bpl.n	40832e <__swsetup_r+0x36>
  408314:	6920      	ldr	r0, [r4, #16]
  408316:	b1a8      	cbz	r0, 408344 <__swsetup_r+0x4c>
  408318:	f013 0201 	ands.w	r2, r3, #1
  40831c:	d01e      	beq.n	40835c <__swsetup_r+0x64>
  40831e:	6963      	ldr	r3, [r4, #20]
  408320:	2200      	movs	r2, #0
  408322:	425b      	negs	r3, r3
  408324:	61a3      	str	r3, [r4, #24]
  408326:	60a2      	str	r2, [r4, #8]
  408328:	b1f0      	cbz	r0, 408368 <__swsetup_r+0x70>
  40832a:	2000      	movs	r0, #0
  40832c:	bd38      	pop	{r3, r4, r5, pc}
  40832e:	06d9      	lsls	r1, r3, #27
  408330:	d53c      	bpl.n	4083ac <__swsetup_r+0xb4>
  408332:	0758      	lsls	r0, r3, #29
  408334:	d426      	bmi.n	408384 <__swsetup_r+0x8c>
  408336:	6920      	ldr	r0, [r4, #16]
  408338:	f042 0308 	orr.w	r3, r2, #8
  40833c:	81a3      	strh	r3, [r4, #12]
  40833e:	b29b      	uxth	r3, r3
  408340:	2800      	cmp	r0, #0
  408342:	d1e9      	bne.n	408318 <__swsetup_r+0x20>
  408344:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408348:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40834c:	d0e4      	beq.n	408318 <__swsetup_r+0x20>
  40834e:	4628      	mov	r0, r5
  408350:	4621      	mov	r1, r4
  408352:	f001 fc69 	bl	409c28 <__smakebuf_r>
  408356:	89a3      	ldrh	r3, [r4, #12]
  408358:	6920      	ldr	r0, [r4, #16]
  40835a:	e7dd      	b.n	408318 <__swsetup_r+0x20>
  40835c:	0799      	lsls	r1, r3, #30
  40835e:	bf58      	it	pl
  408360:	6962      	ldrpl	r2, [r4, #20]
  408362:	60a2      	str	r2, [r4, #8]
  408364:	2800      	cmp	r0, #0
  408366:	d1e0      	bne.n	40832a <__swsetup_r+0x32>
  408368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40836c:	061a      	lsls	r2, r3, #24
  40836e:	d5dd      	bpl.n	40832c <__swsetup_r+0x34>
  408370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408374:	81a3      	strh	r3, [r4, #12]
  408376:	f04f 30ff 	mov.w	r0, #4294967295
  40837a:	bd38      	pop	{r3, r4, r5, pc}
  40837c:	4618      	mov	r0, r3
  40837e:	f001 f8e5 	bl	40954c <__sinit>
  408382:	e7c2      	b.n	40830a <__swsetup_r+0x12>
  408384:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408386:	b151      	cbz	r1, 40839e <__swsetup_r+0xa6>
  408388:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40838c:	4299      	cmp	r1, r3
  40838e:	d004      	beq.n	40839a <__swsetup_r+0xa2>
  408390:	4628      	mov	r0, r5
  408392:	f001 f97d 	bl	409690 <_free_r>
  408396:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40839a:	2300      	movs	r3, #0
  40839c:	6323      	str	r3, [r4, #48]	; 0x30
  40839e:	2300      	movs	r3, #0
  4083a0:	6920      	ldr	r0, [r4, #16]
  4083a2:	6063      	str	r3, [r4, #4]
  4083a4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4083a8:	6020      	str	r0, [r4, #0]
  4083aa:	e7c5      	b.n	408338 <__swsetup_r+0x40>
  4083ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4083b0:	2309      	movs	r3, #9
  4083b2:	602b      	str	r3, [r5, #0]
  4083b4:	f04f 30ff 	mov.w	r0, #4294967295
  4083b8:	81a2      	strh	r2, [r4, #12]
  4083ba:	bd38      	pop	{r3, r4, r5, pc}
  4083bc:	20400010 	.word	0x20400010

004083c0 <register_fini>:
  4083c0:	4b02      	ldr	r3, [pc, #8]	; (4083cc <register_fini+0xc>)
  4083c2:	b113      	cbz	r3, 4083ca <register_fini+0xa>
  4083c4:	4802      	ldr	r0, [pc, #8]	; (4083d0 <register_fini+0x10>)
  4083c6:	f000 b805 	b.w	4083d4 <atexit>
  4083ca:	4770      	bx	lr
  4083cc:	00000000 	.word	0x00000000
  4083d0:	004095bd 	.word	0x004095bd

004083d4 <atexit>:
  4083d4:	2300      	movs	r3, #0
  4083d6:	4601      	mov	r1, r0
  4083d8:	461a      	mov	r2, r3
  4083da:	4618      	mov	r0, r3
  4083dc:	f002 ba68 	b.w	40a8b0 <__register_exitproc>

004083e0 <quorem>:
  4083e0:	6902      	ldr	r2, [r0, #16]
  4083e2:	690b      	ldr	r3, [r1, #16]
  4083e4:	4293      	cmp	r3, r2
  4083e6:	f300 808d 	bgt.w	408504 <quorem+0x124>
  4083ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083ee:	f103 38ff 	add.w	r8, r3, #4294967295
  4083f2:	f101 0714 	add.w	r7, r1, #20
  4083f6:	f100 0b14 	add.w	fp, r0, #20
  4083fa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4083fe:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  408402:	ea4f 0488 	mov.w	r4, r8, lsl #2
  408406:	b083      	sub	sp, #12
  408408:	3201      	adds	r2, #1
  40840a:	fbb3 f9f2 	udiv	r9, r3, r2
  40840e:	eb0b 0304 	add.w	r3, fp, r4
  408412:	9400      	str	r4, [sp, #0]
  408414:	eb07 0a04 	add.w	sl, r7, r4
  408418:	9301      	str	r3, [sp, #4]
  40841a:	f1b9 0f00 	cmp.w	r9, #0
  40841e:	d039      	beq.n	408494 <quorem+0xb4>
  408420:	2500      	movs	r5, #0
  408422:	462e      	mov	r6, r5
  408424:	46bc      	mov	ip, r7
  408426:	46de      	mov	lr, fp
  408428:	f85c 4b04 	ldr.w	r4, [ip], #4
  40842c:	f8de 3000 	ldr.w	r3, [lr]
  408430:	b2a2      	uxth	r2, r4
  408432:	fb09 5502 	mla	r5, r9, r2, r5
  408436:	0c22      	lsrs	r2, r4, #16
  408438:	0c2c      	lsrs	r4, r5, #16
  40843a:	fb09 4202 	mla	r2, r9, r2, r4
  40843e:	b2ad      	uxth	r5, r5
  408440:	1b75      	subs	r5, r6, r5
  408442:	b296      	uxth	r6, r2
  408444:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  408448:	fa15 f383 	uxtah	r3, r5, r3
  40844c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  408450:	b29b      	uxth	r3, r3
  408452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  408456:	45e2      	cmp	sl, ip
  408458:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40845c:	f84e 3b04 	str.w	r3, [lr], #4
  408460:	ea4f 4626 	mov.w	r6, r6, asr #16
  408464:	d2e0      	bcs.n	408428 <quorem+0x48>
  408466:	9b00      	ldr	r3, [sp, #0]
  408468:	f85b 3003 	ldr.w	r3, [fp, r3]
  40846c:	b993      	cbnz	r3, 408494 <quorem+0xb4>
  40846e:	9c01      	ldr	r4, [sp, #4]
  408470:	1f23      	subs	r3, r4, #4
  408472:	459b      	cmp	fp, r3
  408474:	d20c      	bcs.n	408490 <quorem+0xb0>
  408476:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40847a:	b94b      	cbnz	r3, 408490 <quorem+0xb0>
  40847c:	f1a4 0308 	sub.w	r3, r4, #8
  408480:	e002      	b.n	408488 <quorem+0xa8>
  408482:	681a      	ldr	r2, [r3, #0]
  408484:	3b04      	subs	r3, #4
  408486:	b91a      	cbnz	r2, 408490 <quorem+0xb0>
  408488:	459b      	cmp	fp, r3
  40848a:	f108 38ff 	add.w	r8, r8, #4294967295
  40848e:	d3f8      	bcc.n	408482 <quorem+0xa2>
  408490:	f8c0 8010 	str.w	r8, [r0, #16]
  408494:	4604      	mov	r4, r0
  408496:	f001 fec5 	bl	40a224 <__mcmp>
  40849a:	2800      	cmp	r0, #0
  40849c:	db2e      	blt.n	4084fc <quorem+0x11c>
  40849e:	f109 0901 	add.w	r9, r9, #1
  4084a2:	465d      	mov	r5, fp
  4084a4:	2300      	movs	r3, #0
  4084a6:	f857 1b04 	ldr.w	r1, [r7], #4
  4084aa:	6828      	ldr	r0, [r5, #0]
  4084ac:	b28a      	uxth	r2, r1
  4084ae:	1a9a      	subs	r2, r3, r2
  4084b0:	0c0b      	lsrs	r3, r1, #16
  4084b2:	fa12 f280 	uxtah	r2, r2, r0
  4084b6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4084ba:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4084be:	b292      	uxth	r2, r2
  4084c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4084c4:	45ba      	cmp	sl, r7
  4084c6:	f845 2b04 	str.w	r2, [r5], #4
  4084ca:	ea4f 4323 	mov.w	r3, r3, asr #16
  4084ce:	d2ea      	bcs.n	4084a6 <quorem+0xc6>
  4084d0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4084d4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4084d8:	b982      	cbnz	r2, 4084fc <quorem+0x11c>
  4084da:	1f1a      	subs	r2, r3, #4
  4084dc:	4593      	cmp	fp, r2
  4084de:	d20b      	bcs.n	4084f8 <quorem+0x118>
  4084e0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4084e4:	b942      	cbnz	r2, 4084f8 <quorem+0x118>
  4084e6:	3b08      	subs	r3, #8
  4084e8:	e002      	b.n	4084f0 <quorem+0x110>
  4084ea:	681a      	ldr	r2, [r3, #0]
  4084ec:	3b04      	subs	r3, #4
  4084ee:	b91a      	cbnz	r2, 4084f8 <quorem+0x118>
  4084f0:	459b      	cmp	fp, r3
  4084f2:	f108 38ff 	add.w	r8, r8, #4294967295
  4084f6:	d3f8      	bcc.n	4084ea <quorem+0x10a>
  4084f8:	f8c4 8010 	str.w	r8, [r4, #16]
  4084fc:	4648      	mov	r0, r9
  4084fe:	b003      	add	sp, #12
  408500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408504:	2000      	movs	r0, #0
  408506:	4770      	bx	lr

00408508 <_dtoa_r>:
  408508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40850c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40850e:	b09b      	sub	sp, #108	; 0x6c
  408510:	4604      	mov	r4, r0
  408512:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  408514:	4692      	mov	sl, r2
  408516:	469b      	mov	fp, r3
  408518:	b141      	cbz	r1, 40852c <_dtoa_r+0x24>
  40851a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40851c:	604a      	str	r2, [r1, #4]
  40851e:	2301      	movs	r3, #1
  408520:	4093      	lsls	r3, r2
  408522:	608b      	str	r3, [r1, #8]
  408524:	f001 fca6 	bl	409e74 <_Bfree>
  408528:	2300      	movs	r3, #0
  40852a:	6423      	str	r3, [r4, #64]	; 0x40
  40852c:	f1bb 0f00 	cmp.w	fp, #0
  408530:	465d      	mov	r5, fp
  408532:	db35      	blt.n	4085a0 <_dtoa_r+0x98>
  408534:	2300      	movs	r3, #0
  408536:	6033      	str	r3, [r6, #0]
  408538:	4b9d      	ldr	r3, [pc, #628]	; (4087b0 <_dtoa_r+0x2a8>)
  40853a:	43ab      	bics	r3, r5
  40853c:	d015      	beq.n	40856a <_dtoa_r+0x62>
  40853e:	4650      	mov	r0, sl
  408540:	4659      	mov	r1, fp
  408542:	2200      	movs	r2, #0
  408544:	2300      	movs	r3, #0
  408546:	f002 fc99 	bl	40ae7c <__aeabi_dcmpeq>
  40854a:	4680      	mov	r8, r0
  40854c:	2800      	cmp	r0, #0
  40854e:	d02d      	beq.n	4085ac <_dtoa_r+0xa4>
  408550:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408552:	2301      	movs	r3, #1
  408554:	6013      	str	r3, [r2, #0]
  408556:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408558:	2b00      	cmp	r3, #0
  40855a:	f000 80bd 	beq.w	4086d8 <_dtoa_r+0x1d0>
  40855e:	4895      	ldr	r0, [pc, #596]	; (4087b4 <_dtoa_r+0x2ac>)
  408560:	6018      	str	r0, [r3, #0]
  408562:	3801      	subs	r0, #1
  408564:	b01b      	add	sp, #108	; 0x6c
  408566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40856a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40856c:	f242 730f 	movw	r3, #9999	; 0x270f
  408570:	6013      	str	r3, [r2, #0]
  408572:	f1ba 0f00 	cmp.w	sl, #0
  408576:	d10d      	bne.n	408594 <_dtoa_r+0x8c>
  408578:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40857c:	b955      	cbnz	r5, 408594 <_dtoa_r+0x8c>
  40857e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408580:	488d      	ldr	r0, [pc, #564]	; (4087b8 <_dtoa_r+0x2b0>)
  408582:	2b00      	cmp	r3, #0
  408584:	d0ee      	beq.n	408564 <_dtoa_r+0x5c>
  408586:	f100 0308 	add.w	r3, r0, #8
  40858a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40858c:	6013      	str	r3, [r2, #0]
  40858e:	b01b      	add	sp, #108	; 0x6c
  408590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408594:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408596:	4889      	ldr	r0, [pc, #548]	; (4087bc <_dtoa_r+0x2b4>)
  408598:	2b00      	cmp	r3, #0
  40859a:	d0e3      	beq.n	408564 <_dtoa_r+0x5c>
  40859c:	1cc3      	adds	r3, r0, #3
  40859e:	e7f4      	b.n	40858a <_dtoa_r+0x82>
  4085a0:	2301      	movs	r3, #1
  4085a2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4085a6:	6033      	str	r3, [r6, #0]
  4085a8:	46ab      	mov	fp, r5
  4085aa:	e7c5      	b.n	408538 <_dtoa_r+0x30>
  4085ac:	aa18      	add	r2, sp, #96	; 0x60
  4085ae:	ab19      	add	r3, sp, #100	; 0x64
  4085b0:	9201      	str	r2, [sp, #4]
  4085b2:	9300      	str	r3, [sp, #0]
  4085b4:	4652      	mov	r2, sl
  4085b6:	465b      	mov	r3, fp
  4085b8:	4620      	mov	r0, r4
  4085ba:	f001 fed3 	bl	40a364 <__d2b>
  4085be:	0d2b      	lsrs	r3, r5, #20
  4085c0:	4681      	mov	r9, r0
  4085c2:	d071      	beq.n	4086a8 <_dtoa_r+0x1a0>
  4085c4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4085c8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4085cc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4085ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4085d2:	4650      	mov	r0, sl
  4085d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4085d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4085dc:	2200      	movs	r2, #0
  4085de:	4b78      	ldr	r3, [pc, #480]	; (4087c0 <_dtoa_r+0x2b8>)
  4085e0:	f7fc febe 	bl	405360 <__aeabi_dsub>
  4085e4:	a36c      	add	r3, pc, #432	; (adr r3, 408798 <_dtoa_r+0x290>)
  4085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085ea:	f7fd f86d 	bl	4056c8 <__aeabi_dmul>
  4085ee:	a36c      	add	r3, pc, #432	; (adr r3, 4087a0 <_dtoa_r+0x298>)
  4085f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085f4:	f7fc feb6 	bl	405364 <__adddf3>
  4085f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4085fc:	4630      	mov	r0, r6
  4085fe:	f7fc fffd 	bl	4055fc <__aeabi_i2d>
  408602:	a369      	add	r3, pc, #420	; (adr r3, 4087a8 <_dtoa_r+0x2a0>)
  408604:	e9d3 2300 	ldrd	r2, r3, [r3]
  408608:	f7fd f85e 	bl	4056c8 <__aeabi_dmul>
  40860c:	4602      	mov	r2, r0
  40860e:	460b      	mov	r3, r1
  408610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408614:	f7fc fea6 	bl	405364 <__adddf3>
  408618:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40861c:	f002 fc76 	bl	40af0c <__aeabi_d2iz>
  408620:	2200      	movs	r2, #0
  408622:	9002      	str	r0, [sp, #8]
  408624:	2300      	movs	r3, #0
  408626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40862a:	f002 fc31 	bl	40ae90 <__aeabi_dcmplt>
  40862e:	2800      	cmp	r0, #0
  408630:	f040 8173 	bne.w	40891a <_dtoa_r+0x412>
  408634:	9d02      	ldr	r5, [sp, #8]
  408636:	2d16      	cmp	r5, #22
  408638:	f200 815d 	bhi.w	4088f6 <_dtoa_r+0x3ee>
  40863c:	4b61      	ldr	r3, [pc, #388]	; (4087c4 <_dtoa_r+0x2bc>)
  40863e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  408642:	e9d3 0100 	ldrd	r0, r1, [r3]
  408646:	4652      	mov	r2, sl
  408648:	465b      	mov	r3, fp
  40864a:	f002 fc3f 	bl	40aecc <__aeabi_dcmpgt>
  40864e:	2800      	cmp	r0, #0
  408650:	f000 81c5 	beq.w	4089de <_dtoa_r+0x4d6>
  408654:	1e6b      	subs	r3, r5, #1
  408656:	9302      	str	r3, [sp, #8]
  408658:	2300      	movs	r3, #0
  40865a:	930e      	str	r3, [sp, #56]	; 0x38
  40865c:	1bbf      	subs	r7, r7, r6
  40865e:	1e7b      	subs	r3, r7, #1
  408660:	9306      	str	r3, [sp, #24]
  408662:	f100 8154 	bmi.w	40890e <_dtoa_r+0x406>
  408666:	2300      	movs	r3, #0
  408668:	9308      	str	r3, [sp, #32]
  40866a:	9b02      	ldr	r3, [sp, #8]
  40866c:	2b00      	cmp	r3, #0
  40866e:	f2c0 8145 	blt.w	4088fc <_dtoa_r+0x3f4>
  408672:	9a06      	ldr	r2, [sp, #24]
  408674:	930d      	str	r3, [sp, #52]	; 0x34
  408676:	4611      	mov	r1, r2
  408678:	4419      	add	r1, r3
  40867a:	2300      	movs	r3, #0
  40867c:	9106      	str	r1, [sp, #24]
  40867e:	930c      	str	r3, [sp, #48]	; 0x30
  408680:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408682:	2b09      	cmp	r3, #9
  408684:	d82a      	bhi.n	4086dc <_dtoa_r+0x1d4>
  408686:	2b05      	cmp	r3, #5
  408688:	f340 865b 	ble.w	409342 <_dtoa_r+0xe3a>
  40868c:	3b04      	subs	r3, #4
  40868e:	9324      	str	r3, [sp, #144]	; 0x90
  408690:	2500      	movs	r5, #0
  408692:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408694:	3b02      	subs	r3, #2
  408696:	2b03      	cmp	r3, #3
  408698:	f200 8642 	bhi.w	409320 <_dtoa_r+0xe18>
  40869c:	e8df f013 	tbh	[pc, r3, lsl #1]
  4086a0:	02c903d4 	.word	0x02c903d4
  4086a4:	046103df 	.word	0x046103df
  4086a8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4086aa:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4086ac:	443e      	add	r6, r7
  4086ae:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4086b2:	2b20      	cmp	r3, #32
  4086b4:	f340 818e 	ble.w	4089d4 <_dtoa_r+0x4cc>
  4086b8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4086bc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4086c0:	409d      	lsls	r5, r3
  4086c2:	fa2a f000 	lsr.w	r0, sl, r0
  4086c6:	4328      	orrs	r0, r5
  4086c8:	f7fc ff88 	bl	4055dc <__aeabi_ui2d>
  4086cc:	2301      	movs	r3, #1
  4086ce:	3e01      	subs	r6, #1
  4086d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4086d4:	9314      	str	r3, [sp, #80]	; 0x50
  4086d6:	e781      	b.n	4085dc <_dtoa_r+0xd4>
  4086d8:	483b      	ldr	r0, [pc, #236]	; (4087c8 <_dtoa_r+0x2c0>)
  4086da:	e743      	b.n	408564 <_dtoa_r+0x5c>
  4086dc:	2100      	movs	r1, #0
  4086de:	6461      	str	r1, [r4, #68]	; 0x44
  4086e0:	4620      	mov	r0, r4
  4086e2:	9125      	str	r1, [sp, #148]	; 0x94
  4086e4:	f001 fba0 	bl	409e28 <_Balloc>
  4086e8:	f04f 33ff 	mov.w	r3, #4294967295
  4086ec:	930a      	str	r3, [sp, #40]	; 0x28
  4086ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4086f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4086f2:	2301      	movs	r3, #1
  4086f4:	9004      	str	r0, [sp, #16]
  4086f6:	6420      	str	r0, [r4, #64]	; 0x40
  4086f8:	9224      	str	r2, [sp, #144]	; 0x90
  4086fa:	930b      	str	r3, [sp, #44]	; 0x2c
  4086fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4086fe:	2b00      	cmp	r3, #0
  408700:	f2c0 80d9 	blt.w	4088b6 <_dtoa_r+0x3ae>
  408704:	9a02      	ldr	r2, [sp, #8]
  408706:	2a0e      	cmp	r2, #14
  408708:	f300 80d5 	bgt.w	4088b6 <_dtoa_r+0x3ae>
  40870c:	4b2d      	ldr	r3, [pc, #180]	; (4087c4 <_dtoa_r+0x2bc>)
  40870e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408712:	e9d3 2300 	ldrd	r2, r3, [r3]
  408716:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40871a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40871c:	2b00      	cmp	r3, #0
  40871e:	f2c0 83ba 	blt.w	408e96 <_dtoa_r+0x98e>
  408722:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  408726:	4650      	mov	r0, sl
  408728:	462a      	mov	r2, r5
  40872a:	4633      	mov	r3, r6
  40872c:	4659      	mov	r1, fp
  40872e:	f7fd f8f5 	bl	40591c <__aeabi_ddiv>
  408732:	f002 fbeb 	bl	40af0c <__aeabi_d2iz>
  408736:	4680      	mov	r8, r0
  408738:	f7fc ff60 	bl	4055fc <__aeabi_i2d>
  40873c:	462a      	mov	r2, r5
  40873e:	4633      	mov	r3, r6
  408740:	f7fc ffc2 	bl	4056c8 <__aeabi_dmul>
  408744:	460b      	mov	r3, r1
  408746:	4602      	mov	r2, r0
  408748:	4659      	mov	r1, fp
  40874a:	4650      	mov	r0, sl
  40874c:	f7fc fe08 	bl	405360 <__aeabi_dsub>
  408750:	9d04      	ldr	r5, [sp, #16]
  408752:	f108 0330 	add.w	r3, r8, #48	; 0x30
  408756:	702b      	strb	r3, [r5, #0]
  408758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40875a:	2b01      	cmp	r3, #1
  40875c:	4606      	mov	r6, r0
  40875e:	460f      	mov	r7, r1
  408760:	f105 0501 	add.w	r5, r5, #1
  408764:	d068      	beq.n	408838 <_dtoa_r+0x330>
  408766:	2200      	movs	r2, #0
  408768:	4b18      	ldr	r3, [pc, #96]	; (4087cc <_dtoa_r+0x2c4>)
  40876a:	f7fc ffad 	bl	4056c8 <__aeabi_dmul>
  40876e:	2200      	movs	r2, #0
  408770:	2300      	movs	r3, #0
  408772:	4606      	mov	r6, r0
  408774:	460f      	mov	r7, r1
  408776:	f002 fb81 	bl	40ae7c <__aeabi_dcmpeq>
  40877a:	2800      	cmp	r0, #0
  40877c:	f040 8088 	bne.w	408890 <_dtoa_r+0x388>
  408780:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  408784:	f04f 0a00 	mov.w	sl, #0
  408788:	f8df b040 	ldr.w	fp, [pc, #64]	; 4087cc <_dtoa_r+0x2c4>
  40878c:	940c      	str	r4, [sp, #48]	; 0x30
  40878e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  408792:	e028      	b.n	4087e6 <_dtoa_r+0x2de>
  408794:	f3af 8000 	nop.w
  408798:	636f4361 	.word	0x636f4361
  40879c:	3fd287a7 	.word	0x3fd287a7
  4087a0:	8b60c8b3 	.word	0x8b60c8b3
  4087a4:	3fc68a28 	.word	0x3fc68a28
  4087a8:	509f79fb 	.word	0x509f79fb
  4087ac:	3fd34413 	.word	0x3fd34413
  4087b0:	7ff00000 	.word	0x7ff00000
  4087b4:	0040b821 	.word	0x0040b821
  4087b8:	0040b844 	.word	0x0040b844
  4087bc:	0040b850 	.word	0x0040b850
  4087c0:	3ff80000 	.word	0x3ff80000
  4087c4:	0040b880 	.word	0x0040b880
  4087c8:	0040b820 	.word	0x0040b820
  4087cc:	40240000 	.word	0x40240000
  4087d0:	f7fc ff7a 	bl	4056c8 <__aeabi_dmul>
  4087d4:	2200      	movs	r2, #0
  4087d6:	2300      	movs	r3, #0
  4087d8:	4606      	mov	r6, r0
  4087da:	460f      	mov	r7, r1
  4087dc:	f002 fb4e 	bl	40ae7c <__aeabi_dcmpeq>
  4087e0:	2800      	cmp	r0, #0
  4087e2:	f040 83c1 	bne.w	408f68 <_dtoa_r+0xa60>
  4087e6:	4642      	mov	r2, r8
  4087e8:	464b      	mov	r3, r9
  4087ea:	4630      	mov	r0, r6
  4087ec:	4639      	mov	r1, r7
  4087ee:	f7fd f895 	bl	40591c <__aeabi_ddiv>
  4087f2:	f002 fb8b 	bl	40af0c <__aeabi_d2iz>
  4087f6:	4604      	mov	r4, r0
  4087f8:	f7fc ff00 	bl	4055fc <__aeabi_i2d>
  4087fc:	4642      	mov	r2, r8
  4087fe:	464b      	mov	r3, r9
  408800:	f7fc ff62 	bl	4056c8 <__aeabi_dmul>
  408804:	4602      	mov	r2, r0
  408806:	460b      	mov	r3, r1
  408808:	4630      	mov	r0, r6
  40880a:	4639      	mov	r1, r7
  40880c:	f7fc fda8 	bl	405360 <__aeabi_dsub>
  408810:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  408814:	9e04      	ldr	r6, [sp, #16]
  408816:	f805 eb01 	strb.w	lr, [r5], #1
  40881a:	eba5 0e06 	sub.w	lr, r5, r6
  40881e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  408820:	45b6      	cmp	lr, r6
  408822:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408826:	4652      	mov	r2, sl
  408828:	465b      	mov	r3, fp
  40882a:	d1d1      	bne.n	4087d0 <_dtoa_r+0x2c8>
  40882c:	46a0      	mov	r8, r4
  40882e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  408832:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408834:	4606      	mov	r6, r0
  408836:	460f      	mov	r7, r1
  408838:	4632      	mov	r2, r6
  40883a:	463b      	mov	r3, r7
  40883c:	4630      	mov	r0, r6
  40883e:	4639      	mov	r1, r7
  408840:	f7fc fd90 	bl	405364 <__adddf3>
  408844:	4606      	mov	r6, r0
  408846:	460f      	mov	r7, r1
  408848:	4602      	mov	r2, r0
  40884a:	460b      	mov	r3, r1
  40884c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408850:	f002 fb1e 	bl	40ae90 <__aeabi_dcmplt>
  408854:	b948      	cbnz	r0, 40886a <_dtoa_r+0x362>
  408856:	4632      	mov	r2, r6
  408858:	463b      	mov	r3, r7
  40885a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40885e:	f002 fb0d 	bl	40ae7c <__aeabi_dcmpeq>
  408862:	b1a8      	cbz	r0, 408890 <_dtoa_r+0x388>
  408864:	f018 0f01 	tst.w	r8, #1
  408868:	d012      	beq.n	408890 <_dtoa_r+0x388>
  40886a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40886e:	9a04      	ldr	r2, [sp, #16]
  408870:	1e6b      	subs	r3, r5, #1
  408872:	e004      	b.n	40887e <_dtoa_r+0x376>
  408874:	429a      	cmp	r2, r3
  408876:	f000 8401 	beq.w	40907c <_dtoa_r+0xb74>
  40887a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40887e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  408882:	f103 0501 	add.w	r5, r3, #1
  408886:	d0f5      	beq.n	408874 <_dtoa_r+0x36c>
  408888:	f108 0801 	add.w	r8, r8, #1
  40888c:	f883 8000 	strb.w	r8, [r3]
  408890:	4649      	mov	r1, r9
  408892:	4620      	mov	r0, r4
  408894:	f001 faee 	bl	409e74 <_Bfree>
  408898:	2200      	movs	r2, #0
  40889a:	9b02      	ldr	r3, [sp, #8]
  40889c:	702a      	strb	r2, [r5, #0]
  40889e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4088a0:	3301      	adds	r3, #1
  4088a2:	6013      	str	r3, [r2, #0]
  4088a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4088a6:	2b00      	cmp	r3, #0
  4088a8:	f000 839e 	beq.w	408fe8 <_dtoa_r+0xae0>
  4088ac:	9804      	ldr	r0, [sp, #16]
  4088ae:	601d      	str	r5, [r3, #0]
  4088b0:	b01b      	add	sp, #108	; 0x6c
  4088b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4088b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4088b8:	2a00      	cmp	r2, #0
  4088ba:	d03e      	beq.n	40893a <_dtoa_r+0x432>
  4088bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4088be:	2a01      	cmp	r2, #1
  4088c0:	f340 8311 	ble.w	408ee6 <_dtoa_r+0x9de>
  4088c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4088c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4088c8:	1e5f      	subs	r7, r3, #1
  4088ca:	42ba      	cmp	r2, r7
  4088cc:	f2c0 838f 	blt.w	408fee <_dtoa_r+0xae6>
  4088d0:	1bd7      	subs	r7, r2, r7
  4088d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4088d4:	2b00      	cmp	r3, #0
  4088d6:	f2c0 848b 	blt.w	4091f0 <_dtoa_r+0xce8>
  4088da:	9d08      	ldr	r5, [sp, #32]
  4088dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4088de:	9a08      	ldr	r2, [sp, #32]
  4088e0:	441a      	add	r2, r3
  4088e2:	9208      	str	r2, [sp, #32]
  4088e4:	9a06      	ldr	r2, [sp, #24]
  4088e6:	2101      	movs	r1, #1
  4088e8:	441a      	add	r2, r3
  4088ea:	4620      	mov	r0, r4
  4088ec:	9206      	str	r2, [sp, #24]
  4088ee:	f001 fb5b 	bl	409fa8 <__i2b>
  4088f2:	4606      	mov	r6, r0
  4088f4:	e024      	b.n	408940 <_dtoa_r+0x438>
  4088f6:	2301      	movs	r3, #1
  4088f8:	930e      	str	r3, [sp, #56]	; 0x38
  4088fa:	e6af      	b.n	40865c <_dtoa_r+0x154>
  4088fc:	9a08      	ldr	r2, [sp, #32]
  4088fe:	9b02      	ldr	r3, [sp, #8]
  408900:	1ad2      	subs	r2, r2, r3
  408902:	425b      	negs	r3, r3
  408904:	930c      	str	r3, [sp, #48]	; 0x30
  408906:	2300      	movs	r3, #0
  408908:	9208      	str	r2, [sp, #32]
  40890a:	930d      	str	r3, [sp, #52]	; 0x34
  40890c:	e6b8      	b.n	408680 <_dtoa_r+0x178>
  40890e:	f1c7 0301 	rsb	r3, r7, #1
  408912:	9308      	str	r3, [sp, #32]
  408914:	2300      	movs	r3, #0
  408916:	9306      	str	r3, [sp, #24]
  408918:	e6a7      	b.n	40866a <_dtoa_r+0x162>
  40891a:	9d02      	ldr	r5, [sp, #8]
  40891c:	4628      	mov	r0, r5
  40891e:	f7fc fe6d 	bl	4055fc <__aeabi_i2d>
  408922:	4602      	mov	r2, r0
  408924:	460b      	mov	r3, r1
  408926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40892a:	f002 faa7 	bl	40ae7c <__aeabi_dcmpeq>
  40892e:	2800      	cmp	r0, #0
  408930:	f47f ae80 	bne.w	408634 <_dtoa_r+0x12c>
  408934:	1e6b      	subs	r3, r5, #1
  408936:	9302      	str	r3, [sp, #8]
  408938:	e67c      	b.n	408634 <_dtoa_r+0x12c>
  40893a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40893c:	9d08      	ldr	r5, [sp, #32]
  40893e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  408940:	2d00      	cmp	r5, #0
  408942:	dd0c      	ble.n	40895e <_dtoa_r+0x456>
  408944:	9906      	ldr	r1, [sp, #24]
  408946:	2900      	cmp	r1, #0
  408948:	460b      	mov	r3, r1
  40894a:	dd08      	ble.n	40895e <_dtoa_r+0x456>
  40894c:	42a9      	cmp	r1, r5
  40894e:	9a08      	ldr	r2, [sp, #32]
  408950:	bfa8      	it	ge
  408952:	462b      	movge	r3, r5
  408954:	1ad2      	subs	r2, r2, r3
  408956:	1aed      	subs	r5, r5, r3
  408958:	1acb      	subs	r3, r1, r3
  40895a:	9208      	str	r2, [sp, #32]
  40895c:	9306      	str	r3, [sp, #24]
  40895e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408960:	b1d3      	cbz	r3, 408998 <_dtoa_r+0x490>
  408962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408964:	2b00      	cmp	r3, #0
  408966:	f000 82b7 	beq.w	408ed8 <_dtoa_r+0x9d0>
  40896a:	2f00      	cmp	r7, #0
  40896c:	dd10      	ble.n	408990 <_dtoa_r+0x488>
  40896e:	4631      	mov	r1, r6
  408970:	463a      	mov	r2, r7
  408972:	4620      	mov	r0, r4
  408974:	f001 fbb4 	bl	40a0e0 <__pow5mult>
  408978:	464a      	mov	r2, r9
  40897a:	4601      	mov	r1, r0
  40897c:	4606      	mov	r6, r0
  40897e:	4620      	mov	r0, r4
  408980:	f001 fb1c 	bl	409fbc <__multiply>
  408984:	4649      	mov	r1, r9
  408986:	4680      	mov	r8, r0
  408988:	4620      	mov	r0, r4
  40898a:	f001 fa73 	bl	409e74 <_Bfree>
  40898e:	46c1      	mov	r9, r8
  408990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408992:	1bda      	subs	r2, r3, r7
  408994:	f040 82a1 	bne.w	408eda <_dtoa_r+0x9d2>
  408998:	2101      	movs	r1, #1
  40899a:	4620      	mov	r0, r4
  40899c:	f001 fb04 	bl	409fa8 <__i2b>
  4089a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4089a2:	2b00      	cmp	r3, #0
  4089a4:	4680      	mov	r8, r0
  4089a6:	dd1c      	ble.n	4089e2 <_dtoa_r+0x4da>
  4089a8:	4601      	mov	r1, r0
  4089aa:	461a      	mov	r2, r3
  4089ac:	4620      	mov	r0, r4
  4089ae:	f001 fb97 	bl	40a0e0 <__pow5mult>
  4089b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4089b4:	2b01      	cmp	r3, #1
  4089b6:	4680      	mov	r8, r0
  4089b8:	f340 8254 	ble.w	408e64 <_dtoa_r+0x95c>
  4089bc:	2300      	movs	r3, #0
  4089be:	930c      	str	r3, [sp, #48]	; 0x30
  4089c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4089c4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4089c8:	6918      	ldr	r0, [r3, #16]
  4089ca:	f001 fa9d 	bl	409f08 <__hi0bits>
  4089ce:	f1c0 0020 	rsb	r0, r0, #32
  4089d2:	e010      	b.n	4089f6 <_dtoa_r+0x4ee>
  4089d4:	f1c3 0520 	rsb	r5, r3, #32
  4089d8:	fa0a f005 	lsl.w	r0, sl, r5
  4089dc:	e674      	b.n	4086c8 <_dtoa_r+0x1c0>
  4089de:	900e      	str	r0, [sp, #56]	; 0x38
  4089e0:	e63c      	b.n	40865c <_dtoa_r+0x154>
  4089e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4089e4:	2b01      	cmp	r3, #1
  4089e6:	f340 8287 	ble.w	408ef8 <_dtoa_r+0x9f0>
  4089ea:	2300      	movs	r3, #0
  4089ec:	930c      	str	r3, [sp, #48]	; 0x30
  4089ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4089f0:	2001      	movs	r0, #1
  4089f2:	2b00      	cmp	r3, #0
  4089f4:	d1e4      	bne.n	4089c0 <_dtoa_r+0x4b8>
  4089f6:	9a06      	ldr	r2, [sp, #24]
  4089f8:	4410      	add	r0, r2
  4089fa:	f010 001f 	ands.w	r0, r0, #31
  4089fe:	f000 80a1 	beq.w	408b44 <_dtoa_r+0x63c>
  408a02:	f1c0 0320 	rsb	r3, r0, #32
  408a06:	2b04      	cmp	r3, #4
  408a08:	f340 849e 	ble.w	409348 <_dtoa_r+0xe40>
  408a0c:	9b08      	ldr	r3, [sp, #32]
  408a0e:	f1c0 001c 	rsb	r0, r0, #28
  408a12:	4403      	add	r3, r0
  408a14:	9308      	str	r3, [sp, #32]
  408a16:	4613      	mov	r3, r2
  408a18:	4403      	add	r3, r0
  408a1a:	4405      	add	r5, r0
  408a1c:	9306      	str	r3, [sp, #24]
  408a1e:	9b08      	ldr	r3, [sp, #32]
  408a20:	2b00      	cmp	r3, #0
  408a22:	dd05      	ble.n	408a30 <_dtoa_r+0x528>
  408a24:	4649      	mov	r1, r9
  408a26:	461a      	mov	r2, r3
  408a28:	4620      	mov	r0, r4
  408a2a:	f001 fba9 	bl	40a180 <__lshift>
  408a2e:	4681      	mov	r9, r0
  408a30:	9b06      	ldr	r3, [sp, #24]
  408a32:	2b00      	cmp	r3, #0
  408a34:	dd05      	ble.n	408a42 <_dtoa_r+0x53a>
  408a36:	4641      	mov	r1, r8
  408a38:	461a      	mov	r2, r3
  408a3a:	4620      	mov	r0, r4
  408a3c:	f001 fba0 	bl	40a180 <__lshift>
  408a40:	4680      	mov	r8, r0
  408a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408a44:	2b00      	cmp	r3, #0
  408a46:	f040 8086 	bne.w	408b56 <_dtoa_r+0x64e>
  408a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408a4c:	2b00      	cmp	r3, #0
  408a4e:	f340 8266 	ble.w	408f1e <_dtoa_r+0xa16>
  408a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408a54:	2b00      	cmp	r3, #0
  408a56:	f000 8098 	beq.w	408b8a <_dtoa_r+0x682>
  408a5a:	2d00      	cmp	r5, #0
  408a5c:	dd05      	ble.n	408a6a <_dtoa_r+0x562>
  408a5e:	4631      	mov	r1, r6
  408a60:	462a      	mov	r2, r5
  408a62:	4620      	mov	r0, r4
  408a64:	f001 fb8c 	bl	40a180 <__lshift>
  408a68:	4606      	mov	r6, r0
  408a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408a6c:	2b00      	cmp	r3, #0
  408a6e:	f040 8337 	bne.w	4090e0 <_dtoa_r+0xbd8>
  408a72:	9606      	str	r6, [sp, #24]
  408a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408a76:	9a04      	ldr	r2, [sp, #16]
  408a78:	f8dd b018 	ldr.w	fp, [sp, #24]
  408a7c:	3b01      	subs	r3, #1
  408a7e:	18d3      	adds	r3, r2, r3
  408a80:	930b      	str	r3, [sp, #44]	; 0x2c
  408a82:	f00a 0301 	and.w	r3, sl, #1
  408a86:	930c      	str	r3, [sp, #48]	; 0x30
  408a88:	4617      	mov	r7, r2
  408a8a:	46c2      	mov	sl, r8
  408a8c:	4651      	mov	r1, sl
  408a8e:	4648      	mov	r0, r9
  408a90:	f7ff fca6 	bl	4083e0 <quorem>
  408a94:	4631      	mov	r1, r6
  408a96:	4605      	mov	r5, r0
  408a98:	4648      	mov	r0, r9
  408a9a:	f001 fbc3 	bl	40a224 <__mcmp>
  408a9e:	465a      	mov	r2, fp
  408aa0:	900a      	str	r0, [sp, #40]	; 0x28
  408aa2:	4651      	mov	r1, sl
  408aa4:	4620      	mov	r0, r4
  408aa6:	f001 fbd9 	bl	40a25c <__mdiff>
  408aaa:	68c2      	ldr	r2, [r0, #12]
  408aac:	4680      	mov	r8, r0
  408aae:	f105 0330 	add.w	r3, r5, #48	; 0x30
  408ab2:	2a00      	cmp	r2, #0
  408ab4:	f040 822b 	bne.w	408f0e <_dtoa_r+0xa06>
  408ab8:	4601      	mov	r1, r0
  408aba:	4648      	mov	r0, r9
  408abc:	9308      	str	r3, [sp, #32]
  408abe:	f001 fbb1 	bl	40a224 <__mcmp>
  408ac2:	4641      	mov	r1, r8
  408ac4:	9006      	str	r0, [sp, #24]
  408ac6:	4620      	mov	r0, r4
  408ac8:	f001 f9d4 	bl	409e74 <_Bfree>
  408acc:	9a06      	ldr	r2, [sp, #24]
  408ace:	9b08      	ldr	r3, [sp, #32]
  408ad0:	b932      	cbnz	r2, 408ae0 <_dtoa_r+0x5d8>
  408ad2:	9924      	ldr	r1, [sp, #144]	; 0x90
  408ad4:	b921      	cbnz	r1, 408ae0 <_dtoa_r+0x5d8>
  408ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408ad8:	2a00      	cmp	r2, #0
  408ada:	f000 83ef 	beq.w	4092bc <_dtoa_r+0xdb4>
  408ade:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408ae0:	990a      	ldr	r1, [sp, #40]	; 0x28
  408ae2:	2900      	cmp	r1, #0
  408ae4:	f2c0 829f 	blt.w	409026 <_dtoa_r+0xb1e>
  408ae8:	d105      	bne.n	408af6 <_dtoa_r+0x5ee>
  408aea:	9924      	ldr	r1, [sp, #144]	; 0x90
  408aec:	b919      	cbnz	r1, 408af6 <_dtoa_r+0x5ee>
  408aee:	990c      	ldr	r1, [sp, #48]	; 0x30
  408af0:	2900      	cmp	r1, #0
  408af2:	f000 8298 	beq.w	409026 <_dtoa_r+0xb1e>
  408af6:	2a00      	cmp	r2, #0
  408af8:	f300 8306 	bgt.w	409108 <_dtoa_r+0xc00>
  408afc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408afe:	703b      	strb	r3, [r7, #0]
  408b00:	f107 0801 	add.w	r8, r7, #1
  408b04:	4297      	cmp	r7, r2
  408b06:	4645      	mov	r5, r8
  408b08:	f000 830c 	beq.w	409124 <_dtoa_r+0xc1c>
  408b0c:	4649      	mov	r1, r9
  408b0e:	2300      	movs	r3, #0
  408b10:	220a      	movs	r2, #10
  408b12:	4620      	mov	r0, r4
  408b14:	f001 f9b8 	bl	409e88 <__multadd>
  408b18:	455e      	cmp	r6, fp
  408b1a:	4681      	mov	r9, r0
  408b1c:	4631      	mov	r1, r6
  408b1e:	f04f 0300 	mov.w	r3, #0
  408b22:	f04f 020a 	mov.w	r2, #10
  408b26:	4620      	mov	r0, r4
  408b28:	f000 81eb 	beq.w	408f02 <_dtoa_r+0x9fa>
  408b2c:	f001 f9ac 	bl	409e88 <__multadd>
  408b30:	4659      	mov	r1, fp
  408b32:	4606      	mov	r6, r0
  408b34:	2300      	movs	r3, #0
  408b36:	220a      	movs	r2, #10
  408b38:	4620      	mov	r0, r4
  408b3a:	f001 f9a5 	bl	409e88 <__multadd>
  408b3e:	4647      	mov	r7, r8
  408b40:	4683      	mov	fp, r0
  408b42:	e7a3      	b.n	408a8c <_dtoa_r+0x584>
  408b44:	201c      	movs	r0, #28
  408b46:	9b08      	ldr	r3, [sp, #32]
  408b48:	4403      	add	r3, r0
  408b4a:	9308      	str	r3, [sp, #32]
  408b4c:	9b06      	ldr	r3, [sp, #24]
  408b4e:	4403      	add	r3, r0
  408b50:	4405      	add	r5, r0
  408b52:	9306      	str	r3, [sp, #24]
  408b54:	e763      	b.n	408a1e <_dtoa_r+0x516>
  408b56:	4641      	mov	r1, r8
  408b58:	4648      	mov	r0, r9
  408b5a:	f001 fb63 	bl	40a224 <__mcmp>
  408b5e:	2800      	cmp	r0, #0
  408b60:	f6bf af73 	bge.w	408a4a <_dtoa_r+0x542>
  408b64:	9f02      	ldr	r7, [sp, #8]
  408b66:	4649      	mov	r1, r9
  408b68:	2300      	movs	r3, #0
  408b6a:	220a      	movs	r2, #10
  408b6c:	4620      	mov	r0, r4
  408b6e:	3f01      	subs	r7, #1
  408b70:	9702      	str	r7, [sp, #8]
  408b72:	f001 f989 	bl	409e88 <__multadd>
  408b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408b78:	4681      	mov	r9, r0
  408b7a:	2b00      	cmp	r3, #0
  408b7c:	f040 83b6 	bne.w	4092ec <_dtoa_r+0xde4>
  408b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408b82:	2b00      	cmp	r3, #0
  408b84:	f340 83bf 	ble.w	409306 <_dtoa_r+0xdfe>
  408b88:	930a      	str	r3, [sp, #40]	; 0x28
  408b8a:	f8dd b010 	ldr.w	fp, [sp, #16]
  408b8e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408b90:	465d      	mov	r5, fp
  408b92:	e002      	b.n	408b9a <_dtoa_r+0x692>
  408b94:	f001 f978 	bl	409e88 <__multadd>
  408b98:	4681      	mov	r9, r0
  408b9a:	4641      	mov	r1, r8
  408b9c:	4648      	mov	r0, r9
  408b9e:	f7ff fc1f 	bl	4083e0 <quorem>
  408ba2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  408ba6:	f805 ab01 	strb.w	sl, [r5], #1
  408baa:	eba5 030b 	sub.w	r3, r5, fp
  408bae:	42bb      	cmp	r3, r7
  408bb0:	f04f 020a 	mov.w	r2, #10
  408bb4:	f04f 0300 	mov.w	r3, #0
  408bb8:	4649      	mov	r1, r9
  408bba:	4620      	mov	r0, r4
  408bbc:	dbea      	blt.n	408b94 <_dtoa_r+0x68c>
  408bbe:	9b04      	ldr	r3, [sp, #16]
  408bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408bc2:	2a01      	cmp	r2, #1
  408bc4:	bfac      	ite	ge
  408bc6:	189b      	addge	r3, r3, r2
  408bc8:	3301      	addlt	r3, #1
  408bca:	461d      	mov	r5, r3
  408bcc:	f04f 0b00 	mov.w	fp, #0
  408bd0:	4649      	mov	r1, r9
  408bd2:	2201      	movs	r2, #1
  408bd4:	4620      	mov	r0, r4
  408bd6:	f001 fad3 	bl	40a180 <__lshift>
  408bda:	4641      	mov	r1, r8
  408bdc:	4681      	mov	r9, r0
  408bde:	f001 fb21 	bl	40a224 <__mcmp>
  408be2:	2800      	cmp	r0, #0
  408be4:	f340 823d 	ble.w	409062 <_dtoa_r+0xb5a>
  408be8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  408bec:	9904      	ldr	r1, [sp, #16]
  408bee:	1e6b      	subs	r3, r5, #1
  408bf0:	e004      	b.n	408bfc <_dtoa_r+0x6f4>
  408bf2:	428b      	cmp	r3, r1
  408bf4:	f000 81ae 	beq.w	408f54 <_dtoa_r+0xa4c>
  408bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  408bfc:	2a39      	cmp	r2, #57	; 0x39
  408bfe:	f103 0501 	add.w	r5, r3, #1
  408c02:	d0f6      	beq.n	408bf2 <_dtoa_r+0x6ea>
  408c04:	3201      	adds	r2, #1
  408c06:	701a      	strb	r2, [r3, #0]
  408c08:	4641      	mov	r1, r8
  408c0a:	4620      	mov	r0, r4
  408c0c:	f001 f932 	bl	409e74 <_Bfree>
  408c10:	2e00      	cmp	r6, #0
  408c12:	f43f ae3d 	beq.w	408890 <_dtoa_r+0x388>
  408c16:	f1bb 0f00 	cmp.w	fp, #0
  408c1a:	d005      	beq.n	408c28 <_dtoa_r+0x720>
  408c1c:	45b3      	cmp	fp, r6
  408c1e:	d003      	beq.n	408c28 <_dtoa_r+0x720>
  408c20:	4659      	mov	r1, fp
  408c22:	4620      	mov	r0, r4
  408c24:	f001 f926 	bl	409e74 <_Bfree>
  408c28:	4631      	mov	r1, r6
  408c2a:	4620      	mov	r0, r4
  408c2c:	f001 f922 	bl	409e74 <_Bfree>
  408c30:	e62e      	b.n	408890 <_dtoa_r+0x388>
  408c32:	2300      	movs	r3, #0
  408c34:	930b      	str	r3, [sp, #44]	; 0x2c
  408c36:	9b02      	ldr	r3, [sp, #8]
  408c38:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408c3a:	4413      	add	r3, r2
  408c3c:	930f      	str	r3, [sp, #60]	; 0x3c
  408c3e:	3301      	adds	r3, #1
  408c40:	2b01      	cmp	r3, #1
  408c42:	461f      	mov	r7, r3
  408c44:	461e      	mov	r6, r3
  408c46:	930a      	str	r3, [sp, #40]	; 0x28
  408c48:	bfb8      	it	lt
  408c4a:	2701      	movlt	r7, #1
  408c4c:	2100      	movs	r1, #0
  408c4e:	2f17      	cmp	r7, #23
  408c50:	6461      	str	r1, [r4, #68]	; 0x44
  408c52:	d90a      	bls.n	408c6a <_dtoa_r+0x762>
  408c54:	2201      	movs	r2, #1
  408c56:	2304      	movs	r3, #4
  408c58:	005b      	lsls	r3, r3, #1
  408c5a:	f103 0014 	add.w	r0, r3, #20
  408c5e:	4287      	cmp	r7, r0
  408c60:	4611      	mov	r1, r2
  408c62:	f102 0201 	add.w	r2, r2, #1
  408c66:	d2f7      	bcs.n	408c58 <_dtoa_r+0x750>
  408c68:	6461      	str	r1, [r4, #68]	; 0x44
  408c6a:	4620      	mov	r0, r4
  408c6c:	f001 f8dc 	bl	409e28 <_Balloc>
  408c70:	2e0e      	cmp	r6, #14
  408c72:	9004      	str	r0, [sp, #16]
  408c74:	6420      	str	r0, [r4, #64]	; 0x40
  408c76:	f63f ad41 	bhi.w	4086fc <_dtoa_r+0x1f4>
  408c7a:	2d00      	cmp	r5, #0
  408c7c:	f43f ad3e 	beq.w	4086fc <_dtoa_r+0x1f4>
  408c80:	9902      	ldr	r1, [sp, #8]
  408c82:	2900      	cmp	r1, #0
  408c84:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  408c88:	f340 8202 	ble.w	409090 <_dtoa_r+0xb88>
  408c8c:	4bb8      	ldr	r3, [pc, #736]	; (408f70 <_dtoa_r+0xa68>)
  408c8e:	f001 020f 	and.w	r2, r1, #15
  408c92:	110d      	asrs	r5, r1, #4
  408c94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408c98:	06e9      	lsls	r1, r5, #27
  408c9a:	e9d3 6700 	ldrd	r6, r7, [r3]
  408c9e:	f140 81ae 	bpl.w	408ffe <_dtoa_r+0xaf6>
  408ca2:	4bb4      	ldr	r3, [pc, #720]	; (408f74 <_dtoa_r+0xa6c>)
  408ca4:	4650      	mov	r0, sl
  408ca6:	4659      	mov	r1, fp
  408ca8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  408cac:	f7fc fe36 	bl	40591c <__aeabi_ddiv>
  408cb0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  408cb4:	f005 050f 	and.w	r5, r5, #15
  408cb8:	f04f 0a03 	mov.w	sl, #3
  408cbc:	b18d      	cbz	r5, 408ce2 <_dtoa_r+0x7da>
  408cbe:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 408f74 <_dtoa_r+0xa6c>
  408cc2:	07ea      	lsls	r2, r5, #31
  408cc4:	d509      	bpl.n	408cda <_dtoa_r+0x7d2>
  408cc6:	4630      	mov	r0, r6
  408cc8:	4639      	mov	r1, r7
  408cca:	e9d8 2300 	ldrd	r2, r3, [r8]
  408cce:	f7fc fcfb 	bl	4056c8 <__aeabi_dmul>
  408cd2:	f10a 0a01 	add.w	sl, sl, #1
  408cd6:	4606      	mov	r6, r0
  408cd8:	460f      	mov	r7, r1
  408cda:	106d      	asrs	r5, r5, #1
  408cdc:	f108 0808 	add.w	r8, r8, #8
  408ce0:	d1ef      	bne.n	408cc2 <_dtoa_r+0x7ba>
  408ce2:	463b      	mov	r3, r7
  408ce4:	4632      	mov	r2, r6
  408ce6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  408cea:	f7fc fe17 	bl	40591c <__aeabi_ddiv>
  408cee:	4607      	mov	r7, r0
  408cf0:	4688      	mov	r8, r1
  408cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408cf4:	b143      	cbz	r3, 408d08 <_dtoa_r+0x800>
  408cf6:	2200      	movs	r2, #0
  408cf8:	4b9f      	ldr	r3, [pc, #636]	; (408f78 <_dtoa_r+0xa70>)
  408cfa:	4638      	mov	r0, r7
  408cfc:	4641      	mov	r1, r8
  408cfe:	f002 f8c7 	bl	40ae90 <__aeabi_dcmplt>
  408d02:	2800      	cmp	r0, #0
  408d04:	f040 8286 	bne.w	409214 <_dtoa_r+0xd0c>
  408d08:	4650      	mov	r0, sl
  408d0a:	f7fc fc77 	bl	4055fc <__aeabi_i2d>
  408d0e:	463a      	mov	r2, r7
  408d10:	4643      	mov	r3, r8
  408d12:	f7fc fcd9 	bl	4056c8 <__aeabi_dmul>
  408d16:	4b99      	ldr	r3, [pc, #612]	; (408f7c <_dtoa_r+0xa74>)
  408d18:	2200      	movs	r2, #0
  408d1a:	f7fc fb23 	bl	405364 <__adddf3>
  408d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408d20:	4605      	mov	r5, r0
  408d22:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408d26:	2b00      	cmp	r3, #0
  408d28:	f000 813e 	beq.w	408fa8 <_dtoa_r+0xaa0>
  408d2c:	9b02      	ldr	r3, [sp, #8]
  408d2e:	9315      	str	r3, [sp, #84]	; 0x54
  408d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408d32:	9312      	str	r3, [sp, #72]	; 0x48
  408d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408d36:	2b00      	cmp	r3, #0
  408d38:	f000 81fa 	beq.w	409130 <_dtoa_r+0xc28>
  408d3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408d3e:	4b8c      	ldr	r3, [pc, #560]	; (408f70 <_dtoa_r+0xa68>)
  408d40:	498f      	ldr	r1, [pc, #572]	; (408f80 <_dtoa_r+0xa78>)
  408d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408d46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  408d4a:	2000      	movs	r0, #0
  408d4c:	f7fc fde6 	bl	40591c <__aeabi_ddiv>
  408d50:	462a      	mov	r2, r5
  408d52:	4633      	mov	r3, r6
  408d54:	f7fc fb04 	bl	405360 <__aeabi_dsub>
  408d58:	4682      	mov	sl, r0
  408d5a:	468b      	mov	fp, r1
  408d5c:	4638      	mov	r0, r7
  408d5e:	4641      	mov	r1, r8
  408d60:	f002 f8d4 	bl	40af0c <__aeabi_d2iz>
  408d64:	4605      	mov	r5, r0
  408d66:	f7fc fc49 	bl	4055fc <__aeabi_i2d>
  408d6a:	4602      	mov	r2, r0
  408d6c:	460b      	mov	r3, r1
  408d6e:	4638      	mov	r0, r7
  408d70:	4641      	mov	r1, r8
  408d72:	f7fc faf5 	bl	405360 <__aeabi_dsub>
  408d76:	3530      	adds	r5, #48	; 0x30
  408d78:	fa5f f885 	uxtb.w	r8, r5
  408d7c:	9d04      	ldr	r5, [sp, #16]
  408d7e:	4606      	mov	r6, r0
  408d80:	460f      	mov	r7, r1
  408d82:	f885 8000 	strb.w	r8, [r5]
  408d86:	4602      	mov	r2, r0
  408d88:	460b      	mov	r3, r1
  408d8a:	4650      	mov	r0, sl
  408d8c:	4659      	mov	r1, fp
  408d8e:	3501      	adds	r5, #1
  408d90:	f002 f89c 	bl	40aecc <__aeabi_dcmpgt>
  408d94:	2800      	cmp	r0, #0
  408d96:	d154      	bne.n	408e42 <_dtoa_r+0x93a>
  408d98:	4632      	mov	r2, r6
  408d9a:	463b      	mov	r3, r7
  408d9c:	2000      	movs	r0, #0
  408d9e:	4976      	ldr	r1, [pc, #472]	; (408f78 <_dtoa_r+0xa70>)
  408da0:	f7fc fade 	bl	405360 <__aeabi_dsub>
  408da4:	4602      	mov	r2, r0
  408da6:	460b      	mov	r3, r1
  408da8:	4650      	mov	r0, sl
  408daa:	4659      	mov	r1, fp
  408dac:	f002 f88e 	bl	40aecc <__aeabi_dcmpgt>
  408db0:	2800      	cmp	r0, #0
  408db2:	f040 8270 	bne.w	409296 <_dtoa_r+0xd8e>
  408db6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408db8:	2a01      	cmp	r2, #1
  408dba:	f000 8111 	beq.w	408fe0 <_dtoa_r+0xad8>
  408dbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408dc0:	9a04      	ldr	r2, [sp, #16]
  408dc2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408dc6:	4413      	add	r3, r2
  408dc8:	4699      	mov	r9, r3
  408dca:	e00d      	b.n	408de8 <_dtoa_r+0x8e0>
  408dcc:	2000      	movs	r0, #0
  408dce:	496a      	ldr	r1, [pc, #424]	; (408f78 <_dtoa_r+0xa70>)
  408dd0:	f7fc fac6 	bl	405360 <__aeabi_dsub>
  408dd4:	4652      	mov	r2, sl
  408dd6:	465b      	mov	r3, fp
  408dd8:	f002 f85a 	bl	40ae90 <__aeabi_dcmplt>
  408ddc:	2800      	cmp	r0, #0
  408dde:	f040 8258 	bne.w	409292 <_dtoa_r+0xd8a>
  408de2:	454d      	cmp	r5, r9
  408de4:	f000 80fa 	beq.w	408fdc <_dtoa_r+0xad4>
  408de8:	4650      	mov	r0, sl
  408dea:	4659      	mov	r1, fp
  408dec:	2200      	movs	r2, #0
  408dee:	4b65      	ldr	r3, [pc, #404]	; (408f84 <_dtoa_r+0xa7c>)
  408df0:	f7fc fc6a 	bl	4056c8 <__aeabi_dmul>
  408df4:	2200      	movs	r2, #0
  408df6:	4b63      	ldr	r3, [pc, #396]	; (408f84 <_dtoa_r+0xa7c>)
  408df8:	4682      	mov	sl, r0
  408dfa:	468b      	mov	fp, r1
  408dfc:	4630      	mov	r0, r6
  408dfe:	4639      	mov	r1, r7
  408e00:	f7fc fc62 	bl	4056c8 <__aeabi_dmul>
  408e04:	460f      	mov	r7, r1
  408e06:	4606      	mov	r6, r0
  408e08:	f002 f880 	bl	40af0c <__aeabi_d2iz>
  408e0c:	4680      	mov	r8, r0
  408e0e:	f7fc fbf5 	bl	4055fc <__aeabi_i2d>
  408e12:	4602      	mov	r2, r0
  408e14:	460b      	mov	r3, r1
  408e16:	4630      	mov	r0, r6
  408e18:	4639      	mov	r1, r7
  408e1a:	f7fc faa1 	bl	405360 <__aeabi_dsub>
  408e1e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408e22:	fa5f f888 	uxtb.w	r8, r8
  408e26:	4652      	mov	r2, sl
  408e28:	465b      	mov	r3, fp
  408e2a:	f805 8b01 	strb.w	r8, [r5], #1
  408e2e:	4606      	mov	r6, r0
  408e30:	460f      	mov	r7, r1
  408e32:	f002 f82d 	bl	40ae90 <__aeabi_dcmplt>
  408e36:	4632      	mov	r2, r6
  408e38:	463b      	mov	r3, r7
  408e3a:	2800      	cmp	r0, #0
  408e3c:	d0c6      	beq.n	408dcc <_dtoa_r+0x8c4>
  408e3e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408e42:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408e44:	9302      	str	r3, [sp, #8]
  408e46:	e523      	b.n	408890 <_dtoa_r+0x388>
  408e48:	2300      	movs	r3, #0
  408e4a:	930b      	str	r3, [sp, #44]	; 0x2c
  408e4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408e4e:	2b00      	cmp	r3, #0
  408e50:	f340 80dc 	ble.w	40900c <_dtoa_r+0xb04>
  408e54:	461f      	mov	r7, r3
  408e56:	461e      	mov	r6, r3
  408e58:	930f      	str	r3, [sp, #60]	; 0x3c
  408e5a:	930a      	str	r3, [sp, #40]	; 0x28
  408e5c:	e6f6      	b.n	408c4c <_dtoa_r+0x744>
  408e5e:	2301      	movs	r3, #1
  408e60:	930b      	str	r3, [sp, #44]	; 0x2c
  408e62:	e7f3      	b.n	408e4c <_dtoa_r+0x944>
  408e64:	f1ba 0f00 	cmp.w	sl, #0
  408e68:	f47f ada8 	bne.w	4089bc <_dtoa_r+0x4b4>
  408e6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  408e70:	2b00      	cmp	r3, #0
  408e72:	f47f adba 	bne.w	4089ea <_dtoa_r+0x4e2>
  408e76:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  408e7a:	0d3f      	lsrs	r7, r7, #20
  408e7c:	053f      	lsls	r7, r7, #20
  408e7e:	2f00      	cmp	r7, #0
  408e80:	f000 820d 	beq.w	40929e <_dtoa_r+0xd96>
  408e84:	9b08      	ldr	r3, [sp, #32]
  408e86:	3301      	adds	r3, #1
  408e88:	9308      	str	r3, [sp, #32]
  408e8a:	9b06      	ldr	r3, [sp, #24]
  408e8c:	3301      	adds	r3, #1
  408e8e:	9306      	str	r3, [sp, #24]
  408e90:	2301      	movs	r3, #1
  408e92:	930c      	str	r3, [sp, #48]	; 0x30
  408e94:	e5ab      	b.n	4089ee <_dtoa_r+0x4e6>
  408e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408e98:	2b00      	cmp	r3, #0
  408e9a:	f73f ac42 	bgt.w	408722 <_dtoa_r+0x21a>
  408e9e:	f040 8221 	bne.w	4092e4 <_dtoa_r+0xddc>
  408ea2:	2200      	movs	r2, #0
  408ea4:	4b38      	ldr	r3, [pc, #224]	; (408f88 <_dtoa_r+0xa80>)
  408ea6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408eaa:	f7fc fc0d 	bl	4056c8 <__aeabi_dmul>
  408eae:	4652      	mov	r2, sl
  408eb0:	465b      	mov	r3, fp
  408eb2:	f002 f801 	bl	40aeb8 <__aeabi_dcmpge>
  408eb6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  408eba:	4646      	mov	r6, r8
  408ebc:	2800      	cmp	r0, #0
  408ebe:	d041      	beq.n	408f44 <_dtoa_r+0xa3c>
  408ec0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408ec2:	9d04      	ldr	r5, [sp, #16]
  408ec4:	43db      	mvns	r3, r3
  408ec6:	9302      	str	r3, [sp, #8]
  408ec8:	4641      	mov	r1, r8
  408eca:	4620      	mov	r0, r4
  408ecc:	f000 ffd2 	bl	409e74 <_Bfree>
  408ed0:	2e00      	cmp	r6, #0
  408ed2:	f43f acdd 	beq.w	408890 <_dtoa_r+0x388>
  408ed6:	e6a7      	b.n	408c28 <_dtoa_r+0x720>
  408ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408eda:	4649      	mov	r1, r9
  408edc:	4620      	mov	r0, r4
  408ede:	f001 f8ff 	bl	40a0e0 <__pow5mult>
  408ee2:	4681      	mov	r9, r0
  408ee4:	e558      	b.n	408998 <_dtoa_r+0x490>
  408ee6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408ee8:	2a00      	cmp	r2, #0
  408eea:	f000 8187 	beq.w	4091fc <_dtoa_r+0xcf4>
  408eee:	f203 4333 	addw	r3, r3, #1075	; 0x433
  408ef2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408ef4:	9d08      	ldr	r5, [sp, #32]
  408ef6:	e4f2      	b.n	4088de <_dtoa_r+0x3d6>
  408ef8:	f1ba 0f00 	cmp.w	sl, #0
  408efc:	f47f ad75 	bne.w	4089ea <_dtoa_r+0x4e2>
  408f00:	e7b4      	b.n	408e6c <_dtoa_r+0x964>
  408f02:	f000 ffc1 	bl	409e88 <__multadd>
  408f06:	4647      	mov	r7, r8
  408f08:	4606      	mov	r6, r0
  408f0a:	4683      	mov	fp, r0
  408f0c:	e5be      	b.n	408a8c <_dtoa_r+0x584>
  408f0e:	4601      	mov	r1, r0
  408f10:	4620      	mov	r0, r4
  408f12:	9306      	str	r3, [sp, #24]
  408f14:	f000 ffae 	bl	409e74 <_Bfree>
  408f18:	2201      	movs	r2, #1
  408f1a:	9b06      	ldr	r3, [sp, #24]
  408f1c:	e5e0      	b.n	408ae0 <_dtoa_r+0x5d8>
  408f1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408f20:	2b02      	cmp	r3, #2
  408f22:	f77f ad96 	ble.w	408a52 <_dtoa_r+0x54a>
  408f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408f28:	2b00      	cmp	r3, #0
  408f2a:	d1c9      	bne.n	408ec0 <_dtoa_r+0x9b8>
  408f2c:	4641      	mov	r1, r8
  408f2e:	2205      	movs	r2, #5
  408f30:	4620      	mov	r0, r4
  408f32:	f000 ffa9 	bl	409e88 <__multadd>
  408f36:	4601      	mov	r1, r0
  408f38:	4680      	mov	r8, r0
  408f3a:	4648      	mov	r0, r9
  408f3c:	f001 f972 	bl	40a224 <__mcmp>
  408f40:	2800      	cmp	r0, #0
  408f42:	ddbd      	ble.n	408ec0 <_dtoa_r+0x9b8>
  408f44:	9a02      	ldr	r2, [sp, #8]
  408f46:	9904      	ldr	r1, [sp, #16]
  408f48:	2331      	movs	r3, #49	; 0x31
  408f4a:	3201      	adds	r2, #1
  408f4c:	9202      	str	r2, [sp, #8]
  408f4e:	700b      	strb	r3, [r1, #0]
  408f50:	1c4d      	adds	r5, r1, #1
  408f52:	e7b9      	b.n	408ec8 <_dtoa_r+0x9c0>
  408f54:	9a02      	ldr	r2, [sp, #8]
  408f56:	3201      	adds	r2, #1
  408f58:	9202      	str	r2, [sp, #8]
  408f5a:	9a04      	ldr	r2, [sp, #16]
  408f5c:	2331      	movs	r3, #49	; 0x31
  408f5e:	7013      	strb	r3, [r2, #0]
  408f60:	e652      	b.n	408c08 <_dtoa_r+0x700>
  408f62:	2301      	movs	r3, #1
  408f64:	930b      	str	r3, [sp, #44]	; 0x2c
  408f66:	e666      	b.n	408c36 <_dtoa_r+0x72e>
  408f68:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  408f6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408f6e:	e48f      	b.n	408890 <_dtoa_r+0x388>
  408f70:	0040b880 	.word	0x0040b880
  408f74:	0040b858 	.word	0x0040b858
  408f78:	3ff00000 	.word	0x3ff00000
  408f7c:	401c0000 	.word	0x401c0000
  408f80:	3fe00000 	.word	0x3fe00000
  408f84:	40240000 	.word	0x40240000
  408f88:	40140000 	.word	0x40140000
  408f8c:	4650      	mov	r0, sl
  408f8e:	f7fc fb35 	bl	4055fc <__aeabi_i2d>
  408f92:	463a      	mov	r2, r7
  408f94:	4643      	mov	r3, r8
  408f96:	f7fc fb97 	bl	4056c8 <__aeabi_dmul>
  408f9a:	2200      	movs	r2, #0
  408f9c:	4bc1      	ldr	r3, [pc, #772]	; (4092a4 <_dtoa_r+0xd9c>)
  408f9e:	f7fc f9e1 	bl	405364 <__adddf3>
  408fa2:	4605      	mov	r5, r0
  408fa4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408fa8:	4641      	mov	r1, r8
  408faa:	2200      	movs	r2, #0
  408fac:	4bbe      	ldr	r3, [pc, #760]	; (4092a8 <_dtoa_r+0xda0>)
  408fae:	4638      	mov	r0, r7
  408fb0:	f7fc f9d6 	bl	405360 <__aeabi_dsub>
  408fb4:	462a      	mov	r2, r5
  408fb6:	4633      	mov	r3, r6
  408fb8:	4682      	mov	sl, r0
  408fba:	468b      	mov	fp, r1
  408fbc:	f001 ff86 	bl	40aecc <__aeabi_dcmpgt>
  408fc0:	4680      	mov	r8, r0
  408fc2:	2800      	cmp	r0, #0
  408fc4:	f040 8110 	bne.w	4091e8 <_dtoa_r+0xce0>
  408fc8:	462a      	mov	r2, r5
  408fca:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  408fce:	4650      	mov	r0, sl
  408fd0:	4659      	mov	r1, fp
  408fd2:	f001 ff5d 	bl	40ae90 <__aeabi_dcmplt>
  408fd6:	b118      	cbz	r0, 408fe0 <_dtoa_r+0xad8>
  408fd8:	4646      	mov	r6, r8
  408fda:	e771      	b.n	408ec0 <_dtoa_r+0x9b8>
  408fdc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408fe0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  408fe4:	f7ff bb8a 	b.w	4086fc <_dtoa_r+0x1f4>
  408fe8:	9804      	ldr	r0, [sp, #16]
  408fea:	f7ff babb 	b.w	408564 <_dtoa_r+0x5c>
  408fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408ff0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408ff2:	970c      	str	r7, [sp, #48]	; 0x30
  408ff4:	1afb      	subs	r3, r7, r3
  408ff6:	441a      	add	r2, r3
  408ff8:	920d      	str	r2, [sp, #52]	; 0x34
  408ffa:	2700      	movs	r7, #0
  408ffc:	e469      	b.n	4088d2 <_dtoa_r+0x3ca>
  408ffe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  409002:	f04f 0a02 	mov.w	sl, #2
  409006:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40900a:	e657      	b.n	408cbc <_dtoa_r+0x7b4>
  40900c:	2100      	movs	r1, #0
  40900e:	2301      	movs	r3, #1
  409010:	6461      	str	r1, [r4, #68]	; 0x44
  409012:	4620      	mov	r0, r4
  409014:	9325      	str	r3, [sp, #148]	; 0x94
  409016:	f000 ff07 	bl	409e28 <_Balloc>
  40901a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40901c:	9004      	str	r0, [sp, #16]
  40901e:	6420      	str	r0, [r4, #64]	; 0x40
  409020:	930a      	str	r3, [sp, #40]	; 0x28
  409022:	930f      	str	r3, [sp, #60]	; 0x3c
  409024:	e629      	b.n	408c7a <_dtoa_r+0x772>
  409026:	2a00      	cmp	r2, #0
  409028:	46d0      	mov	r8, sl
  40902a:	f8cd b018 	str.w	fp, [sp, #24]
  40902e:	469a      	mov	sl, r3
  409030:	dd11      	ble.n	409056 <_dtoa_r+0xb4e>
  409032:	4649      	mov	r1, r9
  409034:	2201      	movs	r2, #1
  409036:	4620      	mov	r0, r4
  409038:	f001 f8a2 	bl	40a180 <__lshift>
  40903c:	4641      	mov	r1, r8
  40903e:	4681      	mov	r9, r0
  409040:	f001 f8f0 	bl	40a224 <__mcmp>
  409044:	2800      	cmp	r0, #0
  409046:	f340 8146 	ble.w	4092d6 <_dtoa_r+0xdce>
  40904a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40904e:	f000 8106 	beq.w	40925e <_dtoa_r+0xd56>
  409052:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  409056:	46b3      	mov	fp, r6
  409058:	f887 a000 	strb.w	sl, [r7]
  40905c:	1c7d      	adds	r5, r7, #1
  40905e:	9e06      	ldr	r6, [sp, #24]
  409060:	e5d2      	b.n	408c08 <_dtoa_r+0x700>
  409062:	d104      	bne.n	40906e <_dtoa_r+0xb66>
  409064:	f01a 0f01 	tst.w	sl, #1
  409068:	d001      	beq.n	40906e <_dtoa_r+0xb66>
  40906a:	e5bd      	b.n	408be8 <_dtoa_r+0x6e0>
  40906c:	4615      	mov	r5, r2
  40906e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409072:	2b30      	cmp	r3, #48	; 0x30
  409074:	f105 32ff 	add.w	r2, r5, #4294967295
  409078:	d0f8      	beq.n	40906c <_dtoa_r+0xb64>
  40907a:	e5c5      	b.n	408c08 <_dtoa_r+0x700>
  40907c:	9904      	ldr	r1, [sp, #16]
  40907e:	2230      	movs	r2, #48	; 0x30
  409080:	700a      	strb	r2, [r1, #0]
  409082:	9a02      	ldr	r2, [sp, #8]
  409084:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409088:	3201      	adds	r2, #1
  40908a:	9202      	str	r2, [sp, #8]
  40908c:	f7ff bbfc 	b.w	408888 <_dtoa_r+0x380>
  409090:	f000 80bb 	beq.w	40920a <_dtoa_r+0xd02>
  409094:	9b02      	ldr	r3, [sp, #8]
  409096:	425d      	negs	r5, r3
  409098:	4b84      	ldr	r3, [pc, #528]	; (4092ac <_dtoa_r+0xda4>)
  40909a:	f005 020f 	and.w	r2, r5, #15
  40909e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4090aa:	f7fc fb0d 	bl	4056c8 <__aeabi_dmul>
  4090ae:	112d      	asrs	r5, r5, #4
  4090b0:	4607      	mov	r7, r0
  4090b2:	4688      	mov	r8, r1
  4090b4:	f000 812c 	beq.w	409310 <_dtoa_r+0xe08>
  4090b8:	4e7d      	ldr	r6, [pc, #500]	; (4092b0 <_dtoa_r+0xda8>)
  4090ba:	f04f 0a02 	mov.w	sl, #2
  4090be:	07eb      	lsls	r3, r5, #31
  4090c0:	d509      	bpl.n	4090d6 <_dtoa_r+0xbce>
  4090c2:	4638      	mov	r0, r7
  4090c4:	4641      	mov	r1, r8
  4090c6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4090ca:	f7fc fafd 	bl	4056c8 <__aeabi_dmul>
  4090ce:	f10a 0a01 	add.w	sl, sl, #1
  4090d2:	4607      	mov	r7, r0
  4090d4:	4688      	mov	r8, r1
  4090d6:	106d      	asrs	r5, r5, #1
  4090d8:	f106 0608 	add.w	r6, r6, #8
  4090dc:	d1ef      	bne.n	4090be <_dtoa_r+0xbb6>
  4090de:	e608      	b.n	408cf2 <_dtoa_r+0x7ea>
  4090e0:	6871      	ldr	r1, [r6, #4]
  4090e2:	4620      	mov	r0, r4
  4090e4:	f000 fea0 	bl	409e28 <_Balloc>
  4090e8:	6933      	ldr	r3, [r6, #16]
  4090ea:	3302      	adds	r3, #2
  4090ec:	009a      	lsls	r2, r3, #2
  4090ee:	4605      	mov	r5, r0
  4090f0:	f106 010c 	add.w	r1, r6, #12
  4090f4:	300c      	adds	r0, #12
  4090f6:	f7fd fb47 	bl	406788 <memcpy>
  4090fa:	4629      	mov	r1, r5
  4090fc:	2201      	movs	r2, #1
  4090fe:	4620      	mov	r0, r4
  409100:	f001 f83e 	bl	40a180 <__lshift>
  409104:	9006      	str	r0, [sp, #24]
  409106:	e4b5      	b.n	408a74 <_dtoa_r+0x56c>
  409108:	2b39      	cmp	r3, #57	; 0x39
  40910a:	f8cd b018 	str.w	fp, [sp, #24]
  40910e:	46d0      	mov	r8, sl
  409110:	f000 80a5 	beq.w	40925e <_dtoa_r+0xd56>
  409114:	f103 0a01 	add.w	sl, r3, #1
  409118:	46b3      	mov	fp, r6
  40911a:	f887 a000 	strb.w	sl, [r7]
  40911e:	1c7d      	adds	r5, r7, #1
  409120:	9e06      	ldr	r6, [sp, #24]
  409122:	e571      	b.n	408c08 <_dtoa_r+0x700>
  409124:	465a      	mov	r2, fp
  409126:	46d0      	mov	r8, sl
  409128:	46b3      	mov	fp, r6
  40912a:	469a      	mov	sl, r3
  40912c:	4616      	mov	r6, r2
  40912e:	e54f      	b.n	408bd0 <_dtoa_r+0x6c8>
  409130:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409132:	495e      	ldr	r1, [pc, #376]	; (4092ac <_dtoa_r+0xda4>)
  409134:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  409138:	462a      	mov	r2, r5
  40913a:	4633      	mov	r3, r6
  40913c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  409140:	f7fc fac2 	bl	4056c8 <__aeabi_dmul>
  409144:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  409148:	4638      	mov	r0, r7
  40914a:	4641      	mov	r1, r8
  40914c:	f001 fede 	bl	40af0c <__aeabi_d2iz>
  409150:	4605      	mov	r5, r0
  409152:	f7fc fa53 	bl	4055fc <__aeabi_i2d>
  409156:	460b      	mov	r3, r1
  409158:	4602      	mov	r2, r0
  40915a:	4641      	mov	r1, r8
  40915c:	4638      	mov	r0, r7
  40915e:	f7fc f8ff 	bl	405360 <__aeabi_dsub>
  409162:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409164:	460f      	mov	r7, r1
  409166:	9904      	ldr	r1, [sp, #16]
  409168:	3530      	adds	r5, #48	; 0x30
  40916a:	2b01      	cmp	r3, #1
  40916c:	700d      	strb	r5, [r1, #0]
  40916e:	4606      	mov	r6, r0
  409170:	f101 0501 	add.w	r5, r1, #1
  409174:	d026      	beq.n	4091c4 <_dtoa_r+0xcbc>
  409176:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409178:	9a04      	ldr	r2, [sp, #16]
  40917a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4092b8 <_dtoa_r+0xdb0>
  40917e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409182:	4413      	add	r3, r2
  409184:	f04f 0a00 	mov.w	sl, #0
  409188:	4699      	mov	r9, r3
  40918a:	4652      	mov	r2, sl
  40918c:	465b      	mov	r3, fp
  40918e:	4630      	mov	r0, r6
  409190:	4639      	mov	r1, r7
  409192:	f7fc fa99 	bl	4056c8 <__aeabi_dmul>
  409196:	460f      	mov	r7, r1
  409198:	4606      	mov	r6, r0
  40919a:	f001 feb7 	bl	40af0c <__aeabi_d2iz>
  40919e:	4680      	mov	r8, r0
  4091a0:	f7fc fa2c 	bl	4055fc <__aeabi_i2d>
  4091a4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4091a8:	4602      	mov	r2, r0
  4091aa:	460b      	mov	r3, r1
  4091ac:	4630      	mov	r0, r6
  4091ae:	4639      	mov	r1, r7
  4091b0:	f7fc f8d6 	bl	405360 <__aeabi_dsub>
  4091b4:	f805 8b01 	strb.w	r8, [r5], #1
  4091b8:	454d      	cmp	r5, r9
  4091ba:	4606      	mov	r6, r0
  4091bc:	460f      	mov	r7, r1
  4091be:	d1e4      	bne.n	40918a <_dtoa_r+0xc82>
  4091c0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4091c4:	4b3b      	ldr	r3, [pc, #236]	; (4092b4 <_dtoa_r+0xdac>)
  4091c6:	2200      	movs	r2, #0
  4091c8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4091cc:	f7fc f8ca 	bl	405364 <__adddf3>
  4091d0:	4632      	mov	r2, r6
  4091d2:	463b      	mov	r3, r7
  4091d4:	f001 fe5c 	bl	40ae90 <__aeabi_dcmplt>
  4091d8:	2800      	cmp	r0, #0
  4091da:	d046      	beq.n	40926a <_dtoa_r+0xd62>
  4091dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4091de:	9302      	str	r3, [sp, #8]
  4091e0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4091e4:	f7ff bb43 	b.w	40886e <_dtoa_r+0x366>
  4091e8:	f04f 0800 	mov.w	r8, #0
  4091ec:	4646      	mov	r6, r8
  4091ee:	e6a9      	b.n	408f44 <_dtoa_r+0xa3c>
  4091f0:	9b08      	ldr	r3, [sp, #32]
  4091f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4091f4:	1a9d      	subs	r5, r3, r2
  4091f6:	2300      	movs	r3, #0
  4091f8:	f7ff bb71 	b.w	4088de <_dtoa_r+0x3d6>
  4091fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4091fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409200:	9d08      	ldr	r5, [sp, #32]
  409202:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409206:	f7ff bb6a 	b.w	4088de <_dtoa_r+0x3d6>
  40920a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40920e:	f04f 0a02 	mov.w	sl, #2
  409212:	e56e      	b.n	408cf2 <_dtoa_r+0x7ea>
  409214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409216:	2b00      	cmp	r3, #0
  409218:	f43f aeb8 	beq.w	408f8c <_dtoa_r+0xa84>
  40921c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40921e:	2b00      	cmp	r3, #0
  409220:	f77f aede 	ble.w	408fe0 <_dtoa_r+0xad8>
  409224:	2200      	movs	r2, #0
  409226:	4b24      	ldr	r3, [pc, #144]	; (4092b8 <_dtoa_r+0xdb0>)
  409228:	4638      	mov	r0, r7
  40922a:	4641      	mov	r1, r8
  40922c:	f7fc fa4c 	bl	4056c8 <__aeabi_dmul>
  409230:	4607      	mov	r7, r0
  409232:	4688      	mov	r8, r1
  409234:	f10a 0001 	add.w	r0, sl, #1
  409238:	f7fc f9e0 	bl	4055fc <__aeabi_i2d>
  40923c:	463a      	mov	r2, r7
  40923e:	4643      	mov	r3, r8
  409240:	f7fc fa42 	bl	4056c8 <__aeabi_dmul>
  409244:	2200      	movs	r2, #0
  409246:	4b17      	ldr	r3, [pc, #92]	; (4092a4 <_dtoa_r+0xd9c>)
  409248:	f7fc f88c 	bl	405364 <__adddf3>
  40924c:	9a02      	ldr	r2, [sp, #8]
  40924e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409250:	9312      	str	r3, [sp, #72]	; 0x48
  409252:	3a01      	subs	r2, #1
  409254:	4605      	mov	r5, r0
  409256:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40925a:	9215      	str	r2, [sp, #84]	; 0x54
  40925c:	e56a      	b.n	408d34 <_dtoa_r+0x82c>
  40925e:	2239      	movs	r2, #57	; 0x39
  409260:	46b3      	mov	fp, r6
  409262:	703a      	strb	r2, [r7, #0]
  409264:	9e06      	ldr	r6, [sp, #24]
  409266:	1c7d      	adds	r5, r7, #1
  409268:	e4c0      	b.n	408bec <_dtoa_r+0x6e4>
  40926a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40926e:	2000      	movs	r0, #0
  409270:	4910      	ldr	r1, [pc, #64]	; (4092b4 <_dtoa_r+0xdac>)
  409272:	f7fc f875 	bl	405360 <__aeabi_dsub>
  409276:	4632      	mov	r2, r6
  409278:	463b      	mov	r3, r7
  40927a:	f001 fe27 	bl	40aecc <__aeabi_dcmpgt>
  40927e:	b908      	cbnz	r0, 409284 <_dtoa_r+0xd7c>
  409280:	e6ae      	b.n	408fe0 <_dtoa_r+0xad8>
  409282:	4615      	mov	r5, r2
  409284:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409288:	2b30      	cmp	r3, #48	; 0x30
  40928a:	f105 32ff 	add.w	r2, r5, #4294967295
  40928e:	d0f8      	beq.n	409282 <_dtoa_r+0xd7a>
  409290:	e5d7      	b.n	408e42 <_dtoa_r+0x93a>
  409292:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409296:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409298:	9302      	str	r3, [sp, #8]
  40929a:	f7ff bae8 	b.w	40886e <_dtoa_r+0x366>
  40929e:	970c      	str	r7, [sp, #48]	; 0x30
  4092a0:	f7ff bba5 	b.w	4089ee <_dtoa_r+0x4e6>
  4092a4:	401c0000 	.word	0x401c0000
  4092a8:	40140000 	.word	0x40140000
  4092ac:	0040b880 	.word	0x0040b880
  4092b0:	0040b858 	.word	0x0040b858
  4092b4:	3fe00000 	.word	0x3fe00000
  4092b8:	40240000 	.word	0x40240000
  4092bc:	2b39      	cmp	r3, #57	; 0x39
  4092be:	f8cd b018 	str.w	fp, [sp, #24]
  4092c2:	46d0      	mov	r8, sl
  4092c4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4092c8:	469a      	mov	sl, r3
  4092ca:	d0c8      	beq.n	40925e <_dtoa_r+0xd56>
  4092cc:	f1bb 0f00 	cmp.w	fp, #0
  4092d0:	f73f aebf 	bgt.w	409052 <_dtoa_r+0xb4a>
  4092d4:	e6bf      	b.n	409056 <_dtoa_r+0xb4e>
  4092d6:	f47f aebe 	bne.w	409056 <_dtoa_r+0xb4e>
  4092da:	f01a 0f01 	tst.w	sl, #1
  4092de:	f43f aeba 	beq.w	409056 <_dtoa_r+0xb4e>
  4092e2:	e6b2      	b.n	40904a <_dtoa_r+0xb42>
  4092e4:	f04f 0800 	mov.w	r8, #0
  4092e8:	4646      	mov	r6, r8
  4092ea:	e5e9      	b.n	408ec0 <_dtoa_r+0x9b8>
  4092ec:	4631      	mov	r1, r6
  4092ee:	2300      	movs	r3, #0
  4092f0:	220a      	movs	r2, #10
  4092f2:	4620      	mov	r0, r4
  4092f4:	f000 fdc8 	bl	409e88 <__multadd>
  4092f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4092fa:	2b00      	cmp	r3, #0
  4092fc:	4606      	mov	r6, r0
  4092fe:	dd0a      	ble.n	409316 <_dtoa_r+0xe0e>
  409300:	930a      	str	r3, [sp, #40]	; 0x28
  409302:	f7ff bbaa 	b.w	408a5a <_dtoa_r+0x552>
  409306:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409308:	2b02      	cmp	r3, #2
  40930a:	dc23      	bgt.n	409354 <_dtoa_r+0xe4c>
  40930c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40930e:	e43b      	b.n	408b88 <_dtoa_r+0x680>
  409310:	f04f 0a02 	mov.w	sl, #2
  409314:	e4ed      	b.n	408cf2 <_dtoa_r+0x7ea>
  409316:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409318:	2b02      	cmp	r3, #2
  40931a:	dc1b      	bgt.n	409354 <_dtoa_r+0xe4c>
  40931c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40931e:	e7ef      	b.n	409300 <_dtoa_r+0xdf8>
  409320:	2500      	movs	r5, #0
  409322:	6465      	str	r5, [r4, #68]	; 0x44
  409324:	4629      	mov	r1, r5
  409326:	4620      	mov	r0, r4
  409328:	f000 fd7e 	bl	409e28 <_Balloc>
  40932c:	f04f 33ff 	mov.w	r3, #4294967295
  409330:	930a      	str	r3, [sp, #40]	; 0x28
  409332:	930f      	str	r3, [sp, #60]	; 0x3c
  409334:	2301      	movs	r3, #1
  409336:	9004      	str	r0, [sp, #16]
  409338:	9525      	str	r5, [sp, #148]	; 0x94
  40933a:	6420      	str	r0, [r4, #64]	; 0x40
  40933c:	930b      	str	r3, [sp, #44]	; 0x2c
  40933e:	f7ff b9dd 	b.w	4086fc <_dtoa_r+0x1f4>
  409342:	2501      	movs	r5, #1
  409344:	f7ff b9a5 	b.w	408692 <_dtoa_r+0x18a>
  409348:	f43f ab69 	beq.w	408a1e <_dtoa_r+0x516>
  40934c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  409350:	f7ff bbf9 	b.w	408b46 <_dtoa_r+0x63e>
  409354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409356:	930a      	str	r3, [sp, #40]	; 0x28
  409358:	e5e5      	b.n	408f26 <_dtoa_r+0xa1e>
  40935a:	bf00      	nop

0040935c <__sflush_r>:
  40935c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  409360:	b29a      	uxth	r2, r3
  409362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409366:	460d      	mov	r5, r1
  409368:	0711      	lsls	r1, r2, #28
  40936a:	4680      	mov	r8, r0
  40936c:	d43a      	bmi.n	4093e4 <__sflush_r+0x88>
  40936e:	686a      	ldr	r2, [r5, #4]
  409370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  409374:	2a00      	cmp	r2, #0
  409376:	81ab      	strh	r3, [r5, #12]
  409378:	dd6f      	ble.n	40945a <__sflush_r+0xfe>
  40937a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40937c:	2c00      	cmp	r4, #0
  40937e:	d049      	beq.n	409414 <__sflush_r+0xb8>
  409380:	2200      	movs	r2, #0
  409382:	b29b      	uxth	r3, r3
  409384:	f8d8 6000 	ldr.w	r6, [r8]
  409388:	f8c8 2000 	str.w	r2, [r8]
  40938c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  409390:	d067      	beq.n	409462 <__sflush_r+0x106>
  409392:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  409394:	075f      	lsls	r7, r3, #29
  409396:	d505      	bpl.n	4093a4 <__sflush_r+0x48>
  409398:	6869      	ldr	r1, [r5, #4]
  40939a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40939c:	1a52      	subs	r2, r2, r1
  40939e:	b10b      	cbz	r3, 4093a4 <__sflush_r+0x48>
  4093a0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4093a2:	1ad2      	subs	r2, r2, r3
  4093a4:	2300      	movs	r3, #0
  4093a6:	69e9      	ldr	r1, [r5, #28]
  4093a8:	4640      	mov	r0, r8
  4093aa:	47a0      	blx	r4
  4093ac:	1c44      	adds	r4, r0, #1
  4093ae:	d03c      	beq.n	40942a <__sflush_r+0xce>
  4093b0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4093b4:	692a      	ldr	r2, [r5, #16]
  4093b6:	602a      	str	r2, [r5, #0]
  4093b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4093bc:	2200      	movs	r2, #0
  4093be:	81ab      	strh	r3, [r5, #12]
  4093c0:	04db      	lsls	r3, r3, #19
  4093c2:	606a      	str	r2, [r5, #4]
  4093c4:	d447      	bmi.n	409456 <__sflush_r+0xfa>
  4093c6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4093c8:	f8c8 6000 	str.w	r6, [r8]
  4093cc:	b311      	cbz	r1, 409414 <__sflush_r+0xb8>
  4093ce:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4093d2:	4299      	cmp	r1, r3
  4093d4:	d002      	beq.n	4093dc <__sflush_r+0x80>
  4093d6:	4640      	mov	r0, r8
  4093d8:	f000 f95a 	bl	409690 <_free_r>
  4093dc:	2000      	movs	r0, #0
  4093de:	6328      	str	r0, [r5, #48]	; 0x30
  4093e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4093e4:	692e      	ldr	r6, [r5, #16]
  4093e6:	b1ae      	cbz	r6, 409414 <__sflush_r+0xb8>
  4093e8:	682c      	ldr	r4, [r5, #0]
  4093ea:	602e      	str	r6, [r5, #0]
  4093ec:	0791      	lsls	r1, r2, #30
  4093ee:	bf0c      	ite	eq
  4093f0:	696b      	ldreq	r3, [r5, #20]
  4093f2:	2300      	movne	r3, #0
  4093f4:	1ba4      	subs	r4, r4, r6
  4093f6:	60ab      	str	r3, [r5, #8]
  4093f8:	e00a      	b.n	409410 <__sflush_r+0xb4>
  4093fa:	4623      	mov	r3, r4
  4093fc:	4632      	mov	r2, r6
  4093fe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  409400:	69e9      	ldr	r1, [r5, #28]
  409402:	4640      	mov	r0, r8
  409404:	47b8      	blx	r7
  409406:	2800      	cmp	r0, #0
  409408:	eba4 0400 	sub.w	r4, r4, r0
  40940c:	4406      	add	r6, r0
  40940e:	dd04      	ble.n	40941a <__sflush_r+0xbe>
  409410:	2c00      	cmp	r4, #0
  409412:	dcf2      	bgt.n	4093fa <__sflush_r+0x9e>
  409414:	2000      	movs	r0, #0
  409416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40941a:	89ab      	ldrh	r3, [r5, #12]
  40941c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409420:	81ab      	strh	r3, [r5, #12]
  409422:	f04f 30ff 	mov.w	r0, #4294967295
  409426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40942a:	f8d8 4000 	ldr.w	r4, [r8]
  40942e:	2c1d      	cmp	r4, #29
  409430:	d8f3      	bhi.n	40941a <__sflush_r+0xbe>
  409432:	4b19      	ldr	r3, [pc, #100]	; (409498 <__sflush_r+0x13c>)
  409434:	40e3      	lsrs	r3, r4
  409436:	43db      	mvns	r3, r3
  409438:	f013 0301 	ands.w	r3, r3, #1
  40943c:	d1ed      	bne.n	40941a <__sflush_r+0xbe>
  40943e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  409442:	606b      	str	r3, [r5, #4]
  409444:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  409448:	6929      	ldr	r1, [r5, #16]
  40944a:	81ab      	strh	r3, [r5, #12]
  40944c:	04da      	lsls	r2, r3, #19
  40944e:	6029      	str	r1, [r5, #0]
  409450:	d5b9      	bpl.n	4093c6 <__sflush_r+0x6a>
  409452:	2c00      	cmp	r4, #0
  409454:	d1b7      	bne.n	4093c6 <__sflush_r+0x6a>
  409456:	6528      	str	r0, [r5, #80]	; 0x50
  409458:	e7b5      	b.n	4093c6 <__sflush_r+0x6a>
  40945a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40945c:	2a00      	cmp	r2, #0
  40945e:	dc8c      	bgt.n	40937a <__sflush_r+0x1e>
  409460:	e7d8      	b.n	409414 <__sflush_r+0xb8>
  409462:	2301      	movs	r3, #1
  409464:	69e9      	ldr	r1, [r5, #28]
  409466:	4640      	mov	r0, r8
  409468:	47a0      	blx	r4
  40946a:	1c43      	adds	r3, r0, #1
  40946c:	4602      	mov	r2, r0
  40946e:	d002      	beq.n	409476 <__sflush_r+0x11a>
  409470:	89ab      	ldrh	r3, [r5, #12]
  409472:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409474:	e78e      	b.n	409394 <__sflush_r+0x38>
  409476:	f8d8 3000 	ldr.w	r3, [r8]
  40947a:	2b00      	cmp	r3, #0
  40947c:	d0f8      	beq.n	409470 <__sflush_r+0x114>
  40947e:	2b1d      	cmp	r3, #29
  409480:	d001      	beq.n	409486 <__sflush_r+0x12a>
  409482:	2b16      	cmp	r3, #22
  409484:	d102      	bne.n	40948c <__sflush_r+0x130>
  409486:	f8c8 6000 	str.w	r6, [r8]
  40948a:	e7c3      	b.n	409414 <__sflush_r+0xb8>
  40948c:	89ab      	ldrh	r3, [r5, #12]
  40948e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409492:	81ab      	strh	r3, [r5, #12]
  409494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409498:	20400001 	.word	0x20400001

0040949c <_fflush_r>:
  40949c:	b538      	push	{r3, r4, r5, lr}
  40949e:	460d      	mov	r5, r1
  4094a0:	4604      	mov	r4, r0
  4094a2:	b108      	cbz	r0, 4094a8 <_fflush_r+0xc>
  4094a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4094a6:	b1bb      	cbz	r3, 4094d8 <_fflush_r+0x3c>
  4094a8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4094ac:	b188      	cbz	r0, 4094d2 <_fflush_r+0x36>
  4094ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4094b0:	07db      	lsls	r3, r3, #31
  4094b2:	d401      	bmi.n	4094b8 <_fflush_r+0x1c>
  4094b4:	0581      	lsls	r1, r0, #22
  4094b6:	d517      	bpl.n	4094e8 <_fflush_r+0x4c>
  4094b8:	4620      	mov	r0, r4
  4094ba:	4629      	mov	r1, r5
  4094bc:	f7ff ff4e 	bl	40935c <__sflush_r>
  4094c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4094c2:	07da      	lsls	r2, r3, #31
  4094c4:	4604      	mov	r4, r0
  4094c6:	d402      	bmi.n	4094ce <_fflush_r+0x32>
  4094c8:	89ab      	ldrh	r3, [r5, #12]
  4094ca:	059b      	lsls	r3, r3, #22
  4094cc:	d507      	bpl.n	4094de <_fflush_r+0x42>
  4094ce:	4620      	mov	r0, r4
  4094d0:	bd38      	pop	{r3, r4, r5, pc}
  4094d2:	4604      	mov	r4, r0
  4094d4:	4620      	mov	r0, r4
  4094d6:	bd38      	pop	{r3, r4, r5, pc}
  4094d8:	f000 f838 	bl	40954c <__sinit>
  4094dc:	e7e4      	b.n	4094a8 <_fflush_r+0xc>
  4094de:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4094e0:	f000 fb72 	bl	409bc8 <__retarget_lock_release_recursive>
  4094e4:	4620      	mov	r0, r4
  4094e6:	bd38      	pop	{r3, r4, r5, pc}
  4094e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4094ea:	f000 fb6b 	bl	409bc4 <__retarget_lock_acquire_recursive>
  4094ee:	e7e3      	b.n	4094b8 <_fflush_r+0x1c>

004094f0 <_cleanup_r>:
  4094f0:	4901      	ldr	r1, [pc, #4]	; (4094f8 <_cleanup_r+0x8>)
  4094f2:	f000 bb2b 	b.w	409b4c <_fwalk_reent>
  4094f6:	bf00      	nop
  4094f8:	0040a9f9 	.word	0x0040a9f9

004094fc <std.isra.0>:
  4094fc:	b510      	push	{r4, lr}
  4094fe:	2300      	movs	r3, #0
  409500:	4604      	mov	r4, r0
  409502:	8181      	strh	r1, [r0, #12]
  409504:	81c2      	strh	r2, [r0, #14]
  409506:	6003      	str	r3, [r0, #0]
  409508:	6043      	str	r3, [r0, #4]
  40950a:	6083      	str	r3, [r0, #8]
  40950c:	6643      	str	r3, [r0, #100]	; 0x64
  40950e:	6103      	str	r3, [r0, #16]
  409510:	6143      	str	r3, [r0, #20]
  409512:	6183      	str	r3, [r0, #24]
  409514:	4619      	mov	r1, r3
  409516:	2208      	movs	r2, #8
  409518:	305c      	adds	r0, #92	; 0x5c
  40951a:	f7fd f9cf 	bl	4068bc <memset>
  40951e:	4807      	ldr	r0, [pc, #28]	; (40953c <std.isra.0+0x40>)
  409520:	4907      	ldr	r1, [pc, #28]	; (409540 <std.isra.0+0x44>)
  409522:	4a08      	ldr	r2, [pc, #32]	; (409544 <std.isra.0+0x48>)
  409524:	4b08      	ldr	r3, [pc, #32]	; (409548 <std.isra.0+0x4c>)
  409526:	6220      	str	r0, [r4, #32]
  409528:	61e4      	str	r4, [r4, #28]
  40952a:	6261      	str	r1, [r4, #36]	; 0x24
  40952c:	62a2      	str	r2, [r4, #40]	; 0x28
  40952e:	62e3      	str	r3, [r4, #44]	; 0x2c
  409530:	f104 0058 	add.w	r0, r4, #88	; 0x58
  409534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409538:	f000 bb40 	b.w	409bbc <__retarget_lock_init_recursive>
  40953c:	0040a769 	.word	0x0040a769
  409540:	0040a78d 	.word	0x0040a78d
  409544:	0040a7c9 	.word	0x0040a7c9
  409548:	0040a7e9 	.word	0x0040a7e9

0040954c <__sinit>:
  40954c:	b510      	push	{r4, lr}
  40954e:	4604      	mov	r4, r0
  409550:	4812      	ldr	r0, [pc, #72]	; (40959c <__sinit+0x50>)
  409552:	f000 fb37 	bl	409bc4 <__retarget_lock_acquire_recursive>
  409556:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  409558:	b9d2      	cbnz	r2, 409590 <__sinit+0x44>
  40955a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40955e:	4810      	ldr	r0, [pc, #64]	; (4095a0 <__sinit+0x54>)
  409560:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  409564:	2103      	movs	r1, #3
  409566:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40956a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40956c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  409570:	6860      	ldr	r0, [r4, #4]
  409572:	2104      	movs	r1, #4
  409574:	f7ff ffc2 	bl	4094fc <std.isra.0>
  409578:	2201      	movs	r2, #1
  40957a:	2109      	movs	r1, #9
  40957c:	68a0      	ldr	r0, [r4, #8]
  40957e:	f7ff ffbd 	bl	4094fc <std.isra.0>
  409582:	2202      	movs	r2, #2
  409584:	2112      	movs	r1, #18
  409586:	68e0      	ldr	r0, [r4, #12]
  409588:	f7ff ffb8 	bl	4094fc <std.isra.0>
  40958c:	2301      	movs	r3, #1
  40958e:	63a3      	str	r3, [r4, #56]	; 0x38
  409590:	4802      	ldr	r0, [pc, #8]	; (40959c <__sinit+0x50>)
  409592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409596:	f000 bb17 	b.w	409bc8 <__retarget_lock_release_recursive>
  40959a:	bf00      	nop
  40959c:	20400c28 	.word	0x20400c28
  4095a0:	004094f1 	.word	0x004094f1

004095a4 <__sfp_lock_acquire>:
  4095a4:	4801      	ldr	r0, [pc, #4]	; (4095ac <__sfp_lock_acquire+0x8>)
  4095a6:	f000 bb0d 	b.w	409bc4 <__retarget_lock_acquire_recursive>
  4095aa:	bf00      	nop
  4095ac:	20400c3c 	.word	0x20400c3c

004095b0 <__sfp_lock_release>:
  4095b0:	4801      	ldr	r0, [pc, #4]	; (4095b8 <__sfp_lock_release+0x8>)
  4095b2:	f000 bb09 	b.w	409bc8 <__retarget_lock_release_recursive>
  4095b6:	bf00      	nop
  4095b8:	20400c3c 	.word	0x20400c3c

004095bc <__libc_fini_array>:
  4095bc:	b538      	push	{r3, r4, r5, lr}
  4095be:	4c0a      	ldr	r4, [pc, #40]	; (4095e8 <__libc_fini_array+0x2c>)
  4095c0:	4d0a      	ldr	r5, [pc, #40]	; (4095ec <__libc_fini_array+0x30>)
  4095c2:	1b64      	subs	r4, r4, r5
  4095c4:	10a4      	asrs	r4, r4, #2
  4095c6:	d00a      	beq.n	4095de <__libc_fini_array+0x22>
  4095c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4095cc:	3b01      	subs	r3, #1
  4095ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4095d2:	3c01      	subs	r4, #1
  4095d4:	f855 3904 	ldr.w	r3, [r5], #-4
  4095d8:	4798      	blx	r3
  4095da:	2c00      	cmp	r4, #0
  4095dc:	d1f9      	bne.n	4095d2 <__libc_fini_array+0x16>
  4095de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4095e2:	f002 ba4b 	b.w	40ba7c <_fini>
  4095e6:	bf00      	nop
  4095e8:	0040ba8c 	.word	0x0040ba8c
  4095ec:	0040ba88 	.word	0x0040ba88

004095f0 <_malloc_trim_r>:
  4095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4095f2:	4f24      	ldr	r7, [pc, #144]	; (409684 <_malloc_trim_r+0x94>)
  4095f4:	460c      	mov	r4, r1
  4095f6:	4606      	mov	r6, r0
  4095f8:	f7fd f9ae 	bl	406958 <__malloc_lock>
  4095fc:	68bb      	ldr	r3, [r7, #8]
  4095fe:	685d      	ldr	r5, [r3, #4]
  409600:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  409604:	310f      	adds	r1, #15
  409606:	f025 0503 	bic.w	r5, r5, #3
  40960a:	4429      	add	r1, r5
  40960c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  409610:	f021 010f 	bic.w	r1, r1, #15
  409614:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  409618:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40961c:	db07      	blt.n	40962e <_malloc_trim_r+0x3e>
  40961e:	2100      	movs	r1, #0
  409620:	4630      	mov	r0, r6
  409622:	f7fd fa0f 	bl	406a44 <_sbrk_r>
  409626:	68bb      	ldr	r3, [r7, #8]
  409628:	442b      	add	r3, r5
  40962a:	4298      	cmp	r0, r3
  40962c:	d004      	beq.n	409638 <_malloc_trim_r+0x48>
  40962e:	4630      	mov	r0, r6
  409630:	f7fd f998 	bl	406964 <__malloc_unlock>
  409634:	2000      	movs	r0, #0
  409636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409638:	4261      	negs	r1, r4
  40963a:	4630      	mov	r0, r6
  40963c:	f7fd fa02 	bl	406a44 <_sbrk_r>
  409640:	3001      	adds	r0, #1
  409642:	d00d      	beq.n	409660 <_malloc_trim_r+0x70>
  409644:	4b10      	ldr	r3, [pc, #64]	; (409688 <_malloc_trim_r+0x98>)
  409646:	68ba      	ldr	r2, [r7, #8]
  409648:	6819      	ldr	r1, [r3, #0]
  40964a:	1b2d      	subs	r5, r5, r4
  40964c:	f045 0501 	orr.w	r5, r5, #1
  409650:	4630      	mov	r0, r6
  409652:	1b09      	subs	r1, r1, r4
  409654:	6055      	str	r5, [r2, #4]
  409656:	6019      	str	r1, [r3, #0]
  409658:	f7fd f984 	bl	406964 <__malloc_unlock>
  40965c:	2001      	movs	r0, #1
  40965e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409660:	2100      	movs	r1, #0
  409662:	4630      	mov	r0, r6
  409664:	f7fd f9ee 	bl	406a44 <_sbrk_r>
  409668:	68ba      	ldr	r2, [r7, #8]
  40966a:	1a83      	subs	r3, r0, r2
  40966c:	2b0f      	cmp	r3, #15
  40966e:	ddde      	ble.n	40962e <_malloc_trim_r+0x3e>
  409670:	4c06      	ldr	r4, [pc, #24]	; (40968c <_malloc_trim_r+0x9c>)
  409672:	4905      	ldr	r1, [pc, #20]	; (409688 <_malloc_trim_r+0x98>)
  409674:	6824      	ldr	r4, [r4, #0]
  409676:	f043 0301 	orr.w	r3, r3, #1
  40967a:	1b00      	subs	r0, r0, r4
  40967c:	6053      	str	r3, [r2, #4]
  40967e:	6008      	str	r0, [r1, #0]
  409680:	e7d5      	b.n	40962e <_malloc_trim_r+0x3e>
  409682:	bf00      	nop
  409684:	20400440 	.word	0x20400440
  409688:	20400b94 	.word	0x20400b94
  40968c:	20400848 	.word	0x20400848

00409690 <_free_r>:
  409690:	2900      	cmp	r1, #0
  409692:	d044      	beq.n	40971e <_free_r+0x8e>
  409694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409698:	460d      	mov	r5, r1
  40969a:	4680      	mov	r8, r0
  40969c:	f7fd f95c 	bl	406958 <__malloc_lock>
  4096a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4096a4:	4969      	ldr	r1, [pc, #420]	; (40984c <_free_r+0x1bc>)
  4096a6:	f027 0301 	bic.w	r3, r7, #1
  4096aa:	f1a5 0408 	sub.w	r4, r5, #8
  4096ae:	18e2      	adds	r2, r4, r3
  4096b0:	688e      	ldr	r6, [r1, #8]
  4096b2:	6850      	ldr	r0, [r2, #4]
  4096b4:	42b2      	cmp	r2, r6
  4096b6:	f020 0003 	bic.w	r0, r0, #3
  4096ba:	d05e      	beq.n	40977a <_free_r+0xea>
  4096bc:	07fe      	lsls	r6, r7, #31
  4096be:	6050      	str	r0, [r2, #4]
  4096c0:	d40b      	bmi.n	4096da <_free_r+0x4a>
  4096c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4096c6:	1be4      	subs	r4, r4, r7
  4096c8:	f101 0e08 	add.w	lr, r1, #8
  4096cc:	68a5      	ldr	r5, [r4, #8]
  4096ce:	4575      	cmp	r5, lr
  4096d0:	443b      	add	r3, r7
  4096d2:	d06d      	beq.n	4097b0 <_free_r+0x120>
  4096d4:	68e7      	ldr	r7, [r4, #12]
  4096d6:	60ef      	str	r7, [r5, #12]
  4096d8:	60bd      	str	r5, [r7, #8]
  4096da:	1815      	adds	r5, r2, r0
  4096dc:	686d      	ldr	r5, [r5, #4]
  4096de:	07ed      	lsls	r5, r5, #31
  4096e0:	d53e      	bpl.n	409760 <_free_r+0xd0>
  4096e2:	f043 0201 	orr.w	r2, r3, #1
  4096e6:	6062      	str	r2, [r4, #4]
  4096e8:	50e3      	str	r3, [r4, r3]
  4096ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4096ee:	d217      	bcs.n	409720 <_free_r+0x90>
  4096f0:	08db      	lsrs	r3, r3, #3
  4096f2:	1c58      	adds	r0, r3, #1
  4096f4:	109a      	asrs	r2, r3, #2
  4096f6:	684d      	ldr	r5, [r1, #4]
  4096f8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4096fc:	60a7      	str	r7, [r4, #8]
  4096fe:	2301      	movs	r3, #1
  409700:	4093      	lsls	r3, r2
  409702:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  409706:	432b      	orrs	r3, r5
  409708:	3a08      	subs	r2, #8
  40970a:	60e2      	str	r2, [r4, #12]
  40970c:	604b      	str	r3, [r1, #4]
  40970e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  409712:	60fc      	str	r4, [r7, #12]
  409714:	4640      	mov	r0, r8
  409716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40971a:	f7fd b923 	b.w	406964 <__malloc_unlock>
  40971e:	4770      	bx	lr
  409720:	0a5a      	lsrs	r2, r3, #9
  409722:	2a04      	cmp	r2, #4
  409724:	d852      	bhi.n	4097cc <_free_r+0x13c>
  409726:	099a      	lsrs	r2, r3, #6
  409728:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40972c:	00ff      	lsls	r7, r7, #3
  40972e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  409732:	19c8      	adds	r0, r1, r7
  409734:	59ca      	ldr	r2, [r1, r7]
  409736:	3808      	subs	r0, #8
  409738:	4290      	cmp	r0, r2
  40973a:	d04f      	beq.n	4097dc <_free_r+0x14c>
  40973c:	6851      	ldr	r1, [r2, #4]
  40973e:	f021 0103 	bic.w	r1, r1, #3
  409742:	428b      	cmp	r3, r1
  409744:	d232      	bcs.n	4097ac <_free_r+0x11c>
  409746:	6892      	ldr	r2, [r2, #8]
  409748:	4290      	cmp	r0, r2
  40974a:	d1f7      	bne.n	40973c <_free_r+0xac>
  40974c:	68c3      	ldr	r3, [r0, #12]
  40974e:	60a0      	str	r0, [r4, #8]
  409750:	60e3      	str	r3, [r4, #12]
  409752:	609c      	str	r4, [r3, #8]
  409754:	60c4      	str	r4, [r0, #12]
  409756:	4640      	mov	r0, r8
  409758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40975c:	f7fd b902 	b.w	406964 <__malloc_unlock>
  409760:	6895      	ldr	r5, [r2, #8]
  409762:	4f3b      	ldr	r7, [pc, #236]	; (409850 <_free_r+0x1c0>)
  409764:	42bd      	cmp	r5, r7
  409766:	4403      	add	r3, r0
  409768:	d040      	beq.n	4097ec <_free_r+0x15c>
  40976a:	68d0      	ldr	r0, [r2, #12]
  40976c:	60e8      	str	r0, [r5, #12]
  40976e:	f043 0201 	orr.w	r2, r3, #1
  409772:	6085      	str	r5, [r0, #8]
  409774:	6062      	str	r2, [r4, #4]
  409776:	50e3      	str	r3, [r4, r3]
  409778:	e7b7      	b.n	4096ea <_free_r+0x5a>
  40977a:	07ff      	lsls	r7, r7, #31
  40977c:	4403      	add	r3, r0
  40977e:	d407      	bmi.n	409790 <_free_r+0x100>
  409780:	f855 2c08 	ldr.w	r2, [r5, #-8]
  409784:	1aa4      	subs	r4, r4, r2
  409786:	4413      	add	r3, r2
  409788:	68a0      	ldr	r0, [r4, #8]
  40978a:	68e2      	ldr	r2, [r4, #12]
  40978c:	60c2      	str	r2, [r0, #12]
  40978e:	6090      	str	r0, [r2, #8]
  409790:	4a30      	ldr	r2, [pc, #192]	; (409854 <_free_r+0x1c4>)
  409792:	6812      	ldr	r2, [r2, #0]
  409794:	f043 0001 	orr.w	r0, r3, #1
  409798:	4293      	cmp	r3, r2
  40979a:	6060      	str	r0, [r4, #4]
  40979c:	608c      	str	r4, [r1, #8]
  40979e:	d3b9      	bcc.n	409714 <_free_r+0x84>
  4097a0:	4b2d      	ldr	r3, [pc, #180]	; (409858 <_free_r+0x1c8>)
  4097a2:	4640      	mov	r0, r8
  4097a4:	6819      	ldr	r1, [r3, #0]
  4097a6:	f7ff ff23 	bl	4095f0 <_malloc_trim_r>
  4097aa:	e7b3      	b.n	409714 <_free_r+0x84>
  4097ac:	4610      	mov	r0, r2
  4097ae:	e7cd      	b.n	40974c <_free_r+0xbc>
  4097b0:	1811      	adds	r1, r2, r0
  4097b2:	6849      	ldr	r1, [r1, #4]
  4097b4:	07c9      	lsls	r1, r1, #31
  4097b6:	d444      	bmi.n	409842 <_free_r+0x1b2>
  4097b8:	6891      	ldr	r1, [r2, #8]
  4097ba:	68d2      	ldr	r2, [r2, #12]
  4097bc:	60ca      	str	r2, [r1, #12]
  4097be:	4403      	add	r3, r0
  4097c0:	f043 0001 	orr.w	r0, r3, #1
  4097c4:	6091      	str	r1, [r2, #8]
  4097c6:	6060      	str	r0, [r4, #4]
  4097c8:	50e3      	str	r3, [r4, r3]
  4097ca:	e7a3      	b.n	409714 <_free_r+0x84>
  4097cc:	2a14      	cmp	r2, #20
  4097ce:	d816      	bhi.n	4097fe <_free_r+0x16e>
  4097d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4097d4:	00ff      	lsls	r7, r7, #3
  4097d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4097da:	e7aa      	b.n	409732 <_free_r+0xa2>
  4097dc:	10aa      	asrs	r2, r5, #2
  4097de:	2301      	movs	r3, #1
  4097e0:	684d      	ldr	r5, [r1, #4]
  4097e2:	4093      	lsls	r3, r2
  4097e4:	432b      	orrs	r3, r5
  4097e6:	604b      	str	r3, [r1, #4]
  4097e8:	4603      	mov	r3, r0
  4097ea:	e7b0      	b.n	40974e <_free_r+0xbe>
  4097ec:	f043 0201 	orr.w	r2, r3, #1
  4097f0:	614c      	str	r4, [r1, #20]
  4097f2:	610c      	str	r4, [r1, #16]
  4097f4:	60e5      	str	r5, [r4, #12]
  4097f6:	60a5      	str	r5, [r4, #8]
  4097f8:	6062      	str	r2, [r4, #4]
  4097fa:	50e3      	str	r3, [r4, r3]
  4097fc:	e78a      	b.n	409714 <_free_r+0x84>
  4097fe:	2a54      	cmp	r2, #84	; 0x54
  409800:	d806      	bhi.n	409810 <_free_r+0x180>
  409802:	0b1a      	lsrs	r2, r3, #12
  409804:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  409808:	00ff      	lsls	r7, r7, #3
  40980a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40980e:	e790      	b.n	409732 <_free_r+0xa2>
  409810:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409814:	d806      	bhi.n	409824 <_free_r+0x194>
  409816:	0bda      	lsrs	r2, r3, #15
  409818:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40981c:	00ff      	lsls	r7, r7, #3
  40981e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  409822:	e786      	b.n	409732 <_free_r+0xa2>
  409824:	f240 5054 	movw	r0, #1364	; 0x554
  409828:	4282      	cmp	r2, r0
  40982a:	d806      	bhi.n	40983a <_free_r+0x1aa>
  40982c:	0c9a      	lsrs	r2, r3, #18
  40982e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  409832:	00ff      	lsls	r7, r7, #3
  409834:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  409838:	e77b      	b.n	409732 <_free_r+0xa2>
  40983a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40983e:	257e      	movs	r5, #126	; 0x7e
  409840:	e777      	b.n	409732 <_free_r+0xa2>
  409842:	f043 0101 	orr.w	r1, r3, #1
  409846:	6061      	str	r1, [r4, #4]
  409848:	6013      	str	r3, [r2, #0]
  40984a:	e763      	b.n	409714 <_free_r+0x84>
  40984c:	20400440 	.word	0x20400440
  409850:	20400448 	.word	0x20400448
  409854:	2040084c 	.word	0x2040084c
  409858:	20400bc4 	.word	0x20400bc4

0040985c <__sfvwrite_r>:
  40985c:	6893      	ldr	r3, [r2, #8]
  40985e:	2b00      	cmp	r3, #0
  409860:	d073      	beq.n	40994a <__sfvwrite_r+0xee>
  409862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409866:	898b      	ldrh	r3, [r1, #12]
  409868:	b083      	sub	sp, #12
  40986a:	460c      	mov	r4, r1
  40986c:	0719      	lsls	r1, r3, #28
  40986e:	9000      	str	r0, [sp, #0]
  409870:	4616      	mov	r6, r2
  409872:	d526      	bpl.n	4098c2 <__sfvwrite_r+0x66>
  409874:	6922      	ldr	r2, [r4, #16]
  409876:	b322      	cbz	r2, 4098c2 <__sfvwrite_r+0x66>
  409878:	f013 0002 	ands.w	r0, r3, #2
  40987c:	6835      	ldr	r5, [r6, #0]
  40987e:	d02c      	beq.n	4098da <__sfvwrite_r+0x7e>
  409880:	f04f 0900 	mov.w	r9, #0
  409884:	4fb0      	ldr	r7, [pc, #704]	; (409b48 <__sfvwrite_r+0x2ec>)
  409886:	46c8      	mov	r8, r9
  409888:	46b2      	mov	sl, r6
  40988a:	45b8      	cmp	r8, r7
  40988c:	4643      	mov	r3, r8
  40988e:	464a      	mov	r2, r9
  409890:	bf28      	it	cs
  409892:	463b      	movcs	r3, r7
  409894:	9800      	ldr	r0, [sp, #0]
  409896:	f1b8 0f00 	cmp.w	r8, #0
  40989a:	d050      	beq.n	40993e <__sfvwrite_r+0xe2>
  40989c:	69e1      	ldr	r1, [r4, #28]
  40989e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4098a0:	47b0      	blx	r6
  4098a2:	2800      	cmp	r0, #0
  4098a4:	dd58      	ble.n	409958 <__sfvwrite_r+0xfc>
  4098a6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4098aa:	1a1b      	subs	r3, r3, r0
  4098ac:	4481      	add	r9, r0
  4098ae:	eba8 0800 	sub.w	r8, r8, r0
  4098b2:	f8ca 3008 	str.w	r3, [sl, #8]
  4098b6:	2b00      	cmp	r3, #0
  4098b8:	d1e7      	bne.n	40988a <__sfvwrite_r+0x2e>
  4098ba:	2000      	movs	r0, #0
  4098bc:	b003      	add	sp, #12
  4098be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4098c2:	4621      	mov	r1, r4
  4098c4:	9800      	ldr	r0, [sp, #0]
  4098c6:	f7fe fd17 	bl	4082f8 <__swsetup_r>
  4098ca:	2800      	cmp	r0, #0
  4098cc:	f040 8133 	bne.w	409b36 <__sfvwrite_r+0x2da>
  4098d0:	89a3      	ldrh	r3, [r4, #12]
  4098d2:	6835      	ldr	r5, [r6, #0]
  4098d4:	f013 0002 	ands.w	r0, r3, #2
  4098d8:	d1d2      	bne.n	409880 <__sfvwrite_r+0x24>
  4098da:	f013 0901 	ands.w	r9, r3, #1
  4098de:	d145      	bne.n	40996c <__sfvwrite_r+0x110>
  4098e0:	464f      	mov	r7, r9
  4098e2:	9601      	str	r6, [sp, #4]
  4098e4:	b337      	cbz	r7, 409934 <__sfvwrite_r+0xd8>
  4098e6:	059a      	lsls	r2, r3, #22
  4098e8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4098ec:	f140 8083 	bpl.w	4099f6 <__sfvwrite_r+0x19a>
  4098f0:	4547      	cmp	r7, r8
  4098f2:	46c3      	mov	fp, r8
  4098f4:	f0c0 80ab 	bcc.w	409a4e <__sfvwrite_r+0x1f2>
  4098f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4098fc:	f040 80ac 	bne.w	409a58 <__sfvwrite_r+0x1fc>
  409900:	6820      	ldr	r0, [r4, #0]
  409902:	46ba      	mov	sl, r7
  409904:	465a      	mov	r2, fp
  409906:	4649      	mov	r1, r9
  409908:	f000 fa2a 	bl	409d60 <memmove>
  40990c:	68a2      	ldr	r2, [r4, #8]
  40990e:	6823      	ldr	r3, [r4, #0]
  409910:	eba2 0208 	sub.w	r2, r2, r8
  409914:	445b      	add	r3, fp
  409916:	60a2      	str	r2, [r4, #8]
  409918:	6023      	str	r3, [r4, #0]
  40991a:	9a01      	ldr	r2, [sp, #4]
  40991c:	6893      	ldr	r3, [r2, #8]
  40991e:	eba3 030a 	sub.w	r3, r3, sl
  409922:	44d1      	add	r9, sl
  409924:	eba7 070a 	sub.w	r7, r7, sl
  409928:	6093      	str	r3, [r2, #8]
  40992a:	2b00      	cmp	r3, #0
  40992c:	d0c5      	beq.n	4098ba <__sfvwrite_r+0x5e>
  40992e:	89a3      	ldrh	r3, [r4, #12]
  409930:	2f00      	cmp	r7, #0
  409932:	d1d8      	bne.n	4098e6 <__sfvwrite_r+0x8a>
  409934:	f8d5 9000 	ldr.w	r9, [r5]
  409938:	686f      	ldr	r7, [r5, #4]
  40993a:	3508      	adds	r5, #8
  40993c:	e7d2      	b.n	4098e4 <__sfvwrite_r+0x88>
  40993e:	f8d5 9000 	ldr.w	r9, [r5]
  409942:	f8d5 8004 	ldr.w	r8, [r5, #4]
  409946:	3508      	adds	r5, #8
  409948:	e79f      	b.n	40988a <__sfvwrite_r+0x2e>
  40994a:	2000      	movs	r0, #0
  40994c:	4770      	bx	lr
  40994e:	4621      	mov	r1, r4
  409950:	9800      	ldr	r0, [sp, #0]
  409952:	f7ff fda3 	bl	40949c <_fflush_r>
  409956:	b370      	cbz	r0, 4099b6 <__sfvwrite_r+0x15a>
  409958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40995c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409960:	f04f 30ff 	mov.w	r0, #4294967295
  409964:	81a3      	strh	r3, [r4, #12]
  409966:	b003      	add	sp, #12
  409968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40996c:	4681      	mov	r9, r0
  40996e:	4633      	mov	r3, r6
  409970:	464e      	mov	r6, r9
  409972:	46a8      	mov	r8, r5
  409974:	469a      	mov	sl, r3
  409976:	464d      	mov	r5, r9
  409978:	b34e      	cbz	r6, 4099ce <__sfvwrite_r+0x172>
  40997a:	b380      	cbz	r0, 4099de <__sfvwrite_r+0x182>
  40997c:	6820      	ldr	r0, [r4, #0]
  40997e:	6923      	ldr	r3, [r4, #16]
  409980:	6962      	ldr	r2, [r4, #20]
  409982:	45b1      	cmp	r9, r6
  409984:	46cb      	mov	fp, r9
  409986:	bf28      	it	cs
  409988:	46b3      	movcs	fp, r6
  40998a:	4298      	cmp	r0, r3
  40998c:	465f      	mov	r7, fp
  40998e:	d904      	bls.n	40999a <__sfvwrite_r+0x13e>
  409990:	68a3      	ldr	r3, [r4, #8]
  409992:	4413      	add	r3, r2
  409994:	459b      	cmp	fp, r3
  409996:	f300 80a6 	bgt.w	409ae6 <__sfvwrite_r+0x28a>
  40999a:	4593      	cmp	fp, r2
  40999c:	db4b      	blt.n	409a36 <__sfvwrite_r+0x1da>
  40999e:	4613      	mov	r3, r2
  4099a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4099a2:	69e1      	ldr	r1, [r4, #28]
  4099a4:	9800      	ldr	r0, [sp, #0]
  4099a6:	462a      	mov	r2, r5
  4099a8:	47b8      	blx	r7
  4099aa:	1e07      	subs	r7, r0, #0
  4099ac:	ddd4      	ble.n	409958 <__sfvwrite_r+0xfc>
  4099ae:	ebb9 0907 	subs.w	r9, r9, r7
  4099b2:	d0cc      	beq.n	40994e <__sfvwrite_r+0xf2>
  4099b4:	2001      	movs	r0, #1
  4099b6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4099ba:	1bdb      	subs	r3, r3, r7
  4099bc:	443d      	add	r5, r7
  4099be:	1bf6      	subs	r6, r6, r7
  4099c0:	f8ca 3008 	str.w	r3, [sl, #8]
  4099c4:	2b00      	cmp	r3, #0
  4099c6:	f43f af78 	beq.w	4098ba <__sfvwrite_r+0x5e>
  4099ca:	2e00      	cmp	r6, #0
  4099cc:	d1d5      	bne.n	40997a <__sfvwrite_r+0x11e>
  4099ce:	f108 0308 	add.w	r3, r8, #8
  4099d2:	e913 0060 	ldmdb	r3, {r5, r6}
  4099d6:	4698      	mov	r8, r3
  4099d8:	3308      	adds	r3, #8
  4099da:	2e00      	cmp	r6, #0
  4099dc:	d0f9      	beq.n	4099d2 <__sfvwrite_r+0x176>
  4099de:	4632      	mov	r2, r6
  4099e0:	210a      	movs	r1, #10
  4099e2:	4628      	mov	r0, r5
  4099e4:	f000 f96c 	bl	409cc0 <memchr>
  4099e8:	2800      	cmp	r0, #0
  4099ea:	f000 80a1 	beq.w	409b30 <__sfvwrite_r+0x2d4>
  4099ee:	3001      	adds	r0, #1
  4099f0:	eba0 0905 	sub.w	r9, r0, r5
  4099f4:	e7c2      	b.n	40997c <__sfvwrite_r+0x120>
  4099f6:	6820      	ldr	r0, [r4, #0]
  4099f8:	6923      	ldr	r3, [r4, #16]
  4099fa:	4298      	cmp	r0, r3
  4099fc:	d802      	bhi.n	409a04 <__sfvwrite_r+0x1a8>
  4099fe:	6963      	ldr	r3, [r4, #20]
  409a00:	429f      	cmp	r7, r3
  409a02:	d25d      	bcs.n	409ac0 <__sfvwrite_r+0x264>
  409a04:	45b8      	cmp	r8, r7
  409a06:	bf28      	it	cs
  409a08:	46b8      	movcs	r8, r7
  409a0a:	4642      	mov	r2, r8
  409a0c:	4649      	mov	r1, r9
  409a0e:	f000 f9a7 	bl	409d60 <memmove>
  409a12:	68a3      	ldr	r3, [r4, #8]
  409a14:	6822      	ldr	r2, [r4, #0]
  409a16:	eba3 0308 	sub.w	r3, r3, r8
  409a1a:	4442      	add	r2, r8
  409a1c:	60a3      	str	r3, [r4, #8]
  409a1e:	6022      	str	r2, [r4, #0]
  409a20:	b10b      	cbz	r3, 409a26 <__sfvwrite_r+0x1ca>
  409a22:	46c2      	mov	sl, r8
  409a24:	e779      	b.n	40991a <__sfvwrite_r+0xbe>
  409a26:	4621      	mov	r1, r4
  409a28:	9800      	ldr	r0, [sp, #0]
  409a2a:	f7ff fd37 	bl	40949c <_fflush_r>
  409a2e:	2800      	cmp	r0, #0
  409a30:	d192      	bne.n	409958 <__sfvwrite_r+0xfc>
  409a32:	46c2      	mov	sl, r8
  409a34:	e771      	b.n	40991a <__sfvwrite_r+0xbe>
  409a36:	465a      	mov	r2, fp
  409a38:	4629      	mov	r1, r5
  409a3a:	f000 f991 	bl	409d60 <memmove>
  409a3e:	68a2      	ldr	r2, [r4, #8]
  409a40:	6823      	ldr	r3, [r4, #0]
  409a42:	eba2 020b 	sub.w	r2, r2, fp
  409a46:	445b      	add	r3, fp
  409a48:	60a2      	str	r2, [r4, #8]
  409a4a:	6023      	str	r3, [r4, #0]
  409a4c:	e7af      	b.n	4099ae <__sfvwrite_r+0x152>
  409a4e:	6820      	ldr	r0, [r4, #0]
  409a50:	46b8      	mov	r8, r7
  409a52:	46ba      	mov	sl, r7
  409a54:	46bb      	mov	fp, r7
  409a56:	e755      	b.n	409904 <__sfvwrite_r+0xa8>
  409a58:	6962      	ldr	r2, [r4, #20]
  409a5a:	6820      	ldr	r0, [r4, #0]
  409a5c:	6921      	ldr	r1, [r4, #16]
  409a5e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  409a62:	eba0 0a01 	sub.w	sl, r0, r1
  409a66:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  409a6a:	f10a 0001 	add.w	r0, sl, #1
  409a6e:	ea4f 0868 	mov.w	r8, r8, asr #1
  409a72:	4438      	add	r0, r7
  409a74:	4540      	cmp	r0, r8
  409a76:	4642      	mov	r2, r8
  409a78:	bf84      	itt	hi
  409a7a:	4680      	movhi	r8, r0
  409a7c:	4642      	movhi	r2, r8
  409a7e:	055b      	lsls	r3, r3, #21
  409a80:	d544      	bpl.n	409b0c <__sfvwrite_r+0x2b0>
  409a82:	4611      	mov	r1, r2
  409a84:	9800      	ldr	r0, [sp, #0]
  409a86:	f7fc fbcf 	bl	406228 <_malloc_r>
  409a8a:	4683      	mov	fp, r0
  409a8c:	2800      	cmp	r0, #0
  409a8e:	d055      	beq.n	409b3c <__sfvwrite_r+0x2e0>
  409a90:	4652      	mov	r2, sl
  409a92:	6921      	ldr	r1, [r4, #16]
  409a94:	f7fc fe78 	bl	406788 <memcpy>
  409a98:	89a3      	ldrh	r3, [r4, #12]
  409a9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  409a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  409aa2:	81a3      	strh	r3, [r4, #12]
  409aa4:	eb0b 000a 	add.w	r0, fp, sl
  409aa8:	eba8 030a 	sub.w	r3, r8, sl
  409aac:	f8c4 b010 	str.w	fp, [r4, #16]
  409ab0:	f8c4 8014 	str.w	r8, [r4, #20]
  409ab4:	6020      	str	r0, [r4, #0]
  409ab6:	60a3      	str	r3, [r4, #8]
  409ab8:	46b8      	mov	r8, r7
  409aba:	46ba      	mov	sl, r7
  409abc:	46bb      	mov	fp, r7
  409abe:	e721      	b.n	409904 <__sfvwrite_r+0xa8>
  409ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  409ac4:	42b9      	cmp	r1, r7
  409ac6:	bf28      	it	cs
  409ac8:	4639      	movcs	r1, r7
  409aca:	464a      	mov	r2, r9
  409acc:	fb91 f1f3 	sdiv	r1, r1, r3
  409ad0:	9800      	ldr	r0, [sp, #0]
  409ad2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  409ad4:	fb03 f301 	mul.w	r3, r3, r1
  409ad8:	69e1      	ldr	r1, [r4, #28]
  409ada:	47b0      	blx	r6
  409adc:	f1b0 0a00 	subs.w	sl, r0, #0
  409ae0:	f73f af1b 	bgt.w	40991a <__sfvwrite_r+0xbe>
  409ae4:	e738      	b.n	409958 <__sfvwrite_r+0xfc>
  409ae6:	461a      	mov	r2, r3
  409ae8:	4629      	mov	r1, r5
  409aea:	9301      	str	r3, [sp, #4]
  409aec:	f000 f938 	bl	409d60 <memmove>
  409af0:	6822      	ldr	r2, [r4, #0]
  409af2:	9b01      	ldr	r3, [sp, #4]
  409af4:	9800      	ldr	r0, [sp, #0]
  409af6:	441a      	add	r2, r3
  409af8:	6022      	str	r2, [r4, #0]
  409afa:	4621      	mov	r1, r4
  409afc:	f7ff fcce 	bl	40949c <_fflush_r>
  409b00:	9b01      	ldr	r3, [sp, #4]
  409b02:	2800      	cmp	r0, #0
  409b04:	f47f af28 	bne.w	409958 <__sfvwrite_r+0xfc>
  409b08:	461f      	mov	r7, r3
  409b0a:	e750      	b.n	4099ae <__sfvwrite_r+0x152>
  409b0c:	9800      	ldr	r0, [sp, #0]
  409b0e:	f000 fc85 	bl	40a41c <_realloc_r>
  409b12:	4683      	mov	fp, r0
  409b14:	2800      	cmp	r0, #0
  409b16:	d1c5      	bne.n	409aa4 <__sfvwrite_r+0x248>
  409b18:	9d00      	ldr	r5, [sp, #0]
  409b1a:	6921      	ldr	r1, [r4, #16]
  409b1c:	4628      	mov	r0, r5
  409b1e:	f7ff fdb7 	bl	409690 <_free_r>
  409b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409b26:	220c      	movs	r2, #12
  409b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  409b2c:	602a      	str	r2, [r5, #0]
  409b2e:	e715      	b.n	40995c <__sfvwrite_r+0x100>
  409b30:	f106 0901 	add.w	r9, r6, #1
  409b34:	e722      	b.n	40997c <__sfvwrite_r+0x120>
  409b36:	f04f 30ff 	mov.w	r0, #4294967295
  409b3a:	e6bf      	b.n	4098bc <__sfvwrite_r+0x60>
  409b3c:	9a00      	ldr	r2, [sp, #0]
  409b3e:	230c      	movs	r3, #12
  409b40:	6013      	str	r3, [r2, #0]
  409b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409b46:	e709      	b.n	40995c <__sfvwrite_r+0x100>
  409b48:	7ffffc00 	.word	0x7ffffc00

00409b4c <_fwalk_reent>:
  409b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409b50:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  409b54:	d01f      	beq.n	409b96 <_fwalk_reent+0x4a>
  409b56:	4688      	mov	r8, r1
  409b58:	4606      	mov	r6, r0
  409b5a:	f04f 0900 	mov.w	r9, #0
  409b5e:	687d      	ldr	r5, [r7, #4]
  409b60:	68bc      	ldr	r4, [r7, #8]
  409b62:	3d01      	subs	r5, #1
  409b64:	d411      	bmi.n	409b8a <_fwalk_reent+0x3e>
  409b66:	89a3      	ldrh	r3, [r4, #12]
  409b68:	2b01      	cmp	r3, #1
  409b6a:	f105 35ff 	add.w	r5, r5, #4294967295
  409b6e:	d908      	bls.n	409b82 <_fwalk_reent+0x36>
  409b70:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  409b74:	3301      	adds	r3, #1
  409b76:	4621      	mov	r1, r4
  409b78:	4630      	mov	r0, r6
  409b7a:	d002      	beq.n	409b82 <_fwalk_reent+0x36>
  409b7c:	47c0      	blx	r8
  409b7e:	ea49 0900 	orr.w	r9, r9, r0
  409b82:	1c6b      	adds	r3, r5, #1
  409b84:	f104 0468 	add.w	r4, r4, #104	; 0x68
  409b88:	d1ed      	bne.n	409b66 <_fwalk_reent+0x1a>
  409b8a:	683f      	ldr	r7, [r7, #0]
  409b8c:	2f00      	cmp	r7, #0
  409b8e:	d1e6      	bne.n	409b5e <_fwalk_reent+0x12>
  409b90:	4648      	mov	r0, r9
  409b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409b96:	46b9      	mov	r9, r7
  409b98:	4648      	mov	r0, r9
  409b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409b9e:	bf00      	nop

00409ba0 <_localeconv_r>:
  409ba0:	4a04      	ldr	r2, [pc, #16]	; (409bb4 <_localeconv_r+0x14>)
  409ba2:	4b05      	ldr	r3, [pc, #20]	; (409bb8 <_localeconv_r+0x18>)
  409ba4:	6812      	ldr	r2, [r2, #0]
  409ba6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  409ba8:	2800      	cmp	r0, #0
  409baa:	bf08      	it	eq
  409bac:	4618      	moveq	r0, r3
  409bae:	30f0      	adds	r0, #240	; 0xf0
  409bb0:	4770      	bx	lr
  409bb2:	bf00      	nop
  409bb4:	20400010 	.word	0x20400010
  409bb8:	20400854 	.word	0x20400854

00409bbc <__retarget_lock_init_recursive>:
  409bbc:	4770      	bx	lr
  409bbe:	bf00      	nop

00409bc0 <__retarget_lock_close_recursive>:
  409bc0:	4770      	bx	lr
  409bc2:	bf00      	nop

00409bc4 <__retarget_lock_acquire_recursive>:
  409bc4:	4770      	bx	lr
  409bc6:	bf00      	nop

00409bc8 <__retarget_lock_release_recursive>:
  409bc8:	4770      	bx	lr
  409bca:	bf00      	nop

00409bcc <__swhatbuf_r>:
  409bcc:	b570      	push	{r4, r5, r6, lr}
  409bce:	460c      	mov	r4, r1
  409bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409bd4:	2900      	cmp	r1, #0
  409bd6:	b090      	sub	sp, #64	; 0x40
  409bd8:	4615      	mov	r5, r2
  409bda:	461e      	mov	r6, r3
  409bdc:	db14      	blt.n	409c08 <__swhatbuf_r+0x3c>
  409bde:	aa01      	add	r2, sp, #4
  409be0:	f000 fff0 	bl	40abc4 <_fstat_r>
  409be4:	2800      	cmp	r0, #0
  409be6:	db0f      	blt.n	409c08 <__swhatbuf_r+0x3c>
  409be8:	9a02      	ldr	r2, [sp, #8]
  409bea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  409bee:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  409bf2:	fab2 f282 	clz	r2, r2
  409bf6:	0952      	lsrs	r2, r2, #5
  409bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409bfc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  409c00:	6032      	str	r2, [r6, #0]
  409c02:	602b      	str	r3, [r5, #0]
  409c04:	b010      	add	sp, #64	; 0x40
  409c06:	bd70      	pop	{r4, r5, r6, pc}
  409c08:	89a2      	ldrh	r2, [r4, #12]
  409c0a:	2300      	movs	r3, #0
  409c0c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  409c10:	6033      	str	r3, [r6, #0]
  409c12:	d004      	beq.n	409c1e <__swhatbuf_r+0x52>
  409c14:	2240      	movs	r2, #64	; 0x40
  409c16:	4618      	mov	r0, r3
  409c18:	602a      	str	r2, [r5, #0]
  409c1a:	b010      	add	sp, #64	; 0x40
  409c1c:	bd70      	pop	{r4, r5, r6, pc}
  409c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409c22:	602b      	str	r3, [r5, #0]
  409c24:	b010      	add	sp, #64	; 0x40
  409c26:	bd70      	pop	{r4, r5, r6, pc}

00409c28 <__smakebuf_r>:
  409c28:	898a      	ldrh	r2, [r1, #12]
  409c2a:	0792      	lsls	r2, r2, #30
  409c2c:	460b      	mov	r3, r1
  409c2e:	d506      	bpl.n	409c3e <__smakebuf_r+0x16>
  409c30:	f101 0243 	add.w	r2, r1, #67	; 0x43
  409c34:	2101      	movs	r1, #1
  409c36:	601a      	str	r2, [r3, #0]
  409c38:	611a      	str	r2, [r3, #16]
  409c3a:	6159      	str	r1, [r3, #20]
  409c3c:	4770      	bx	lr
  409c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
  409c40:	b083      	sub	sp, #12
  409c42:	ab01      	add	r3, sp, #4
  409c44:	466a      	mov	r2, sp
  409c46:	460c      	mov	r4, r1
  409c48:	4606      	mov	r6, r0
  409c4a:	f7ff ffbf 	bl	409bcc <__swhatbuf_r>
  409c4e:	9900      	ldr	r1, [sp, #0]
  409c50:	4605      	mov	r5, r0
  409c52:	4630      	mov	r0, r6
  409c54:	f7fc fae8 	bl	406228 <_malloc_r>
  409c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409c5c:	b1d8      	cbz	r0, 409c96 <__smakebuf_r+0x6e>
  409c5e:	9a01      	ldr	r2, [sp, #4]
  409c60:	4f15      	ldr	r7, [pc, #84]	; (409cb8 <__smakebuf_r+0x90>)
  409c62:	9900      	ldr	r1, [sp, #0]
  409c64:	63f7      	str	r7, [r6, #60]	; 0x3c
  409c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  409c6a:	81a3      	strh	r3, [r4, #12]
  409c6c:	6020      	str	r0, [r4, #0]
  409c6e:	6120      	str	r0, [r4, #16]
  409c70:	6161      	str	r1, [r4, #20]
  409c72:	b91a      	cbnz	r2, 409c7c <__smakebuf_r+0x54>
  409c74:	432b      	orrs	r3, r5
  409c76:	81a3      	strh	r3, [r4, #12]
  409c78:	b003      	add	sp, #12
  409c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409c7c:	4630      	mov	r0, r6
  409c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409c82:	f000 ffb3 	bl	40abec <_isatty_r>
  409c86:	b1a0      	cbz	r0, 409cb2 <__smakebuf_r+0x8a>
  409c88:	89a3      	ldrh	r3, [r4, #12]
  409c8a:	f023 0303 	bic.w	r3, r3, #3
  409c8e:	f043 0301 	orr.w	r3, r3, #1
  409c92:	b21b      	sxth	r3, r3
  409c94:	e7ee      	b.n	409c74 <__smakebuf_r+0x4c>
  409c96:	059a      	lsls	r2, r3, #22
  409c98:	d4ee      	bmi.n	409c78 <__smakebuf_r+0x50>
  409c9a:	f023 0303 	bic.w	r3, r3, #3
  409c9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  409ca2:	f043 0302 	orr.w	r3, r3, #2
  409ca6:	2101      	movs	r1, #1
  409ca8:	81a3      	strh	r3, [r4, #12]
  409caa:	6022      	str	r2, [r4, #0]
  409cac:	6122      	str	r2, [r4, #16]
  409cae:	6161      	str	r1, [r4, #20]
  409cb0:	e7e2      	b.n	409c78 <__smakebuf_r+0x50>
  409cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409cb6:	e7dd      	b.n	409c74 <__smakebuf_r+0x4c>
  409cb8:	004094f1 	.word	0x004094f1
  409cbc:	00000000 	.word	0x00000000

00409cc0 <memchr>:
  409cc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409cc4:	2a10      	cmp	r2, #16
  409cc6:	db2b      	blt.n	409d20 <memchr+0x60>
  409cc8:	f010 0f07 	tst.w	r0, #7
  409ccc:	d008      	beq.n	409ce0 <memchr+0x20>
  409cce:	f810 3b01 	ldrb.w	r3, [r0], #1
  409cd2:	3a01      	subs	r2, #1
  409cd4:	428b      	cmp	r3, r1
  409cd6:	d02d      	beq.n	409d34 <memchr+0x74>
  409cd8:	f010 0f07 	tst.w	r0, #7
  409cdc:	b342      	cbz	r2, 409d30 <memchr+0x70>
  409cde:	d1f6      	bne.n	409cce <memchr+0xe>
  409ce0:	b4f0      	push	{r4, r5, r6, r7}
  409ce2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409ce6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  409cea:	f022 0407 	bic.w	r4, r2, #7
  409cee:	f07f 0700 	mvns.w	r7, #0
  409cf2:	2300      	movs	r3, #0
  409cf4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409cf8:	3c08      	subs	r4, #8
  409cfa:	ea85 0501 	eor.w	r5, r5, r1
  409cfe:	ea86 0601 	eor.w	r6, r6, r1
  409d02:	fa85 f547 	uadd8	r5, r5, r7
  409d06:	faa3 f587 	sel	r5, r3, r7
  409d0a:	fa86 f647 	uadd8	r6, r6, r7
  409d0e:	faa5 f687 	sel	r6, r5, r7
  409d12:	b98e      	cbnz	r6, 409d38 <memchr+0x78>
  409d14:	d1ee      	bne.n	409cf4 <memchr+0x34>
  409d16:	bcf0      	pop	{r4, r5, r6, r7}
  409d18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409d1c:	f002 0207 	and.w	r2, r2, #7
  409d20:	b132      	cbz	r2, 409d30 <memchr+0x70>
  409d22:	f810 3b01 	ldrb.w	r3, [r0], #1
  409d26:	3a01      	subs	r2, #1
  409d28:	ea83 0301 	eor.w	r3, r3, r1
  409d2c:	b113      	cbz	r3, 409d34 <memchr+0x74>
  409d2e:	d1f8      	bne.n	409d22 <memchr+0x62>
  409d30:	2000      	movs	r0, #0
  409d32:	4770      	bx	lr
  409d34:	3801      	subs	r0, #1
  409d36:	4770      	bx	lr
  409d38:	2d00      	cmp	r5, #0
  409d3a:	bf06      	itte	eq
  409d3c:	4635      	moveq	r5, r6
  409d3e:	3803      	subeq	r0, #3
  409d40:	3807      	subne	r0, #7
  409d42:	f015 0f01 	tst.w	r5, #1
  409d46:	d107      	bne.n	409d58 <memchr+0x98>
  409d48:	3001      	adds	r0, #1
  409d4a:	f415 7f80 	tst.w	r5, #256	; 0x100
  409d4e:	bf02      	ittt	eq
  409d50:	3001      	addeq	r0, #1
  409d52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409d56:	3001      	addeq	r0, #1
  409d58:	bcf0      	pop	{r4, r5, r6, r7}
  409d5a:	3801      	subs	r0, #1
  409d5c:	4770      	bx	lr
  409d5e:	bf00      	nop

00409d60 <memmove>:
  409d60:	4288      	cmp	r0, r1
  409d62:	b5f0      	push	{r4, r5, r6, r7, lr}
  409d64:	d90d      	bls.n	409d82 <memmove+0x22>
  409d66:	188b      	adds	r3, r1, r2
  409d68:	4298      	cmp	r0, r3
  409d6a:	d20a      	bcs.n	409d82 <memmove+0x22>
  409d6c:	1884      	adds	r4, r0, r2
  409d6e:	2a00      	cmp	r2, #0
  409d70:	d051      	beq.n	409e16 <memmove+0xb6>
  409d72:	4622      	mov	r2, r4
  409d74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409d78:	f802 4d01 	strb.w	r4, [r2, #-1]!
  409d7c:	4299      	cmp	r1, r3
  409d7e:	d1f9      	bne.n	409d74 <memmove+0x14>
  409d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409d82:	2a0f      	cmp	r2, #15
  409d84:	d948      	bls.n	409e18 <memmove+0xb8>
  409d86:	ea41 0300 	orr.w	r3, r1, r0
  409d8a:	079b      	lsls	r3, r3, #30
  409d8c:	d146      	bne.n	409e1c <memmove+0xbc>
  409d8e:	f100 0410 	add.w	r4, r0, #16
  409d92:	f101 0310 	add.w	r3, r1, #16
  409d96:	4615      	mov	r5, r2
  409d98:	f853 6c10 	ldr.w	r6, [r3, #-16]
  409d9c:	f844 6c10 	str.w	r6, [r4, #-16]
  409da0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409da4:	f844 6c0c 	str.w	r6, [r4, #-12]
  409da8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  409dac:	f844 6c08 	str.w	r6, [r4, #-8]
  409db0:	3d10      	subs	r5, #16
  409db2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409db6:	f844 6c04 	str.w	r6, [r4, #-4]
  409dba:	2d0f      	cmp	r5, #15
  409dbc:	f103 0310 	add.w	r3, r3, #16
  409dc0:	f104 0410 	add.w	r4, r4, #16
  409dc4:	d8e8      	bhi.n	409d98 <memmove+0x38>
  409dc6:	f1a2 0310 	sub.w	r3, r2, #16
  409dca:	f023 030f 	bic.w	r3, r3, #15
  409dce:	f002 0e0f 	and.w	lr, r2, #15
  409dd2:	3310      	adds	r3, #16
  409dd4:	f1be 0f03 	cmp.w	lr, #3
  409dd8:	4419      	add	r1, r3
  409dda:	4403      	add	r3, r0
  409ddc:	d921      	bls.n	409e22 <memmove+0xc2>
  409dde:	1f1e      	subs	r6, r3, #4
  409de0:	460d      	mov	r5, r1
  409de2:	4674      	mov	r4, lr
  409de4:	3c04      	subs	r4, #4
  409de6:	f855 7b04 	ldr.w	r7, [r5], #4
  409dea:	f846 7f04 	str.w	r7, [r6, #4]!
  409dee:	2c03      	cmp	r4, #3
  409df0:	d8f8      	bhi.n	409de4 <memmove+0x84>
  409df2:	f1ae 0404 	sub.w	r4, lr, #4
  409df6:	f024 0403 	bic.w	r4, r4, #3
  409dfa:	3404      	adds	r4, #4
  409dfc:	4421      	add	r1, r4
  409dfe:	4423      	add	r3, r4
  409e00:	f002 0203 	and.w	r2, r2, #3
  409e04:	b162      	cbz	r2, 409e20 <memmove+0xc0>
  409e06:	3b01      	subs	r3, #1
  409e08:	440a      	add	r2, r1
  409e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
  409e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409e12:	428a      	cmp	r2, r1
  409e14:	d1f9      	bne.n	409e0a <memmove+0xaa>
  409e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409e18:	4603      	mov	r3, r0
  409e1a:	e7f3      	b.n	409e04 <memmove+0xa4>
  409e1c:	4603      	mov	r3, r0
  409e1e:	e7f2      	b.n	409e06 <memmove+0xa6>
  409e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409e22:	4672      	mov	r2, lr
  409e24:	e7ee      	b.n	409e04 <memmove+0xa4>
  409e26:	bf00      	nop

00409e28 <_Balloc>:
  409e28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409e2a:	b570      	push	{r4, r5, r6, lr}
  409e2c:	4605      	mov	r5, r0
  409e2e:	460c      	mov	r4, r1
  409e30:	b14b      	cbz	r3, 409e46 <_Balloc+0x1e>
  409e32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409e36:	b180      	cbz	r0, 409e5a <_Balloc+0x32>
  409e38:	6802      	ldr	r2, [r0, #0]
  409e3a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  409e3e:	2300      	movs	r3, #0
  409e40:	6103      	str	r3, [r0, #16]
  409e42:	60c3      	str	r3, [r0, #12]
  409e44:	bd70      	pop	{r4, r5, r6, pc}
  409e46:	2221      	movs	r2, #33	; 0x21
  409e48:	2104      	movs	r1, #4
  409e4a:	f000 fd93 	bl	40a974 <_calloc_r>
  409e4e:	64e8      	str	r0, [r5, #76]	; 0x4c
  409e50:	4603      	mov	r3, r0
  409e52:	2800      	cmp	r0, #0
  409e54:	d1ed      	bne.n	409e32 <_Balloc+0xa>
  409e56:	2000      	movs	r0, #0
  409e58:	bd70      	pop	{r4, r5, r6, pc}
  409e5a:	2101      	movs	r1, #1
  409e5c:	fa01 f604 	lsl.w	r6, r1, r4
  409e60:	1d72      	adds	r2, r6, #5
  409e62:	4628      	mov	r0, r5
  409e64:	0092      	lsls	r2, r2, #2
  409e66:	f000 fd85 	bl	40a974 <_calloc_r>
  409e6a:	2800      	cmp	r0, #0
  409e6c:	d0f3      	beq.n	409e56 <_Balloc+0x2e>
  409e6e:	6044      	str	r4, [r0, #4]
  409e70:	6086      	str	r6, [r0, #8]
  409e72:	e7e4      	b.n	409e3e <_Balloc+0x16>

00409e74 <_Bfree>:
  409e74:	b131      	cbz	r1, 409e84 <_Bfree+0x10>
  409e76:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409e78:	684a      	ldr	r2, [r1, #4]
  409e7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  409e7e:	6008      	str	r0, [r1, #0]
  409e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  409e84:	4770      	bx	lr
  409e86:	bf00      	nop

00409e88 <__multadd>:
  409e88:	b5f0      	push	{r4, r5, r6, r7, lr}
  409e8a:	690c      	ldr	r4, [r1, #16]
  409e8c:	b083      	sub	sp, #12
  409e8e:	460d      	mov	r5, r1
  409e90:	4606      	mov	r6, r0
  409e92:	f101 0e14 	add.w	lr, r1, #20
  409e96:	2700      	movs	r7, #0
  409e98:	f8de 0000 	ldr.w	r0, [lr]
  409e9c:	b281      	uxth	r1, r0
  409e9e:	fb02 3301 	mla	r3, r2, r1, r3
  409ea2:	0c01      	lsrs	r1, r0, #16
  409ea4:	0c18      	lsrs	r0, r3, #16
  409ea6:	fb02 0101 	mla	r1, r2, r1, r0
  409eaa:	b29b      	uxth	r3, r3
  409eac:	3701      	adds	r7, #1
  409eae:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  409eb2:	42bc      	cmp	r4, r7
  409eb4:	f84e 3b04 	str.w	r3, [lr], #4
  409eb8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  409ebc:	dcec      	bgt.n	409e98 <__multadd+0x10>
  409ebe:	b13b      	cbz	r3, 409ed0 <__multadd+0x48>
  409ec0:	68aa      	ldr	r2, [r5, #8]
  409ec2:	4294      	cmp	r4, r2
  409ec4:	da07      	bge.n	409ed6 <__multadd+0x4e>
  409ec6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  409eca:	3401      	adds	r4, #1
  409ecc:	6153      	str	r3, [r2, #20]
  409ece:	612c      	str	r4, [r5, #16]
  409ed0:	4628      	mov	r0, r5
  409ed2:	b003      	add	sp, #12
  409ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409ed6:	6869      	ldr	r1, [r5, #4]
  409ed8:	9301      	str	r3, [sp, #4]
  409eda:	3101      	adds	r1, #1
  409edc:	4630      	mov	r0, r6
  409ede:	f7ff ffa3 	bl	409e28 <_Balloc>
  409ee2:	692a      	ldr	r2, [r5, #16]
  409ee4:	3202      	adds	r2, #2
  409ee6:	f105 010c 	add.w	r1, r5, #12
  409eea:	4607      	mov	r7, r0
  409eec:	0092      	lsls	r2, r2, #2
  409eee:	300c      	adds	r0, #12
  409ef0:	f7fc fc4a 	bl	406788 <memcpy>
  409ef4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  409ef6:	6869      	ldr	r1, [r5, #4]
  409ef8:	9b01      	ldr	r3, [sp, #4]
  409efa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  409efe:	6028      	str	r0, [r5, #0]
  409f00:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409f04:	463d      	mov	r5, r7
  409f06:	e7de      	b.n	409ec6 <__multadd+0x3e>

00409f08 <__hi0bits>:
  409f08:	0c02      	lsrs	r2, r0, #16
  409f0a:	0412      	lsls	r2, r2, #16
  409f0c:	4603      	mov	r3, r0
  409f0e:	b9b2      	cbnz	r2, 409f3e <__hi0bits+0x36>
  409f10:	0403      	lsls	r3, r0, #16
  409f12:	2010      	movs	r0, #16
  409f14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409f18:	bf04      	itt	eq
  409f1a:	021b      	lsleq	r3, r3, #8
  409f1c:	3008      	addeq	r0, #8
  409f1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  409f22:	bf04      	itt	eq
  409f24:	011b      	lsleq	r3, r3, #4
  409f26:	3004      	addeq	r0, #4
  409f28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  409f2c:	bf04      	itt	eq
  409f2e:	009b      	lsleq	r3, r3, #2
  409f30:	3002      	addeq	r0, #2
  409f32:	2b00      	cmp	r3, #0
  409f34:	db02      	blt.n	409f3c <__hi0bits+0x34>
  409f36:	005b      	lsls	r3, r3, #1
  409f38:	d403      	bmi.n	409f42 <__hi0bits+0x3a>
  409f3a:	2020      	movs	r0, #32
  409f3c:	4770      	bx	lr
  409f3e:	2000      	movs	r0, #0
  409f40:	e7e8      	b.n	409f14 <__hi0bits+0xc>
  409f42:	3001      	adds	r0, #1
  409f44:	4770      	bx	lr
  409f46:	bf00      	nop

00409f48 <__lo0bits>:
  409f48:	6803      	ldr	r3, [r0, #0]
  409f4a:	f013 0207 	ands.w	r2, r3, #7
  409f4e:	4601      	mov	r1, r0
  409f50:	d007      	beq.n	409f62 <__lo0bits+0x1a>
  409f52:	07da      	lsls	r2, r3, #31
  409f54:	d421      	bmi.n	409f9a <__lo0bits+0x52>
  409f56:	0798      	lsls	r0, r3, #30
  409f58:	d421      	bmi.n	409f9e <__lo0bits+0x56>
  409f5a:	089b      	lsrs	r3, r3, #2
  409f5c:	600b      	str	r3, [r1, #0]
  409f5e:	2002      	movs	r0, #2
  409f60:	4770      	bx	lr
  409f62:	b298      	uxth	r0, r3
  409f64:	b198      	cbz	r0, 409f8e <__lo0bits+0x46>
  409f66:	4610      	mov	r0, r2
  409f68:	f013 0fff 	tst.w	r3, #255	; 0xff
  409f6c:	bf04      	itt	eq
  409f6e:	0a1b      	lsreq	r3, r3, #8
  409f70:	3008      	addeq	r0, #8
  409f72:	071a      	lsls	r2, r3, #28
  409f74:	bf04      	itt	eq
  409f76:	091b      	lsreq	r3, r3, #4
  409f78:	3004      	addeq	r0, #4
  409f7a:	079a      	lsls	r2, r3, #30
  409f7c:	bf04      	itt	eq
  409f7e:	089b      	lsreq	r3, r3, #2
  409f80:	3002      	addeq	r0, #2
  409f82:	07da      	lsls	r2, r3, #31
  409f84:	d407      	bmi.n	409f96 <__lo0bits+0x4e>
  409f86:	085b      	lsrs	r3, r3, #1
  409f88:	d104      	bne.n	409f94 <__lo0bits+0x4c>
  409f8a:	2020      	movs	r0, #32
  409f8c:	4770      	bx	lr
  409f8e:	0c1b      	lsrs	r3, r3, #16
  409f90:	2010      	movs	r0, #16
  409f92:	e7e9      	b.n	409f68 <__lo0bits+0x20>
  409f94:	3001      	adds	r0, #1
  409f96:	600b      	str	r3, [r1, #0]
  409f98:	4770      	bx	lr
  409f9a:	2000      	movs	r0, #0
  409f9c:	4770      	bx	lr
  409f9e:	085b      	lsrs	r3, r3, #1
  409fa0:	600b      	str	r3, [r1, #0]
  409fa2:	2001      	movs	r0, #1
  409fa4:	4770      	bx	lr
  409fa6:	bf00      	nop

00409fa8 <__i2b>:
  409fa8:	b510      	push	{r4, lr}
  409faa:	460c      	mov	r4, r1
  409fac:	2101      	movs	r1, #1
  409fae:	f7ff ff3b 	bl	409e28 <_Balloc>
  409fb2:	2201      	movs	r2, #1
  409fb4:	6144      	str	r4, [r0, #20]
  409fb6:	6102      	str	r2, [r0, #16]
  409fb8:	bd10      	pop	{r4, pc}
  409fba:	bf00      	nop

00409fbc <__multiply>:
  409fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409fc0:	690c      	ldr	r4, [r1, #16]
  409fc2:	6915      	ldr	r5, [r2, #16]
  409fc4:	42ac      	cmp	r4, r5
  409fc6:	b083      	sub	sp, #12
  409fc8:	468b      	mov	fp, r1
  409fca:	4616      	mov	r6, r2
  409fcc:	da04      	bge.n	409fd8 <__multiply+0x1c>
  409fce:	4622      	mov	r2, r4
  409fd0:	46b3      	mov	fp, r6
  409fd2:	462c      	mov	r4, r5
  409fd4:	460e      	mov	r6, r1
  409fd6:	4615      	mov	r5, r2
  409fd8:	f8db 3008 	ldr.w	r3, [fp, #8]
  409fdc:	f8db 1004 	ldr.w	r1, [fp, #4]
  409fe0:	eb04 0805 	add.w	r8, r4, r5
  409fe4:	4598      	cmp	r8, r3
  409fe6:	bfc8      	it	gt
  409fe8:	3101      	addgt	r1, #1
  409fea:	f7ff ff1d 	bl	409e28 <_Balloc>
  409fee:	f100 0914 	add.w	r9, r0, #20
  409ff2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  409ff6:	45d1      	cmp	r9, sl
  409ff8:	9000      	str	r0, [sp, #0]
  409ffa:	d205      	bcs.n	40a008 <__multiply+0x4c>
  409ffc:	464b      	mov	r3, r9
  409ffe:	2100      	movs	r1, #0
  40a000:	f843 1b04 	str.w	r1, [r3], #4
  40a004:	459a      	cmp	sl, r3
  40a006:	d8fb      	bhi.n	40a000 <__multiply+0x44>
  40a008:	f106 0c14 	add.w	ip, r6, #20
  40a00c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40a010:	f10b 0b14 	add.w	fp, fp, #20
  40a014:	459c      	cmp	ip, r3
  40a016:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40a01a:	d24c      	bcs.n	40a0b6 <__multiply+0xfa>
  40a01c:	f8cd a004 	str.w	sl, [sp, #4]
  40a020:	469a      	mov	sl, r3
  40a022:	f8dc 5000 	ldr.w	r5, [ip]
  40a026:	b2af      	uxth	r7, r5
  40a028:	b1ef      	cbz	r7, 40a066 <__multiply+0xaa>
  40a02a:	2100      	movs	r1, #0
  40a02c:	464d      	mov	r5, r9
  40a02e:	465e      	mov	r6, fp
  40a030:	460c      	mov	r4, r1
  40a032:	f856 2b04 	ldr.w	r2, [r6], #4
  40a036:	6828      	ldr	r0, [r5, #0]
  40a038:	b293      	uxth	r3, r2
  40a03a:	b281      	uxth	r1, r0
  40a03c:	fb07 1303 	mla	r3, r7, r3, r1
  40a040:	0c12      	lsrs	r2, r2, #16
  40a042:	0c01      	lsrs	r1, r0, #16
  40a044:	4423      	add	r3, r4
  40a046:	fb07 1102 	mla	r1, r7, r2, r1
  40a04a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40a04e:	b29b      	uxth	r3, r3
  40a050:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40a054:	45b6      	cmp	lr, r6
  40a056:	f845 3b04 	str.w	r3, [r5], #4
  40a05a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40a05e:	d8e8      	bhi.n	40a032 <__multiply+0x76>
  40a060:	602c      	str	r4, [r5, #0]
  40a062:	f8dc 5000 	ldr.w	r5, [ip]
  40a066:	0c2d      	lsrs	r5, r5, #16
  40a068:	d01d      	beq.n	40a0a6 <__multiply+0xea>
  40a06a:	f8d9 3000 	ldr.w	r3, [r9]
  40a06e:	4648      	mov	r0, r9
  40a070:	461c      	mov	r4, r3
  40a072:	4659      	mov	r1, fp
  40a074:	2200      	movs	r2, #0
  40a076:	880e      	ldrh	r6, [r1, #0]
  40a078:	0c24      	lsrs	r4, r4, #16
  40a07a:	fb05 4406 	mla	r4, r5, r6, r4
  40a07e:	4422      	add	r2, r4
  40a080:	b29b      	uxth	r3, r3
  40a082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40a086:	f840 3b04 	str.w	r3, [r0], #4
  40a08a:	f851 3b04 	ldr.w	r3, [r1], #4
  40a08e:	6804      	ldr	r4, [r0, #0]
  40a090:	0c1b      	lsrs	r3, r3, #16
  40a092:	b2a6      	uxth	r6, r4
  40a094:	fb05 6303 	mla	r3, r5, r3, r6
  40a098:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40a09c:	458e      	cmp	lr, r1
  40a09e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40a0a2:	d8e8      	bhi.n	40a076 <__multiply+0xba>
  40a0a4:	6003      	str	r3, [r0, #0]
  40a0a6:	f10c 0c04 	add.w	ip, ip, #4
  40a0aa:	45e2      	cmp	sl, ip
  40a0ac:	f109 0904 	add.w	r9, r9, #4
  40a0b0:	d8b7      	bhi.n	40a022 <__multiply+0x66>
  40a0b2:	f8dd a004 	ldr.w	sl, [sp, #4]
  40a0b6:	f1b8 0f00 	cmp.w	r8, #0
  40a0ba:	dd0b      	ble.n	40a0d4 <__multiply+0x118>
  40a0bc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40a0c0:	f1aa 0a04 	sub.w	sl, sl, #4
  40a0c4:	b11b      	cbz	r3, 40a0ce <__multiply+0x112>
  40a0c6:	e005      	b.n	40a0d4 <__multiply+0x118>
  40a0c8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40a0cc:	b913      	cbnz	r3, 40a0d4 <__multiply+0x118>
  40a0ce:	f1b8 0801 	subs.w	r8, r8, #1
  40a0d2:	d1f9      	bne.n	40a0c8 <__multiply+0x10c>
  40a0d4:	9800      	ldr	r0, [sp, #0]
  40a0d6:	f8c0 8010 	str.w	r8, [r0, #16]
  40a0da:	b003      	add	sp, #12
  40a0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a0e0 <__pow5mult>:
  40a0e0:	f012 0303 	ands.w	r3, r2, #3
  40a0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a0e8:	4614      	mov	r4, r2
  40a0ea:	4607      	mov	r7, r0
  40a0ec:	d12e      	bne.n	40a14c <__pow5mult+0x6c>
  40a0ee:	460d      	mov	r5, r1
  40a0f0:	10a4      	asrs	r4, r4, #2
  40a0f2:	d01c      	beq.n	40a12e <__pow5mult+0x4e>
  40a0f4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40a0f6:	b396      	cbz	r6, 40a15e <__pow5mult+0x7e>
  40a0f8:	07e3      	lsls	r3, r4, #31
  40a0fa:	f04f 0800 	mov.w	r8, #0
  40a0fe:	d406      	bmi.n	40a10e <__pow5mult+0x2e>
  40a100:	1064      	asrs	r4, r4, #1
  40a102:	d014      	beq.n	40a12e <__pow5mult+0x4e>
  40a104:	6830      	ldr	r0, [r6, #0]
  40a106:	b1a8      	cbz	r0, 40a134 <__pow5mult+0x54>
  40a108:	4606      	mov	r6, r0
  40a10a:	07e3      	lsls	r3, r4, #31
  40a10c:	d5f8      	bpl.n	40a100 <__pow5mult+0x20>
  40a10e:	4632      	mov	r2, r6
  40a110:	4629      	mov	r1, r5
  40a112:	4638      	mov	r0, r7
  40a114:	f7ff ff52 	bl	409fbc <__multiply>
  40a118:	b1b5      	cbz	r5, 40a148 <__pow5mult+0x68>
  40a11a:	686a      	ldr	r2, [r5, #4]
  40a11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40a11e:	1064      	asrs	r4, r4, #1
  40a120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40a124:	6029      	str	r1, [r5, #0]
  40a126:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40a12a:	4605      	mov	r5, r0
  40a12c:	d1ea      	bne.n	40a104 <__pow5mult+0x24>
  40a12e:	4628      	mov	r0, r5
  40a130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a134:	4632      	mov	r2, r6
  40a136:	4631      	mov	r1, r6
  40a138:	4638      	mov	r0, r7
  40a13a:	f7ff ff3f 	bl	409fbc <__multiply>
  40a13e:	6030      	str	r0, [r6, #0]
  40a140:	f8c0 8000 	str.w	r8, [r0]
  40a144:	4606      	mov	r6, r0
  40a146:	e7e0      	b.n	40a10a <__pow5mult+0x2a>
  40a148:	4605      	mov	r5, r0
  40a14a:	e7d9      	b.n	40a100 <__pow5mult+0x20>
  40a14c:	1e5a      	subs	r2, r3, #1
  40a14e:	4d0b      	ldr	r5, [pc, #44]	; (40a17c <__pow5mult+0x9c>)
  40a150:	2300      	movs	r3, #0
  40a152:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40a156:	f7ff fe97 	bl	409e88 <__multadd>
  40a15a:	4605      	mov	r5, r0
  40a15c:	e7c8      	b.n	40a0f0 <__pow5mult+0x10>
  40a15e:	2101      	movs	r1, #1
  40a160:	4638      	mov	r0, r7
  40a162:	f7ff fe61 	bl	409e28 <_Balloc>
  40a166:	f240 2171 	movw	r1, #625	; 0x271
  40a16a:	2201      	movs	r2, #1
  40a16c:	2300      	movs	r3, #0
  40a16e:	6141      	str	r1, [r0, #20]
  40a170:	6102      	str	r2, [r0, #16]
  40a172:	4606      	mov	r6, r0
  40a174:	64b8      	str	r0, [r7, #72]	; 0x48
  40a176:	6003      	str	r3, [r0, #0]
  40a178:	e7be      	b.n	40a0f8 <__pow5mult+0x18>
  40a17a:	bf00      	nop
  40a17c:	0040b948 	.word	0x0040b948

0040a180 <__lshift>:
  40a180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a184:	4691      	mov	r9, r2
  40a186:	690a      	ldr	r2, [r1, #16]
  40a188:	688b      	ldr	r3, [r1, #8]
  40a18a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40a18e:	eb04 0802 	add.w	r8, r4, r2
  40a192:	f108 0501 	add.w	r5, r8, #1
  40a196:	429d      	cmp	r5, r3
  40a198:	460e      	mov	r6, r1
  40a19a:	4607      	mov	r7, r0
  40a19c:	6849      	ldr	r1, [r1, #4]
  40a19e:	dd04      	ble.n	40a1aa <__lshift+0x2a>
  40a1a0:	005b      	lsls	r3, r3, #1
  40a1a2:	429d      	cmp	r5, r3
  40a1a4:	f101 0101 	add.w	r1, r1, #1
  40a1a8:	dcfa      	bgt.n	40a1a0 <__lshift+0x20>
  40a1aa:	4638      	mov	r0, r7
  40a1ac:	f7ff fe3c 	bl	409e28 <_Balloc>
  40a1b0:	2c00      	cmp	r4, #0
  40a1b2:	f100 0314 	add.w	r3, r0, #20
  40a1b6:	dd06      	ble.n	40a1c6 <__lshift+0x46>
  40a1b8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40a1bc:	2100      	movs	r1, #0
  40a1be:	f843 1b04 	str.w	r1, [r3], #4
  40a1c2:	429a      	cmp	r2, r3
  40a1c4:	d1fb      	bne.n	40a1be <__lshift+0x3e>
  40a1c6:	6934      	ldr	r4, [r6, #16]
  40a1c8:	f106 0114 	add.w	r1, r6, #20
  40a1cc:	f019 091f 	ands.w	r9, r9, #31
  40a1d0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40a1d4:	d01d      	beq.n	40a212 <__lshift+0x92>
  40a1d6:	f1c9 0c20 	rsb	ip, r9, #32
  40a1da:	2200      	movs	r2, #0
  40a1dc:	680c      	ldr	r4, [r1, #0]
  40a1de:	fa04 f409 	lsl.w	r4, r4, r9
  40a1e2:	4314      	orrs	r4, r2
  40a1e4:	f843 4b04 	str.w	r4, [r3], #4
  40a1e8:	f851 2b04 	ldr.w	r2, [r1], #4
  40a1ec:	458e      	cmp	lr, r1
  40a1ee:	fa22 f20c 	lsr.w	r2, r2, ip
  40a1f2:	d8f3      	bhi.n	40a1dc <__lshift+0x5c>
  40a1f4:	601a      	str	r2, [r3, #0]
  40a1f6:	b10a      	cbz	r2, 40a1fc <__lshift+0x7c>
  40a1f8:	f108 0502 	add.w	r5, r8, #2
  40a1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40a1fe:	6872      	ldr	r2, [r6, #4]
  40a200:	3d01      	subs	r5, #1
  40a202:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40a206:	6105      	str	r5, [r0, #16]
  40a208:	6031      	str	r1, [r6, #0]
  40a20a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40a20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a212:	3b04      	subs	r3, #4
  40a214:	f851 2b04 	ldr.w	r2, [r1], #4
  40a218:	f843 2f04 	str.w	r2, [r3, #4]!
  40a21c:	458e      	cmp	lr, r1
  40a21e:	d8f9      	bhi.n	40a214 <__lshift+0x94>
  40a220:	e7ec      	b.n	40a1fc <__lshift+0x7c>
  40a222:	bf00      	nop

0040a224 <__mcmp>:
  40a224:	b430      	push	{r4, r5}
  40a226:	690b      	ldr	r3, [r1, #16]
  40a228:	4605      	mov	r5, r0
  40a22a:	6900      	ldr	r0, [r0, #16]
  40a22c:	1ac0      	subs	r0, r0, r3
  40a22e:	d10f      	bne.n	40a250 <__mcmp+0x2c>
  40a230:	009b      	lsls	r3, r3, #2
  40a232:	3514      	adds	r5, #20
  40a234:	3114      	adds	r1, #20
  40a236:	4419      	add	r1, r3
  40a238:	442b      	add	r3, r5
  40a23a:	e001      	b.n	40a240 <__mcmp+0x1c>
  40a23c:	429d      	cmp	r5, r3
  40a23e:	d207      	bcs.n	40a250 <__mcmp+0x2c>
  40a240:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40a244:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40a248:	4294      	cmp	r4, r2
  40a24a:	d0f7      	beq.n	40a23c <__mcmp+0x18>
  40a24c:	d302      	bcc.n	40a254 <__mcmp+0x30>
  40a24e:	2001      	movs	r0, #1
  40a250:	bc30      	pop	{r4, r5}
  40a252:	4770      	bx	lr
  40a254:	f04f 30ff 	mov.w	r0, #4294967295
  40a258:	e7fa      	b.n	40a250 <__mcmp+0x2c>
  40a25a:	bf00      	nop

0040a25c <__mdiff>:
  40a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a260:	690f      	ldr	r7, [r1, #16]
  40a262:	460e      	mov	r6, r1
  40a264:	6911      	ldr	r1, [r2, #16]
  40a266:	1a7f      	subs	r7, r7, r1
  40a268:	2f00      	cmp	r7, #0
  40a26a:	4690      	mov	r8, r2
  40a26c:	d117      	bne.n	40a29e <__mdiff+0x42>
  40a26e:	0089      	lsls	r1, r1, #2
  40a270:	f106 0514 	add.w	r5, r6, #20
  40a274:	f102 0e14 	add.w	lr, r2, #20
  40a278:	186b      	adds	r3, r5, r1
  40a27a:	4471      	add	r1, lr
  40a27c:	e001      	b.n	40a282 <__mdiff+0x26>
  40a27e:	429d      	cmp	r5, r3
  40a280:	d25c      	bcs.n	40a33c <__mdiff+0xe0>
  40a282:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40a286:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40a28a:	42a2      	cmp	r2, r4
  40a28c:	d0f7      	beq.n	40a27e <__mdiff+0x22>
  40a28e:	d25e      	bcs.n	40a34e <__mdiff+0xf2>
  40a290:	4633      	mov	r3, r6
  40a292:	462c      	mov	r4, r5
  40a294:	4646      	mov	r6, r8
  40a296:	4675      	mov	r5, lr
  40a298:	4698      	mov	r8, r3
  40a29a:	2701      	movs	r7, #1
  40a29c:	e005      	b.n	40a2aa <__mdiff+0x4e>
  40a29e:	db58      	blt.n	40a352 <__mdiff+0xf6>
  40a2a0:	f106 0514 	add.w	r5, r6, #20
  40a2a4:	f108 0414 	add.w	r4, r8, #20
  40a2a8:	2700      	movs	r7, #0
  40a2aa:	6871      	ldr	r1, [r6, #4]
  40a2ac:	f7ff fdbc 	bl	409e28 <_Balloc>
  40a2b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40a2b4:	6936      	ldr	r6, [r6, #16]
  40a2b6:	60c7      	str	r7, [r0, #12]
  40a2b8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40a2bc:	46a6      	mov	lr, r4
  40a2be:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40a2c2:	f100 0414 	add.w	r4, r0, #20
  40a2c6:	2300      	movs	r3, #0
  40a2c8:	f85e 1b04 	ldr.w	r1, [lr], #4
  40a2cc:	f855 8b04 	ldr.w	r8, [r5], #4
  40a2d0:	b28a      	uxth	r2, r1
  40a2d2:	fa13 f388 	uxtah	r3, r3, r8
  40a2d6:	0c09      	lsrs	r1, r1, #16
  40a2d8:	1a9a      	subs	r2, r3, r2
  40a2da:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40a2de:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40a2e2:	b292      	uxth	r2, r2
  40a2e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40a2e8:	45f4      	cmp	ip, lr
  40a2ea:	f844 2b04 	str.w	r2, [r4], #4
  40a2ee:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a2f2:	d8e9      	bhi.n	40a2c8 <__mdiff+0x6c>
  40a2f4:	42af      	cmp	r7, r5
  40a2f6:	d917      	bls.n	40a328 <__mdiff+0xcc>
  40a2f8:	46a4      	mov	ip, r4
  40a2fa:	46ae      	mov	lr, r5
  40a2fc:	f85e 2b04 	ldr.w	r2, [lr], #4
  40a300:	fa13 f382 	uxtah	r3, r3, r2
  40a304:	1419      	asrs	r1, r3, #16
  40a306:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40a30a:	b29b      	uxth	r3, r3
  40a30c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40a310:	4577      	cmp	r7, lr
  40a312:	f84c 2b04 	str.w	r2, [ip], #4
  40a316:	ea4f 4321 	mov.w	r3, r1, asr #16
  40a31a:	d8ef      	bhi.n	40a2fc <__mdiff+0xa0>
  40a31c:	43ed      	mvns	r5, r5
  40a31e:	442f      	add	r7, r5
  40a320:	f027 0703 	bic.w	r7, r7, #3
  40a324:	3704      	adds	r7, #4
  40a326:	443c      	add	r4, r7
  40a328:	3c04      	subs	r4, #4
  40a32a:	b922      	cbnz	r2, 40a336 <__mdiff+0xda>
  40a32c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40a330:	3e01      	subs	r6, #1
  40a332:	2b00      	cmp	r3, #0
  40a334:	d0fa      	beq.n	40a32c <__mdiff+0xd0>
  40a336:	6106      	str	r6, [r0, #16]
  40a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a33c:	2100      	movs	r1, #0
  40a33e:	f7ff fd73 	bl	409e28 <_Balloc>
  40a342:	2201      	movs	r2, #1
  40a344:	2300      	movs	r3, #0
  40a346:	6102      	str	r2, [r0, #16]
  40a348:	6143      	str	r3, [r0, #20]
  40a34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a34e:	4674      	mov	r4, lr
  40a350:	e7ab      	b.n	40a2aa <__mdiff+0x4e>
  40a352:	4633      	mov	r3, r6
  40a354:	f106 0414 	add.w	r4, r6, #20
  40a358:	f102 0514 	add.w	r5, r2, #20
  40a35c:	4616      	mov	r6, r2
  40a35e:	2701      	movs	r7, #1
  40a360:	4698      	mov	r8, r3
  40a362:	e7a2      	b.n	40a2aa <__mdiff+0x4e>

0040a364 <__d2b>:
  40a364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a368:	b082      	sub	sp, #8
  40a36a:	2101      	movs	r1, #1
  40a36c:	461c      	mov	r4, r3
  40a36e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40a372:	4615      	mov	r5, r2
  40a374:	9e08      	ldr	r6, [sp, #32]
  40a376:	f7ff fd57 	bl	409e28 <_Balloc>
  40a37a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40a37e:	4680      	mov	r8, r0
  40a380:	b10f      	cbz	r7, 40a386 <__d2b+0x22>
  40a382:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40a386:	9401      	str	r4, [sp, #4]
  40a388:	b31d      	cbz	r5, 40a3d2 <__d2b+0x6e>
  40a38a:	a802      	add	r0, sp, #8
  40a38c:	f840 5d08 	str.w	r5, [r0, #-8]!
  40a390:	f7ff fdda 	bl	409f48 <__lo0bits>
  40a394:	2800      	cmp	r0, #0
  40a396:	d134      	bne.n	40a402 <__d2b+0x9e>
  40a398:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40a39c:	f8c8 2014 	str.w	r2, [r8, #20]
  40a3a0:	2b00      	cmp	r3, #0
  40a3a2:	bf0c      	ite	eq
  40a3a4:	2101      	moveq	r1, #1
  40a3a6:	2102      	movne	r1, #2
  40a3a8:	f8c8 3018 	str.w	r3, [r8, #24]
  40a3ac:	f8c8 1010 	str.w	r1, [r8, #16]
  40a3b0:	b9df      	cbnz	r7, 40a3ea <__d2b+0x86>
  40a3b2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40a3b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40a3ba:	6030      	str	r0, [r6, #0]
  40a3bc:	6918      	ldr	r0, [r3, #16]
  40a3be:	f7ff fda3 	bl	409f08 <__hi0bits>
  40a3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a3c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40a3c8:	6018      	str	r0, [r3, #0]
  40a3ca:	4640      	mov	r0, r8
  40a3cc:	b002      	add	sp, #8
  40a3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a3d2:	a801      	add	r0, sp, #4
  40a3d4:	f7ff fdb8 	bl	409f48 <__lo0bits>
  40a3d8:	9b01      	ldr	r3, [sp, #4]
  40a3da:	f8c8 3014 	str.w	r3, [r8, #20]
  40a3de:	2101      	movs	r1, #1
  40a3e0:	3020      	adds	r0, #32
  40a3e2:	f8c8 1010 	str.w	r1, [r8, #16]
  40a3e6:	2f00      	cmp	r7, #0
  40a3e8:	d0e3      	beq.n	40a3b2 <__d2b+0x4e>
  40a3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a3ec:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40a3f0:	4407      	add	r7, r0
  40a3f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40a3f6:	6037      	str	r7, [r6, #0]
  40a3f8:	6018      	str	r0, [r3, #0]
  40a3fa:	4640      	mov	r0, r8
  40a3fc:	b002      	add	sp, #8
  40a3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a402:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40a406:	f1c0 0220 	rsb	r2, r0, #32
  40a40a:	fa03 f202 	lsl.w	r2, r3, r2
  40a40e:	430a      	orrs	r2, r1
  40a410:	40c3      	lsrs	r3, r0
  40a412:	9301      	str	r3, [sp, #4]
  40a414:	f8c8 2014 	str.w	r2, [r8, #20]
  40a418:	e7c2      	b.n	40a3a0 <__d2b+0x3c>
  40a41a:	bf00      	nop

0040a41c <_realloc_r>:
  40a41c:	2900      	cmp	r1, #0
  40a41e:	f000 8095 	beq.w	40a54c <_realloc_r+0x130>
  40a422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a426:	460d      	mov	r5, r1
  40a428:	4616      	mov	r6, r2
  40a42a:	b083      	sub	sp, #12
  40a42c:	4680      	mov	r8, r0
  40a42e:	f106 070b 	add.w	r7, r6, #11
  40a432:	f7fc fa91 	bl	406958 <__malloc_lock>
  40a436:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40a43a:	2f16      	cmp	r7, #22
  40a43c:	f02e 0403 	bic.w	r4, lr, #3
  40a440:	f1a5 0908 	sub.w	r9, r5, #8
  40a444:	d83c      	bhi.n	40a4c0 <_realloc_r+0xa4>
  40a446:	2210      	movs	r2, #16
  40a448:	4617      	mov	r7, r2
  40a44a:	42be      	cmp	r6, r7
  40a44c:	d83d      	bhi.n	40a4ca <_realloc_r+0xae>
  40a44e:	4294      	cmp	r4, r2
  40a450:	da43      	bge.n	40a4da <_realloc_r+0xbe>
  40a452:	4bc4      	ldr	r3, [pc, #784]	; (40a764 <_realloc_r+0x348>)
  40a454:	6899      	ldr	r1, [r3, #8]
  40a456:	eb09 0004 	add.w	r0, r9, r4
  40a45a:	4288      	cmp	r0, r1
  40a45c:	f000 80b4 	beq.w	40a5c8 <_realloc_r+0x1ac>
  40a460:	6843      	ldr	r3, [r0, #4]
  40a462:	f023 0101 	bic.w	r1, r3, #1
  40a466:	4401      	add	r1, r0
  40a468:	6849      	ldr	r1, [r1, #4]
  40a46a:	07c9      	lsls	r1, r1, #31
  40a46c:	d54c      	bpl.n	40a508 <_realloc_r+0xec>
  40a46e:	f01e 0f01 	tst.w	lr, #1
  40a472:	f000 809b 	beq.w	40a5ac <_realloc_r+0x190>
  40a476:	4631      	mov	r1, r6
  40a478:	4640      	mov	r0, r8
  40a47a:	f7fb fed5 	bl	406228 <_malloc_r>
  40a47e:	4606      	mov	r6, r0
  40a480:	2800      	cmp	r0, #0
  40a482:	d03a      	beq.n	40a4fa <_realloc_r+0xde>
  40a484:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40a488:	f023 0301 	bic.w	r3, r3, #1
  40a48c:	444b      	add	r3, r9
  40a48e:	f1a0 0208 	sub.w	r2, r0, #8
  40a492:	429a      	cmp	r2, r3
  40a494:	f000 8121 	beq.w	40a6da <_realloc_r+0x2be>
  40a498:	1f22      	subs	r2, r4, #4
  40a49a:	2a24      	cmp	r2, #36	; 0x24
  40a49c:	f200 8107 	bhi.w	40a6ae <_realloc_r+0x292>
  40a4a0:	2a13      	cmp	r2, #19
  40a4a2:	f200 80db 	bhi.w	40a65c <_realloc_r+0x240>
  40a4a6:	4603      	mov	r3, r0
  40a4a8:	462a      	mov	r2, r5
  40a4aa:	6811      	ldr	r1, [r2, #0]
  40a4ac:	6019      	str	r1, [r3, #0]
  40a4ae:	6851      	ldr	r1, [r2, #4]
  40a4b0:	6059      	str	r1, [r3, #4]
  40a4b2:	6892      	ldr	r2, [r2, #8]
  40a4b4:	609a      	str	r2, [r3, #8]
  40a4b6:	4629      	mov	r1, r5
  40a4b8:	4640      	mov	r0, r8
  40a4ba:	f7ff f8e9 	bl	409690 <_free_r>
  40a4be:	e01c      	b.n	40a4fa <_realloc_r+0xde>
  40a4c0:	f027 0707 	bic.w	r7, r7, #7
  40a4c4:	2f00      	cmp	r7, #0
  40a4c6:	463a      	mov	r2, r7
  40a4c8:	dabf      	bge.n	40a44a <_realloc_r+0x2e>
  40a4ca:	2600      	movs	r6, #0
  40a4cc:	230c      	movs	r3, #12
  40a4ce:	4630      	mov	r0, r6
  40a4d0:	f8c8 3000 	str.w	r3, [r8]
  40a4d4:	b003      	add	sp, #12
  40a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a4da:	462e      	mov	r6, r5
  40a4dc:	1be3      	subs	r3, r4, r7
  40a4de:	2b0f      	cmp	r3, #15
  40a4e0:	d81e      	bhi.n	40a520 <_realloc_r+0x104>
  40a4e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40a4e6:	f003 0301 	and.w	r3, r3, #1
  40a4ea:	4323      	orrs	r3, r4
  40a4ec:	444c      	add	r4, r9
  40a4ee:	f8c9 3004 	str.w	r3, [r9, #4]
  40a4f2:	6863      	ldr	r3, [r4, #4]
  40a4f4:	f043 0301 	orr.w	r3, r3, #1
  40a4f8:	6063      	str	r3, [r4, #4]
  40a4fa:	4640      	mov	r0, r8
  40a4fc:	f7fc fa32 	bl	406964 <__malloc_unlock>
  40a500:	4630      	mov	r0, r6
  40a502:	b003      	add	sp, #12
  40a504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a508:	f023 0303 	bic.w	r3, r3, #3
  40a50c:	18e1      	adds	r1, r4, r3
  40a50e:	4291      	cmp	r1, r2
  40a510:	db1f      	blt.n	40a552 <_realloc_r+0x136>
  40a512:	68c3      	ldr	r3, [r0, #12]
  40a514:	6882      	ldr	r2, [r0, #8]
  40a516:	462e      	mov	r6, r5
  40a518:	60d3      	str	r3, [r2, #12]
  40a51a:	460c      	mov	r4, r1
  40a51c:	609a      	str	r2, [r3, #8]
  40a51e:	e7dd      	b.n	40a4dc <_realloc_r+0xc0>
  40a520:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40a524:	eb09 0107 	add.w	r1, r9, r7
  40a528:	f002 0201 	and.w	r2, r2, #1
  40a52c:	444c      	add	r4, r9
  40a52e:	f043 0301 	orr.w	r3, r3, #1
  40a532:	4317      	orrs	r7, r2
  40a534:	f8c9 7004 	str.w	r7, [r9, #4]
  40a538:	604b      	str	r3, [r1, #4]
  40a53a:	6863      	ldr	r3, [r4, #4]
  40a53c:	f043 0301 	orr.w	r3, r3, #1
  40a540:	3108      	adds	r1, #8
  40a542:	6063      	str	r3, [r4, #4]
  40a544:	4640      	mov	r0, r8
  40a546:	f7ff f8a3 	bl	409690 <_free_r>
  40a54a:	e7d6      	b.n	40a4fa <_realloc_r+0xde>
  40a54c:	4611      	mov	r1, r2
  40a54e:	f7fb be6b 	b.w	406228 <_malloc_r>
  40a552:	f01e 0f01 	tst.w	lr, #1
  40a556:	d18e      	bne.n	40a476 <_realloc_r+0x5a>
  40a558:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a55c:	eba9 0a01 	sub.w	sl, r9, r1
  40a560:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a564:	f021 0103 	bic.w	r1, r1, #3
  40a568:	440b      	add	r3, r1
  40a56a:	4423      	add	r3, r4
  40a56c:	4293      	cmp	r3, r2
  40a56e:	db25      	blt.n	40a5bc <_realloc_r+0x1a0>
  40a570:	68c2      	ldr	r2, [r0, #12]
  40a572:	6881      	ldr	r1, [r0, #8]
  40a574:	4656      	mov	r6, sl
  40a576:	60ca      	str	r2, [r1, #12]
  40a578:	6091      	str	r1, [r2, #8]
  40a57a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a57e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a582:	1f22      	subs	r2, r4, #4
  40a584:	2a24      	cmp	r2, #36	; 0x24
  40a586:	60c1      	str	r1, [r0, #12]
  40a588:	6088      	str	r0, [r1, #8]
  40a58a:	f200 8094 	bhi.w	40a6b6 <_realloc_r+0x29a>
  40a58e:	2a13      	cmp	r2, #19
  40a590:	d96f      	bls.n	40a672 <_realloc_r+0x256>
  40a592:	6829      	ldr	r1, [r5, #0]
  40a594:	f8ca 1008 	str.w	r1, [sl, #8]
  40a598:	6869      	ldr	r1, [r5, #4]
  40a59a:	f8ca 100c 	str.w	r1, [sl, #12]
  40a59e:	2a1b      	cmp	r2, #27
  40a5a0:	f200 80a2 	bhi.w	40a6e8 <_realloc_r+0x2cc>
  40a5a4:	3508      	adds	r5, #8
  40a5a6:	f10a 0210 	add.w	r2, sl, #16
  40a5aa:	e063      	b.n	40a674 <_realloc_r+0x258>
  40a5ac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40a5b0:	eba9 0a03 	sub.w	sl, r9, r3
  40a5b4:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a5b8:	f021 0103 	bic.w	r1, r1, #3
  40a5bc:	1863      	adds	r3, r4, r1
  40a5be:	4293      	cmp	r3, r2
  40a5c0:	f6ff af59 	blt.w	40a476 <_realloc_r+0x5a>
  40a5c4:	4656      	mov	r6, sl
  40a5c6:	e7d8      	b.n	40a57a <_realloc_r+0x15e>
  40a5c8:	6841      	ldr	r1, [r0, #4]
  40a5ca:	f021 0b03 	bic.w	fp, r1, #3
  40a5ce:	44a3      	add	fp, r4
  40a5d0:	f107 0010 	add.w	r0, r7, #16
  40a5d4:	4583      	cmp	fp, r0
  40a5d6:	da56      	bge.n	40a686 <_realloc_r+0x26a>
  40a5d8:	f01e 0f01 	tst.w	lr, #1
  40a5dc:	f47f af4b 	bne.w	40a476 <_realloc_r+0x5a>
  40a5e0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a5e4:	eba9 0a01 	sub.w	sl, r9, r1
  40a5e8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a5ec:	f021 0103 	bic.w	r1, r1, #3
  40a5f0:	448b      	add	fp, r1
  40a5f2:	4558      	cmp	r0, fp
  40a5f4:	dce2      	bgt.n	40a5bc <_realloc_r+0x1a0>
  40a5f6:	4656      	mov	r6, sl
  40a5f8:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a5fc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a600:	1f22      	subs	r2, r4, #4
  40a602:	2a24      	cmp	r2, #36	; 0x24
  40a604:	60c1      	str	r1, [r0, #12]
  40a606:	6088      	str	r0, [r1, #8]
  40a608:	f200 808f 	bhi.w	40a72a <_realloc_r+0x30e>
  40a60c:	2a13      	cmp	r2, #19
  40a60e:	f240 808a 	bls.w	40a726 <_realloc_r+0x30a>
  40a612:	6829      	ldr	r1, [r5, #0]
  40a614:	f8ca 1008 	str.w	r1, [sl, #8]
  40a618:	6869      	ldr	r1, [r5, #4]
  40a61a:	f8ca 100c 	str.w	r1, [sl, #12]
  40a61e:	2a1b      	cmp	r2, #27
  40a620:	f200 808a 	bhi.w	40a738 <_realloc_r+0x31c>
  40a624:	3508      	adds	r5, #8
  40a626:	f10a 0210 	add.w	r2, sl, #16
  40a62a:	6829      	ldr	r1, [r5, #0]
  40a62c:	6011      	str	r1, [r2, #0]
  40a62e:	6869      	ldr	r1, [r5, #4]
  40a630:	6051      	str	r1, [r2, #4]
  40a632:	68a9      	ldr	r1, [r5, #8]
  40a634:	6091      	str	r1, [r2, #8]
  40a636:	eb0a 0107 	add.w	r1, sl, r7
  40a63a:	ebab 0207 	sub.w	r2, fp, r7
  40a63e:	f042 0201 	orr.w	r2, r2, #1
  40a642:	6099      	str	r1, [r3, #8]
  40a644:	604a      	str	r2, [r1, #4]
  40a646:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a64a:	f003 0301 	and.w	r3, r3, #1
  40a64e:	431f      	orrs	r7, r3
  40a650:	4640      	mov	r0, r8
  40a652:	f8ca 7004 	str.w	r7, [sl, #4]
  40a656:	f7fc f985 	bl	406964 <__malloc_unlock>
  40a65a:	e751      	b.n	40a500 <_realloc_r+0xe4>
  40a65c:	682b      	ldr	r3, [r5, #0]
  40a65e:	6003      	str	r3, [r0, #0]
  40a660:	686b      	ldr	r3, [r5, #4]
  40a662:	6043      	str	r3, [r0, #4]
  40a664:	2a1b      	cmp	r2, #27
  40a666:	d82d      	bhi.n	40a6c4 <_realloc_r+0x2a8>
  40a668:	f100 0308 	add.w	r3, r0, #8
  40a66c:	f105 0208 	add.w	r2, r5, #8
  40a670:	e71b      	b.n	40a4aa <_realloc_r+0x8e>
  40a672:	4632      	mov	r2, r6
  40a674:	6829      	ldr	r1, [r5, #0]
  40a676:	6011      	str	r1, [r2, #0]
  40a678:	6869      	ldr	r1, [r5, #4]
  40a67a:	6051      	str	r1, [r2, #4]
  40a67c:	68a9      	ldr	r1, [r5, #8]
  40a67e:	6091      	str	r1, [r2, #8]
  40a680:	461c      	mov	r4, r3
  40a682:	46d1      	mov	r9, sl
  40a684:	e72a      	b.n	40a4dc <_realloc_r+0xc0>
  40a686:	eb09 0107 	add.w	r1, r9, r7
  40a68a:	ebab 0b07 	sub.w	fp, fp, r7
  40a68e:	f04b 0201 	orr.w	r2, fp, #1
  40a692:	6099      	str	r1, [r3, #8]
  40a694:	604a      	str	r2, [r1, #4]
  40a696:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40a69a:	f003 0301 	and.w	r3, r3, #1
  40a69e:	431f      	orrs	r7, r3
  40a6a0:	4640      	mov	r0, r8
  40a6a2:	f845 7c04 	str.w	r7, [r5, #-4]
  40a6a6:	f7fc f95d 	bl	406964 <__malloc_unlock>
  40a6aa:	462e      	mov	r6, r5
  40a6ac:	e728      	b.n	40a500 <_realloc_r+0xe4>
  40a6ae:	4629      	mov	r1, r5
  40a6b0:	f7ff fb56 	bl	409d60 <memmove>
  40a6b4:	e6ff      	b.n	40a4b6 <_realloc_r+0x9a>
  40a6b6:	4629      	mov	r1, r5
  40a6b8:	4630      	mov	r0, r6
  40a6ba:	461c      	mov	r4, r3
  40a6bc:	46d1      	mov	r9, sl
  40a6be:	f7ff fb4f 	bl	409d60 <memmove>
  40a6c2:	e70b      	b.n	40a4dc <_realloc_r+0xc0>
  40a6c4:	68ab      	ldr	r3, [r5, #8]
  40a6c6:	6083      	str	r3, [r0, #8]
  40a6c8:	68eb      	ldr	r3, [r5, #12]
  40a6ca:	60c3      	str	r3, [r0, #12]
  40a6cc:	2a24      	cmp	r2, #36	; 0x24
  40a6ce:	d017      	beq.n	40a700 <_realloc_r+0x2e4>
  40a6d0:	f100 0310 	add.w	r3, r0, #16
  40a6d4:	f105 0210 	add.w	r2, r5, #16
  40a6d8:	e6e7      	b.n	40a4aa <_realloc_r+0x8e>
  40a6da:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40a6de:	f023 0303 	bic.w	r3, r3, #3
  40a6e2:	441c      	add	r4, r3
  40a6e4:	462e      	mov	r6, r5
  40a6e6:	e6f9      	b.n	40a4dc <_realloc_r+0xc0>
  40a6e8:	68a9      	ldr	r1, [r5, #8]
  40a6ea:	f8ca 1010 	str.w	r1, [sl, #16]
  40a6ee:	68e9      	ldr	r1, [r5, #12]
  40a6f0:	f8ca 1014 	str.w	r1, [sl, #20]
  40a6f4:	2a24      	cmp	r2, #36	; 0x24
  40a6f6:	d00c      	beq.n	40a712 <_realloc_r+0x2f6>
  40a6f8:	3510      	adds	r5, #16
  40a6fa:	f10a 0218 	add.w	r2, sl, #24
  40a6fe:	e7b9      	b.n	40a674 <_realloc_r+0x258>
  40a700:	692b      	ldr	r3, [r5, #16]
  40a702:	6103      	str	r3, [r0, #16]
  40a704:	696b      	ldr	r3, [r5, #20]
  40a706:	6143      	str	r3, [r0, #20]
  40a708:	f105 0218 	add.w	r2, r5, #24
  40a70c:	f100 0318 	add.w	r3, r0, #24
  40a710:	e6cb      	b.n	40a4aa <_realloc_r+0x8e>
  40a712:	692a      	ldr	r2, [r5, #16]
  40a714:	f8ca 2018 	str.w	r2, [sl, #24]
  40a718:	696a      	ldr	r2, [r5, #20]
  40a71a:	f8ca 201c 	str.w	r2, [sl, #28]
  40a71e:	3518      	adds	r5, #24
  40a720:	f10a 0220 	add.w	r2, sl, #32
  40a724:	e7a6      	b.n	40a674 <_realloc_r+0x258>
  40a726:	4632      	mov	r2, r6
  40a728:	e77f      	b.n	40a62a <_realloc_r+0x20e>
  40a72a:	4629      	mov	r1, r5
  40a72c:	4630      	mov	r0, r6
  40a72e:	9301      	str	r3, [sp, #4]
  40a730:	f7ff fb16 	bl	409d60 <memmove>
  40a734:	9b01      	ldr	r3, [sp, #4]
  40a736:	e77e      	b.n	40a636 <_realloc_r+0x21a>
  40a738:	68a9      	ldr	r1, [r5, #8]
  40a73a:	f8ca 1010 	str.w	r1, [sl, #16]
  40a73e:	68e9      	ldr	r1, [r5, #12]
  40a740:	f8ca 1014 	str.w	r1, [sl, #20]
  40a744:	2a24      	cmp	r2, #36	; 0x24
  40a746:	d003      	beq.n	40a750 <_realloc_r+0x334>
  40a748:	3510      	adds	r5, #16
  40a74a:	f10a 0218 	add.w	r2, sl, #24
  40a74e:	e76c      	b.n	40a62a <_realloc_r+0x20e>
  40a750:	692a      	ldr	r2, [r5, #16]
  40a752:	f8ca 2018 	str.w	r2, [sl, #24]
  40a756:	696a      	ldr	r2, [r5, #20]
  40a758:	f8ca 201c 	str.w	r2, [sl, #28]
  40a75c:	3518      	adds	r5, #24
  40a75e:	f10a 0220 	add.w	r2, sl, #32
  40a762:	e762      	b.n	40a62a <_realloc_r+0x20e>
  40a764:	20400440 	.word	0x20400440

0040a768 <__sread>:
  40a768:	b510      	push	{r4, lr}
  40a76a:	460c      	mov	r4, r1
  40a76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a770:	f000 fa88 	bl	40ac84 <_read_r>
  40a774:	2800      	cmp	r0, #0
  40a776:	db03      	blt.n	40a780 <__sread+0x18>
  40a778:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40a77a:	4403      	add	r3, r0
  40a77c:	6523      	str	r3, [r4, #80]	; 0x50
  40a77e:	bd10      	pop	{r4, pc}
  40a780:	89a3      	ldrh	r3, [r4, #12]
  40a782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40a786:	81a3      	strh	r3, [r4, #12]
  40a788:	bd10      	pop	{r4, pc}
  40a78a:	bf00      	nop

0040a78c <__swrite>:
  40a78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a790:	4616      	mov	r6, r2
  40a792:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40a796:	461f      	mov	r7, r3
  40a798:	05d3      	lsls	r3, r2, #23
  40a79a:	460c      	mov	r4, r1
  40a79c:	4605      	mov	r5, r0
  40a79e:	d507      	bpl.n	40a7b0 <__swrite+0x24>
  40a7a0:	2200      	movs	r2, #0
  40a7a2:	2302      	movs	r3, #2
  40a7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a7a8:	f000 fa40 	bl	40ac2c <_lseek_r>
  40a7ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a7b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a7b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40a7b8:	81a2      	strh	r2, [r4, #12]
  40a7ba:	463b      	mov	r3, r7
  40a7bc:	4632      	mov	r2, r6
  40a7be:	4628      	mov	r0, r5
  40a7c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a7c4:	f000 b85e 	b.w	40a884 <_write_r>

0040a7c8 <__sseek>:
  40a7c8:	b510      	push	{r4, lr}
  40a7ca:	460c      	mov	r4, r1
  40a7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a7d0:	f000 fa2c 	bl	40ac2c <_lseek_r>
  40a7d4:	89a3      	ldrh	r3, [r4, #12]
  40a7d6:	1c42      	adds	r2, r0, #1
  40a7d8:	bf0e      	itee	eq
  40a7da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40a7de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40a7e2:	6520      	strne	r0, [r4, #80]	; 0x50
  40a7e4:	81a3      	strh	r3, [r4, #12]
  40a7e6:	bd10      	pop	{r4, pc}

0040a7e8 <__sclose>:
  40a7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a7ec:	f000 b8f2 	b.w	40a9d4 <_close_r>

0040a7f0 <__sprint_r.part.0>:
  40a7f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a7f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40a7f6:	049c      	lsls	r4, r3, #18
  40a7f8:	4693      	mov	fp, r2
  40a7fa:	d52f      	bpl.n	40a85c <__sprint_r.part.0+0x6c>
  40a7fc:	6893      	ldr	r3, [r2, #8]
  40a7fe:	6812      	ldr	r2, [r2, #0]
  40a800:	b353      	cbz	r3, 40a858 <__sprint_r.part.0+0x68>
  40a802:	460e      	mov	r6, r1
  40a804:	4607      	mov	r7, r0
  40a806:	f102 0908 	add.w	r9, r2, #8
  40a80a:	e919 0420 	ldmdb	r9, {r5, sl}
  40a80e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40a812:	d017      	beq.n	40a844 <__sprint_r.part.0+0x54>
  40a814:	3d04      	subs	r5, #4
  40a816:	2400      	movs	r4, #0
  40a818:	e001      	b.n	40a81e <__sprint_r.part.0+0x2e>
  40a81a:	45a0      	cmp	r8, r4
  40a81c:	d010      	beq.n	40a840 <__sprint_r.part.0+0x50>
  40a81e:	4632      	mov	r2, r6
  40a820:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40a824:	4638      	mov	r0, r7
  40a826:	f000 f999 	bl	40ab5c <_fputwc_r>
  40a82a:	1c43      	adds	r3, r0, #1
  40a82c:	f104 0401 	add.w	r4, r4, #1
  40a830:	d1f3      	bne.n	40a81a <__sprint_r.part.0+0x2a>
  40a832:	2300      	movs	r3, #0
  40a834:	f8cb 3008 	str.w	r3, [fp, #8]
  40a838:	f8cb 3004 	str.w	r3, [fp, #4]
  40a83c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a840:	f8db 3008 	ldr.w	r3, [fp, #8]
  40a844:	f02a 0a03 	bic.w	sl, sl, #3
  40a848:	eba3 030a 	sub.w	r3, r3, sl
  40a84c:	f8cb 3008 	str.w	r3, [fp, #8]
  40a850:	f109 0908 	add.w	r9, r9, #8
  40a854:	2b00      	cmp	r3, #0
  40a856:	d1d8      	bne.n	40a80a <__sprint_r.part.0+0x1a>
  40a858:	2000      	movs	r0, #0
  40a85a:	e7ea      	b.n	40a832 <__sprint_r.part.0+0x42>
  40a85c:	f7fe fffe 	bl	40985c <__sfvwrite_r>
  40a860:	2300      	movs	r3, #0
  40a862:	f8cb 3008 	str.w	r3, [fp, #8]
  40a866:	f8cb 3004 	str.w	r3, [fp, #4]
  40a86a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a86e:	bf00      	nop

0040a870 <__sprint_r>:
  40a870:	6893      	ldr	r3, [r2, #8]
  40a872:	b10b      	cbz	r3, 40a878 <__sprint_r+0x8>
  40a874:	f7ff bfbc 	b.w	40a7f0 <__sprint_r.part.0>
  40a878:	b410      	push	{r4}
  40a87a:	4618      	mov	r0, r3
  40a87c:	6053      	str	r3, [r2, #4]
  40a87e:	bc10      	pop	{r4}
  40a880:	4770      	bx	lr
  40a882:	bf00      	nop

0040a884 <_write_r>:
  40a884:	b570      	push	{r4, r5, r6, lr}
  40a886:	460d      	mov	r5, r1
  40a888:	4c08      	ldr	r4, [pc, #32]	; (40a8ac <_write_r+0x28>)
  40a88a:	4611      	mov	r1, r2
  40a88c:	4606      	mov	r6, r0
  40a88e:	461a      	mov	r2, r3
  40a890:	4628      	mov	r0, r5
  40a892:	2300      	movs	r3, #0
  40a894:	6023      	str	r3, [r4, #0]
  40a896:	f7f6 fa5b 	bl	400d50 <_write>
  40a89a:	1c43      	adds	r3, r0, #1
  40a89c:	d000      	beq.n	40a8a0 <_write_r+0x1c>
  40a89e:	bd70      	pop	{r4, r5, r6, pc}
  40a8a0:	6823      	ldr	r3, [r4, #0]
  40a8a2:	2b00      	cmp	r3, #0
  40a8a4:	d0fb      	beq.n	40a89e <_write_r+0x1a>
  40a8a6:	6033      	str	r3, [r6, #0]
  40a8a8:	bd70      	pop	{r4, r5, r6, pc}
  40a8aa:	bf00      	nop
  40a8ac:	20400c40 	.word	0x20400c40

0040a8b0 <__register_exitproc>:
  40a8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a8b4:	4d2c      	ldr	r5, [pc, #176]	; (40a968 <__register_exitproc+0xb8>)
  40a8b6:	4606      	mov	r6, r0
  40a8b8:	6828      	ldr	r0, [r5, #0]
  40a8ba:	4698      	mov	r8, r3
  40a8bc:	460f      	mov	r7, r1
  40a8be:	4691      	mov	r9, r2
  40a8c0:	f7ff f980 	bl	409bc4 <__retarget_lock_acquire_recursive>
  40a8c4:	4b29      	ldr	r3, [pc, #164]	; (40a96c <__register_exitproc+0xbc>)
  40a8c6:	681c      	ldr	r4, [r3, #0]
  40a8c8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40a8cc:	2b00      	cmp	r3, #0
  40a8ce:	d03e      	beq.n	40a94e <__register_exitproc+0x9e>
  40a8d0:	685a      	ldr	r2, [r3, #4]
  40a8d2:	2a1f      	cmp	r2, #31
  40a8d4:	dc1c      	bgt.n	40a910 <__register_exitproc+0x60>
  40a8d6:	f102 0e01 	add.w	lr, r2, #1
  40a8da:	b176      	cbz	r6, 40a8fa <__register_exitproc+0x4a>
  40a8dc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40a8e0:	2401      	movs	r4, #1
  40a8e2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40a8e6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40a8ea:	4094      	lsls	r4, r2
  40a8ec:	4320      	orrs	r0, r4
  40a8ee:	2e02      	cmp	r6, #2
  40a8f0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40a8f4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40a8f8:	d023      	beq.n	40a942 <__register_exitproc+0x92>
  40a8fa:	3202      	adds	r2, #2
  40a8fc:	f8c3 e004 	str.w	lr, [r3, #4]
  40a900:	6828      	ldr	r0, [r5, #0]
  40a902:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40a906:	f7ff f95f 	bl	409bc8 <__retarget_lock_release_recursive>
  40a90a:	2000      	movs	r0, #0
  40a90c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a910:	4b17      	ldr	r3, [pc, #92]	; (40a970 <__register_exitproc+0xc0>)
  40a912:	b30b      	cbz	r3, 40a958 <__register_exitproc+0xa8>
  40a914:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a918:	f7fb fc76 	bl	406208 <malloc>
  40a91c:	4603      	mov	r3, r0
  40a91e:	b1d8      	cbz	r0, 40a958 <__register_exitproc+0xa8>
  40a920:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40a924:	6002      	str	r2, [r0, #0]
  40a926:	2100      	movs	r1, #0
  40a928:	6041      	str	r1, [r0, #4]
  40a92a:	460a      	mov	r2, r1
  40a92c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40a930:	f04f 0e01 	mov.w	lr, #1
  40a934:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40a938:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40a93c:	2e00      	cmp	r6, #0
  40a93e:	d0dc      	beq.n	40a8fa <__register_exitproc+0x4a>
  40a940:	e7cc      	b.n	40a8dc <__register_exitproc+0x2c>
  40a942:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40a946:	430c      	orrs	r4, r1
  40a948:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40a94c:	e7d5      	b.n	40a8fa <__register_exitproc+0x4a>
  40a94e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40a952:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40a956:	e7bb      	b.n	40a8d0 <__register_exitproc+0x20>
  40a958:	6828      	ldr	r0, [r5, #0]
  40a95a:	f7ff f935 	bl	409bc8 <__retarget_lock_release_recursive>
  40a95e:	f04f 30ff 	mov.w	r0, #4294967295
  40a962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a966:	bf00      	nop
  40a968:	20400850 	.word	0x20400850
  40a96c:	0040b7d8 	.word	0x0040b7d8
  40a970:	00406209 	.word	0x00406209

0040a974 <_calloc_r>:
  40a974:	b510      	push	{r4, lr}
  40a976:	fb02 f101 	mul.w	r1, r2, r1
  40a97a:	f7fb fc55 	bl	406228 <_malloc_r>
  40a97e:	4604      	mov	r4, r0
  40a980:	b1d8      	cbz	r0, 40a9ba <_calloc_r+0x46>
  40a982:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a986:	f022 0203 	bic.w	r2, r2, #3
  40a98a:	3a04      	subs	r2, #4
  40a98c:	2a24      	cmp	r2, #36	; 0x24
  40a98e:	d818      	bhi.n	40a9c2 <_calloc_r+0x4e>
  40a990:	2a13      	cmp	r2, #19
  40a992:	d914      	bls.n	40a9be <_calloc_r+0x4a>
  40a994:	2300      	movs	r3, #0
  40a996:	2a1b      	cmp	r2, #27
  40a998:	6003      	str	r3, [r0, #0]
  40a99a:	6043      	str	r3, [r0, #4]
  40a99c:	d916      	bls.n	40a9cc <_calloc_r+0x58>
  40a99e:	2a24      	cmp	r2, #36	; 0x24
  40a9a0:	6083      	str	r3, [r0, #8]
  40a9a2:	60c3      	str	r3, [r0, #12]
  40a9a4:	bf11      	iteee	ne
  40a9a6:	f100 0210 	addne.w	r2, r0, #16
  40a9aa:	6103      	streq	r3, [r0, #16]
  40a9ac:	6143      	streq	r3, [r0, #20]
  40a9ae:	f100 0218 	addeq.w	r2, r0, #24
  40a9b2:	2300      	movs	r3, #0
  40a9b4:	6013      	str	r3, [r2, #0]
  40a9b6:	6053      	str	r3, [r2, #4]
  40a9b8:	6093      	str	r3, [r2, #8]
  40a9ba:	4620      	mov	r0, r4
  40a9bc:	bd10      	pop	{r4, pc}
  40a9be:	4602      	mov	r2, r0
  40a9c0:	e7f7      	b.n	40a9b2 <_calloc_r+0x3e>
  40a9c2:	2100      	movs	r1, #0
  40a9c4:	f7fb ff7a 	bl	4068bc <memset>
  40a9c8:	4620      	mov	r0, r4
  40a9ca:	bd10      	pop	{r4, pc}
  40a9cc:	f100 0208 	add.w	r2, r0, #8
  40a9d0:	e7ef      	b.n	40a9b2 <_calloc_r+0x3e>
  40a9d2:	bf00      	nop

0040a9d4 <_close_r>:
  40a9d4:	b538      	push	{r3, r4, r5, lr}
  40a9d6:	4c07      	ldr	r4, [pc, #28]	; (40a9f4 <_close_r+0x20>)
  40a9d8:	2300      	movs	r3, #0
  40a9da:	4605      	mov	r5, r0
  40a9dc:	4608      	mov	r0, r1
  40a9de:	6023      	str	r3, [r4, #0]
  40a9e0:	f7f6 fe6e 	bl	4016c0 <_close>
  40a9e4:	1c43      	adds	r3, r0, #1
  40a9e6:	d000      	beq.n	40a9ea <_close_r+0x16>
  40a9e8:	bd38      	pop	{r3, r4, r5, pc}
  40a9ea:	6823      	ldr	r3, [r4, #0]
  40a9ec:	2b00      	cmp	r3, #0
  40a9ee:	d0fb      	beq.n	40a9e8 <_close_r+0x14>
  40a9f0:	602b      	str	r3, [r5, #0]
  40a9f2:	bd38      	pop	{r3, r4, r5, pc}
  40a9f4:	20400c40 	.word	0x20400c40

0040a9f8 <_fclose_r>:
  40a9f8:	b570      	push	{r4, r5, r6, lr}
  40a9fa:	b159      	cbz	r1, 40aa14 <_fclose_r+0x1c>
  40a9fc:	4605      	mov	r5, r0
  40a9fe:	460c      	mov	r4, r1
  40aa00:	b110      	cbz	r0, 40aa08 <_fclose_r+0x10>
  40aa02:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40aa04:	2b00      	cmp	r3, #0
  40aa06:	d03c      	beq.n	40aa82 <_fclose_r+0x8a>
  40aa08:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40aa0a:	07d8      	lsls	r0, r3, #31
  40aa0c:	d505      	bpl.n	40aa1a <_fclose_r+0x22>
  40aa0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40aa12:	b92b      	cbnz	r3, 40aa20 <_fclose_r+0x28>
  40aa14:	2600      	movs	r6, #0
  40aa16:	4630      	mov	r0, r6
  40aa18:	bd70      	pop	{r4, r5, r6, pc}
  40aa1a:	89a3      	ldrh	r3, [r4, #12]
  40aa1c:	0599      	lsls	r1, r3, #22
  40aa1e:	d53c      	bpl.n	40aa9a <_fclose_r+0xa2>
  40aa20:	4621      	mov	r1, r4
  40aa22:	4628      	mov	r0, r5
  40aa24:	f7fe fc9a 	bl	40935c <__sflush_r>
  40aa28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40aa2a:	4606      	mov	r6, r0
  40aa2c:	b133      	cbz	r3, 40aa3c <_fclose_r+0x44>
  40aa2e:	69e1      	ldr	r1, [r4, #28]
  40aa30:	4628      	mov	r0, r5
  40aa32:	4798      	blx	r3
  40aa34:	2800      	cmp	r0, #0
  40aa36:	bfb8      	it	lt
  40aa38:	f04f 36ff 	movlt.w	r6, #4294967295
  40aa3c:	89a3      	ldrh	r3, [r4, #12]
  40aa3e:	061a      	lsls	r2, r3, #24
  40aa40:	d422      	bmi.n	40aa88 <_fclose_r+0x90>
  40aa42:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40aa44:	b141      	cbz	r1, 40aa58 <_fclose_r+0x60>
  40aa46:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40aa4a:	4299      	cmp	r1, r3
  40aa4c:	d002      	beq.n	40aa54 <_fclose_r+0x5c>
  40aa4e:	4628      	mov	r0, r5
  40aa50:	f7fe fe1e 	bl	409690 <_free_r>
  40aa54:	2300      	movs	r3, #0
  40aa56:	6323      	str	r3, [r4, #48]	; 0x30
  40aa58:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40aa5a:	b121      	cbz	r1, 40aa66 <_fclose_r+0x6e>
  40aa5c:	4628      	mov	r0, r5
  40aa5e:	f7fe fe17 	bl	409690 <_free_r>
  40aa62:	2300      	movs	r3, #0
  40aa64:	6463      	str	r3, [r4, #68]	; 0x44
  40aa66:	f7fe fd9d 	bl	4095a4 <__sfp_lock_acquire>
  40aa6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40aa6c:	2200      	movs	r2, #0
  40aa6e:	07db      	lsls	r3, r3, #31
  40aa70:	81a2      	strh	r2, [r4, #12]
  40aa72:	d50e      	bpl.n	40aa92 <_fclose_r+0x9a>
  40aa74:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40aa76:	f7ff f8a3 	bl	409bc0 <__retarget_lock_close_recursive>
  40aa7a:	f7fe fd99 	bl	4095b0 <__sfp_lock_release>
  40aa7e:	4630      	mov	r0, r6
  40aa80:	bd70      	pop	{r4, r5, r6, pc}
  40aa82:	f7fe fd63 	bl	40954c <__sinit>
  40aa86:	e7bf      	b.n	40aa08 <_fclose_r+0x10>
  40aa88:	6921      	ldr	r1, [r4, #16]
  40aa8a:	4628      	mov	r0, r5
  40aa8c:	f7fe fe00 	bl	409690 <_free_r>
  40aa90:	e7d7      	b.n	40aa42 <_fclose_r+0x4a>
  40aa92:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40aa94:	f7ff f898 	bl	409bc8 <__retarget_lock_release_recursive>
  40aa98:	e7ec      	b.n	40aa74 <_fclose_r+0x7c>
  40aa9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40aa9c:	f7ff f892 	bl	409bc4 <__retarget_lock_acquire_recursive>
  40aaa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40aaa4:	2b00      	cmp	r3, #0
  40aaa6:	d1bb      	bne.n	40aa20 <_fclose_r+0x28>
  40aaa8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40aaaa:	f016 0601 	ands.w	r6, r6, #1
  40aaae:	d1b1      	bne.n	40aa14 <_fclose_r+0x1c>
  40aab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40aab2:	f7ff f889 	bl	409bc8 <__retarget_lock_release_recursive>
  40aab6:	4630      	mov	r0, r6
  40aab8:	bd70      	pop	{r4, r5, r6, pc}
  40aaba:	bf00      	nop

0040aabc <__fputwc>:
  40aabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40aac0:	b082      	sub	sp, #8
  40aac2:	4680      	mov	r8, r0
  40aac4:	4689      	mov	r9, r1
  40aac6:	4614      	mov	r4, r2
  40aac8:	f000 f8a2 	bl	40ac10 <__locale_mb_cur_max>
  40aacc:	2801      	cmp	r0, #1
  40aace:	d036      	beq.n	40ab3e <__fputwc+0x82>
  40aad0:	464a      	mov	r2, r9
  40aad2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40aad6:	a901      	add	r1, sp, #4
  40aad8:	4640      	mov	r0, r8
  40aada:	f000 f941 	bl	40ad60 <_wcrtomb_r>
  40aade:	1c42      	adds	r2, r0, #1
  40aae0:	4606      	mov	r6, r0
  40aae2:	d025      	beq.n	40ab30 <__fputwc+0x74>
  40aae4:	b3a8      	cbz	r0, 40ab52 <__fputwc+0x96>
  40aae6:	f89d e004 	ldrb.w	lr, [sp, #4]
  40aaea:	2500      	movs	r5, #0
  40aaec:	f10d 0a04 	add.w	sl, sp, #4
  40aaf0:	e009      	b.n	40ab06 <__fputwc+0x4a>
  40aaf2:	6823      	ldr	r3, [r4, #0]
  40aaf4:	1c5a      	adds	r2, r3, #1
  40aaf6:	6022      	str	r2, [r4, #0]
  40aaf8:	f883 e000 	strb.w	lr, [r3]
  40aafc:	3501      	adds	r5, #1
  40aafe:	42b5      	cmp	r5, r6
  40ab00:	d227      	bcs.n	40ab52 <__fputwc+0x96>
  40ab02:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40ab06:	68a3      	ldr	r3, [r4, #8]
  40ab08:	3b01      	subs	r3, #1
  40ab0a:	2b00      	cmp	r3, #0
  40ab0c:	60a3      	str	r3, [r4, #8]
  40ab0e:	daf0      	bge.n	40aaf2 <__fputwc+0x36>
  40ab10:	69a7      	ldr	r7, [r4, #24]
  40ab12:	42bb      	cmp	r3, r7
  40ab14:	4671      	mov	r1, lr
  40ab16:	4622      	mov	r2, r4
  40ab18:	4640      	mov	r0, r8
  40ab1a:	db02      	blt.n	40ab22 <__fputwc+0x66>
  40ab1c:	f1be 0f0a 	cmp.w	lr, #10
  40ab20:	d1e7      	bne.n	40aaf2 <__fputwc+0x36>
  40ab22:	f000 f8c5 	bl	40acb0 <__swbuf_r>
  40ab26:	1c43      	adds	r3, r0, #1
  40ab28:	d1e8      	bne.n	40aafc <__fputwc+0x40>
  40ab2a:	b002      	add	sp, #8
  40ab2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab30:	89a3      	ldrh	r3, [r4, #12]
  40ab32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ab36:	81a3      	strh	r3, [r4, #12]
  40ab38:	b002      	add	sp, #8
  40ab3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab3e:	f109 33ff 	add.w	r3, r9, #4294967295
  40ab42:	2bfe      	cmp	r3, #254	; 0xfe
  40ab44:	d8c4      	bhi.n	40aad0 <__fputwc+0x14>
  40ab46:	fa5f fe89 	uxtb.w	lr, r9
  40ab4a:	4606      	mov	r6, r0
  40ab4c:	f88d e004 	strb.w	lr, [sp, #4]
  40ab50:	e7cb      	b.n	40aaea <__fputwc+0x2e>
  40ab52:	4648      	mov	r0, r9
  40ab54:	b002      	add	sp, #8
  40ab56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab5a:	bf00      	nop

0040ab5c <_fputwc_r>:
  40ab5c:	b530      	push	{r4, r5, lr}
  40ab5e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40ab60:	f013 0f01 	tst.w	r3, #1
  40ab64:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40ab68:	4614      	mov	r4, r2
  40ab6a:	b083      	sub	sp, #12
  40ab6c:	4605      	mov	r5, r0
  40ab6e:	b29a      	uxth	r2, r3
  40ab70:	d101      	bne.n	40ab76 <_fputwc_r+0x1a>
  40ab72:	0590      	lsls	r0, r2, #22
  40ab74:	d51c      	bpl.n	40abb0 <_fputwc_r+0x54>
  40ab76:	0490      	lsls	r0, r2, #18
  40ab78:	d406      	bmi.n	40ab88 <_fputwc_r+0x2c>
  40ab7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40ab7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40ab80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40ab84:	81a3      	strh	r3, [r4, #12]
  40ab86:	6662      	str	r2, [r4, #100]	; 0x64
  40ab88:	4628      	mov	r0, r5
  40ab8a:	4622      	mov	r2, r4
  40ab8c:	f7ff ff96 	bl	40aabc <__fputwc>
  40ab90:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40ab92:	07da      	lsls	r2, r3, #31
  40ab94:	4605      	mov	r5, r0
  40ab96:	d402      	bmi.n	40ab9e <_fputwc_r+0x42>
  40ab98:	89a3      	ldrh	r3, [r4, #12]
  40ab9a:	059b      	lsls	r3, r3, #22
  40ab9c:	d502      	bpl.n	40aba4 <_fputwc_r+0x48>
  40ab9e:	4628      	mov	r0, r5
  40aba0:	b003      	add	sp, #12
  40aba2:	bd30      	pop	{r4, r5, pc}
  40aba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40aba6:	f7ff f80f 	bl	409bc8 <__retarget_lock_release_recursive>
  40abaa:	4628      	mov	r0, r5
  40abac:	b003      	add	sp, #12
  40abae:	bd30      	pop	{r4, r5, pc}
  40abb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40abb2:	9101      	str	r1, [sp, #4]
  40abb4:	f7ff f806 	bl	409bc4 <__retarget_lock_acquire_recursive>
  40abb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40abbc:	9901      	ldr	r1, [sp, #4]
  40abbe:	b29a      	uxth	r2, r3
  40abc0:	e7d9      	b.n	40ab76 <_fputwc_r+0x1a>
  40abc2:	bf00      	nop

0040abc4 <_fstat_r>:
  40abc4:	b538      	push	{r3, r4, r5, lr}
  40abc6:	460b      	mov	r3, r1
  40abc8:	4c07      	ldr	r4, [pc, #28]	; (40abe8 <_fstat_r+0x24>)
  40abca:	4605      	mov	r5, r0
  40abcc:	4611      	mov	r1, r2
  40abce:	4618      	mov	r0, r3
  40abd0:	2300      	movs	r3, #0
  40abd2:	6023      	str	r3, [r4, #0]
  40abd4:	f7f6 fd77 	bl	4016c6 <_fstat>
  40abd8:	1c43      	adds	r3, r0, #1
  40abda:	d000      	beq.n	40abde <_fstat_r+0x1a>
  40abdc:	bd38      	pop	{r3, r4, r5, pc}
  40abde:	6823      	ldr	r3, [r4, #0]
  40abe0:	2b00      	cmp	r3, #0
  40abe2:	d0fb      	beq.n	40abdc <_fstat_r+0x18>
  40abe4:	602b      	str	r3, [r5, #0]
  40abe6:	bd38      	pop	{r3, r4, r5, pc}
  40abe8:	20400c40 	.word	0x20400c40

0040abec <_isatty_r>:
  40abec:	b538      	push	{r3, r4, r5, lr}
  40abee:	4c07      	ldr	r4, [pc, #28]	; (40ac0c <_isatty_r+0x20>)
  40abf0:	2300      	movs	r3, #0
  40abf2:	4605      	mov	r5, r0
  40abf4:	4608      	mov	r0, r1
  40abf6:	6023      	str	r3, [r4, #0]
  40abf8:	f7f6 fd6a 	bl	4016d0 <_isatty>
  40abfc:	1c43      	adds	r3, r0, #1
  40abfe:	d000      	beq.n	40ac02 <_isatty_r+0x16>
  40ac00:	bd38      	pop	{r3, r4, r5, pc}
  40ac02:	6823      	ldr	r3, [r4, #0]
  40ac04:	2b00      	cmp	r3, #0
  40ac06:	d0fb      	beq.n	40ac00 <_isatty_r+0x14>
  40ac08:	602b      	str	r3, [r5, #0]
  40ac0a:	bd38      	pop	{r3, r4, r5, pc}
  40ac0c:	20400c40 	.word	0x20400c40

0040ac10 <__locale_mb_cur_max>:
  40ac10:	4b04      	ldr	r3, [pc, #16]	; (40ac24 <__locale_mb_cur_max+0x14>)
  40ac12:	4a05      	ldr	r2, [pc, #20]	; (40ac28 <__locale_mb_cur_max+0x18>)
  40ac14:	681b      	ldr	r3, [r3, #0]
  40ac16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40ac18:	2b00      	cmp	r3, #0
  40ac1a:	bf08      	it	eq
  40ac1c:	4613      	moveq	r3, r2
  40ac1e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40ac22:	4770      	bx	lr
  40ac24:	20400010 	.word	0x20400010
  40ac28:	20400854 	.word	0x20400854

0040ac2c <_lseek_r>:
  40ac2c:	b570      	push	{r4, r5, r6, lr}
  40ac2e:	460d      	mov	r5, r1
  40ac30:	4c08      	ldr	r4, [pc, #32]	; (40ac54 <_lseek_r+0x28>)
  40ac32:	4611      	mov	r1, r2
  40ac34:	4606      	mov	r6, r0
  40ac36:	461a      	mov	r2, r3
  40ac38:	4628      	mov	r0, r5
  40ac3a:	2300      	movs	r3, #0
  40ac3c:	6023      	str	r3, [r4, #0]
  40ac3e:	f7f6 fd49 	bl	4016d4 <_lseek>
  40ac42:	1c43      	adds	r3, r0, #1
  40ac44:	d000      	beq.n	40ac48 <_lseek_r+0x1c>
  40ac46:	bd70      	pop	{r4, r5, r6, pc}
  40ac48:	6823      	ldr	r3, [r4, #0]
  40ac4a:	2b00      	cmp	r3, #0
  40ac4c:	d0fb      	beq.n	40ac46 <_lseek_r+0x1a>
  40ac4e:	6033      	str	r3, [r6, #0]
  40ac50:	bd70      	pop	{r4, r5, r6, pc}
  40ac52:	bf00      	nop
  40ac54:	20400c40 	.word	0x20400c40

0040ac58 <__ascii_mbtowc>:
  40ac58:	b082      	sub	sp, #8
  40ac5a:	b149      	cbz	r1, 40ac70 <__ascii_mbtowc+0x18>
  40ac5c:	b15a      	cbz	r2, 40ac76 <__ascii_mbtowc+0x1e>
  40ac5e:	b16b      	cbz	r3, 40ac7c <__ascii_mbtowc+0x24>
  40ac60:	7813      	ldrb	r3, [r2, #0]
  40ac62:	600b      	str	r3, [r1, #0]
  40ac64:	7812      	ldrb	r2, [r2, #0]
  40ac66:	1c10      	adds	r0, r2, #0
  40ac68:	bf18      	it	ne
  40ac6a:	2001      	movne	r0, #1
  40ac6c:	b002      	add	sp, #8
  40ac6e:	4770      	bx	lr
  40ac70:	a901      	add	r1, sp, #4
  40ac72:	2a00      	cmp	r2, #0
  40ac74:	d1f3      	bne.n	40ac5e <__ascii_mbtowc+0x6>
  40ac76:	4610      	mov	r0, r2
  40ac78:	b002      	add	sp, #8
  40ac7a:	4770      	bx	lr
  40ac7c:	f06f 0001 	mvn.w	r0, #1
  40ac80:	e7f4      	b.n	40ac6c <__ascii_mbtowc+0x14>
  40ac82:	bf00      	nop

0040ac84 <_read_r>:
  40ac84:	b570      	push	{r4, r5, r6, lr}
  40ac86:	460d      	mov	r5, r1
  40ac88:	4c08      	ldr	r4, [pc, #32]	; (40acac <_read_r+0x28>)
  40ac8a:	4611      	mov	r1, r2
  40ac8c:	4606      	mov	r6, r0
  40ac8e:	461a      	mov	r2, r3
  40ac90:	4628      	mov	r0, r5
  40ac92:	2300      	movs	r3, #0
  40ac94:	6023      	str	r3, [r4, #0]
  40ac96:	f7f6 f83d 	bl	400d14 <_read>
  40ac9a:	1c43      	adds	r3, r0, #1
  40ac9c:	d000      	beq.n	40aca0 <_read_r+0x1c>
  40ac9e:	bd70      	pop	{r4, r5, r6, pc}
  40aca0:	6823      	ldr	r3, [r4, #0]
  40aca2:	2b00      	cmp	r3, #0
  40aca4:	d0fb      	beq.n	40ac9e <_read_r+0x1a>
  40aca6:	6033      	str	r3, [r6, #0]
  40aca8:	bd70      	pop	{r4, r5, r6, pc}
  40acaa:	bf00      	nop
  40acac:	20400c40 	.word	0x20400c40

0040acb0 <__swbuf_r>:
  40acb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40acb2:	460d      	mov	r5, r1
  40acb4:	4614      	mov	r4, r2
  40acb6:	4606      	mov	r6, r0
  40acb8:	b110      	cbz	r0, 40acc0 <__swbuf_r+0x10>
  40acba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40acbc:	2b00      	cmp	r3, #0
  40acbe:	d04b      	beq.n	40ad58 <__swbuf_r+0xa8>
  40acc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40acc4:	69a3      	ldr	r3, [r4, #24]
  40acc6:	60a3      	str	r3, [r4, #8]
  40acc8:	b291      	uxth	r1, r2
  40acca:	0708      	lsls	r0, r1, #28
  40accc:	d539      	bpl.n	40ad42 <__swbuf_r+0x92>
  40acce:	6923      	ldr	r3, [r4, #16]
  40acd0:	2b00      	cmp	r3, #0
  40acd2:	d036      	beq.n	40ad42 <__swbuf_r+0x92>
  40acd4:	b2ed      	uxtb	r5, r5
  40acd6:	0489      	lsls	r1, r1, #18
  40acd8:	462f      	mov	r7, r5
  40acda:	d515      	bpl.n	40ad08 <__swbuf_r+0x58>
  40acdc:	6822      	ldr	r2, [r4, #0]
  40acde:	6961      	ldr	r1, [r4, #20]
  40ace0:	1ad3      	subs	r3, r2, r3
  40ace2:	428b      	cmp	r3, r1
  40ace4:	da1c      	bge.n	40ad20 <__swbuf_r+0x70>
  40ace6:	3301      	adds	r3, #1
  40ace8:	68a1      	ldr	r1, [r4, #8]
  40acea:	1c50      	adds	r0, r2, #1
  40acec:	3901      	subs	r1, #1
  40acee:	60a1      	str	r1, [r4, #8]
  40acf0:	6020      	str	r0, [r4, #0]
  40acf2:	7015      	strb	r5, [r2, #0]
  40acf4:	6962      	ldr	r2, [r4, #20]
  40acf6:	429a      	cmp	r2, r3
  40acf8:	d01a      	beq.n	40ad30 <__swbuf_r+0x80>
  40acfa:	89a3      	ldrh	r3, [r4, #12]
  40acfc:	07db      	lsls	r3, r3, #31
  40acfe:	d501      	bpl.n	40ad04 <__swbuf_r+0x54>
  40ad00:	2d0a      	cmp	r5, #10
  40ad02:	d015      	beq.n	40ad30 <__swbuf_r+0x80>
  40ad04:	4638      	mov	r0, r7
  40ad06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ad08:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40ad0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40ad0e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40ad12:	81a2      	strh	r2, [r4, #12]
  40ad14:	6822      	ldr	r2, [r4, #0]
  40ad16:	6661      	str	r1, [r4, #100]	; 0x64
  40ad18:	6961      	ldr	r1, [r4, #20]
  40ad1a:	1ad3      	subs	r3, r2, r3
  40ad1c:	428b      	cmp	r3, r1
  40ad1e:	dbe2      	blt.n	40ace6 <__swbuf_r+0x36>
  40ad20:	4621      	mov	r1, r4
  40ad22:	4630      	mov	r0, r6
  40ad24:	f7fe fbba 	bl	40949c <_fflush_r>
  40ad28:	b940      	cbnz	r0, 40ad3c <__swbuf_r+0x8c>
  40ad2a:	6822      	ldr	r2, [r4, #0]
  40ad2c:	2301      	movs	r3, #1
  40ad2e:	e7db      	b.n	40ace8 <__swbuf_r+0x38>
  40ad30:	4621      	mov	r1, r4
  40ad32:	4630      	mov	r0, r6
  40ad34:	f7fe fbb2 	bl	40949c <_fflush_r>
  40ad38:	2800      	cmp	r0, #0
  40ad3a:	d0e3      	beq.n	40ad04 <__swbuf_r+0x54>
  40ad3c:	f04f 37ff 	mov.w	r7, #4294967295
  40ad40:	e7e0      	b.n	40ad04 <__swbuf_r+0x54>
  40ad42:	4621      	mov	r1, r4
  40ad44:	4630      	mov	r0, r6
  40ad46:	f7fd fad7 	bl	4082f8 <__swsetup_r>
  40ad4a:	2800      	cmp	r0, #0
  40ad4c:	d1f6      	bne.n	40ad3c <__swbuf_r+0x8c>
  40ad4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40ad52:	6923      	ldr	r3, [r4, #16]
  40ad54:	b291      	uxth	r1, r2
  40ad56:	e7bd      	b.n	40acd4 <__swbuf_r+0x24>
  40ad58:	f7fe fbf8 	bl	40954c <__sinit>
  40ad5c:	e7b0      	b.n	40acc0 <__swbuf_r+0x10>
  40ad5e:	bf00      	nop

0040ad60 <_wcrtomb_r>:
  40ad60:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ad62:	4606      	mov	r6, r0
  40ad64:	b085      	sub	sp, #20
  40ad66:	461f      	mov	r7, r3
  40ad68:	b189      	cbz	r1, 40ad8e <_wcrtomb_r+0x2e>
  40ad6a:	4c10      	ldr	r4, [pc, #64]	; (40adac <_wcrtomb_r+0x4c>)
  40ad6c:	4d10      	ldr	r5, [pc, #64]	; (40adb0 <_wcrtomb_r+0x50>)
  40ad6e:	6824      	ldr	r4, [r4, #0]
  40ad70:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40ad72:	2c00      	cmp	r4, #0
  40ad74:	bf08      	it	eq
  40ad76:	462c      	moveq	r4, r5
  40ad78:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40ad7c:	47a0      	blx	r4
  40ad7e:	1c43      	adds	r3, r0, #1
  40ad80:	d103      	bne.n	40ad8a <_wcrtomb_r+0x2a>
  40ad82:	2200      	movs	r2, #0
  40ad84:	238a      	movs	r3, #138	; 0x8a
  40ad86:	603a      	str	r2, [r7, #0]
  40ad88:	6033      	str	r3, [r6, #0]
  40ad8a:	b005      	add	sp, #20
  40ad8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ad8e:	460c      	mov	r4, r1
  40ad90:	4906      	ldr	r1, [pc, #24]	; (40adac <_wcrtomb_r+0x4c>)
  40ad92:	4a07      	ldr	r2, [pc, #28]	; (40adb0 <_wcrtomb_r+0x50>)
  40ad94:	6809      	ldr	r1, [r1, #0]
  40ad96:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40ad98:	2900      	cmp	r1, #0
  40ad9a:	bf08      	it	eq
  40ad9c:	4611      	moveq	r1, r2
  40ad9e:	4622      	mov	r2, r4
  40ada0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40ada4:	a901      	add	r1, sp, #4
  40ada6:	47a0      	blx	r4
  40ada8:	e7e9      	b.n	40ad7e <_wcrtomb_r+0x1e>
  40adaa:	bf00      	nop
  40adac:	20400010 	.word	0x20400010
  40adb0:	20400854 	.word	0x20400854

0040adb4 <__ascii_wctomb>:
  40adb4:	b121      	cbz	r1, 40adc0 <__ascii_wctomb+0xc>
  40adb6:	2aff      	cmp	r2, #255	; 0xff
  40adb8:	d804      	bhi.n	40adc4 <__ascii_wctomb+0x10>
  40adba:	700a      	strb	r2, [r1, #0]
  40adbc:	2001      	movs	r0, #1
  40adbe:	4770      	bx	lr
  40adc0:	4608      	mov	r0, r1
  40adc2:	4770      	bx	lr
  40adc4:	238a      	movs	r3, #138	; 0x8a
  40adc6:	6003      	str	r3, [r0, #0]
  40adc8:	f04f 30ff 	mov.w	r0, #4294967295
  40adcc:	4770      	bx	lr
  40adce:	bf00      	nop

0040add0 <__gedf2>:
  40add0:	f04f 3cff 	mov.w	ip, #4294967295
  40add4:	e006      	b.n	40ade4 <__cmpdf2+0x4>
  40add6:	bf00      	nop

0040add8 <__ledf2>:
  40add8:	f04f 0c01 	mov.w	ip, #1
  40addc:	e002      	b.n	40ade4 <__cmpdf2+0x4>
  40adde:	bf00      	nop

0040ade0 <__cmpdf2>:
  40ade0:	f04f 0c01 	mov.w	ip, #1
  40ade4:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ade8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40adec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40adf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40adf4:	bf18      	it	ne
  40adf6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40adfa:	d01b      	beq.n	40ae34 <__cmpdf2+0x54>
  40adfc:	b001      	add	sp, #4
  40adfe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40ae02:	bf0c      	ite	eq
  40ae04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40ae08:	ea91 0f03 	teqne	r1, r3
  40ae0c:	bf02      	ittt	eq
  40ae0e:	ea90 0f02 	teqeq	r0, r2
  40ae12:	2000      	moveq	r0, #0
  40ae14:	4770      	bxeq	lr
  40ae16:	f110 0f00 	cmn.w	r0, #0
  40ae1a:	ea91 0f03 	teq	r1, r3
  40ae1e:	bf58      	it	pl
  40ae20:	4299      	cmppl	r1, r3
  40ae22:	bf08      	it	eq
  40ae24:	4290      	cmpeq	r0, r2
  40ae26:	bf2c      	ite	cs
  40ae28:	17d8      	asrcs	r0, r3, #31
  40ae2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40ae2e:	f040 0001 	orr.w	r0, r0, #1
  40ae32:	4770      	bx	lr
  40ae34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ae38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ae3c:	d102      	bne.n	40ae44 <__cmpdf2+0x64>
  40ae3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ae42:	d107      	bne.n	40ae54 <__cmpdf2+0x74>
  40ae44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ae48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ae4c:	d1d6      	bne.n	40adfc <__cmpdf2+0x1c>
  40ae4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ae52:	d0d3      	beq.n	40adfc <__cmpdf2+0x1c>
  40ae54:	f85d 0b04 	ldr.w	r0, [sp], #4
  40ae58:	4770      	bx	lr
  40ae5a:	bf00      	nop

0040ae5c <__aeabi_cdrcmple>:
  40ae5c:	4684      	mov	ip, r0
  40ae5e:	4610      	mov	r0, r2
  40ae60:	4662      	mov	r2, ip
  40ae62:	468c      	mov	ip, r1
  40ae64:	4619      	mov	r1, r3
  40ae66:	4663      	mov	r3, ip
  40ae68:	e000      	b.n	40ae6c <__aeabi_cdcmpeq>
  40ae6a:	bf00      	nop

0040ae6c <__aeabi_cdcmpeq>:
  40ae6c:	b501      	push	{r0, lr}
  40ae6e:	f7ff ffb7 	bl	40ade0 <__cmpdf2>
  40ae72:	2800      	cmp	r0, #0
  40ae74:	bf48      	it	mi
  40ae76:	f110 0f00 	cmnmi.w	r0, #0
  40ae7a:	bd01      	pop	{r0, pc}

0040ae7c <__aeabi_dcmpeq>:
  40ae7c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae80:	f7ff fff4 	bl	40ae6c <__aeabi_cdcmpeq>
  40ae84:	bf0c      	ite	eq
  40ae86:	2001      	moveq	r0, #1
  40ae88:	2000      	movne	r0, #0
  40ae8a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae8e:	bf00      	nop

0040ae90 <__aeabi_dcmplt>:
  40ae90:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae94:	f7ff ffea 	bl	40ae6c <__aeabi_cdcmpeq>
  40ae98:	bf34      	ite	cc
  40ae9a:	2001      	movcc	r0, #1
  40ae9c:	2000      	movcs	r0, #0
  40ae9e:	f85d fb08 	ldr.w	pc, [sp], #8
  40aea2:	bf00      	nop

0040aea4 <__aeabi_dcmple>:
  40aea4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40aea8:	f7ff ffe0 	bl	40ae6c <__aeabi_cdcmpeq>
  40aeac:	bf94      	ite	ls
  40aeae:	2001      	movls	r0, #1
  40aeb0:	2000      	movhi	r0, #0
  40aeb2:	f85d fb08 	ldr.w	pc, [sp], #8
  40aeb6:	bf00      	nop

0040aeb8 <__aeabi_dcmpge>:
  40aeb8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40aebc:	f7ff ffce 	bl	40ae5c <__aeabi_cdrcmple>
  40aec0:	bf94      	ite	ls
  40aec2:	2001      	movls	r0, #1
  40aec4:	2000      	movhi	r0, #0
  40aec6:	f85d fb08 	ldr.w	pc, [sp], #8
  40aeca:	bf00      	nop

0040aecc <__aeabi_dcmpgt>:
  40aecc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40aed0:	f7ff ffc4 	bl	40ae5c <__aeabi_cdrcmple>
  40aed4:	bf34      	ite	cc
  40aed6:	2001      	movcc	r0, #1
  40aed8:	2000      	movcs	r0, #0
  40aeda:	f85d fb08 	ldr.w	pc, [sp], #8
  40aede:	bf00      	nop

0040aee0 <__aeabi_dcmpun>:
  40aee0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40aee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40aee8:	d102      	bne.n	40aef0 <__aeabi_dcmpun+0x10>
  40aeea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40aeee:	d10a      	bne.n	40af06 <__aeabi_dcmpun+0x26>
  40aef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40aef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40aef8:	d102      	bne.n	40af00 <__aeabi_dcmpun+0x20>
  40aefa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40aefe:	d102      	bne.n	40af06 <__aeabi_dcmpun+0x26>
  40af00:	f04f 0000 	mov.w	r0, #0
  40af04:	4770      	bx	lr
  40af06:	f04f 0001 	mov.w	r0, #1
  40af0a:	4770      	bx	lr

0040af0c <__aeabi_d2iz>:
  40af0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40af10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40af14:	d215      	bcs.n	40af42 <__aeabi_d2iz+0x36>
  40af16:	d511      	bpl.n	40af3c <__aeabi_d2iz+0x30>
  40af18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40af1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40af20:	d912      	bls.n	40af48 <__aeabi_d2iz+0x3c>
  40af22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40af26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40af2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40af2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40af32:	fa23 f002 	lsr.w	r0, r3, r2
  40af36:	bf18      	it	ne
  40af38:	4240      	negne	r0, r0
  40af3a:	4770      	bx	lr
  40af3c:	f04f 0000 	mov.w	r0, #0
  40af40:	4770      	bx	lr
  40af42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40af46:	d105      	bne.n	40af54 <__aeabi_d2iz+0x48>
  40af48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40af4c:	bf08      	it	eq
  40af4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40af52:	4770      	bx	lr
  40af54:	f04f 0000 	mov.w	r0, #0
  40af58:	4770      	bx	lr
  40af5a:	bf00      	nop

0040af5c <__aeabi_uldivmod>:
  40af5c:	b953      	cbnz	r3, 40af74 <__aeabi_uldivmod+0x18>
  40af5e:	b94a      	cbnz	r2, 40af74 <__aeabi_uldivmod+0x18>
  40af60:	2900      	cmp	r1, #0
  40af62:	bf08      	it	eq
  40af64:	2800      	cmpeq	r0, #0
  40af66:	bf1c      	itt	ne
  40af68:	f04f 31ff 	movne.w	r1, #4294967295
  40af6c:	f04f 30ff 	movne.w	r0, #4294967295
  40af70:	f000 b97a 	b.w	40b268 <__aeabi_idiv0>
  40af74:	f1ad 0c08 	sub.w	ip, sp, #8
  40af78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40af7c:	f000 f806 	bl	40af8c <__udivmoddi4>
  40af80:	f8dd e004 	ldr.w	lr, [sp, #4]
  40af84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40af88:	b004      	add	sp, #16
  40af8a:	4770      	bx	lr

0040af8c <__udivmoddi4>:
  40af8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40af90:	468c      	mov	ip, r1
  40af92:	460d      	mov	r5, r1
  40af94:	4604      	mov	r4, r0
  40af96:	9e08      	ldr	r6, [sp, #32]
  40af98:	2b00      	cmp	r3, #0
  40af9a:	d151      	bne.n	40b040 <__udivmoddi4+0xb4>
  40af9c:	428a      	cmp	r2, r1
  40af9e:	4617      	mov	r7, r2
  40afa0:	d96d      	bls.n	40b07e <__udivmoddi4+0xf2>
  40afa2:	fab2 fe82 	clz	lr, r2
  40afa6:	f1be 0f00 	cmp.w	lr, #0
  40afaa:	d00b      	beq.n	40afc4 <__udivmoddi4+0x38>
  40afac:	f1ce 0c20 	rsb	ip, lr, #32
  40afb0:	fa01 f50e 	lsl.w	r5, r1, lr
  40afb4:	fa20 fc0c 	lsr.w	ip, r0, ip
  40afb8:	fa02 f70e 	lsl.w	r7, r2, lr
  40afbc:	ea4c 0c05 	orr.w	ip, ip, r5
  40afc0:	fa00 f40e 	lsl.w	r4, r0, lr
  40afc4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40afc8:	0c25      	lsrs	r5, r4, #16
  40afca:	fbbc f8fa 	udiv	r8, ip, sl
  40afce:	fa1f f987 	uxth.w	r9, r7
  40afd2:	fb0a cc18 	mls	ip, sl, r8, ip
  40afd6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40afda:	fb08 f309 	mul.w	r3, r8, r9
  40afde:	42ab      	cmp	r3, r5
  40afe0:	d90a      	bls.n	40aff8 <__udivmoddi4+0x6c>
  40afe2:	19ed      	adds	r5, r5, r7
  40afe4:	f108 32ff 	add.w	r2, r8, #4294967295
  40afe8:	f080 8123 	bcs.w	40b232 <__udivmoddi4+0x2a6>
  40afec:	42ab      	cmp	r3, r5
  40afee:	f240 8120 	bls.w	40b232 <__udivmoddi4+0x2a6>
  40aff2:	f1a8 0802 	sub.w	r8, r8, #2
  40aff6:	443d      	add	r5, r7
  40aff8:	1aed      	subs	r5, r5, r3
  40affa:	b2a4      	uxth	r4, r4
  40affc:	fbb5 f0fa 	udiv	r0, r5, sl
  40b000:	fb0a 5510 	mls	r5, sl, r0, r5
  40b004:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40b008:	fb00 f909 	mul.w	r9, r0, r9
  40b00c:	45a1      	cmp	r9, r4
  40b00e:	d909      	bls.n	40b024 <__udivmoddi4+0x98>
  40b010:	19e4      	adds	r4, r4, r7
  40b012:	f100 33ff 	add.w	r3, r0, #4294967295
  40b016:	f080 810a 	bcs.w	40b22e <__udivmoddi4+0x2a2>
  40b01a:	45a1      	cmp	r9, r4
  40b01c:	f240 8107 	bls.w	40b22e <__udivmoddi4+0x2a2>
  40b020:	3802      	subs	r0, #2
  40b022:	443c      	add	r4, r7
  40b024:	eba4 0409 	sub.w	r4, r4, r9
  40b028:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40b02c:	2100      	movs	r1, #0
  40b02e:	2e00      	cmp	r6, #0
  40b030:	d061      	beq.n	40b0f6 <__udivmoddi4+0x16a>
  40b032:	fa24 f40e 	lsr.w	r4, r4, lr
  40b036:	2300      	movs	r3, #0
  40b038:	6034      	str	r4, [r6, #0]
  40b03a:	6073      	str	r3, [r6, #4]
  40b03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b040:	428b      	cmp	r3, r1
  40b042:	d907      	bls.n	40b054 <__udivmoddi4+0xc8>
  40b044:	2e00      	cmp	r6, #0
  40b046:	d054      	beq.n	40b0f2 <__udivmoddi4+0x166>
  40b048:	2100      	movs	r1, #0
  40b04a:	e886 0021 	stmia.w	r6, {r0, r5}
  40b04e:	4608      	mov	r0, r1
  40b050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b054:	fab3 f183 	clz	r1, r3
  40b058:	2900      	cmp	r1, #0
  40b05a:	f040 808e 	bne.w	40b17a <__udivmoddi4+0x1ee>
  40b05e:	42ab      	cmp	r3, r5
  40b060:	d302      	bcc.n	40b068 <__udivmoddi4+0xdc>
  40b062:	4282      	cmp	r2, r0
  40b064:	f200 80fa 	bhi.w	40b25c <__udivmoddi4+0x2d0>
  40b068:	1a84      	subs	r4, r0, r2
  40b06a:	eb65 0503 	sbc.w	r5, r5, r3
  40b06e:	2001      	movs	r0, #1
  40b070:	46ac      	mov	ip, r5
  40b072:	2e00      	cmp	r6, #0
  40b074:	d03f      	beq.n	40b0f6 <__udivmoddi4+0x16a>
  40b076:	e886 1010 	stmia.w	r6, {r4, ip}
  40b07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b07e:	b912      	cbnz	r2, 40b086 <__udivmoddi4+0xfa>
  40b080:	2701      	movs	r7, #1
  40b082:	fbb7 f7f2 	udiv	r7, r7, r2
  40b086:	fab7 fe87 	clz	lr, r7
  40b08a:	f1be 0f00 	cmp.w	lr, #0
  40b08e:	d134      	bne.n	40b0fa <__udivmoddi4+0x16e>
  40b090:	1beb      	subs	r3, r5, r7
  40b092:	0c3a      	lsrs	r2, r7, #16
  40b094:	fa1f fc87 	uxth.w	ip, r7
  40b098:	2101      	movs	r1, #1
  40b09a:	fbb3 f8f2 	udiv	r8, r3, r2
  40b09e:	0c25      	lsrs	r5, r4, #16
  40b0a0:	fb02 3318 	mls	r3, r2, r8, r3
  40b0a4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40b0a8:	fb0c f308 	mul.w	r3, ip, r8
  40b0ac:	42ab      	cmp	r3, r5
  40b0ae:	d907      	bls.n	40b0c0 <__udivmoddi4+0x134>
  40b0b0:	19ed      	adds	r5, r5, r7
  40b0b2:	f108 30ff 	add.w	r0, r8, #4294967295
  40b0b6:	d202      	bcs.n	40b0be <__udivmoddi4+0x132>
  40b0b8:	42ab      	cmp	r3, r5
  40b0ba:	f200 80d1 	bhi.w	40b260 <__udivmoddi4+0x2d4>
  40b0be:	4680      	mov	r8, r0
  40b0c0:	1aed      	subs	r5, r5, r3
  40b0c2:	b2a3      	uxth	r3, r4
  40b0c4:	fbb5 f0f2 	udiv	r0, r5, r2
  40b0c8:	fb02 5510 	mls	r5, r2, r0, r5
  40b0cc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40b0d0:	fb0c fc00 	mul.w	ip, ip, r0
  40b0d4:	45a4      	cmp	ip, r4
  40b0d6:	d907      	bls.n	40b0e8 <__udivmoddi4+0x15c>
  40b0d8:	19e4      	adds	r4, r4, r7
  40b0da:	f100 33ff 	add.w	r3, r0, #4294967295
  40b0de:	d202      	bcs.n	40b0e6 <__udivmoddi4+0x15a>
  40b0e0:	45a4      	cmp	ip, r4
  40b0e2:	f200 80b8 	bhi.w	40b256 <__udivmoddi4+0x2ca>
  40b0e6:	4618      	mov	r0, r3
  40b0e8:	eba4 040c 	sub.w	r4, r4, ip
  40b0ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40b0f0:	e79d      	b.n	40b02e <__udivmoddi4+0xa2>
  40b0f2:	4631      	mov	r1, r6
  40b0f4:	4630      	mov	r0, r6
  40b0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b0fa:	f1ce 0420 	rsb	r4, lr, #32
  40b0fe:	fa05 f30e 	lsl.w	r3, r5, lr
  40b102:	fa07 f70e 	lsl.w	r7, r7, lr
  40b106:	fa20 f804 	lsr.w	r8, r0, r4
  40b10a:	0c3a      	lsrs	r2, r7, #16
  40b10c:	fa25 f404 	lsr.w	r4, r5, r4
  40b110:	ea48 0803 	orr.w	r8, r8, r3
  40b114:	fbb4 f1f2 	udiv	r1, r4, r2
  40b118:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40b11c:	fb02 4411 	mls	r4, r2, r1, r4
  40b120:	fa1f fc87 	uxth.w	ip, r7
  40b124:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40b128:	fb01 f30c 	mul.w	r3, r1, ip
  40b12c:	42ab      	cmp	r3, r5
  40b12e:	fa00 f40e 	lsl.w	r4, r0, lr
  40b132:	d909      	bls.n	40b148 <__udivmoddi4+0x1bc>
  40b134:	19ed      	adds	r5, r5, r7
  40b136:	f101 30ff 	add.w	r0, r1, #4294967295
  40b13a:	f080 808a 	bcs.w	40b252 <__udivmoddi4+0x2c6>
  40b13e:	42ab      	cmp	r3, r5
  40b140:	f240 8087 	bls.w	40b252 <__udivmoddi4+0x2c6>
  40b144:	3902      	subs	r1, #2
  40b146:	443d      	add	r5, r7
  40b148:	1aeb      	subs	r3, r5, r3
  40b14a:	fa1f f588 	uxth.w	r5, r8
  40b14e:	fbb3 f0f2 	udiv	r0, r3, r2
  40b152:	fb02 3310 	mls	r3, r2, r0, r3
  40b156:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40b15a:	fb00 f30c 	mul.w	r3, r0, ip
  40b15e:	42ab      	cmp	r3, r5
  40b160:	d907      	bls.n	40b172 <__udivmoddi4+0x1e6>
  40b162:	19ed      	adds	r5, r5, r7
  40b164:	f100 38ff 	add.w	r8, r0, #4294967295
  40b168:	d26f      	bcs.n	40b24a <__udivmoddi4+0x2be>
  40b16a:	42ab      	cmp	r3, r5
  40b16c:	d96d      	bls.n	40b24a <__udivmoddi4+0x2be>
  40b16e:	3802      	subs	r0, #2
  40b170:	443d      	add	r5, r7
  40b172:	1aeb      	subs	r3, r5, r3
  40b174:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40b178:	e78f      	b.n	40b09a <__udivmoddi4+0x10e>
  40b17a:	f1c1 0720 	rsb	r7, r1, #32
  40b17e:	fa22 f807 	lsr.w	r8, r2, r7
  40b182:	408b      	lsls	r3, r1
  40b184:	fa05 f401 	lsl.w	r4, r5, r1
  40b188:	ea48 0303 	orr.w	r3, r8, r3
  40b18c:	fa20 fe07 	lsr.w	lr, r0, r7
  40b190:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40b194:	40fd      	lsrs	r5, r7
  40b196:	ea4e 0e04 	orr.w	lr, lr, r4
  40b19a:	fbb5 f9fc 	udiv	r9, r5, ip
  40b19e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40b1a2:	fb0c 5519 	mls	r5, ip, r9, r5
  40b1a6:	fa1f f883 	uxth.w	r8, r3
  40b1aa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40b1ae:	fb09 f408 	mul.w	r4, r9, r8
  40b1b2:	42ac      	cmp	r4, r5
  40b1b4:	fa02 f201 	lsl.w	r2, r2, r1
  40b1b8:	fa00 fa01 	lsl.w	sl, r0, r1
  40b1bc:	d908      	bls.n	40b1d0 <__udivmoddi4+0x244>
  40b1be:	18ed      	adds	r5, r5, r3
  40b1c0:	f109 30ff 	add.w	r0, r9, #4294967295
  40b1c4:	d243      	bcs.n	40b24e <__udivmoddi4+0x2c2>
  40b1c6:	42ac      	cmp	r4, r5
  40b1c8:	d941      	bls.n	40b24e <__udivmoddi4+0x2c2>
  40b1ca:	f1a9 0902 	sub.w	r9, r9, #2
  40b1ce:	441d      	add	r5, r3
  40b1d0:	1b2d      	subs	r5, r5, r4
  40b1d2:	fa1f fe8e 	uxth.w	lr, lr
  40b1d6:	fbb5 f0fc 	udiv	r0, r5, ip
  40b1da:	fb0c 5510 	mls	r5, ip, r0, r5
  40b1de:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40b1e2:	fb00 f808 	mul.w	r8, r0, r8
  40b1e6:	45a0      	cmp	r8, r4
  40b1e8:	d907      	bls.n	40b1fa <__udivmoddi4+0x26e>
  40b1ea:	18e4      	adds	r4, r4, r3
  40b1ec:	f100 35ff 	add.w	r5, r0, #4294967295
  40b1f0:	d229      	bcs.n	40b246 <__udivmoddi4+0x2ba>
  40b1f2:	45a0      	cmp	r8, r4
  40b1f4:	d927      	bls.n	40b246 <__udivmoddi4+0x2ba>
  40b1f6:	3802      	subs	r0, #2
  40b1f8:	441c      	add	r4, r3
  40b1fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40b1fe:	eba4 0408 	sub.w	r4, r4, r8
  40b202:	fba0 8902 	umull	r8, r9, r0, r2
  40b206:	454c      	cmp	r4, r9
  40b208:	46c6      	mov	lr, r8
  40b20a:	464d      	mov	r5, r9
  40b20c:	d315      	bcc.n	40b23a <__udivmoddi4+0x2ae>
  40b20e:	d012      	beq.n	40b236 <__udivmoddi4+0x2aa>
  40b210:	b156      	cbz	r6, 40b228 <__udivmoddi4+0x29c>
  40b212:	ebba 030e 	subs.w	r3, sl, lr
  40b216:	eb64 0405 	sbc.w	r4, r4, r5
  40b21a:	fa04 f707 	lsl.w	r7, r4, r7
  40b21e:	40cb      	lsrs	r3, r1
  40b220:	431f      	orrs	r7, r3
  40b222:	40cc      	lsrs	r4, r1
  40b224:	6037      	str	r7, [r6, #0]
  40b226:	6074      	str	r4, [r6, #4]
  40b228:	2100      	movs	r1, #0
  40b22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b22e:	4618      	mov	r0, r3
  40b230:	e6f8      	b.n	40b024 <__udivmoddi4+0x98>
  40b232:	4690      	mov	r8, r2
  40b234:	e6e0      	b.n	40aff8 <__udivmoddi4+0x6c>
  40b236:	45c2      	cmp	sl, r8
  40b238:	d2ea      	bcs.n	40b210 <__udivmoddi4+0x284>
  40b23a:	ebb8 0e02 	subs.w	lr, r8, r2
  40b23e:	eb69 0503 	sbc.w	r5, r9, r3
  40b242:	3801      	subs	r0, #1
  40b244:	e7e4      	b.n	40b210 <__udivmoddi4+0x284>
  40b246:	4628      	mov	r0, r5
  40b248:	e7d7      	b.n	40b1fa <__udivmoddi4+0x26e>
  40b24a:	4640      	mov	r0, r8
  40b24c:	e791      	b.n	40b172 <__udivmoddi4+0x1e6>
  40b24e:	4681      	mov	r9, r0
  40b250:	e7be      	b.n	40b1d0 <__udivmoddi4+0x244>
  40b252:	4601      	mov	r1, r0
  40b254:	e778      	b.n	40b148 <__udivmoddi4+0x1bc>
  40b256:	3802      	subs	r0, #2
  40b258:	443c      	add	r4, r7
  40b25a:	e745      	b.n	40b0e8 <__udivmoddi4+0x15c>
  40b25c:	4608      	mov	r0, r1
  40b25e:	e708      	b.n	40b072 <__udivmoddi4+0xe6>
  40b260:	f1a8 0802 	sub.w	r8, r8, #2
  40b264:	443d      	add	r5, r7
  40b266:	e72b      	b.n	40b0c0 <__udivmoddi4+0x134>

0040b268 <__aeabi_idiv0>:
  40b268:	4770      	bx	lr
  40b26a:	bf00      	nop
  40b26c:	3f000000 	.word	0x3f000000
  40b270:	42b40000 	.word	0x42b40000
  40b274:	42b40000 	.word	0x42b40000
  40b278:	00000000 	.word	0x00000000
  40b27c:	454c4449 	.word	0x454c4449
  40b280:	00000000 	.word	0x00000000
  40b284:	51726d54 	.word	0x51726d54
  40b288:	00000000 	.word	0x00000000
  40b28c:	20726d54 	.word	0x20726d54
  40b290:	00637653 	.word	0x00637653
  40b294:	686c6166 	.word	0x686c6166
  40b298:	6d652061 	.word	0x6d652061
  40b29c:	69726320 	.word	0x69726320
  40b2a0:	6f207261 	.word	0x6f207261
  40b2a4:	6d657320 	.word	0x6d657320
  40b2a8:	726f6661 	.word	0x726f6661
  40b2ac:	0000206f 	.word	0x0000206f
  40b2b0:	686c6166 	.word	0x686c6166
  40b2b4:	6d652061 	.word	0x6d652061
  40b2b8:	69726320 	.word	0x69726320
  40b2bc:	61207261 	.word	0x61207261
  40b2c0:	65757120 	.word	0x65757120
  40b2c4:	78206575 	.word	0x78206575
  40b2c8:	75657551 	.word	0x75657551
  40b2cc:	43444165 	.word	0x43444165
  40b2d0:	00000020 	.word	0x00000020
  40b2d4:	73756f68 	.word	0x73756f68
  40b2d8:	6f642065 	.word	0x6f642065
  40b2dc:	00006e77 	.word	0x00006e77
  40b2e0:	6c696146 	.word	0x6c696146
  40b2e4:	74206465 	.word	0x74206465
  40b2e8:	7263206f 	.word	0x7263206f
  40b2ec:	65746165 	.word	0x65746165
  40b2f0:	756f6820 	.word	0x756f6820
  40b2f4:	64206573 	.word	0x64206573
  40b2f8:	206e776f 	.word	0x206e776f
  40b2fc:	6b736174 	.word	0x6b736174
  40b300:	0000000d 	.word	0x0000000d
  40b304:	6569726f 	.word	0x6569726f
  40b308:	6361746e 	.word	0x6361746e
  40b30c:	00006f61 	.word	0x00006f61
  40b310:	00756d69 	.word	0x00756d69
  40b314:	6c696146 	.word	0x6c696146
  40b318:	74206465 	.word	0x74206465
  40b31c:	7263206f 	.word	0x7263206f
  40b320:	65746165 	.word	0x65746165
  40b324:	756d6920 	.word	0x756d6920
  40b328:	73617420 	.word	0x73617420
  40b32c:	00000d6b 	.word	0x00000d6b
  40b330:	20696143 	.word	0x20696143
  40b334:	00000000 	.word	0x00000000
  40b338:	5252455b 	.word	0x5252455b
  40b33c:	5b205d4f 	.word	0x5b205d4f
  40b340:	5d633269 	.word	0x5d633269
  40b344:	72705b20 	.word	0x72705b20
  40b348:	5d65626f 	.word	0x5d65626f
  40b34c:	00000020 	.word	0x00000020
  40b350:	4441445b 	.word	0x4441445b
  40b354:	5b205d4f 	.word	0x5b205d4f
  40b358:	5d633269 	.word	0x5d633269
  40b35c:	3a782520 	.word	0x3a782520
  40b360:	000a7825 	.word	0x000a7825
  40b364:	5252455b 	.word	0x5252455b
  40b368:	6e205d4f 	.word	0x6e205d4f
  40b36c:	656c2061 	.word	0x656c2061
  40b370:	72757469 	.word	0x72757469
  40b374:	6f642061 	.word	0x6f642061
  40b378:	6f687720 	.word	0x6f687720
  40b37c:	206d6120 	.word	0x206d6120
  40b380:	00002069 	.word	0x00002069
  40b384:	4355535b 	.word	0x4355535b
  40b388:	4f535345 	.word	0x4f535345
  40b38c:	616e205d 	.word	0x616e205d
  40b390:	69656c20 	.word	0x69656c20
  40b394:	61727574 	.word	0x61727574
  40b398:	206f6420 	.word	0x206f6420
  40b39c:	206f6877 	.word	0x206f6877
  40b3a0:	69206d61 	.word	0x69206d61
  40b3a4:	00000020 	.word	0x00000020
  40b3a8:	5252455b 	.word	0x5252455b
  40b3ac:	5b205d4f 	.word	0x5b205d4f
  40b3b0:	5d633269 	.word	0x5d633269
  40b3b4:	72775b20 	.word	0x72775b20
  40b3b8:	5d657469 	.word	0x5d657469
  40b3bc:	00000020 	.word	0x00000020
  40b3c0:	63617473 	.word	0x63617473
  40b3c4:	766f206b 	.word	0x766f206b
  40b3c8:	6c667265 	.word	0x6c667265
  40b3cc:	2520776f 	.word	0x2520776f
  40b3d0:	73252078 	.word	0x73252078
  40b3d4:	00000a0d 	.word	0x00000a0d
  40b3d8:	6e697361 	.word	0x6e697361
  40b3dc:	00000066 	.word	0x00000066
  40b3e0:	74727173 	.word	0x74727173
  40b3e4:	00000066 	.word	0x00000066

0040b3e8 <npio2_hw>:
  40b3e8:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
  40b3f8:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
  40b408:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
  40b418:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
  40b428:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
  40b438:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
  40b448:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
  40b458:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

0040b468 <two_over_pi>:
  40b468:	000000a2 000000f9 00000083 0000006e     ............n...
  40b478:	0000004e 00000044 00000015 00000029     N...D.......)...
  40b488:	000000fc 00000027 00000057 000000d1     ....'...W.......
  40b498:	000000f5 00000034 000000dd 000000c0     ....4...........
  40b4a8:	000000db 00000062 00000095 00000099     ....b...........
  40b4b8:	0000003c 00000043 00000090 00000041     <...C.......A...
  40b4c8:	000000fe 00000051 00000063 000000ab     ....Q...c.......
  40b4d8:	000000de 000000bb 000000c5 00000061     ............a...
  40b4e8:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
  40b4f8:	00000042 0000004d 000000d2 000000e0     B...M...........
  40b508:	00000006 00000049 0000002e 000000ea     ....I...........
  40b518:	00000009 000000d1 00000092 0000001c     ................
  40b528:	000000fe 0000001d 000000eb 0000001c     ................
  40b538:	000000b1 00000029 000000a7 0000003e     ....).......>...
  40b548:	000000e8 00000082 00000035 000000f5     ........5.......
  40b558:	0000002e 000000bb 00000044 00000084     ........D.......
  40b568:	000000e9 0000009c 00000070 00000026     ........p...&...
  40b578:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
  40b588:	00000039 00000091 000000d6 00000039     9...........9...
  40b598:	00000083 00000053 00000039 000000f4     ....S...9.......
  40b5a8:	0000009c 00000084 0000005f 0000008b     ........_.......
  40b5b8:	000000bd 000000f9 00000028 0000003b     ........(...;...
  40b5c8:	0000001f 000000f8 00000097 000000ff     ................
  40b5d8:	000000de 00000005 00000098 0000000f     ................
  40b5e8:	000000ef 0000002f 00000011 0000008b     ..../...........
  40b5f8:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
  40b608:	0000006d 00000036 0000007e 000000cf     m...6...~.......
  40b618:	00000027 000000cb 00000009 000000b7     '...............
  40b628:	0000004f 00000046 0000003f 00000066     O...F...?...f...
  40b638:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
  40b648:	00000075 00000027 000000ba 000000c7     u...'...........
  40b658:	000000eb 000000e5 000000f1 0000007b     ............{...
  40b668:	0000003d 00000007 00000039 000000f7     =.......9.......
  40b678:	0000008a 00000052 00000092 000000ea     ....R...........
  40b688:	0000006b 000000fb 0000005f 000000b1     k......._.......
  40b698:	0000001f 0000008d 0000005d 00000008     ........].......
  40b6a8:	00000056 00000003 00000030 00000046     V.......0...F...
  40b6b8:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
  40b6c8:	000000f0 000000cf 000000bc 00000020     ............ ...
  40b6d8:	0000009a 000000f4 00000036 0000001d     ........6.......
  40b6e8:	000000a9 000000e3 00000091 00000061     ............a...
  40b6f8:	0000005e 000000e6 0000001b 00000008     ^...............
  40b708:	00000065 00000099 00000085 0000005f     e..........._...
  40b718:	00000014 000000a0 00000068 00000040     ........h...@...
  40b728:	0000008d 000000ff 000000d8 00000080     ................
  40b738:	0000004d 00000073 00000027 00000031     M...s...'...1...
  40b748:	00000006 00000006 00000015 00000056     ............V...
  40b758:	000000ca 00000073 000000a8 000000c9     ....s...........
  40b768:	00000060 000000e2 0000007b 000000c0     `.......{.......
  40b778:	0000008c 0000006b                       ....k...

0040b780 <PIo2>:
  40b780:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
  40b790:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
  40b7a0:	1fc40000 1bc60000 17440000              ..........D.

0040b7ac <init_jk>:
  40b7ac:	00000004 00000007 00000009              ............

0040b7b8 <atanhi>:
  40b7b8:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

0040b7c8 <atanlo>:
  40b7c8:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

0040b7d8 <_global_impure_ptr>:
  40b7d8:	20400018 0000000a 00464e49 00666e69     ..@ ....INF.inf.
  40b7e8:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
  40b7f8:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  40b808:	37363534 62613938 66656463 00000000     456789abcdef....
  40b818:	6c756e28 0000296c 00000030              (null)..0...

0040b824 <blanks.7238>:
  40b824:	20202020 20202020 20202020 20202020                     

0040b834 <zeroes.7239>:
  40b834:	30303030 30303030 30303030 30303030     0000000000000000
  40b844:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40b854:	00000000                                ....

0040b858 <__mprec_bigtens>:
  40b858:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40b868:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40b878:	7f73bf3c 75154fdd                       <.s..O.u

0040b880 <__mprec_tens>:
  40b880:	00000000 3ff00000 00000000 40240000     .......?......$@
  40b890:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40b8a0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40b8b0:	00000000 412e8480 00000000 416312d0     .......A......cA
  40b8c0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40b8d0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40b8e0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40b8f0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40b900:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40b910:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40b920:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40b930:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40b940:	79d99db4 44ea7843                       ...yCx.D

0040b948 <p05.6055>:
  40b948:	00000005 00000019 0000007d 00000043     ........}...C...
  40b958:	49534f50 00000058 0000002e              POSIX.......

0040b964 <_ctype_>:
  40b964:	20202000 20202020 28282020 20282828     .         ((((( 
  40b974:	20202020 20202020 20202020 20202020                     
  40b984:	10108820 10101010 10101010 10101010      ...............
  40b994:	04040410 04040404 10040404 10101010     ................
  40b9a4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40b9b4:	01010101 01010101 01010101 10101010     ................
  40b9c4:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40b9d4:	02020202 02020202 02020202 10101010     ................
  40b9e4:	00000020 00000000 00000000 00000000      ...............
	...

0040ba68 <_init>:
  40ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ba6a:	bf00      	nop
  40ba6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ba6e:	bc08      	pop	{r3}
  40ba70:	469e      	mov	lr, r3
  40ba72:	4770      	bx	lr

0040ba74 <__init_array_start>:
  40ba74:	004083c1 	.word	0x004083c1

0040ba78 <__frame_dummy_init_array_entry>:
  40ba78:	00400165                                e.@.

0040ba7c <_fini>:
  40ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ba7e:	bf00      	nop
  40ba80:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ba82:	bc08      	pop	{r3}
  40ba84:	469e      	mov	lr, r3
  40ba86:	4770      	bx	lr

0040ba88 <__fini_array_start>:
  40ba88:	00400141 	.word	0x00400141
